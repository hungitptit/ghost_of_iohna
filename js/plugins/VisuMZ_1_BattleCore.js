//=============================================================================
// VisuStella MZ - Battle Core
// VisuMZ_1_BattleCore.js
//=============================================================================

var Imported = Imported || {};
Imported.VisuMZ_1_BattleCore = true;

var VisuMZ = VisuMZ || {};
VisuMZ.BattleCore = VisuMZ.BattleCore || {};
VisuMZ.BattleCore.version = 1.81;

//=============================================================================
 /*:
 * @target MZ
 * @plugindesc [RPG Maker MZ] [Tier 1] [Version 1.81] [BattleCore]
 * @author VisuStella
 * @url http://www.yanfly.moe/wiki/Battle_Core_VisuStella_MZ
 * @orderAfter VisuMZ_0_CoreEngine
 *
 * @help
 * ============================================================================
 * Introduction
 * ============================================================================
 *
 * The Battle Core plugin revamps the battle engine provided by RPG Maker MZ to
 * become more flexible, streamlined, and support a variety of features. The
 * updated battle engine allows for custom Action Sequences, battle layout
 * styles, and a lot of control over the battle mechanics, too.
 *
 * Features include all (but not limited to) the following:
 * 
 * * Action Sequence Plugin Commands to give you full control over what happens
 *   during the course of a skill or item.
 * * Animated Sideview Battler support for enemies!
 * * Auto Battle options for party-wide and actor-only instances.
 * * Base Troop Events to quickly streamline events for all Troop events.
 * * Battle Command control to let you change which commands appear for actors.
 * * Battle Layout styles to change the way the battle scene looks.
 * * Casting animation support for skills.
 * * Critical Hit control over the success rate formula and damage multipliers.
 * * Custom target scopes added for skills and items.
 * * Damage formula control, including Damage Styles.
 * * Damage caps, both hard caps and soft caps.
 * * Damage traits such Armor Penetration/Reduction to bypass defenses.
 * * Elements & Status Menu Core support for traits.
 * * Multitude of JavaScript notetags and global Plugin Parameters to let you
 *   make a variety of effects across various instances during battle.
 * * Party Command window can be skipped/disabled entirely.
 * * Weather effects now show in battle.
 * * Streamlined Battle Log to remove redundant information and improve the
 *   flow of battle.
 * * Visual HP Gauges can be displayed above the heads of actors and/or enemies
 *   with a possible requirement for enemies to be defeated at least once first
 *   in order for them to show.
 *
 * ============================================================================
 * Requirements
 * ============================================================================
 *
 * This plugin is made for RPG Maker MZ. This will not work in other iterations
 * of RPG Maker.
 *
 * ------ Tier 1 ------
 *
 * This plugin is a Tier 1 plugin. Place it under other plugins of lower tier
 * value on your Plugin Manager list (ie: 0, 1, 2, 3, 4, 5). This is to ensure
 * that your plugins will have the best compatibility with the rest of the
 * VisuStella MZ library.
 *
 * ============================================================================
 * Major Changes
 * ============================================================================
 *
 * This plugin will overwrite some core parts of the RPG Maker MZ base code in
 * order to ensure the Battle Core plugin will work at full capacity. The
 * following are explanations of what has been changed.
 *
 * ---
 *
 * Action Sequences
 *
 * - Action sequences are now done either entirely by the Battle Log Window or
 * through common events if the <Custom Action Sequence> notetag is used.
 * In RPG Maker MZ by default, Action Sequences would be a mixture of using the
 * Battle Log Window, the Battle Manager, and the Battle Scene, making it hard
 * to fully grab control of the situation.
 *
 * ---
 *
 * Action Speed
 *
 * - Action speeds determine the turn order in the default battle system. The
 * AGI of a battle unit is also taken into consideration. However, the random
 * variance applied to the action speed system makes the turn order extremely
 * chaotic and hard for the player to determine. Thus, the random variance
 * aspect of it has been turned off. This can be reenabled by default through
 * Plugin Parameters => Mechanics Settings => Allow Random Speed?
 *
 * ---
 *
 * Animated Sideview Battler Support For Enemies
 *
 * - Enemies can now use Sideview Actor sprites for themselves! They will
 * behave like actors and can even carry their own set of weapons for physical
 * attacks. These must be set up using notetags. More information can be found
 * in the notetag section.
 *
 * - As the sprites are normally used for actors, some changes have been made
 * to Sprite_Actor to be able to support both actors and enemies. These changes
 * should have minimal impact on other plugins.
 *
 * ---
 *
 * Battle Sprite Updates
 *
 * - A lot of functions in Sprite_Battler, Sprite_Actor, and Sprite_Enemy have
 * been overwritten to make the new Action Sequence system added by this plugin
 * possible. These changes make it possible for the sprites to move anywhere on
 * the screen, jump, float, change visibility, and more.
 *
 * ---
 *
 * Change Battle Back in Battle
 * 
 * - By default, the Change Battle Back event command does not work in battle.
 * Any settings made to it will only reflect in the following battle. Now, if
 * the battle back event command is used during battle, it will reflect upon
 * any new changes immediately.
 *
 * ---
 *
 * Critical Hit - LUK Influence
 *
 * - The LUK Buffs now affect the critical hit rate based off how the formula
 * is now calculated. Each stack of a LUK Buff will double the critical hit
 * rate and compound upon that. That means a x1 LUK Buff stack will raise it by
 * x2, a x2 LUK Buff stack will raise the critical hit rate by x4, a x3 LUK
 * Buff Stack will raise the critical hit rate stack by x8, and so on.
 *
 * - LUK also plays a role in how much damage is dealt with critical hits. The
 * default critical hit multiplier has been reduced from x3 to x2. However, a
 * percentage of LUK will added on (based off the user's CRI rate) onto the
 * finalized critical damage. If the user's CRI rate is 4%, then 4% of the user
 * LUK value will also be added onto the damage.
 *
 * - This change can be altered through Plugin Parameters => Damage Settings =>
 * Critical Hits => JS: Rate Formula and JS: Damage Formula.
 *
 * ---
 * 
 * Damage Popups
 * 
 * - Damage popups are now formatted with + and - to determine healing and
 * damage. MP Damage will also include "MP" at the back. This is to make it
 * clearer what each colored variant of the damage popup means as well as help
 * color blind players read the on-screen data properly.
 * 
 * - Damage popups have also been rewritten to show all changed aspects instead
 * of just one. Previously with RPG Maker MZ, if an action would deal both HP
 * and MP damage, only one of them would show. Now, everything is separated and
 * both HP and MP changes will at a time.
 * 
 * ---
 * 
 * Dual Wielding
 * 
 * - Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 * animations at once, with the combined ATK of each weapon. It's confusing to
 * look at and does not portray the nature of "Dual Wielding".
 * 
 * - Dual Wielding, or in the case of users adding in third and fourth weapons,
 * Multi Wielding is now changed. Each weapon is displayed individually, each
 * producing its own attack animation, showing each weapon type, and applying
 * only that weapon's ATK, Traits, and related effects. It is no longer a
 * combined effect to display everything at once like RPG Maker MZ default.
 * 
 * - If an actor has multiple weapon slots but some of them are unequipped,
 * then the action will treat the attack as a single attack. There will be no
 * barehanded attack to add on top of it. This is to match RPG Maker MZ's
 * decision to omit a second animation if the same scenario is applied.
 * 
 * ---
 *
 * Force Action
 *
 * - Previously, Forced Actions would interrupt the middle of an event to
 * perform an action. However, with the addition of more flexible Action
 * Sequences, the pre-existing Force Action system would not be able to exist
 * and would require being remade.
 *
 * - Forced Actions now are instead, added to a separate queue from the action
 * battler list. Whenever an action and/or common event is completed, then if
 * there's a Forced Action battler queued, then the Forced Action battler will
 * have its turn. This is the cleanest method available and avoids the most
 * conflicts possible.
 *
 * - This means if you planned to make cinematic sequences with Forced Actions,
 * you will need to account for the queued Force Actions. However, in the case
 * of battle cinematics, we would highly recommend that you use the newly added
 * Action Sequence Plugin Commands instead as those give you more control than
 * any Force Action ever could.
 *
 * ---
 *
 * Random Scope
 *
 * - The skill and item targeting scopes for Random Enemy, 2 Random Enemies,
 * 3 Random Enemies, 4 Random Enemies will now ignore TGR and utilize true
 * randomness.
 *
 * ---
 *
 * Spriteset_Battle Update
 *
 * - The spriteset now has extra containers to separate battlers (actors and
 * enemies), animations, and damage. This is to make actors and enemy battler
 * sprites more efficient to sort (if enabled), so that animations won't
 * interfere with and cover damage sprites, and to make sure damage sprites are
 * unaffected by screen tints in order to ensure the player will always have a
 * clear read on the information relaying sprites.
 *
 * ---
 * 
 * TPB/ATB Active Battle Actor Shifting
 * 
 * - Pressing cancel on the Actor Command Window no longer switches between
 * actors with a full TPB/ATB gauge before reaching the Party Command Window.
 * This is to accomplish a couple of things: 1) reduce the number of button
 * presses to reach the Party Command Window and 2) to prevent motion resets
 * and disrupting action sequences. If this feature is vital to your battle
 * system, we recommend that you do not use this plugin or any of the Battle
 * Core-required plugins.
 * 
 * ---
 *
 * Weather Displayed in Battle
 *
 * - Previously, weather has not been displayed in battle. This means that any
 * weather effects placed on the map do not transfer over to battle and causes
 * a huge disconnect for players. The Battle Core plugin will add weather
 * effects to match the map's weather conditions. Any changes made to weather
 * through event commands midway through battle will also be reflected.
 *
 * ---
 *
 * ============================================================================
 * Base Troops
 * ============================================================================
 *
 * Base Troops can be found, declared, and modified in the Plugin Parameters =>
 * Mechanics Settings => Base Troop ID's. All of the listed Troop ID's here
 * will have their page events replicated and placed under all other troops
 * found in the database.
 *
 * ---
 *
 * This means that if you have an event that runs on Turn 1 of a Base Troop,
 * then for every troop out there, that same event will also run on Turn 1,
 * as well. This is useful for those who wish to customize their battle system
 * further and to reduce the amount of work needed to copy/paste said event
 * pages into every database troop object manually.
 *
 * ---
 *
 * ============================================================================
 * Damage Styles
 * ============================================================================
 *
 * Damage Styles are a new feature added through the Battle Core plugin. When
 * using certain Battle Styles, you can completely ignore typing in the whole
 * damage formula inside the damage formula input box, and instead, insert
 * either a power amount or a multiplier depending on the Damage Style. The
 * plugin will then automatically calculate damage using that value factoring
 * in ATK, DEF, MAT, MDF values.
 *
 * ---
 *
 * Here is a list of the Damage Styles that come with this plugin by default.
 * You can add in your own and even edit them to your liking.
 * Or just remove them if you want.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Style          Use Formula As   PH/MA Disparity   Stat Scale   Damage Scale
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Standard       Formula          No                Varies       Varies
 * ArmorScaling   Formula          No                Varies       Varies
 * CT             Multiplier       Yes               Low          Normal
 * D4             Multiplier       No                High         Normal
 * DQ             Multiplier       No                Low          Low
 * FF7            Power            Yes               Low          High
 * FF8            Power            Yes               Medium       Normal
 * FF9            Power            Yes               Low          Normal
 * FF10           Power            Yes               Medium       High
 * MK             Multiplier       No                Medium       Low
 * MOBA           Multiplier       No                Medium       Normal
 * PKMN           Power            No                Low          Normal
 *
 * Use the above chart to figure out which Damage Style best fits your game,
 * if you plan on using them.
 *
 * The 'Standard' style is the same as the 'Manual' formula input, except that
 * it allows for the support of <Armor Penetration> and <Armor Reduction>
 * notetags.
 *
 * The 'Armor Scaling' style allows you to type in the base damage calculation
 * without the need to type in any defending modifiers.
 *
 * NOTE: While these are based off the damage formulas found in other games,
 * not all of them are exact replicas. Many of them are adapted for use in
 * RPG Maker MZ since not all RPG's use the same set of parameters and not all
 * external multipliers function the same way as RPG Maker MZ.
 * 
 * ---
 *
 * Style:
 * - This is what the Damage Style is.
 *
 * Use Formula As:
 * - This is what you insert into the formula box.
 * - Formula: Type in the formula for the action just as you would normally.
 * - Multiplier: Type in the multiplier for the action.
 *     Use float values. This means 250% is typed out as 2.50
 * - Power: Type in the power constant for the action.
 *     Use whole numbers. Type in something like 16 for a power constant.
 * 
 * PH/MA Disparity:
 * - Is there a disparity between how Physical Attacks and Magical Attacks
 *   are calculated?
 * - If yes, then physical attacks and magical attacks will have different
 *   formulas used.
 * - If no, then physical attacks and magical attacks will share similar
 *   formulas for how they're calculated.
 *
 * Stat Scale:
 * - How much should stats scale throughout the game?
 * - Low: Keep them under 100 for the best results.
 * - Medium: Numbers work from low to mid 400's for best results.
 * - High: The numbers really shine once they're higher.
 *
 * Damage Scale:
 * - How much does damage vary depending on small parameter changes?
 * - Low: Very little increase from parameter changes.
 * - Normal: Damage scales close to proportionally with parameter changes.
 * - High: Damage can boost itself drastically with parameter changes.
 *
 * ---
 *
 * To determine what kind of parameters are used for the Damage Styles, they
 * will depend on two things: the action's 'Hit Type' (ie Physical Attack,
 * Magical Attack, and Certain Hit) and the action's 'Damage Type' (ie. Damage,
 * Recovery, or Drain).
 *
 * Certain Hit tends to use whichever value is higher: ATK or MAT, and then
 * ignores the target's defense values. Use Certain Hits for 'True Damage'.
 *
 * Use the chart below to figure out everything else:
 * 
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Hit Type      Damage Type   Attacker Parameter   Defender Parameter
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Physical      Damage        ATK                  DEF
 * Magical       Damage        MAT                  MDF
 * Certain Hit   Damage        Larger (ATK, MAT)    -Ignores-
 * Physical      Recover       DEF                  -Ignores-
 * Magical       Recover       MDF                  -Ignores-
 * Certain Hit   Recover       Larger (ATK, MAT)    -Ignores-
 * Physical      Drain         ATK                  DEF
 * Magical       Drain         MAT                  MDF
 * Certain Hit   Drain         Larger (ATK, MAT)    -Ignores-
 *
 * These can be modified within the Plugin Parameters in the individual
 * Damage Styles themselves.
 *
 * ---
 *
 * Skills and Items can use different Damage Styles from the setting you've
 * selected in the Plugin Parameters. They can be altered to have different
 * Damage Styles through the usage of a notetag:
 *
 * <Damage Style: name>
 *
 * This will use whichever style is found in the Plugin Parameters.
 *
 * If "Manual" is used, then no style will be used and all calculations will be
 * made strictly based off the formula found inside the formula box.
 *
 * ---
 *
 * ============================================================================
 * VisuStella MZ Compatibility
 * ============================================================================
 *
 * While this plugin is compatible with the majority of the VisuStella MZ
 * plugin library, it is not compatible with specific plugins or specific
 * features. This section will highlight the main plugins/features that will
 * not be compatible with this plugin or put focus on how the make certain
 * features compatible.
 *
 * ---
 * 
 * VisuMZ_1_BattleCore
 * 
 * When using Action Sequences, Boost effects for damage, turn extensions,
 * analyze, etc. will not occur for anything other than the Action Sequence:
 * "MECH: Action Effect" in order to maintain controlled effects. However, if
 * you do want to apply bonuses for Boosts, utilize "MECH: Boost Store Data" to
 * store inside a variable how many times Boosts were used. This can be used
 * however which way you want it to as long as it is manageable through events
 * and Common Events.
 * 
 * ---
 *
 * ============================================================================
 * Notetags
 * ============================================================================
 *
 * The following are notetags that have been added through this plugin. These
 * notetags will not work with your game if this plugin is OFF or not present.
 * 
 * === HP Gauge-Related Notetags ===
 * 
 * The following notetags allow you to set whether or not HP Gauges can be
 * displayed by enemies regardless of Plugin Parameter settings.
 * 
 * ---
 *
 * <Show HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always show the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * - This does not bypass disabling enemy HP Gauges as a whole.
 * 
 * ---
 *
 * <Hide HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always hide the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * 
 * ---
 * 
 * <Battle UI Offset: +x, +y>
 * <Battle UI Offset: -x, -y>
 * 
 * <Battle UI Offset X: +x>
 * <Battle UI Offset X: -x>
 * 
 * <Battle UI Offset Y: +y>
 * <Battle UI Offset Y: -y>
 * 
 * - Used for: Actor and Enemy Notetags
 * - Adjusts the offset of HP Gauges and State Icons above the heads of actors
 *   and enemies.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * === Animation-Related Notetags ===
 *
 * The following notetags allow you to set animations to play at certain
 * instances and/or conditions.
 *
 * ---
 *
 * <Slip Animation: x>
 *
 * - Requires VisuMZ_0_CoreEngine!
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - During the phase at which the user regenerates HP, MP, or TP, this
 *   animation will play as long as the user is alive and visible.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Cast Animation: x>
 *
 * - Used for: Skill Notetags
 * - Plays a battle animation at the start of the skill.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Attack Animation: x>
 *
 * - Used for: Enemy Notetags
 * - Gives an enemy an attack animation to play for its basic attack.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * === Battleback-Related Notetags ===
 *
 * You can apply these notetags to have some control over the battlebacks that
 * appear in different regions of the map for random or touch encounters.
 *
 * ---
 *
 * <Region x Battleback1: filename>
 * <Region x Battleback2: filename>
 * 
 * - Used for: Map Notetags
 * - If the player starts a battle while standing on 'x' region, then the
 *   'filename' battleback will be used.
 * - Replace 'x' with a number representing the region ID you wish to use.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Castle1.png' will be only inserted
 *   as 'Castle1' without the '.png' at the end.
 * - *NOTE: This will override any specified battleback settings.
 *
 * ---
 *
 * === Battle Command-Related Notetags ===
 *
 * You can use notetags to change how the battle commands of playable
 * characters appear in battle as well as whether or not they can be used.
 *
 * ---
 *
 * <Seal Attack>
 * <Seal Guard>
 * <Seal Item>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Prevents specific battle commands from being able to be used.
 *
 * ---
 *
 * <Battle Commands>
 *  Attack
 *  Skills
 *  SType: x
 *  SType: name
 *  All Skills
 *  Skill: x
 *  Skill: name
 *  Guard
 *  Item
 *  Party
 *  Escape
 *  Auto Battle
 *  Combat Log
 *  Talk
 *  Weapon Swap
 * </Battle Commands>
 *
 * - Used for: Class Notetags
 * - Changes which commands appear in the Actor Command Window in battle.
 *   If this notetag is not used, then the default commands determined in
 *   Plugin Parameters => Actor Command Window => Command List will be used.
 * - Add/remove/modify entries as needed.
 *
 * - Attack 
 *   - Adds the basic attack command.
 * 
 * - Skills
 *   - Displays all the skill types available to the actor.
 * 
 * - SType: x
 * - Stype: name
 *   - Adds in a specific skill type.
 *   - Replace 'x' with the ID of the skill type.
 *   - Replace 'name' with the name of the skill type (without text codes).
 *
 * - All Skills
 *   - Adds all usable battle skills as individual actions.
 * 
 * - Skill: x
 * - Skill: name
 *   - Adds in a specific skill as a usable action.
 *   - Replace 'x' with the ID of the skill.
 *   - Replace 'name' with the name of the skill.
 * 
 * - Guard
 *   - Adds the basic guard command.
 * 
 * - Item
 *   - Adds the basic item command.
 *
 * - Party
 *   - Requires VisuMZ_2_PartySystem.
 *   - Allows this actor to switch out with a different party member.
 * 
 * - Escape
 *   - Adds the escape command.
 * 
 * - Auto Battle
 *   - Adds the auto battle command.
 * 
 * - Combat Log
 *   - Requires VisuMZ_4_CombatLog.
 *   - Opens up the combat log.
 * 
 * - Talk
 *   - Requires VisuMZ_3_BattleCmdTalk!
 *   - Shows talk command if applicable.
 * 
 * - Weapon Swap
 *   - Requires VisuMZ_2_WeaponSwapSystem.
 *   - Swaps the current weapon.
 *
 * Example:
 *
 * <Battle Commands>
 *  Attack
 *  Skill: Heal
 *  Skills
 *  Guard
 *  Item
 *  Escape
 * </Battle Commands>
 *
 * ---
 *
 * <Command Text: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill name text that appears to something else.
 * - Replace 'x' with the skill's name you want to shown in the Actor Battle
 *   Command window.
 * - Recommended Usage: Shorten skill names that are otherwise too big to fit
 *   inside of the Actor Battle Command window.
 *
 * ---
 *
 * <Command Icon: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill icon that appears to something else.
 * - Replace 'x' with the ID of icon you want shown in the Actor Battle Command
 *   window to represent the skill.
 * 
 * ---
 * 
 * <Command Require Learn>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   learned the skill.
 * - Learning the skill is a requirement. Acquiring the skill through traits
 *   does not count as learning the skill.
 * 
 * ---
 * 
 * <Command Require Access>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   access to the skill.
 * - Having access to the skill can come through either learning the skill or
 *   temporarily acquiring it through trait objects.
 * 
 * ---
 * 
 * <Command Show Switch: x>
 * 
 * <Command Show All Switches: x,x,x>
 * <Command Show Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be hidden until all
 *   switches are ON. Then, it would be shown.
 * - If 'Any' notetag variant is used, item will be shown if any of the
 *   switches are ON. Otherwise, it would be hidden.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Command Hide Switch: x>
 * 
 * <Command Hide All Switches: x,x,x>
 * <Command Hide Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be shown until all
 *   switches are ON. Then, it would be hidden.
 * - If 'Any' notetag variant is used, item will be hidden if any of the
 *   switches are ON. Otherwise, it would be shown.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Battle Portrait: filename>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" Battle Layout.
 * - Sets the battle portrait image for the actor to 'filename'.
 * - Replace 'filename' with a picture found within your game project's
 *   img/pictures/ folder. Filenames are case sensitive. Leave out the filename
 *   extension from the notetag.
 * - This will override any menu images used for battle only.
 * 
 * ---
 * 
 * <Battle Portrait Offset: +x, +y>
 * <Battle Portrait Offset: -x, -y>
 * 
 * <Battle Portrait Offset X: +x>
 * <Battle Portrait Offset X: -x>
 * 
 * <Battle Portrait Offset Y: +y>
 * <Battle Portrait Offset Y: -y>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" and "Border" Battle Layouts.
 * - Offsets the X and Y coordinates for the battle portrait.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 * 
 * === JavaScript Notetag: Battle Command-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine if skill-based battle commands are visible or hidden.
 * 
 * ---
 * 
 * <JS Command Visible>
 *  code
 *  code
 *  visible = code;
 * </JS Command Visible>
 * 
 * - Used for: Skill Notetags
 * - The 'visible' variable is the final returned variable to determine the
 *   skill's visibility in the Battle Command Window.
 * - Replace 'code' with JavaScript code to determine the skill's visibility in
 *   the Battle Command Window.
 * - The 'user' variable represents the user who will perform the skill.
 * - The 'skill' variable represents the skill to be used.
 * 
 * ---
 *
 * === Targeting-Related Notetags ===
 *
 * The following notetags are related to the targeting aspect of skills and
 * items and may adjust the scope of how certain skills/items work.
 *
 * ---
 *
 * <Always Hit>
 *
 * <Always Hit Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - Causes the action to always hit or to always have a hit rate of exactly
 *   the marked x%.
 * - Replace 'x' with a number value representing the hit success percentage.
 *
 * ---
 *
 * <Repeat Hits: x>
 *
 * - Used for: Skill, Item Notetags
 * - Changes the number of hits the action will produce.
 * - Replace 'x' with a number value representing the number of hits to incur.
 *
 * ---
 *
 * <Target: x Random Any>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets can be both actors and enemies.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Enemies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Targets are only enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Allies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Targets are only actors.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: All Allies But User>
 *
 * - Used for: Skill, Item Notetags
 * - Targets all allies with the exception of the user.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 *
 * ---
 * 
 * <Target: Ally or Enemy>
 * 
 * - Used for: Skill, Item Notetags
 * - Allows the player to target allies or enemies with the skill/item.
 *   - Keep in mind this does NOT allow you to select dead party members.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Target selection emphasis will go to allies first.
 * - Ignored when used by enemies and will be treated as an ally scope.
 * - Auto-battle actors will also treat this action as an ally scope.
 * - For certain battle layouts in frontview, this will open the Actor Select
 *   window in order for Touch Input to be able to select actors.
 * 
 * ---
 * 
 * <Target: Enemy or Ally>
 * 
 * - Used for: Skill, Item Notetags
 * - Allows the player to target enemies or allies with the skill/item.
 *   - Keep in mind this does NOT allow you to select dead party members.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Target selection emphasis will go to enemies first.
 * - Ignored when used by enemies and will be treated as an enemy scope.
 * - Auto-battle actors will also treat this action as an enemy scope.
 * - For certain battle layouts in frontview, this will open the Actor Select
 *   window in order for Touch Input to be able to select actors.
 * 
 * ---
 * 
 * <Single or Multiple Select>
 * 
 * - Used for: Skill, Item Notetags
 * - Requires an original scope that can select individual targets.
 * - This will allow the skill/item to be able to select either single targets
 *   or multiple targets at once.
 *   - In order to select "all enemies", the player must press the "Page Up"
 *     keyboard button or the visual on screen "All Enemies" button.
 *   - In order to select "all allies", the player must press the "Page Down"
 *     keyboard button or the visual on screen "All Allies" button.
 *   - Those wondering why this isn't regulated to a command left or right of
 *     the enemies and actors is because mouse controls and touch controls
 *     would not be able to select all enemies or all allies that way.
 *   - This can NOT be used with single dead ally scopes.
 * - If there is an enemy with Taunt or Provoke, the option to select
 *   "All Enemies" does not become possible.
 * - The enemy AI and Auto-Battle actor AI will NOT make use of the ability to
 *   toggle between single and multiple target scopes. They will only use the
 *   single target versions of these skills.
 * 
 * ---
 * 
 * <Disperse Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - This will cause any damage dealt by this skill to be split equally amongst
 *   all targets of the skill including repeats.
 *   - For basic attacks, any damage reduction added attack trait totals will
 *     by reverted.
 * - This does NOT have to be used with <Single or Multiple Select> notetag and
 *   can be used by itself for an "All" scope, making the skill/item deal less
 *   damage if there's more enemies and more damage if there's less enemies.
 * 
 * ---
 * 
 * <Cannot Target User>
 * 
 * - Used for: Skill, Item Notetags
 * - This will cause the action to be unable to select the user as the target.
 * - This is not a targeting scope. Instead, it is used in addition to any
 *   other targeting scopes out there.
 * - When used with "All" scopes, the user is removed from the target pool.
 * - This is also applied outside of battle.
 * - If the user somehow enters the target pool, the user is then replaced by
 *   a random ally found in the party.
 * 
 * ---
 *
 * === JavaScript Notetag: Targeting-Related ===
 *
 * ---
 * 
 * <JS Targets>
 *  code
 *  code
 *  targets = [code];
 * </JS Targets>
 *
 * - Used for: Skill, Item Notetags
 * - The 'targets' variable is an array that is returned to be used as a
 *   container for all the valid action targets.
 * - The 'targets' variable will include the original set of targets determined
 *   by the skill/item's original scale.
 * - If you wish to clear it out, simply do 'targets = []' first.
 * - Replace 'code' with JavaScript code to determine valid targets.
 *
 * ---
 *
 * === Damage-Related Notetags ===
 *
 * ---
 *
 * <Damage Style: name>
 *
 * - Used for: Skill, Item Notetags
 * - Replace 'name' with a Damage Style name to change the way calculations are
 *   made using the damage formula input box.
 * - Names can be found in Plugin Parameters => Damage Settings => Style List
 *
 * ---
 *
 * <Armor Reduction: x>
 * <Armor Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Armor Penetration: x>
 * <Armor Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Magic Reduction: x>
 * <Magic Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Magic Penetration: x>
 * <Magic Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Bypass Damage Cap>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage capped.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage capped.
 *
 * ---
 *
 * <Damage Cap: x>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will declare the hard damage cap to
 *   be the 'x' value.
 * - If used on trait objects, this will raise the affect unit's hard damage
 *   cap to 'x' value. If another trait object has a higher value, use that
 *   value instead.
 *
 * ---
 *
 * <Bypass Soft Damage Cap>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage scaled downward to the soft cap.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage scaled downward to the soft cap.
 *
 * ---
 *
 * <Soft Damage Cap: +x%>
 * <Soft Damage Cap: -x%>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will increase/decrease the action's
 *   soft cap by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 * - If used on trait objects, this will raise the affect unit's soft damage
 *   limit by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 *
 * ---
 *
 * <Unblockable>
 *
 * - Used for: Skill, Item Notetags
 * - Using "Guard" against this skill will not reduce any damage.
 *
 * ---
 *
 * === Critical-Related Notetags ===
 *
 * The following notetags affect skill and item critical hit rates and the
 * critical damage multiplier.
 *
 * ---
 *
 * <Always Critical>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always land a critical hit regardless of the
 *   user's CRI parameter value.
 *
 * ---
 *
 * <Set Critical Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always have a x% change to land a critical hit
 *   regardless of user's CRI parameter value.
 * - Replace 'x' with a percerntage value representing the success rate.
 *
 * ---
 *
 * <Modify Critical Rate: x%>
 * <Modify Critical Rate: +x%>
 * <Modify Critical Rate: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - Modifies the user's CRI parameter calculation for this skill/item.
 * - The 'x%' notetag variant will multiply the user's CRI parameter value
 *   for this skill/item.
 * - The '+x%' and '-x%' notetag variants will incremenetally increase/decrease
 *   the user's CRI parameter value for this skill/item.
 *
 * ---
 *
 * <Modify Critical Multiplier: x%>
 * <Modify Critical Multiplier: +x%>
 * <Modify Critical Multiplier: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the damage multiplier when a critical hit lands.
 * - The 'x%' notetag variant multiply the multiplier to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the multiplier with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * <Modify Critical Bonus Damage: x%>
 * <Modify Critical Bonus Damage: +x%>
 * <Modify Critical Bonus Damage: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the bonus damage added when a critical hit lands.
 * - The 'x%' notetag variant multiply the damage to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the bonus damage with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * === JavaScript Notetags: Critical-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine how critical hit-related aspects are calculated.
 *
 * ---
 *
 * <JS Critical Rate>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate>
 *
 * - Used for: Skill, Item Notetags
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Damage>
 *  code
 *  code
 *  multiplier = code;
 *  bonusDamage = code;
 * </JS Critical Damage>
 *
 * - Used for: Skill, Item Notetags
 * - The 'multiplier' variable is returned later and used as the damage
 *   multiplier used to amplify the critical damage amount.
 * - The 'bonusDamage' variable is returned later and used as extra added
 *   damage for the critical damage amount.
 * - Replace 'code' with JavaScript code to determine how the 'multiplier' and
 *   'bonusDamage' variables are calculated.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 * 
 * === Life Steal-Related Notetags ===
 * 
 * ---
 * 
 * <HP Life Steal: x%>
 * <MP Life Steal: x%>
 * 
 * - Used for: Skill, Item Notetags
 * - Causes this skill/item to have Life Steal properties, allowing the user to
 *   take x% of the HP/MP Damage as recovered HP/MP.
 *   - HP Life Steal can only take HP from dealt HP damage.
 *   - MP Life Steal can only take HP from dealt MP damage.
 * - Replace 'x' with a number representing the percentage of the dealt damage
 *   used as HP/MP recovery.
 * - This cannot be used with skills/items with HP Drain/MP Drain. Life Steal
 *   is a different mechanic from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <HP Life Steal Certain Hit: +x%>
 * <HP Life Steal Physical Hit: +x%>
 * <HP Life Steal Magical Hit: +x%>
 * 
 * <HP Life Steal Certain Hit: -x%>
 * <HP Life Steal Physical Hit: -x%>
 * <HP Life Steal Magical Hit: -x%>
 * 
 * <MP Life Steal Certain Hit: +x%>
 * <MP Life Steal Physical Hit: +x%>
 * <MP Life Steal Magical Hit: +x%>
 * 
 * <MP Life Steal Certain Hit: -x%>
 * <MP Life Steal Physical Hit: -x%>
 * <MP Life Steal Magical Hit: -x%>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - The related battler's various trait properties can have passive life steal
 *   properties that will trigger upon using skills/items with matching hit
 *   types regardless of whether or not the skill/item innately has Life Steal.
 *   - Notetag variants with "Certain Hit" will only trigger from "Certain Hit"
 *     skill and item types. Same with "Physical" and "Magical" variants.
 *   - HP Life Steal can only take HP from dealt HP damage.
 *   - MP Life Steal can only take HP from dealt MP damage.
 * - Replace 'x' with a number representing the additive stacking percentage
 *   boost of the dealt damage used as HP/MP recovery. The effects will stack
 *   additively with other trait objects.
 * - This cannot be used with skills/items with HP Drain/MP Drain. Life Steal
 *   is a different mechanic from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Cancel Life Steal>
 * 
 * <Cancel HP Life Steal>
 * <Cancel MP Life Steal>
 * 
 * - Used for: Skill, Item Notetags
 * - Prevents this skill from allowing Life Steal effects to occur including
 *   the passive life steal calculators from the skill/item user.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Guard Life Steal>
 * 
 * <Guard HP Life Steal>
 * <Guard MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - If the related battler becomes the target of Life Steal, this will prevent
 *   the Life Steal effects from taking effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Disarm Life Steal>
 * 
 * <Disarm HP Life Steal>
 * <Disarm MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - Makes the related battler unable to HP/MP Life Steal regardless of the
 *   skill/item and its related properties like equipment.
 * - This does not prevent skills/items with innate Life Steal from being used.
 *   Only the Life Steal part of the skill/item will have no effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Negative Life Steal>
 * 
 * <Negative HP Life Steal>
 * <Negative MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - If the related battler becomes the target of Life Steal, this will invert
 *   the healing properties of Life Steal, causing the Life Steal user to
 *   instead take HP/MP damage.
 *   - This does NOT heal the target related battler.
 * - This does not prevent skills/items with innate Life Steal from being used.
 *   Only the Life Steal part of the skill/item will have no effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 *
 * === Action Sequence-Related Notetags ===
 *
 * Action Sequences allow you full control over how a skill and/or item plays
 * through its course. These notetags give you control over various aspects of
 * those Action Sequences. More information is found in the Action Sequences
 * help section.
 *
 * ---
 *
 * <Custom Action Sequence>
 *
 * - Used for: Skill, Item Notetags
 * - Removes all automated Action Sequence parts from the skill.
 * - Everything Action Sequence-related will be done by Common Events.
 * - Insert Common Event(s) into the skill/item's effects list to make use of
 *   the Custom Action Sequences.
 * - This will prevent common events from loading in the Item Scene and Skill
 *   Scene when used outside of battle.
 *
 * ---
 * 
 * <Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - If the Action Sequence Plugin Parameter "Auto Notetag" is enabled, this
 *   plugin will prevent custom action sequences from happening for the skill
 *   or item, and instead, use an Automatic Action Sequence instead.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Bypass Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - This notetag is used for the game devs that have the Action Sequence
 *   Plugin Parameter "Auto Notetag" on for applying <Custom Action Sequence>
 *   to everything.
 * - This will allow items and skills to be able to launch their common
 *   events from the menu scene regardless of the inherent restriction to
 *   prevent action sequence based skills/items with common events from
 *   launching.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Common Event: name>
 *
 * - Used for: Skill, Item Notetags
 * - Battle only: calls forth a Common Event of a matching name.
 * - Replace 'name' with the name of a Common Event to call from when this
 *   skill/item is used in battle.
 *   - Remove any \I[x] in the name.
 * - Insert multiple notetags to call multiple Common Events in succession.
 * - This will occur after any Common Event Trait Effects for the skill/item's
 *   database entry.
 * - This is primarily used for users who are reorganizing around their Common
 *   Events and would still like to have their skills/items perform the correct
 *   Action Sequences in case the ID's are different.
 * 
 * ---
 *
 * <Display Icon: x>
 * <Display Text: string>
 *
 * - Used for: Skill, Item Notetags
 * - When displaying the skill/item name in the Action Sequence, determine the
 *   icon and/or text displayed.
 * - Replace 'x' with a number value representing the icon ID to be displayed.
 * - Replace 'string' with a text value representing the displayed name.
 *
 * ---
 * 
 * <Common Event Key: name>
 * <Common Event Keys: name, name, name>
 * 
 * <Common Event Keys>
 *  key
 *  key
 *  key
 * </Common Event Keys>
 * 
 * - Used for: Skill, Item Notetags
 * - Will generate Common Events for the skill/item with a corresponding key.
 * - Replace 'name' with the name of the Common Event's key that you want to
 *   reference. That key will be converted into a Common Event effect for the
 *   skill/item and be treated as an action sequence.
 *   - The notetag variants that use multiple keys will have the keys added in
 *     the order they are listed.
 *   - If keys do not reference any Common Events, no Common Events will be
 *     added for that key.
 * - To mark a Common Event with a key, insert inside a Common Event's name the
 *   [ and ] brackets around the text that will be used as the Common Event's
 *   key text.
 *   - For example, if Common Event's name is "Penta Slash [PENTA]", then the
 *     key used is "PENTA" without the quotes.
 *   - This key could then be referenced by <Common Event Key: PENTA> notetag.
 *   - Do not use commas (,) inside the key text as it will be automatically
 *     removed for the sake of consistency.
 * - This feature is made for make the process of sharing Action Sequences to
 *   become easier without needing to line up Common Event ID's.
 * 
 * ---
 *
 * === Animated Sideview Battler-Related Notetags ===
 *
 * Enemies can use Animated Sideview Actor graphics thanks to this plugin.
 * These notetags give you control over that aspect. Some of these also affect
 * actors in addition to enemies.
 *
 * ---
 *
 * <Sideview Battler: filename>
 *
 * <Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Replaces the enemy's battler graphic with an animated Sideview Actor
 *   graphic found in the img/sv_actors/ folder.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Sideview Battlers>
 *
 * ---
 *
 * <Sideview Anchor: x, y>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets the sprite anchor positions for the sideview sprite.
 * - Replace 'x' and 'y' with numbers depicting where the anchors should be for
 *   the sideview sprite.
 * - By default, the x and y anchors are 0.5 and 1.0.
 *
 * ---
 * 
 * <Sideview Home Offset: +x, +y>
 * <Sideview Home Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, State Notetags
 * - Offsets the sideview actor sprite's home position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * - This notetag will not work if you remove it from the JavaScript code in
 *   Plugin Parameters > Actor > JS:  Home Position
 * 
 * ---
 * 
 * <Sideview Weapon Offset: +x, +y>
 * <Sideview Weapon Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy State Notetags
 * - Offsets the sideview weapon sprite's position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * 
 * ---
 *
 * <Sideview Show Shadow>
 * <Sideview Hide Shadow>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets it so the sideview battler's shadow will be visible or hidden.
 *
 * ---
 * 
 * <Sideview Shadow Scale: x%>
 * <Sideview Shadow Scale: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - This affects both the X and Y scale.
 * 
 * ---
 * 
 * <Sideview Shadow Scale X: x%>
 * <Sideview Shadow Scale X: x.y>
 * 
 * <Sideview Shadow Scale Y: x%>
 * <Sideview Shadow Scale Y: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - These affect their respective X and Y scales separately.
 * 
 * ---
 *
 * <Sideview Collapse>
 * <Sideview No Collapse>
 *
 * - Used for: Enemy Notetags
 * - Either shows the collapse graphic or does not show the collapse graphic.
 * - Collapse graphic means the enemy will 'fade away' once it's defeated.
 * - No collapse graphic means the enemy's corpse will remain on the screen.
 *
 * ---
 *
 * <Sideview Idle Motion: name>
 *
 * <Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Changes the default idle motion for the enemy.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Idle Motions>
 *  walk: 25
 *  wait: 50
 *  guard
 *  victory
 *  abnormal
 * </Sideview Idle Motions>
 *
 * ---
 *
 * <Sideview Size: width, height>
 *
 * - Used for: Enemy Notetags
 * - When using a sideview battler, its width and height will default to the
 *   setting made in Plugin Parameters => Enemy Settings => Size: Width/Height.
 * - This notetag lets you change that value to something else.
 * - Replace 'width' and 'height' with numbers representing how many pixels
 *   wide/tall the sprite will be treated as.
 * - This does NOT change the image size. This only changes the HITBOX size.
 *
 * ---
 *
 * <Sideview Weapon: weapontype>
 *
 * <Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Give your sideview enemies weapons to use.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Sideview Weapons>
 *
 * ---
 *
 * <traitname Sideview Battler: filename>
 *
 * <traitname Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </traitname Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have a unique appearance.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Male Sideview Battlers>
 *
 * <Female Sideview Battlers>
 *  Actor1_2: 25
 *  Actor1_4: 10
 *  Actor1_6
 *  Actor1_8
 * </Female Sideview Battlers>
 *
 * ---
 *
 * <traitname Sideview Idle Motion: name>
 *
 * <traitname Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </traitname Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique idle motions.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Jolly Sideview Idle Motions>
 *  wait: 25
 *  victory: 10
 *  walk
 * </Jolly Sideview Idle Motions>
 *
 * <Serious Sideview Idle Motions>
 *  walk: 25
 *  guard: 10
 *  wait
 * </Jolly Sideview Idle Motions>
 *
 * ---
 *
 * <traitname Sideview Weapon: weapontype>
 *
 * <traitname Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </traitname Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique weapons.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Male Sideview Weapons>
 *
 * <Female Sideview Weapons>
 *  Dagger: 25
 *  Spear: 25
 *  Cane
 * </Female Sideview Weapons>
 *
 * ---
 *
 * === Enemy-Related Notetags ===
 *
 * ---
 *
 * <Battler Sprite Cannot Move>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to move, jump, and/or float due to
 *   Action Sequences. Useful for rooted enemies.
 *
 * ---
 * 
 * <Battler Sprite Grounded>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to jumping and/or floating due to
 *   Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * ---
 *
 * <Swap Enemies>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Swap Enemies>
 *
 * - Used for: Enemy Notetags
 * - Causes this enemy database object to function as a randomizer for any of
 *   the listed enemies inside the notetag. When the enemy is loaded into the
 *   battle scene, the enemy is immediately replaced with one of the enemies
 *   listed. The randomization is based off the 'weight' given to each of the
 *   enemy 'names'.
 * - Replace 'name' with the database enemy of the enemy you wish to replace
 *   the enemy with.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Swap Enemies>
 *  Bat: 50
 *  Slime: 25
 *  Orc
 *  Minotaur
 * </Swap Enemies>
 *
 * ---
 *
 * === JavaScript Notetags: Mechanics-Related ===
 *
 * These JavaScript notetags allow you to run code at specific instances during
 * battle provided that the unit has that code associated with them in a trait
 * object (actor, class, weapon, armor, enemy, or state). How you use these is
 * entirely up to you and will depend on your ability to understand the code
 * used and driven for each case.
 *
 * ---
 *
 * <JS Pre-Start Battle>
 *  code
 *  code
 *  code
 * </JS Pre-Start Battle>
 *
 * <JS Post-Start Battle>
 *  code
 *  code
 *  code
 * </JS Post-Start Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of battle aimed at the function:
 *   BattleManager.startBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Turn>
 *  code
 *  code
 *  code
 * </JS Pre-Start Turn>
 *
 * <JS Post-Start Turn>
 *  code
 *  code
 *  code
 * </JS Post-Start Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of a turn aimed at the function:
 *   BattleManager.startTurn()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Action>
 *  code
 *  code
 *  code
 * </JS Pre-Start Action>
 *
 * <JS Post-Start Action>
 *  code
 *  code
 *  code
 * </JS Post-Start Action>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action aimed at the function:
 *   BattleManager.startAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Apply>
 *  code
 *  code
 *  code
 * </JS Pre-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Apply as User>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as User>
 *
 * <JS Pre-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage>
 *  code
 *  code
 *  code
 * </JS Pre-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage being calculated up to this
 *   point (if any) and any changes made to the 'value' variable will reflect
 *   on the damage dealt/healed, too.
 *
 * ---
 *
 * <JS Pre-Damage as User>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as User>
 *
 * <JS Pre-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage being calculated up to this
 *   point (if any) and any changes made to the 'value' variable will reflect
 *   on the damage dealt/healed, too.
 *
 * ---
 *
 * <JS Post-Damage>
 *  code
 *  code
 *  code
 * </JS Post-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage/healing that has been last
 *   dealt through this action.
 *
 * ---
 *
 * <JS Post-Damage as User>
 *  code
 *  code
 *  code
 * </JS Post-Damage as User>
 *
 * <JS Post-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Post-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage/healing that has been last
 *   dealt through this action.
 *
 * ---
 *
 * <JS Post-Apply>
 *  code
 *  code
 *  code
 * </JS Post-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply as User>
 *  code
 *  code
 *  code
 * </JS Post-Apply as User>
 *
 * <JS Post-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Post-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 *
 * ---
 *
 * <JS Pre-End Action>
 *  code
 *  code
 *  code
 * </JS Pre-End Action>
 *
 * <JS Post-End Action>
 *  code
 *  code
 *  code
 * </JS Post-End Action>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action aimed at the function:
 *   BattleManager.endAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Turn>
 *  code
 *  code
 *  code
 * </JS Pre-End Turn>
 *
 * <JS Post-End Turn>
 *  code
 *  code
 *  code
 * </JS Post-End Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of a turn aimed at the function:
 *   Game_Battler.prototype.onTurnEnd()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Regenerate>
 *  code
 *  code
 *  code
 * </JS Pre-Regenerate>
 *
 * <JS Post-Regenerate>
 *  code
 *  code
 *  code
 * </JS Post-Regenerate>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a unit regenerates HP/MP aimed at the function:
 *   Game_Battler.prototype.regenerateAll()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Victory>
 *  code
 *  code
 *  code
 * </JS Battle Victory>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is won aimed at the function:
 *   BattleManager.processVictory()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Success>
 *  code
 *  code
 *  code
 * </JS Escape Success>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping succeeds aimed at the function:
 *   BattleManager.onEscapeSuccess()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Failure>
 *  code
 *  code
 *  code
 * </JS Escape Failure>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping fails aimed at the function:
 *   BattleManager.onEscapeFailure()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Defeat>
 *  code
 *  code
 *  code
 * </JS Battle Defeat>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is lost aimed at the function:
 *   BattleManager.processDefeat()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Battle>
 *  code
 *  code
 *  code
 * </JS Pre-End Battle>
 *
 * <JS Post-End Battle>
 *  code
 *  code
 *  code
 * </JS Post-End Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when the battle is over aimed at the function:
 *   BattleManager.endBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 * 
 * === Battle Layout-Related Notetags ===
 * 
 * These tags will change the battle layout for a troop regardless of how the
 * plugin parameters are set up normally. Insert these tags in either the
 * noteboxes of maps or the names of troops for them to take effect. If both
 * are present for a specific battle, then priority goes to the setting found
 * in the troop name.
 * 
 * ---
 * 
 * <Layout: type>
 * <Battle Layout: type>
 * 
 * - Used for: Map Notetags, Troop Name Tags, and Troop Comment Tags
 * - Changes the battle layout style used for this specific map or battle.
 * - Replace 'type' with 'default', 'list', 'xp', 'portrait', or 'border'.
 * - Those with VisuMZ_3_FrontviewBattleUI can use 'frontview'.
 * - Those with VisuMZ_3_SideviewBattleUI can use 'sideview'.
 * - If using Troop Comment Tags, then as long as the tag appears in a comment
 *   found on any of the Troop's pages (even if they don't run), the tag will
 *   be considered in effect.
 * 
 * ---
 * 
 * === Troop Size Tags ===
 * 
 * ---
 * 
 * <Extend: x>
 * <Extend: x, x, x>
 * 
 * - Used for: Troop Name Tags and Troop Comment Tags
 * - Adds enemies from another troop to the current troop.
 * - Enemies from another troop will retain their database positions.
 * - Replace 'x' with the ID of the database troop entry you wish to add enemy
 *   members from.
 *   - Insert multiple x's to add from more troops.
 * - Extended troop members will be added in the order they're listed.
 * - Be cautious of how many enemies you add as too many will lag the battle
 *   system. We are not responsible for frame drops due to this.
 * 
 * ---
 * 
 * === Troop Comment Tags ===
 * 
 * Place these tags inside of a comment found in a troop page's event list.
 * 
 * ---
 * 
 * <Once Parallel When Start Battle>
 * 
 * - Used for: Troop Page Comment Tags
 * - Causes the troop page to immediately load the moment the battle scene
 *   begins to fade in (not after it fades in). This is faster than a turn 0
 *   condition troop page. Troop page conditions are ignored.
 * - This can be used for things like the Action Sequence Camera plugin, the
 *   Visual Battle Environment plugin, and/or initial battle poses and such in
 *   order to provide a near seamless battle transition experience.
 * - This does NOT trigger when coming out of the options menu or party menu.
 * - This WILL trigger when going from battle to battle nonstop via plugins
 *   like VisuStella MZ's Chain Battles.
 * - When actors are moving towards their home positions, it will take around
 *   30 frames by default. Use this information however you like.
 * 
 * ---
 *
 * ============================================================================
 * Action Sequence - Plugin Commands
 * ============================================================================
 *
 * Skills and items, when used in battle, have a pre-determined series of
 * actions to display to the player as a means of representing what's going on
 * with the action. For some game devs, this may not be enough and they would
 * like to get more involved with the actions themselves.
 *
 * Action Sequences, added through this plugin, enable this. To give a skill or
 * item a Custom Action Sequence, a couple of steps must be followed:
 *
 * ---
 *
 * 1. Insert the <Custom Action Sequence> notetag into the skill or item's
 *    notebox (or else this would not work as intended).
 * 2. Give that skill/item a Common Event through the Effects box. The selected
 *    Common Event will contain all the Action Sequence data.
 * 3. Create the Common Event with Action Sequence Plugin Commands and/or event
 *    commands to make the skill/item do what you want it to do.
 *
 * ---
 *
 * The Plugin Commands added through the Battle Core plugin focus entirely on
 * Action Sequences. However, despite the fact that they're made for skills and
 * items, some of these Action Sequence Plugin Commands can still be used for
 * regular Troop events and Common Events.
 *
 * ---
 *
 * === Action Sequence - Action Sets ===
 *
 * Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * ---
 *
 * ACSET: Setup Action Set
 * - The generic start to most actions.
 *
 *   Display Action:
 *   Immortal: On:
 *   Battle Step:
 *   Wait For Movement:
 *   Cast Animation:
 *   Wait For Animation:
 *   - Use this part of the action sequence?
 *
 * ---
 *
 * ACSET: All Targets Action Set
 * - Affects all targets simultaneously performing the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 * 
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait For Animation:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Each Target Action Set
 * - Goes through each target one by one to perform the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 *
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait Count:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Finish Action
 * - The generic ending to most actions.
 *
 *   Wait For New Line:
 *   Wait For Effects:
 *   Clear Battle Log:
 *   Home Reset:
 *   Wait For Movement:
 *   - Use this part of the action sequence?
 *
 * ---
 * 
 * === Action Sequences - Angle ===
 * 
 * These action sequences allow you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * ANGLE: Change Angle
 * - Changes the camera angle.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Angle:
 *   - Change the camera angle to this many degrees.
 *
 *   Duration:
 *   - Duration in frames to change camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Reset Angle
 * - Reset any angle settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Wait For Angle
 * - Waits for angle changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Animations ===
 *
 * These Action Sequences are related to the 'Animations' that can be found in
 * the Animations tab of the Database.
 *
 * ---
 *
 * ANIM: Action Animation
 * - Plays the animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation
 * - Plays the animation associated with the user's weapon.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation 2+
 * - Plays the animation associated with the user's other weapons.
 * - Plays nothing if there is no other weapon equipped.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Slot:
 *   - Which weapon slot to get this data from?
 *   - Main-hand weapon is weapon slot 1.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 * 
 * ANIM: Balloon Animation
 * - Plays a balloon animation on target(s).
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Balloon Type:
 *   - What kind of balloon should be played on target(s)?
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Single)
 * - Plays a balloon animation using an icon on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Range)
 * - Plays a balloon animation an icon range on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Starting Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Ending Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Specific)
 * - Plays a balloon animation with specific icons on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Icons:
 *   - Insert the ID(s) of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 *
 * ANIM: Cast Animation
 * - Plays the cast animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Change Battle Portrait
 * - Changes the battle portrait of the actor (if it's an actor).
 * - Can be used outside of battle/action sequences.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *   - Valid units can only be actors.
 *
 *   Filename:
 *   - Select the file to change the actor's portrait to.
 * 
 * ---
 *
 * ANIM: Guard Animation
 * - Plays the animation associated with the user's guard action (if any).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Item Animation
 * - Plays the animation associated with a specific item.
 * 
 *   Item ID:
 *   - Which item ID will the animation come from?
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Play at Coordinate
 * - Plays an animation on the screen at a specific x, y coordinate.
 * - Requires VisuMZ_0_CoreEngine!
 * 
 *   Animation ID:
 *   - Plays this animation.
 * 
 *   Coordinates:
 * 
 *     X:
 *     Y:
 *     - X/Y coordinate used for the animation.
 *       You may use JavaScript code.
 * 
 *   Mirror Animation?:
 *   - Mirror the animation?
 * 
 *   Mute Animation?:
 *   - Mute the animation?
 * 
 *   Wait for Completion?:
 *   - Wait the animation to finish before continuing?
 *
 * ---
 *
 * ANIM: Show Animation
 * - Plays the a specific animation on unit(s).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Animation ID:
 *   - Select which animation to play on unit(s).
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Show Animation JS
 * - Plays the a specific animation on unit(s).
 * - Uses JavaScript to determine animation ID.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   JS: Animation ID:
 *   - Select which animation to play on unit(s).
 *   - Uses JavaScript to determine animation ID.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Skill Animation
 * - Plays the animation associated with a specific skill.
 * 
 *   Skill ID:
 *   - Which skill ID will the animation come from?
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Wait For Animation
 * - Causes the interpreter to wait for any animation(s) to finish.
 *
 * ---
 *
 * === Action Sequences - Battle Log ===
 *
 * These Action Sequences are related to the Battle Log Window, the window
 * found at the top of the battle screen.
 *
 * ---
 *
 * BTLOG: Add Text
 * - Adds a new line of text into the Battle Log.
 *
 *   Text:
 *   - Add this text into the Battle Log.
 *   - Text codes allowed.
 * 
 *   Copy to Combat Log?:
 *   - Copies text to the Combat Log.
 *   - Requires VisuMZ_4_CombatLog
 * 
 *     Combat Log Icon:
 *     - What icon would you like to bind to this entry?
 *     - Requires VisuMZ_4_CombatLog
 *
 * ---
 *
 * BTLOG: Clear Battle Log
 * - Clears all the text in the Battle Log.
 *
 * ---
 *
 * BTLOG: Display Action
 * - plays the current action in the Battle Log.
 *
 * ---
 *
 * BTLOG: Pop Base Line
 * - Removes the Battle Log's last added base line and  all text up to its
 *   former location.
 *
 * ---
 *
 * BTLOG: Push Base Line
 * - Adds a new base line to where the Battle Log currently is at.
 *
 * ---
 *
 * BTLOG: Refresh Battle Log
 * - Refreshes the Battle Log.
 *
 * ---
 *
 * BTLOG: UI Show/Hide
 * - Shows or hides the Battle UI (including the Battle Log).
 *
 *   Show/Hide?:
 *   - Shows/hides the Battle UI.
 *
 * ---
 *
 * BTLOG: Wait For Battle Log
 * - Causes the interpreter to wait for the Battle Log to finish.
 *
 * ---
 *
 * BTLOG: Wait For New Line
 * - Causes the interpreter to wait for a new line in the Battle Log.
 *
 * ---
 *
 * === Action Sequences - Camera ===
 *
 * These Action Sequences are battle camera-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * CAMERA: Clamp ON/OFF
 * - Turns battle camera clamping on/off.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Setting:
 *   - Turns camera clamping on/off.
 *
 * ---
 *
 * CAMERA: Focus Point
 * - Focus the battle camera on a certain point in the screen.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   X Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Y Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Focus Target(s)
 * - Focus the battle camera on certain battler target(s).
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Targets:
 *   - Select unit(s) to focus the battle camera on.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Offset
 * - Offset the battle camera from the focus target.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Offset X:
 *   - How much to offset the camera X by.
 *   - Negative: left. Positive: right.
 *
 *   Offset Y:
 *   - How much to offset the camera Y by.
 *   - Negative: up. Positive: down.
 *
 *   Duration:
 *   - Duration in frames for offset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Reset
 * - Reset the battle camera settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Reset Focus?:
 *   - Reset the focus point?
 *
 *   Reset Offset?:
 *   - Reset the camera offset?
 *
 *   Duration:
 *   - Duration in frames for reset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Wait For Camera
 * - Waits for camera changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 * 
 * === Action Sequences - Cutins ===
 * 
 * Allows you to have control over Visual Cutin Effects.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 * 
 * CUTIN: Add Visual Cutin Effect
 * - Adds the Visual Cutin Effect using these desired settings.
 * - Only one of each cutin-style type can be present at a time.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 *   Basic Settings:
 * 
 *     Cutin Style Type:
 *     - What Visual Cutin Effect style type do you wish to use?
 *     - Only one of each cutin-style type can be present.
 *     - Refer to VisuMZ wiki for visuals on styles.
 * 
 *     Portrait Target:
 *     - Select unit(s) to grab the Visual Cutin Effect portrait data from.
 *     - First unit will be used to make portrait.
 * 
 *     Parallax Filename:
 *     - Pick a parallax to use for the Visual Cutin Effect.
 *     - Pick (None) to not use a parallax.
 * 
 *     Background Color:
 *     - Use #rrggbb for custom colors or regular numbers for text colors from
 *       the Window Skin.
 *
 *   Extra Settings:
 *   - Extra Plugin Command settings pertaining to this Visual Cutin Effect.
 *   - An explanation for these settings are found in the Visual Cutin Effect
 *     help file and documentation.
 *   - Extra parameters are added for Parallax Scroll Inversion when the target
 *     is an enemy.
 * 
 *   Wait for Entrance:
 *   - Wait until cutin entrance is finished before performing the next
 *     event command?
 * 
 * ---
 *
 * CUTIN: End Visual Cutin Effect (All)
 * - Ends all Visual Cutin Effects currently present.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 *   Wait for Exit:
 *   - Wait until cutin exit is finished before performing the next
 *     event command?
 *
 * ---
 *
 * CUTIN: End Visual Cutin Effect (Type)
 * - Ends the Visual Cutin Effect with the matching type.
 * - Requires VisuMZ_3_VisualCutinEffect!
 *
 *   Cutin Style Type:
 *   - What Visual Cutin Effect style type do you wish to end?
 * 
 *   Wait for Exit:
 *   - Wait until cutin exit is finished before performing the next
 *     event command?
 *
 * ---
 * 
 * CUTIN: Wait for Cutin Entrance
 * - Wait until all cutin entrances are finished before performing the next
 *   event command.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 * 
 * CUTIN: Wait for Cutin Exit
 * - Wait until all cutin exits are finished before performing the next
 *   event command.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 *
 * === Action Sequences - Dragonbones ===
 *
 * These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * ---
 *
 * DB: Dragonbones Animation
 * - Causes the unit(s) to play a Dragonbones motion animation.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Motion Animation:
 *   - What is the name of the Dragonbones motion animation you wish to play?
 *
 * ---
 *
 * DB: Dragonbones Time Scale
 * - Causes the unit(s) to change their Dragonbones time scale.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Time Scale:
 *   - Change the value of the Dragonbones time scale to this.
 *
 * ---
 *
 * === Action Sequences - Elements ===
 *
 * These Action Sequences can change up the element(s) used for the action's
 * damage calculation midway through an action.
 *
 * They also require the VisuMZ_1_ElementStatusCore plugin to be present in
 * order for them to work.
 *
 * ---
 *
 * ELE: Add Elements
 * - Adds element(s) to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to add onto the action.
 *   - Insert multiple element ID's to add multiple at once.
 *
 * ---
 *
 * ELE: Clear Element Changes
 * - Clears all element changes made through Action Sequences.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 *
 * ELE: Force Elements
 * - Forces only specific element(s) when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to force in the action.
 *   - Insert multiple element ID's to force multiple at once.
 *
 * ---
 *
 * ELE: Null Element
 * - Forces no element to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 * 
 * === Action Sequences - Grid ===
 * 
 * These Action Sequences are Battle Grid System-related.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * ---
 * 
 * GRID: Action Animation at Node
 * - Plays action animation at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 *
 * GRID: Add Passive State(s) to Node
 * - Adds Passive State(s) at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 *
 *   State ID(s):
 *   - Select which State ID(s) to add as a Passive State.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to add the Passive State Node effect for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to add a
 *       Passive State(s) to.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to add a
 *       Passive State(s) to.
 *
 * ---
 * 
 * GRID: Add Trigger to Node
 * - Adds Trigger to target node.
 * - Target node cannot have battler.
 * - Each node can only contain ONE trigger! 
 * - Otherwise, newly placed triggers will overwrite the old ones.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Skill ID:
 *   - Select which Skill ID(s) to add as the trigger.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit do you want to add the Trigger Node effect for?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to add a
 *       Trigger to.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to add a
 *       Trigger to.
 * 
 * ---
 * 
 * GRID: Animation ID at Node
 * - Plays specific animation ID at target node.
 * 
 *   Animation ID:
 *   - Play this animation at target node.
 * 
 *     Mirror?:
 *     - Mirror this animation?
 * 
 *     Mute?:
 *     - Mute this animation?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Animation JS at Node
 * - Uses JS to calculate which animation to play at target node.
 * 
 *   JS: Animation ID:
 *   - Calculate which animation to play on unit(s).
 *   - Uses JavaScript to determine animation ID.
 * 
 *     Mirror?:
 *     - Mirror this animation?
 * 
 *     Mute?:
 *     - Mute this animation?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Animation Type at Node
 * - Plays certain animation type at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Type:
 *   - What is the animation type you would like to play?
 *     - Attack
 *     - Guard
 *     - Item
 *     - Skill
 * 
 *     Slot (Attack Type):
 *     - Which weapon slot to get this data from?
 *     - Main-hand weapon is weapon slot 1.
 * 
 *     Item ID (Item Type):
 *     - Which item ID will the animation come from?
 * 
 *     Skill ID (Skill Type):
 *     - Which skill ID will the animation come from?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Move Target(s) In Direction
 * - Moves target(s) in a specific direction to other Nodes.
 * - Requires VisuMZ_2_BattleGridSystem!
 * - This will bypass the "once per action" condition used for both the
 *   <rule Move User Node direction: x> & <rule Move Target Node direction: x>
 *   notetags as this is not a notetag effect.
 * 
 *   Targets:
 *   - Select unit(s) to move.
 * 
 *   Movement Type:
 *   - Select the Movement type rulings.
 *   - See VisuMZ_2_BattleGridSystem help file for details.
 * 
 *     Direction:
 *     - Select the movement direction.
 * 
 *     Distance:
 *     - The number of nodes to be moved.
 *     - You may use JavaScript code.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 *   Silent Change?:
 *   - Silent: Discreet changes shown. More apparent later.
 *   - Visual: Instant changes shown.
 * 
 * ---
 * 
 * GRID: Pull To Target Node
 * - Pulls battlers towards target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *
 *     Unit:
 *     - Which unit do you want to pull on?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to
 *       pull to.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to
 *       pull to.
 * 
 *   Strength:
 *   - Input the strength level of the pull.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 * ---
 * 
 * GRID: Push From Target Node
 * - Pushes battlers away from target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *
 *     Unit:
 *     - Which unit do you want to push from?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to
 *       push from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to
 *       push from.
 * 
 *   Strength:
 *   - Input the strength level of the push.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 * ---
 *
 * GRID: Remove All Passive States from Node
 * - Removes all Passive State effects at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to clear the Node for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to clear
 *       Passive States from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to clear
 *       Passive States from.
 *
 * ---
 *
 * GRID: Remove Passive State(s) from Node
 * - Remove Passive State(s) at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 *
 *   State ID(s):
 *   - Select which State ID(s) to remove as a Passive State.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to remove the Passive State Node effect for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to remove
 *       a Passive State(s) from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to remove
 *       a Passive State(s) from.
 *
 * ---
 * 
 * GRID: Remove Trigger from Node
 * - Removes Trigger at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit do you want to clear Triggers for?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to clear
 *       Triggers from.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to clear
 *       Triggers from.
 * 
 * ---
 * 
 * === Action Sequences - Horror Effects ===
 * 
 * These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 * 
 * ---
 *
 * HORROR: Clear All Filters
 * - Clear all Horror Effects filters on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove Horror Effects for.
 *
 * ---
 *
 * HORROR: Glitch Create
 * - Creates the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Glitch Slices:
 *   - Glitch slices to be used with the target.
 *
 *   Glitch Offset:
 *   - Default offset value.
 *
 *   Glitch Animated?:
 *   - Animate the glitch effect?
 *
 *   Glitch Frequency:
 *   - If animated, how frequent to make the glitch effect?
 *   - Lower = often     Higher = rarer
 *
 *   Glitch Strength:
 *   - If animated, how strong is the glitch effect?
 *   - Lower = weaker     Higher = stronger
 *
 * ---
 *
 * HORROR: Glitch Remove
 * - Removes the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: Noise Create
 * - Creates the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Noise Rate:
 *   - Noise rate to be used with the target.
 *
 *   Noise Animated:
 *   - Animate the noise for the target?
 *
 * ---
 *
 * HORROR: Noise Remove
 * - Removes the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: TV Create
 * - Creates the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   TV Line Thickness:
 *   - Default TV line thickness
 *   - Lower = thinner     Higher = thicker
 *
 *   TV Corner Size:
 *   - Default TV line corner size
 *   - Lower = smaller     Higher = bigger
 *
 *   TV Animated:
 *   - Animate the TV?
 *
 *   TV Speed:
 *   - Speed used to animate the TV if animated
 *   - Lower = slower     Higher = faster
 *
 * ---
 *
 * HORROR: TV Remove
 * - Removes the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 * 
 * === Action Sequences - Impact ===
 * 
 * These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * IMPACT: Bizarro Inversion
 * - Swaps blue/red colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Bizarro?:
 *   - Enable Bizarro Inversion effect?
 *
 * ---
 *
 * IMPACT: Color Break
 * - Breaks the colors on the screen before reassembling.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Intensity:
 *   - What is the intensity of the color break effect?
 *
 *   Duration:
 *   - What is the duration of the color break effect?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Desaturation
 * - Desaturates all colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Desaturate?:
 *   - Enable Desaturation effect?
 *
 * ---
 *
 * IMPACT: Motion Blur Screen
 * - Creates a motion blur on the whole screen.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Target(s)
 * - Creates a motion blur on selected target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion blur effects for.
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Trail Create
 * - Creates a motion trail effect for the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion trail effects for.
 *
 *   Delay:
 *   - How many frames to delay by when creating a motion trail?
 *   - The higher the delay, the less motion trails there are.
 *
 *   Duration:
 *   - How many frames should the motion trail last?
 *   - What do you want to be its duration?
 *
 *   Hue:
 *   - What do you want to be the hue for the motion trail?
 *
 *   Starting Opacity:
 *   - What starting opacity value do you want for the motion trail?
 *   - Opacity values decrease over time.
 *
 *   Tone:
 *   - What tone do you want for the motion trail?
 *   - Format: [Red, Green, Blue, Gray]
 *
 * ---
 *
 * IMPACT: Motion Trail Remove
 * - Removes the motion trail effect from the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to clear motion trail effects for.
 *
 * ---
 *
 * IMPACT: Negative Inversion
 * - Inverts all the colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Negative?:
 *   - Enable Negative Inversion effect?
 *
 * ---
 *
 * IMPACT: Oversaturation
 * - Oversaturates colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Oversaturate?:
 *   - Enable Oversaturation effect?
 *
 * ---
 *
 * IMPACT: Shockwave at Point
 * - Creates a shockwave at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to create a shockwave at?
 *   - You can use JavaScript code.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Each Target(s)
 * - Creates a shockwave at each of the target(s) location(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Target(s) Center
 * - Creates a shockwave from the center of the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Time Scale
 * - Adjust time to go faster or slower!
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Scale:
 *   - Adjusts how fast/slow time goes.
 *   - 1.00 is normal. Lower is slower. Higher is faster.
 *
 * ---
 *
 * IMPACT: Time Stop
 * - Stops time for a set amount of milliseconds.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Milliseconds:
 *   - How many milliseconds should time stop for?
 *   - 1000 milliseconds = 1 second.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Point
 * - Creates a zoom blur at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to focus the zoom at?
 *   - You can use JavaScript code.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Target(s) Center
 * - Creates a zoom blur at the center of targets.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a zoom blur from.
 *
 *   Target Location:
 *   - Select which part target group to start a zoom blur from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the zoom blur X/Y point by.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * === Action Sequences - Inject ===
 *
 * These Action Sequences are related to injecting sprite animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * ---
 * 
 * INJECT: Animation Begin
 * - Injects and plays a whole spritesheet animation.
 * - The spritesheet animation will play over the battler until it is finished.
 * - The battler's original sprite will be invisible until finished.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to inject the animation on.
 * 
 *   Filename:
 *   - Select the animation spritesheet file.
 *   - Located in the /img/sv_actors/ folder.
 * 
 *     Horizontal Cells:
 *     - How many horizontal cells (or columns) are there?
 * 
 *     Vertical Cells:
 *     - How many vertical cells (or rows) are there?
 * 
 *     Frame Delay:
 *     - How many frames are played inbetween cells?
 * 
 *     Smooth Bitmap?:
 *     - Smooth the spritesheet graphic?
 * 
 *   Offset:
 * 
 *     Offset X:
 *     - Offsets the X position of the injected animation.
 *     - Negative: left. Positive: right.
 * 
 *     Offset Y:
 *     - Offsets the Y position of the injected animation.
 *     - Negative: up. Positive: down.
 * 
 * ---
 * 
 * INJECT: Animation End
 * - Stops and ends any injected animations on target(s).
 * - Any inject animation will be prematurely terminated.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to stop injected animation(s).
 * 
 * ---
 * 
 * INJECT: Animation Pause/Resume
 * - Pauses/resumes any injected animations on target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to pause/resume injected animation(s).
 * 
 *   Pause?:
 *   - Pause the injected animation?
 * 
 * ---
 * 
 * INJECT: Wait For Injected Animation
 * - Waits for injected animations to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * === Action Sequences - Mechanics ===
 *
 * These Action Sequences are related to various mechanics related to the
 * battle system.
 *
 * ---
 *
 * MECH: Action Effect
 * - Causes the unit(s) to take damage/healing from action and incurs any
 *   changes made such as buffs and states.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 * ---
 * 
 * MECH: Active Chain Input Disable
 * - Disables input for Active Chain Skills at this time.
 * - Requires VisuMZ_3_ActiveChainSkills!
 * 
 * ---
 *
 * MECH: Add Buff/Debuff
 * - Adds buff(s)/debuff(s) to unit(s). 
 * - Determine which parameters are affected and their durations.
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s) and/or debuff(s).
 *
 *   Buff Parameters:
 *   - Select which parameter(s) to buff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Debuff Parameters:
 *   - Select which parameter(s) to debuff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Turns:
 *   - Number of turns to set the parameter(s) buffs to.
 *   - You may use JavaScript code.
 *
 * ---
 *
 * MECH: Add State
 * - Adds state(s) to unit(s).
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s).
 *
 *   States:
 *   - Select which state ID(s) to add to unit(s).
 *   - Insert multiple state ID's to add multiple at once.
 *
 * ---
 * 
 * MECH: Analyze Weakness
 * - Reveal elemental weakness(es) from target(s).
 * - Requires VisuMZ_3_WeaknessDisplay!
 * 
 *   Targets:
 *   - Select unit(s) to reveal elemental weaknesses for.
 * 
 *   Reveal:
 *   - How many elemental weaknesses do you wish to reveal?
 *   - You may use JavaScript code.
 * 
 * ---
 *
 * MECH: Armor Penetration
 * - Adds an extra layer of defensive penetration/reduction.
 * - You may use JavaScript code for any of these.
 *
 *   Armor/Magic Penetration:
 *
 *     Rate:
 *     - Penetrates an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Penetrates a flat amount of armor by this value.
 *
 *   Armor/Magic Reduction:
 *
 *     Rate:
 *     - Reduces an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Reduces a flat amount of armor by this value.
 *
 * ---
 * 
 * MECH: ATB Gauge
 * - Alters the ATB/TPB Gauges.
 * - Requires VisuMZ_2_BattleSystemATB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Charging:
 *   
 *     Charge Rate:
 *     - Changes made to the ATB Gauge if it is currently charging.
 * 
 *   Casting:
 *   
 *     Cast Rate:
 *     - Changes made to the ATB Gauge if it is currently casting.
 *   
 *     Interrupt?:
 *     - Interrupt the ATB Gauge if it is currently casting?
 * 
 * ---
 * 
 * MECH: Boost Points Change
 * - Changes Boost Points for target(s).
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Boost Points for.
 * 
 *   Alter Boost Points By:
 *   - Alters the unit(s) Boost Points.
 *   - Positive for gaining points. Negative for losing points.
 * 
 * ---
 * 
 * MECH: Boost Store Data
 * - Stores the number of Boosts used this action inside a variable.
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Variable ID:
 *   - Which variable do you want to store the data inside?
 * 
 * ---
 * 
 * MECH: Break Shield Change
 * - Changes Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Break Shields for.
 * 
 *   Alter Break Shields By:
 *   - Alters the unit(s) Break Shields.
 *   - Positive for gaining shields. Negative for losing shields.
 * 
 * ---
 * 
 * MECH: Break Shield Reset
 * - Resets Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to reset the Break Shields for.
 * 
 * ---
 * 
 * MECH: BTB Brave Points
 * - Alters the target(s) Brave Points to an exact value.
 * - Requires VisuMZ_2_BattleSystemBTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Alter Brave Points By:
 *   - Alters the target(s) Brave Points.
 *   - Positive for gaining BP.
 *   - Negative for losing BP.
 * 
 * ---
 *
 * MECH: Collapse
 * - Causes the unit(s) to perform its collapse animation if the unit(s)
 *   has died.
 *
 *   Targets:
 *   - Select unit(s) to process a death collapse.
 *
 *   Force Death:
 *   - Force death even if the unit has not reached 0 HP?
 *   - This will remove immortality.
 *
 *   Wait For Effect?:
 *   - Wait for the collapse effect to complete before performing next command?
 *
 * ---
 * 
 * MECH: CTB Order
 * - Alters the CTB Turn Order.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Turn Order for.
 * 
 *   Change Order By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: CTB Speed
 * - Alters the CTB Speed.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Speed for.
 * 
 *   Charge Rate:
 *   - Changes made to the CTB Speed if it is currently charging.
 * 
 *   Cast Rate:
 *   - Changes made to the CTB Speed if it is currently casting.
 * 
 * ---
 * 
 * MECH: Custom Damage Formula
 * - Changes the current action's damage formula to custom.
 * - This will assume the MANUAL damage style.
 * 
 *   Formula:
 *   - Changes the current action's damage formula to custom.
 *   - Use 'default' to revert the damage formula.
 * 
 * ---
 *
 * MECH: Damage Popup
 * - Causes the unit(s) to display the current state of damage received
 *   or healed.
 *
 *   Targets:
 *   - Select unit(s) to prompt a damage popup.
 *
 * ---
 *
 * MECH: Dead Label Jump
 * - If the active battler is dead, jump to a specific label in the
 *   common event.
 *
 *   Jump To Label:
 *   - If the active battler is dead, jump to this specific label in the
 *     common event.
 *
 * ---
 * 
 * MECH: Emulate Attack Effect
 * - Emulate an "Action Effect" but using a the user's attack skill instead of
 *   the current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Guard Effect
 * - Emulate an "Action Effect" but using a the user's guard skill instead of
 *   the current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Item Effect
 * - Emulate an "Action Effect" but using a specific item instead of the
 *   current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   Item ID:
 *   - Which item ID will be emulated?
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Skill Cost
 * - Pick a skill for target(s) to emulate paying the cost of.
 * - Lets you cause characters to perform paying the costs of a specific skill
 *   without needing to actually use them.
 * - This will include Skill Cooldowns and Limited Skill Uses.
 * 
 *   Skill ID:
 *   - Which skill ID will have its cost paid for?
 *   - Use 0 for current action's skill.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Skill Effect
 * - Emulate an "Action Effect" but using a specific skill instead of the
 *   current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   Skill ID:
 *   - Which skill ID will be emulated?
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 *
 * MECH: Enemy Escape
 * - Causes the enemy unit(s) to escape.
 *
 *   Targets:
 *   - Select unit(s) to escape.
 *
 * ---
 *
 * MECH: ETB Energy Count
 * - Alters the subject team's available Energy Count.
 * - Requires VisuMZ_2_BattleSystemETB!
 *
 *   Energy Count:
 *   - Alters the subject team's available Energy Count.
 *   - Positive for gaining energy. Negative for losing energy.
 *
 * ---
 *
 * MECH: FTB Action Count
 * - Alters the subject team's available Action Count.
 * - Requires VisuMZ_2_BattleSystemFTB!
 *
 *   Action Count:
 *   - Alters the subject team's available Action Count.
 *   - Positive for gaining actions. Negative for losing actions.
 *
 * ---
 *
 * MECH: HP, MP, TP
 * - Alters the HP, MP, and TP values for unit(s).
 * - Positive values for healing. Negative values for damage.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 *   HP, MP, TP:
 *
 *     Rate:
 *     - Changes made to the parameter based on rate.
 *     - Positive values for healing. Negative values for damage.
 *
 *     Flat:
 *     - Flat changes made to the parameter.
 *     - Positive values for healing. Negative values for damage.
 *
 *   Damage Popup?:
 *   - Display a damage popup after?
 *
 * ---
 *
 * MECH: Immortal
 * - Changes the immortal flag of targets. If immortal flag is removed and a
 *   unit would die, collapse that unit.
 *
 *   Targets:
 *   - Alter the immortal flag of these groups. If immortal flag is removed and
 *     a unit would die, collapse that unit.
 *
 *   Immortal:
 *   - Turn immortal flag for unit(s) on/off?
 *
 * ---
 *
 * MECH: Multipliers
 * - Changes the multipliers for the current action.
 * - You may use JavaScript code for any of these.
 *
 *   Critical Hit%:
 *
 *     Rate:
 *     - Affects chance to land a critical hit by this multiplier.
 *
 *     Flat:
 *     - Affects chance to land a critical hit by this flat bonus.
 *
 *   Critical Damage
 *
 *     Rate:
 *     - Affects critical damage by this multiplier.
 *
 *     Flat:
 *     - Affects critical damage by this flat bonus.
 *
 *   Damage/Healing
 *
 *     Rate:
 *     - Sets the damage/healing multiplier for current action.
 *
 *     Flat:
 *     - Sets the damage/healing bonus for current action.
 *
 *   Hit Rate
 *
 *     Rate:
 *     - Affects chance to connect attack by this multiplier.
 *
 *     Flat:
 *     - Affects chance to connect attack by this flat bonus.
 *
 * ---
 * 
 * MECH: Once Parallel
 * - Plays a Common Event parallel to the battle event once without repeating
 *   itself when done.
 * 
 *   Common Event ID:
 *   - The ID of the parallel Common Event to play.
 *   - Does NOT repeat itself when finished.
 *   - When exiting battle scene, all Once Parallels are cleared.
 *   - Once Parallels are not retained upon reentering the scene.
 *   - Once Parallels are not stored in memory and cannot be saved.
 * 
 * ---
 * 
 * MECH: OTB Order
 * - Alters the OTB Turn Order. Best used with single targets.
 * - Requires VisuMZ_2_BattleSystemOTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the OTB Turn Order for.
 * 
 *   Current Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Next Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Follow Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: PTB Alter Cost
 * - Alters the action's cost settings.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Override?:
 *   - Overrides any 'permanent' settings for Changeability?
 * 
 *   Alter Changeability:
 *   - Allow the cost type and value to be changeable?
 * 
 *   Alter Cost Type:
 *   - Change the cost type to this scenario.
 *   - Use 'Unchanged' for no changes.
 * 
 *   Alter Cost Value:
 *   - What is the default action cost for this scenario?
 * 
 *   Priority:
 *   - What is this scenario's priority? Scenario outcomes with equal or lower
 *     priorities cannot override types and costs.
 * 
 * ---
 * 
 * MECH: PTB Conversion
 * - Converts full actions into half actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Conversion Count:
 *   - Converts full actions into half actions.
 *   - If not enough, consume half actions.
 * 
 * ---
 * 
 * MECH: PTB Full/Half Action(s)
 * - Alters the subject team's available Full/Half Actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Full Actions:
 *   - Alters the subject team's available Full Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 *   Half Actions:
 *   - Alters the subject team's available Half Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 * ---
 *
 * MECH: Remove Buff/Debuff
 * - Removes buff(s)/debuff(s) from unit(s). 
 * - Determine which parameters are removed.
 *
 *   Targets:
 *   - Select unit(s) to have the buff(s) and/or debuff(s) removed.
 *
 *   Buff Parameters:
 *   - Select which buffed parameter(s) to remove.
 *
 *   Debuff Parameters:
 *   - Select which debuffed parameter(s) to remove.
 *
 * ---
 *
 * MECH: Remove State
 * - Remove state(s) from unit(s).
 *
 *   Targets:
 *   - Select unit(s) to have states removed from.
 *
 *   States:
 *   - Select which state ID(s) to remove from unit(s).
 *   - Insert multiple state ID's to remove multiple at once.
 *
 * ---
 * 
 * MECH: State Turns Change By
 * - Changes target(s) state turns by an amount.
 * - Requires VisuMZ_1_SkillsStatesCore!
 * 
 *   Targets:
 *   - Select unit(s) to affect state turns for.
 * 
 *   State ID:
 *   - What is the ID of the state you wish to change turns for?
 *   - Only works on states that can have turns.
 * 
 *   Change Turns By:
 *   - How many turns should the state be changed to?
 *   - You may use JavaScript code.
 * 
 *   Auto-Add State?:
 *   - Automatically adds state if actor(s) does not have it applied?
 * 
 * ---
 * 
 * MECH: State Turns Change To
 * - Changes target(s) state turns to a specific value.
 * - Requires VisuMZ_1_SkillsStatesCore!
 * 
 *   Targets:
 *   - Select unit(s) to affect state turns for.
 * 
 *   State ID:
 *   - What is the ID of the state you wish to change turns for?
 *   - Only works on states that can have turns.
 * 
 *   Change Turns To:
 *   - How many turns should the state be changed to?
 *   - You may use JavaScript code.
 * 
 *   Auto-Add State?:
 *   - Automatically adds state if target(s) does not have it applied?
 * 
 * ---
 * 
 * MECH: STB Exploit Effect
 * - Utilize the STB Exploitation mechanics!
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Target(s) Exploited?:
 *   - Exploit the below targets?
 * 
 *     Targets:
 *     - Select unit(s) to become exploited.
 * 
 *     Force Exploitation:
 *     - Force the exploited status?
 * 
 *   User Exploiter?:
 *   - Allow the user to become the exploiter?
 * 
 *     Force Exploitation:
 *     - Force the exploiter status?
 * 
 * ---
 * 
 * MECH: STB Extra Action
 * - Adds an extra action for the currently active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Extra Actions:
 *   - How many extra actions should the active battler gain?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: STB Remove Excess Actions
 * - Removes excess actions from the active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Remove Actions:
 *   - How many actions to remove from the active battler?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: Swap Weapon
 * - Causes the unit(s) to swap their weapon for another.
 * - Requires VisuMZ_2_WeaponSwapSystem!
 * 
 *   Targets:
 *   - Select unit(s) to swap weapons for.
 * 
 *   Weapon Type ID:
 *   - Which weapon type to swap to?
 *   - This is NOT the weapon's ID.
 *   - It's the weapon TYPE.
 * 
 * ---
 * 
 * MECH: Text Popup
 * - Causes the unit(s) to display a text popup.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Text:
 *   - What text do you wish to display?
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 * 
 * MECH: Variable Popup
 * - Causes the unit(s) to display a popup using the data stored inside
 *   a variable.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Variable:
 *   - Get data from which variable to display as a popup?
 * 
 *   Digit Grouping:
 *   - Use digit grouping to separate numbers?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 *
 * MECH: Wait For Effect
 * - Waits for the effects to complete before performing next command.
 *
 * ---
 *
 * === Action Sequences - Motion ===
 *
 * These Action Sequences allow you the ability to control the motions of
 * sideview sprites.
 *
 * ---
 * 
 * MOTION: Clear Freeze Frame
 * - Clears any freeze frames from the unit(s).
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to clear freeze frames for.
 * 
 * ---
 * 
 * MOTION: Freeze Motion Frame
 * - Forces a freeze frame instantly at the selected motion.
 * - Automatically clears with a new motion.
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to freeze motions for.
 * 
 *   Motion Type:
 *   - Freeze this motion for the unit(s).
 * 
 *   Frame Index:
 *   - Which frame do you want to freeze the motion on?
 *   - Frame index values start at 0.
 * 
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 * 
 * ---
 *
 * MOTION: Motion Type
 * - Causes the unit(s) to play the selected motion.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 *   Motion Type:
 *   - Play this motion for the unit(s).
 *
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 *
 * ---
 *
 * MOTION: Perform Action
 * - Causes the unit(s) to play the proper motion based on the current action.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 * ---
 *
 * MOTION: Refresh Motion
 * - Cancels any set motions unit(s) has to do and use their most natural
 *   motion at the moment.
 *
 *   Targets:
 *   - Select which unit(s) to refresh their motion state.
 *
 * ---
 *
 * MOTION: Wait By Motion Frame
 * - Creates a wait equal to the number of motion frames passing.
 * - Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 *   Motion Frames to Wait?:
 *   - Each "frame" is equal to the value found in 
 *     Plugin Parameters => Actors => Motion Speed
 *
 * ---
 *
 * === Action Sequences - Movement ===
 *
 * These Action Sequences allow you the ability to control the sprites of
 * actors and enemies in battle.
 *
 * ---
 *
 * MOVE: Battle Step
 * - Causes the unit(s) to move forward past their home position to prepare
 *   for action.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home By Distance
 * - Change unit(s)'s home position by a distance from their current home
 *   position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     change by.
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To JS Coordinates
 * - Change home position(s) to specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s)'s new home
 *     position.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Point
 * - Change home position(s) to a target point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to change home position to.
 *
 *     Target Location:
 *     - Select which part target group to change home position to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Face Direction
 * - Causes the unit(s) to face forward or backward.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Direction:
 *   - Select which direction to face.
 *
 * ---
 *
 * MOVE: Face JS Coordinates
 * - Causes the unit(s) to face specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s) to face
 *     towards.
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Point
 * - Causes the unit(s) to face a point on the screen.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Target(s)
 * - Causes the unit(s) to face other targets on the screen.
 * - Sideview-only!
 *
 *   Targets (facing):
 *   - Select which unit(s) to change direction.
 *
 *   Targets (destination):
 *   - Select which unit(s) for the turning unit(s) to face.
 *
 *   Face Away From?:
 *   - Face away from the unit(s) instead?
 *
 * ---
 *
 * MOVE: Float
 * - Causes the unit(s) to float above the ground.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make float.
 *
 *   Desired Height:
 *   - Vertical distance to float upward.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total float amount.
 *
 *   Float Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Float?:
 *   - Wait for floating to complete before performing next command?
 *
 * ---
 *
 * MOVE: Home Reset
 * - Causes the unit(s) to move back to their home position(s) and face back to
 *   their original direction(s).
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Jump
 * - Causes the unit(s) to jump into the air.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make jump.
 *
 *   Desired Height:
 *   - Max jump height to go above the ground
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total jump amount.
 *
 *   Wait For Jump?:
 *   - Wait for jumping to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move Distance
 * - Moves unit(s) by a distance from their current position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     move unit(s).
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To JS Coordinates
 * - Moves unit(s) to specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s) to move to.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Point
 * - Moves unit(s) to a designated point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to move.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to move to.
 *
 *     Target Location:
 *     - Select which part target group to move to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Opacity
 * - Causes the unit(s) to change opacity.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change opacity.
 *
 *   Desired Opacity:
 *   - Change to this opacity value.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for opacity change.
 *
 *   Opacity Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Opacity?:
 *   - Wait for opacity changes to complete before performing next command?
 *
 * ---
 *
 * MOVE: Scale/Grow/Shrink
 * - Causes the unit(s) to scale, grow, or shrink?.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change the scale of.
 *
 *   Scale X:
 *   Scale Y:
 *   - What target scale value do you want?
 *   - 1.0 is normal size.
 *
 *   Duration:
 *   - Duration in frames to scale for.
 *
 *   Scale Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Scale?:
 *   - Wait for scaling to complete before performing next command?
 *
 * ---
 *
 * MOVE: Skew/Distort
 * - Causes the unit(s) to skew.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to skew.
 *
 *   Skew X:
 *   Skew Y:
 *   - What variance to skew?
 *   - Use small values for the best results.
 *
 *   Duration:
 *   - Duration in frames to skew for.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew to complete before performing next command?
 *
 * ---
 *
 * MOVE: Spin/Rotate
 * - Causes the unit(s) to spin.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to spin.
 *
 *   Angle:
 *   - How many degrees to spin?
 *
 *   Duration:
 *   - Duration in frames to spin for.
 *
 *   Spin Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 * 
 *   Revert Angle on Finish:
 *   - Upon finishing the spin, revert the angle back to 0.
 *
 *   Wait For Spin?:
 *   - Wait for spin to complete before performing next command?
 *
 * ---
 *
 * MOVE: Wait For Float
 * - Waits for floating to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Jump
 * - Waits for jumping to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Movement
 * - Waits for movement to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Opacity
 * - Waits for opacity changes to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Scale
 * - Waits for scaling to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Skew
 * - Waits for skewing to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Spin
 * - Waits for spinning to complete before performing next command.
 *
 * ---
 * 
 * === Action Sequences - Projectiles ===
 * 
 * Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * ---
 *
 * PROJECTILE: Animation
 * - Create an animation projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Animation ID:
 *     - Determine which animation to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 * 
 *     Wait For Animation?:
 *     - Wait for animation to finish before going to the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 *
 * ---
 *
 * PROJECTILE: Icon
 * - Create an icon projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Icon:
 *     - Determine which icon to use as a projectile.
 *       - You may use JavaScript code.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 *
 * ---
 *
 * PROJECTILE: Picture
 * - Create a picture projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Picture Filename:
 *     - Determine which picture to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 *
 * ---
 * 
 * === Action Sequences - Skew ===
 * 
 * These action sequences allow you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * SKEW: Change Skew
 * - Changes the camera skew.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Skew X:
 *   - Change the camera skew X to this value.
 *
 *   Skew Y:
 *   - Change the camera skew Y to this value.
 *
 *   Duration:
 *   - Duration in frames to change camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Reset Skew
 * - Reset any skew settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Wait For Skew
 * - Waits for skew changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Target ===
 *
 * If using a manual target by target Action Sequence, these commands will give
 * you full control over its usage.
 *
 * ---
 *
 * TARGET: Current Index
 * - Sets the current index to this value.
 * - Then decide to jump to a label (optional).
 *
 *   Set Index To:
 *   - Sets current targeting index to this value.
 *   - 0 is the starting index of a target group.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Next Target
 * - Moves index forward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Previous Target
 * - Moves index backward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Random Target
 * - Sets index randomly to determine new currernt target.
 * - Then decide to jump to a label (optional).
 *
 *   Force Random?:
 *   - Index cannot be its previous index amount after random.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 * 
 * === Action Sequences - Voice ==
 * 
 * ---
 *
 * VOICE: Common Line
 * - Plays a common voice line from target battler(s).
 * - Requires VisuMZ_3_BattleVoices!
 *
 *   Speaker Target(s):
 *   - Select unit(s) to play voice lines from.
 *
 *   Voice Line:
 *   - What voice line do you wish to play?
 *
 * ---
 *
 * VOICE: Play Special Line
 * - Plays a special voice line from target battler(s).
 * - Requires VisuMZ_3_BattleVoices!
 *
 *   Speaker Target(s):
 *   - Select unit(s) to play voice lines from.
 *
 *   Voice Line Type:
 *   - What voice line type do you wish to play?
 *     - Action Name
 *     - Chant Line
 *     - Item Name
 *     - Skill Name
 *     - Spell Name
 *     - Unique Lines
 *
 *   Name / Letter:
 *   - What voice letter/name do you want to play?
 *
 * ---
 *
 * === Action Sequences - Weapon ===
 *
 * Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * ---
 *
 * WEAPON: Clear Weapon Slot
 * - Clears the active weapon slot (making others valid again).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to clear the active weapon slot for.
 *
 * ---
 *
 * WEAPON: Next Weapon Slot
 * - Goes to next active weapon slot (making others invalid).
 * - If next slot is weaponless, don't label jump.
 *
 *   Targets:
 *   - Select unit(s) to change the next active weapon slot for.
 *
 * ---
 *
 * WEAPON: Set Weapon Slot
 * - Sets the active weapon slot (making others invalid).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to change the active weapon slot for.
 *
 *   Weapon Slot ID:
 *   - Select weapon slot to make active (making others invalid).
 *   - Use 0 to clear and normalize. You may use JavaScript code.
 *
 * ---
 *
 * === Action Sequences - Zoom ===
 *
 * These Action Sequences are zoom-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ZOOM: Change Scale
 * - Changes the zoom scale.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Scale:
 *   - The zoom scale to change to.
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Reset Zoom
 * - Reset any zoom settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Wait For Zoom
 * - Waits for zoom changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Auto Battle Settings
 * ============================================================================
 *
 * These Plugin Parameter settings allow you to change the aspects added by
 * this plugin that support Auto Battle and the Auto Battle commands.
 *
 * Auto Battle commands can be added to the Party Command Window and/or Actor
 * Command Window. The one used by the Party Command Window will cause the
 * whole party to enter an Auto Battle state until stopped by a button input.
 * The command used by the Actor Command Window, however, will cause the actor
 * to select an action based off the Auto Battle A.I. once for the current turn
 * instead.
 *
 * ---
 *
 * Battle Display
 * 
 *   Message:
 *   - Message that's displayed when Auto Battle is on.
 *     Text codes allowed. %1 - OK button, %2 - Cancel button
 * 
 *   OK Button:
 *   - Text used to represent the OK button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Cancel Button:
 *   - Text used to represent the Cancel button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Background Type:
 *   - Select background type for Auto Battle window.
 *     - 0 - Window
 *     - 1 - Dim
 *     - 2 - Transparent
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the Auto Battle options to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Startup Name:
 *   - Command name of the option.
 * 
 *   Style Name:
 *   - Command name of the option.
 * 
 *   OFF:
 *   - Text displayed when Auto Battle Style is OFF.
 * 
 *   ON:
 *   - Text displayed when Auto Battle Style is ON.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Settings
 * ============================================================================
 *
 * These Plugin Parameters add a variety of things to how damage is handled in
 * battle. These range from hard damage caps to soft damage caps to how damage
 * popups appear, how the formulas for various aspects are handled and more.
 *
 * Damage Styles are also a feature added through this plugin. More information
 * can be found in the help section above labeled 'Damage Styles'.
 *
 * ---
 *
 * Damage Styles
 * 
 *   Default Style:
 *   - Which Damage Style do you want to set as default?
 *   - Use 'Manual' to not use any styles at all.
 *     - The 'Manual' style will not support <Armor Penetration> notetags.
 *     - The 'Manual' style will not support <Armor Reduction> notetags.
 * 
 *   Style List:
 *   - A list of the damage styles available.
 *   - These are used to calculate base damage.
 * 
 *     Name:
 *     - Name of this Damage Style.
 *     -Used for notetags and such.
 * 
 *     JS: Formula:
 *     - The base formula for this Damage Style.
 * 
 *     Items & Equips Core:
 * 
 *       HP Damage:
 *       MP Damage:
 *       HP Recovery:
 *       MP Recovery:
 *       HP Drain:
 *       MP Drain:
 *       - Vocabulary used for this data entry.
 * 
 *       JS: Damage Display:
 *       - Code used the data displayed for this category.
 *
 * ---
 *
 * Damage Cap
 * 
 *   Enable Damage Cap?:
 *   - Put a maximum hard damage cap on how far damage can go?
 *   - This can be broken through the usage of notetags.
 * 
 *   Default Hard Cap:
 *   - The default hard damage cap used before applying damage.
 * 
 *   Enable Soft Cap?:
 *   - Soft caps ease in the damage values leading up to the  hard damage cap.
 *   - Requires hard Damage Cap enabled.
 * 
 *     Base Soft Cap Rate:
 *     - The default soft damage cap used before applying damage.
 * 
 *     Soft Scale Constant:
 *     - The default soft damage cap used before applying damage.
 *
 * ---
 *
 * Popups
 * 
 *   Popup Duration:
 *   - Adjusts how many frames a popup stays visible.
 * 
 *   Newest Popups Bottom:
 *   - Puts the newest popups at the bottom.
 * 
 *   End Battle Show?:
 *   - Show or hide popups upon victory or escape?
 *   - Used to hide battle-state removal popups.
 * 
 *   Offset X:
 *   Offset Y:
 *   - Sets how much to offset the sprites by horizontally/vertically.
 * 
 *   Shift X:
 *   Shift Y:
 *   - Sets how much to shift the sprites by horizontally/vertically.
 * 
 *   Shift Y:
 * 
 *   Critical Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Critical Duration:
 *   - Adjusts how many frames a the flash lasts.
 *
 * ---
 *
 * Formulas
 * 
 *   JS: Overall Formula:
 *   - The overall formula used when calculating damage.
 * 
 *   JS: Variance Formula:
 *   - The formula used when damage variance.
 * 
 *   JS: Guard Formula:
 *   - The formula used when damage is guarded.
 *
 * ---
 *
 * Critical Hits
 * 
 *   JS: Rate Formula:
 *   - The formula used to calculate Critical Hit Rates.
 * 
 *   JS: Damage Formula:
 *   - The formula used to calculate Critical Hit Damage modification.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Mechanics Settings
 * ============================================================================
 *
 * Some of the base settings for the various mechanics found in the battle
 * system can be altered here in these Plugin Parameters. Most of these will
 * involve JavaScript code and require you to have to good understanding of
 * how the RPG Maker MZ code works before tampering with it.
 *
 * ---
 *
 * Action Speed
 * 
 *   Allow Random Speed?:
 *   - Allow speed to be randomized base off the user's AGI?
 * 
 *   Turn End Buffs Expire?:
 *   - Normally, buffs expire after all actions end.
 *   - But here, you can have buffs expire on turn end.
 * 
 *   JS: Calculate:
 *   - Code used to calculate action speed.
 *
 * ---
 *
 * Base Troop
 * 
 *   Base Troop ID's:
 *   - Select the Troop ID(s) to duplicate page events from for all
 *     other troops.
 *   - More information can be found in the dedicated Help section above.
 *
 * ---
 * 
 * Common Events (on Map)
 * 
 *   Pre-Battle Event:
 *   Post-Battle Event:
 *   Victory Event:
 *   Defeat Event:
 *   Escape Success Event:
 *   Escape Fail Event:
 *   - Queued Common Event to run upon meeting the condition.
 *   - Use to 0 to not run any Common Event at all.
 *   - "Post-Battle Event" will always run regardless.
 *   - If any events are running before the battle, they will continue running
 *     to the end first before the queued Common Events will run.
 *   - These common events only run on the map scene. They're not meant to run
 *     in the battle scene.
 *   - If the "Defeat Event" has a common event attached to it, then random
 *     encounters will be changed to allow defeat without being sent to the
 *     Game Over scene. Instead, the game will send the player to the map scene
 *     where the Defeat Event will run.
 *
 * ---
 *
 * Escape
 * 
 *   JS: Calc Escape Ratio:
 *   - Code used to calculate the escape success ratio.
 * 
 *   JS: Calc Escape Raise:
 *   - Code used to calculate how much the escape success ratio raises upon
 *     each failure.
 * 
 * ---
 * 
 * Switches
 * 
 *   Switch: Critical:
 *   - Turns switch ON if the action performs a critical hit.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit lands a critical
 *     hit, then the switch will remain ON for the rest of the action.
 * 
 *   Switch: Miss/Evade:
 *   - Turns switch ON if the action misses/is evaded.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit fails to land,
 *     then the switch will remain ON for the rest of the action.
 * 
 * ---
 * 
 * Variables
 * 
 *   Variable: Damage:
 *   - Variable records target damage during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of damage done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 *   Variable: Healing:
 *   - Variable records target healing during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of healing done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 * ---
 *
 * JS: Battle-Related
 * 
 *   JS: Pre-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Battle Victory:
 *   - Target function: BattleManager.processVictory()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Success:
 *   - Target function: BattleManager.onEscapeSuccess()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Failure:
 *   - Target function: BattleManager.onEscapeFailure()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Battle Defeat:
 *   - Target function: BattleManager.processDefeat()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Turn-Related
 * 
 *   JS: Pre-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Action-Related
 * 
 *   JS: Pre-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Post-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Action:
 *   - Target function: BattleManager.endAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Action:
 *   - DescriTarget function: BattleManager.endAction()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Layout Settings
 * ============================================================================
 *
 * The Battle Layout Settings Plugin Parameter gives you control over the look,
 * style, and appearance of certain UI elements. These range from the way the
 * Battle Status Window presents its information to the way certain windows
 * like the Party Command Window and Actor Command Window appear.
 *
 * ---
 *
 * Battle Layout Style
 * - The style used for the battle layout.
 * 
 *   Default:
 *   - Shows actor faces in Battle Status.
 * 
 *   List:
 *   - Lists actors in Battle Status.
 * 
 *   XP:
 *   - Shows actor battlers in a stretched Battle Status.
 * 
 *   Portrait:
 *   - Shows portraits in a stretched Battle Status.
 * 
 *   Border:
 *   - Displays windows around the screen border.
 *
 * ---
 *
 * List Style
 * 
 *   Show Faces:
 *   - Shows faces in List Style?
 * 
 *   Command Window Width:
 *   - Determine the window width for the Party and Actor Command Windows.
 *   - Affects Default and List Battle Layout styles.
 *
 * ---
 *
 * XP Style
 * 
 *   Command Lines:
 *   - Number of action lines in the Actor Command Window for the XP Style.
 * 
 *   Sprite Height:
 *   - Default sprite height used when if the sprite's height has not been
 *     determined yet.
 * 
 *   Sprite Base Location:
 *   - Determine where the sprite is located on the Battle Status Window.
 *     - Above Name - Sprite is located above the name.
 *     - Bottom - Sprite is located at the bottom of the window.
 *     - Centered - Sprite is centered in the window.
 *     - Top - Sprite is located at the top of the window.
 *
 * ---
 *
 * Portrait Style
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait instead of a face.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Border Style
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait at the edge of the screen.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Skill & Item Windows
 * 
 *   Middle Layout:
 *   - Shows the Skill & Item Windows in mid-screen?
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 *
 * ---
 * 
 * Status Window Elements
 * 
 *   Battler Name:
 *   Gauge 1 (HP):
 *   Gauge 2 (MP):
 *   Gauge 3 (TP):
 *   State Icon:
 *   TPB/ATB Gauge:
 * 
 *     Offset: X/Y:
 *     - Offset this Battle Status Window element's X/Y.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Window Skin:
 * 
 *     Filename:
 *     - Filename used for the Battle Status Window skin.
 *     - Leave this empty to use the default window skin.
 * 
 *     Hide Window Skin?:
 *     - Hide the window skin for the Battle Status Window?
 * 
 *   Selectable Background:
 * 
 *     Hide Selectable BG?:
 *     - Show/Hide the selectable background box for the Battle Status Window?
 * 
 *   Attachments:
 * 
 *     Back Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the back of the Battle
 *         Status Window. Leave empty for none.
 * 
 *       Offset: X/Y:
 *       - Offset this Battle Status Window element's X/Y.
 *       - For X: Negative goes left. Positive goes right.
 *       - For Y: Negative goes up. Positive goes down.
 * 
 *     Front Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the front of the Battle
 *         Status Window. Leave empty for none.
 * 
 * ---
 * 
 * UI Elements
 * 
 *   Anti-Tint UI?
 *   - Prevent UI Elements from being tinted?
 *   - This prevents UI Elements such as HP Gauges, Enemy Names, Battle Cursor,
 *     and Weakness Display from being affected by screen tint.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Log Settings
 * ============================================================================
 *
 * These Plugin Parameters give you control over how the Battle Log Window, the
 * window shown at the top of the screen in the battle layout, appears, its
 * various properties, and which text will be displayed.
 *
 * The majority of the text has been disabled by default with this plugin to
 * make the flow of battle progress faster.
 *
 * ---
 *
 * General
 * 
 *   Back Color:
 *   - Use #rrggbb for a hex color.
 * 
 *   Max Lines:
 *   - Maximum number of lines to be displayed.
 * 
 *   Message Wait:
 *   - Number of frames for a usual message wait.
 * 
 *   Text Align:
 *   - Text alignment for the Window_BattleLog.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for the battle log.
 *
 * ---
 *
 * Start Turn
 * 
 *   Show Start Turn?:
 *   - Display turn changes at the start of the turn?
 * 
 *   Start Turn Message:
 *   - Message displayed at turn start.
 *   - %1 - Turn Count
 * 
 *   Start Turn Wait:
 *   - Number of frames to wait after a turn started.
 *
 * ---
 *
 * Display Action
 * 
 *   Show Centered Action?:
 *   - Display a centered text of the action name?
 * 
 *   Show Skill Message 1?:
 *   - Display the 1st skill message?
 * 
 *   Show Skill Message 2?:
 *   - Display the 2nd skill message?
 * 
 *   Show Item Message?:
 *   - Display the item use message?
 *
 * ---
 *
 * Action Changes
 * 
 *   Show Counter?:
 *   - Display counter text?
 * 
 *   Show Reflect?:
 *   - Display magic reflection text?
 * 
 *   Show Substitute?:
 *   - Display substitute text?
 *
 * ---
 *
 * Action Results
 * 
 *   Show No Effect?:
 *   - Display no effect text?
 * 
 *   Show Critical?:
 *   - Display critical text?
 * 
 *   Show Miss/Evasion?:
 *   - Display miss/evasion text?
 * 
 *   Show HP Damage?:
 *   - Display HP Damage text?
 * 
 *   Show MP Damage?:
 *   - Display MP Damage text?
 * 
 *   Show TP Damage?:
 *   - Display TP Damage text?
 *
 * ---
 *
 * Display States
 * 
 *   Show Added States?:
 *   - Display added states text?
 * 
 *   Show Removed States?:
 *   - Display removed states text?
 * 
 *   Show Current States?:
 *   - Display the currently affected state text?
 * 
 *   Show Added Buffs?:
 *   - Display added buffs text?
 * 
 *   Show Added Debuffs?:
 *   - Display added debuffs text?
 * 
 *   Show Removed Buffs?:
 *   - Display removed de/buffs text?
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battleback Scaling Settings
 * ============================================================================
 *
 * By default, the battlebacks in RPG Maker MZ scale as if the screen size is
 * a static 816x624 resolution, which isn't always the case. These settings
 * here allow you to dictate how you want the battlebacks to scale for the
 * whole game. These settings CANNOT be changed midgame or per battle.
 *
 * ---
 *
 * Settings
 * 
 *   Default Style:
 *   - The default scaling style used for battlebacks.
 *   - MZ (MZ's default style)
 *   - 1:1 (No Scaling)
 *   - Scale To Fit (Scale to screen size)
 *   - Scale Down (Scale Downward if Larger than Screen)
 *   - Scale Up (Scale Upward if Smaller than Screen)
 * 
 *   JS: 1:1:
 *   JS: Scale To Fit:
 *   JS: Scale Down:
 *   JS: Scale Up:
 *   - This code gives you control over the scaling for this style.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Party Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you control over how the Party Command Window
 * operates in the battle scene. You can turn disable it from appearing or make
 * it so that it doesn't 
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Party Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Party Command Window.
 * 
 *   Fight Icon:
 *   - The icon used for the Fight command.
 * 
 *   Add Auto Battle?:
 *   - Add the "Auto Battle" command to the Command Window?
 * 
 *     Auto Battle Icon:
 *     - The icon used for the Auto Battle command.
 * 
 *     Auto Battle Text:
 *     - The text used for the Auto Battle command.
 * 
 *   Add Options?:
 *   - Add the "Options" command to the Command Window?
 * 
 *     Options Icon:
 *     - The icon used for the Options command.
 * 
 *     Active TPB Message:
 *     - Message that will be displayed when selecting options during the
 *       middle of an action.
 * 
 *   Escape Icon:
 *   - The icon used for the Escape command.
 *
 * ---
 *
 * Access
 * 
 *   Skip Party Command:
 *   - DTB: Skip Party Command selection on turn start.
 *   - TPB: Skip Party Command selection at battle start.
 * 
 *   Disable Party Command:
 *   - Disable the Party Command Window entirely?
 *
 * ---
 *
 * Help Window
 * 
 *   Fight:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 * 
 *   Options:
 *   - Text displayed when selecting the Options command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you to change various aspects regarding the
 * Actor Command Window and how it operates in the battle scene. This ranges
 * from how it appears to the default battle commands given to all players
 * without a custom <Battle Commands> notetag.
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Actor Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Actor Command Window.
 * 
 *   Item Icon:
 *   - The icon used for the Item command.
 * 
 *   Normal SType Icon:
 *   - Icon used for normal skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * 
 *   Magic SType Icon:
 *   - Icon used for magic skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 *
 * ---
 *
 * Battle Commands
 * 
 *   Command List:
 *   - List of battle commands that appear by default if the <Battle Commands>
 *     notetag isn't present.
 *
 *     - Attack 
 *       - Adds the basic attack command.
 * 
 *     - Skills
 *       - Displays all the skill types available to the actor.
 * 
 *     - SType: x
 *     - Stype: name
 *       - Adds in a specific skill type.
 *       - Replace 'x' with the ID of the skill type.
 *       - Replace 'name' with the name of the skill type (without text codes).
 *
 *     - All Skills
 *       - Adds all usable battle skills as individual actions.
 * 
 *     - Skill: x
 *     - Skill: name
 *       - Adds in a specific skill as a usable action.
 *       - Replace 'x' with the ID of the skill.
 *       - Replace 'name' with the name of the skill.
 * 
 *     - Guard
 *       - Adds the basic guard command.
 * 
 *     - Item
 *       - Adds the basic item command.
 * 
 *     - Escape
 *       - Adds the escape command.
 * 
 *     - Auto Battle
 *       - Adds the auto battle command.
 * 
 *     - Party
 *       - Requires VisuMZ_2_PartySystem!
 *       - Switches out the current actor for another.
 * 
 *     - Combat Log
 *       - Requires VisuMZ_4_CombatLog!
 *       - Shows combat log.
 * 
 *     - Talk
 *       - Requires VisuMZ_3_BattleCmdTalk!
 *       - Shows talk command if applicable.
 * 
 *     - Weapon Swap
 *       - Requires VisuMZ_2_WeaponSwapSystem!
 *       - Swaps current weapon for next one.
 * 
 *   Show Command Costs:
 *   - If a battle command has a resource cost, show it?
 *
 * ---
 *
 * Help Window
 * 
 *   Skill Types:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Items:
 *   - Text displayed when selecting the item command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Multi-Target Windows Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters adjust how the Multi-Target Windows appear
 * in battle. These windows are visible when selecting an enemy or actor while
 * using a skill/item that has the <Single or Multiple Select> notetag.
 * 
 * Those wondering why this isn't regulated to a command left or right of the
 * enemies and actors is because mouse controls and touch controls would not be
 * able to select all enemies or all allies that way.
 *
 * ---
 * 
 * Properties
 * 
 *   Window Width:
 *   - What is the width used for the Multi-Target Window?
 * 
 *   Background Type:
 *   - Select background type for these windows.
 * 
 *   Show Button:
 *   - Shows the keyboard/controller button to press?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 * ---
 * 
 * Vocab
 * 
 *   All Actors:
 *   - What is the text used for the "All Actors" button?
 * 
 *   All Enemies:
 *   - What is the text used for the "All Enemies" button?
 * 
 * ---
 * 
 * Offsets > Actor Offsets
 * Offsets > Enemy Offsets
 * 
 *   Offset X:
 *   - Offsets the button's x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the button's y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how the sideview battlers behave for
 * the actor sprites. Some of these settings are shared with enemies if they
 * use sideview battler graphics.
 *
 * ---
 *
 * Flinch
 * 
 *   Flinch Distance X:
 *   - The normal X distance when flinching.
 * 
 *   Flinch Distance Y:
 *   - The normal Y distance when flinching.
 * 
 *   Flinch Duration:
 *   - The number of frames for a flinch to complete.
 * 
 *   Shake Flinch:
 *   - Perform a shake flinch when taking damage?
 * 
 *     Max Duration:
 *     - Maximum duration a shake flinch can have.
 *     - This is reduced relative to the amount of damage taken.
 * 
 *     Max Power:
 *     - The power rating of a shake flinch at full damage.
 *     - This is reduced relative to the amount of damage taken.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 * 
 *   Chant Style:
 *   - What determines the chant motion?
 *   - Hit type or skill type?
 * 
 *   Offset X:
 *   - Offsets X position where actor is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where actor is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Motion Speed:
 *   - The number of frames in between each motion.
 * 
 *   Priority: Active:
 *   - Place the active actor on top of actor and enemy sprites.
 * 
 *   Priority: Actors:
 *   - Prioritize actors over enemies when placing sprites on top of each other
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 * 
 *   JS: Home Position:
 *   - Code used to calculate the home position of actors.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Enemy Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how enemies appear visually in the
 * battle scene. Some of these settings will override the settings used for
 * actors if used as sideview battlers. Other settings include changing up the
 * default attack animation for enemies, how the enemy select window functions,
 * and more.
 *
 * ---
 *
 * Visual
 * 
 *   Attack Animation:
 *   - Default attack animation used for enemies.
 *   - Use <Attack Animation: x> for custom animations.
 * 
 *   Emerge Text:
 *   - Show or hide the 'Enemy emerges!' text at the start of battle.
 * 
 *   Offset X:
 *   - Offsets X position where enemy is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where enemy is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 *
 * ---
 *
 * Select Window
 * 
 *   Any: Last Selected:
 *   - Prioritize last selected enemy over front view or sideview settings?
 * 
 *   FV: Right Priority:
 *   - If using frontview, auto select the enemy furthest right.
 * 
 *   SV: Right Priority:
 *   - If using sideview, auto select the enemy furthest right.
 * 
 * ---
 * 
 * Name:
 * 
 *   Legacy Option:
 *   - Use the legacy version (window) or new version (sprite).
 *   - WARNING: Legacy version is no longer supported for bugs.
 *   - Not all settings available here in the Plugin Parameters will be
 *     available to the legacy version (ie Always Visible and Attach States).
 * 
 *   Font Size:
 *   - Font size used for enemy names.
 * 
 *   Name Position:
 * 
 *     Offset X:
 *     Offset Y:
 *     - Offset the enemy name's position by this much.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name: Attach States:
 *   - Attach the enemy's state icon to the enemy name?
 * 
 *     Attach: Offset X:
 *     Attach: Offset Y:
 *     - How much to offset the attached icon's X/Y position by?
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name Visibility:
 * 
 *     Always Hidden:
 *     - Determines if the enemy name will always be visible.
 *     - Highest priority.
 * 
 *     Always Visible:
 *     - Determines if the enemy name will always be visible.
 *     - Medium priority.
 * 
 *     By Selection?:
 *     - Determines the conditions for enemy name visibility.
 *     - Lowest priority.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Allow Collapse:
 *   - Causes defeated enemies with SV Battler graphics to "fade away"
 *     when defeated?
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Motion: Idle:
 *   - Sets default idle animation used by Sideview Battlers.
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Size: Width:
 *   - Default width for enemies that use Sideview Battlers.
 * 
 *   Size: Height:
 *   - Default height for enemies that use Sideview Battlers.
 * 
 *   Weapon Type:
 *   - Sets default weapon type used by Sideview Battlers.
 *   - Use 0 for Bare Hands.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: HP Gauge Settings
 * ============================================================================
 *
 * Settings that adjust the visual HP Gauge displayed in battle.
 *
 * ---
 *
 * Show Gauges For
 * 
 *   Actors:
 *   - Show HP Gauges over the actor sprites' heads?
 *   - Requires SV Actors to be visible.
 * 
 *   Enemies:
 *   - Show HP Gauges over the enemy sprites' heads?
 *   - Can be bypassed with <Hide HP Gauge> notetag.
 * 
 *     Requires Defeat?:
 *     - Requires defeating the enemy once to show HP Gauge?
 *     - Can be bypassed with <Show HP Gauge> notetag.
 * 
 *       Battle Test Bypass?:
 *       - Bypass the defeat requirement in battle test?
 *
 * ---
 *
 * Settings
 * 
 *   Animation Duration:
 *   - How many frames should gauges animate themselves?
 *   - Default: 20 frames.
 * 
 *   Anchor X:
 *   Anchor Y:
 *   - Where do you want the HP Gauge sprite's anchor X/Y to be?
 *     Use values between 0 and 1 to be safe.
 * 
 *   Scale:
 *   - How large/small do you want the HP Gauge to be scaled?
 * 
 *   Offset X:
 *   Offset Y:
 *   - How many pixels to offset the HP Gauge's X/Y by?
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the 'Show HP Gauge' option to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Option Name:
 *   - Command name of the option.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Action Sequence Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters allow you to decide if you want automatic
 * Action Sequences to be used for physical attacks, the default casting
 * animations used, how counters and reflects appear visually, and what the
 * default stepping distances are.
 *
 * ---
 *
 * Automatic Sequences
 * 
 *   Melee Single Target:
 *   - Allow this auto sequence for physical, single target actions?
 * 
 *   Melee Multi Target:
 *   - Allow this auto sequence for physical, multi-target actions?
 *
 * ---
 * 
 * Quality of Life
 * 
 *   Auto Notetag:
 *   - Automatically apply the <Custom Action Sequence> notetag effect to any
 *     item or skill that has a Common Event?
 *   - Any item or skill without a Common Event attached to it will use the
 *     Automatic Action Sequences instead.
 *   - The <Auto Action Sequence> notetag will disable this effect for that
 *     particular skill or item.
 * 
 * ---
 *
 * Cast Animations
 * 
 *   Certain Hit:
 *   - Cast animation for Certain Hit skills.
 * 
 *   Physical:
 *   - Cast animation for Physical skills.
 * 
 *   Magical:
 *   - Cast animation for Magical skills.
 *
 * ---
 *
 * Counter/Reflect
 * 
 *   Counter Back:
 *   - Play back the attack animation used?
 * 
 *   Reflect Animation:
 *   - Animation played when an action is reflected.
 * 
 *   Reflect Back:
 *   - Play back the attack animation used?
 *
 * ---
 *
 * Stepping
 * 
 *   Melee Distance:
 *   - Minimum distance in pixels for Movement Action Sequences.
 * 
 *   Step Distance X:
 *   - The normal X distance when stepping forward.
 * 
 *   Step Distance Y:
 *   - The normal Y distance when stepping forward.
 * 
 *   Step Duration:
 *   - The number of frames for a stepping action to complete.
 *
 * ---
 *
 * ============================================================================
 * Terms of Use
 * ============================================================================
 *
 * 1. These plugins may be used in free or commercial games provided that they
 * have been acquired through legitimate means at VisuStella.com and/or any
 * other official approved VisuStella sources. Exceptions and special
 * circumstances that may prohibit usage will be listed on VisuStella.com.
 * 
 * 2. All of the listed coders found in the Credits section of this plugin must
 * be given credit in your games or credited as a collective under the name:
 * "VisuStella".
 * 
 * 3. You may edit the source code to suit your needs, so long as you do not
 * claim the source code belongs to you. VisuStella also does not take
 * responsibility for the plugin if any changes have been made to the plugin's
 * code, nor does VisuStella take responsibility for user-provided custom code
 * used for custom control effects including advanced JavaScript notetags
 * and/or plugin parameters that allow custom JavaScript code.
 * 
 * 4. You may NOT redistribute these plugins nor take code from this plugin to
 * use as your own. These plugins and their code are only to be downloaded from
 * VisuStella.com and other official/approved VisuStella sources. A list of
 * official/approved sources can also be found on VisuStella.com.
 *
 * 5. VisuStella is not responsible for problems found in your game due to
 * unintended usage, incompatibility problems with plugins outside of the
 * VisuStella MZ library, plugin versions that aren't up to date, nor
 * responsible for the proper working of compatibility patches made by any
 * third parties. VisuStella is not responsible for errors caused by any
 * user-provided custom code used for custom control effects including advanced
 * JavaScript notetags and/or plugin parameters that allow JavaScript code.
 *
 * 6. If a compatibility patch needs to be made through a third party that is
 * unaffiliated with VisuStella that involves using code from the VisuStella MZ
 * library, contact must be made with a member from VisuStella and have it
 * approved. The patch would be placed on VisuStella.com as a free download
 * to the public. Such patches cannot be sold for monetary gain, including
 * commissions, crowdfunding, and/or donations.
 *
 * ============================================================================
 * Credits
 * ============================================================================
 * 
 * If you are using this plugin, credit the following people in your game:
 * 
 * Team VisuStella
 * * Yanfly
 * * Arisu
 * * Olivia
 * * Irina
 *
 * ============================================================================
 * Changelog
 * ============================================================================
 * 
 * Version 1.81: February 15, 2024
 * * Bug Fixes!
 * ** Fixed a bug that would cause active TPB inputting actors to not show
 *    their damage or evasion motions. Fix made by Olivia.
 * ** Fixed a bug that would cause a crash upon motion changes. Fix by Olivia.
 * ** Fixed an incorrect spelling of "Anger" for "ANIM: Balloon Animation" that
 *    prevented it from working properly.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia:
 * *** ANIM: Show Animation JS
 * **** Plays the a specific animation on unit(s). Uses JavaScript to determine
 *      animation ID.
 * ** New Action Sequences added for future plugin: VisuMZ_2_BattleGridSystem
 * *** GRID: Action Animation at Node
 * *** GRID: Add Passive State(s) to Node
 * *** GRID: Add Trigger to Node
 * *** GRID: Animation ID at Node
 * *** GRID: Animation JS at Node
 * *** GRID: Animation Type at Node
 * *** GRID: Move Target(s) In Direction
 * *** GRID: Pull To Target Node
 * *** GRID: Push From Target Node
 * *** GRID: Remove All Passive States from Node
 * *** GRID: Remove Passive State(s) from Node
 * *** GRID: Remove Trigger from Node
 * *** GRID: Teleport To Node
 * *** GRID: Traverse To Node
 * **** Requires the future plugin VisuMZ_2_BattleGridSystem!
 * **** Read the help section for more information on these.
 * 
 * Version 1.80: January 18, 2024
 * * Bug Fixes!
 * ** Fixed a crash that would occur with <Disperse Damage> when used outside
 *    of battle. Fix made by Irina.
 * ** Fixed a crash that would occur with certain enemy graphics when images
 *    used for them would disappear. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia:
 * *** ANIM: Guard Animation
 * *** ANIM: Item Animation
 * *** ANIM: Skill Animation
 * **** Plays the animation associated with the user's guard action (if any),
 *      or a specific item/skill.
 * *** MECH: Emulate Attack Effect
 * *** MECH: Emulate Guard Effect
 * *** MECH: Emulate Item Effect
 * *** MECH: Emulate Skill Effect
 * **** Emulate an "Action Effect" but using a the user's attack skill, guard
 *      skill, specific item, or specific skill instead of the current action.
 * **** Essentially lets you perform the mechanics of another action without
 *      having to use another action or needing to pay that action's costs.
 * *** MECH: Emulate Skill Cost
 * **** Pick a skill for target(s) to emulate paying the cost of.
 * **** Includes cooldowns and limited uses.
 * *** MECH: State Turns Change By
 * *** MECH: State Turns Change To
 * **** Changes target(s) state turns by an amount/to a certain value.
 * **** Requires VisuMZ_1_SkillsStatesCore!
 * *** Projectile action sequences have new Extra Features!
 * **** See v1.08 changes for VisuMZ_3_ActSeqProjectiles.
 * 
 * Version 1.79: December 14, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Arisu:
 * *** ANIM: Balloon Animation
 * **** Plays a balloon animation on target(s).
 * *** ANIM: Balloon Icon (Single)
 * *** ANIM: Balloon Icon (Range)
 * *** ANIM: Balloon Icon (Specific)
 * **** Plays a balloon animation using an icon on target(s).
 * **** Requires VisuMZ_4_IconBalloons!
 * 
 * Version 1.78: October 12, 2023
 * * Bug Fixes!
 * ** Fixed a bug that is caused by using the actor escape command not escaping
 *    properly in battle and causing a freeze. Fix made by Olivia.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Parameters > Mechanics > Turn End Buffs Expire?
 * **** Normally, buffs expire after all actions end.
 * **** But here, you can have buffs expire on turn end.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.77: August 17, 2023
 * * Bug Fixes!
 * ** Fixed a bug where for TPB, actions aimed at dead targets would not
 *    redirect to suitable targets. Fix made by Olivia.
 * ** Fixed a bug where dual wielding would not use a weapon if it was equipped
 *    in the second weapon slot if the first weapon slot was empty. Fix made
 *    by Olivia.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Added compatibility for VisuStella MZ Battle Voices Action Sequences.
 * * Documentation Update!
 * ** Help file updated for new features.
 * 
 * Version 1.76: July 13, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia and sponsored by NSG:
 * *** MOVE: Change Home To JS Coordinates
 * **** Change home position(s) to specified JS Coordinates. Sideview-only!
 *      Uses JS!
 * *** MOVE: Face JS Coordinates
 * **** Causes the unit(s) to face specified JS Coordinates. Sideview-only!
 *      Uses JS!
 * *** MOVE: Move To JS Coordinates
 * **** Moves unit(s) to specified JS Coordinates. Sideview-only! Uses JS!
 * 
 * Version 1.75: March 16, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia and sponsored by Anon:
 * *** <HP Life Steal: x%>
 * *** <MP Life Steal: x%>
 * *** <HP Life Steal hitType: +/-x%>
 * *** <MP Life Steal hitType: +/-x%>
 * *** <Cancel Life Steal>
 * *** <Guard Life Steal>
 * *** <Disarm Life Steal>
 * *** <Negative Life Steal>
 * **** Life Steal properties involving HP/MP are now added. They will restore
 *      a portion of the dealt HP/MP damage to the target.
 * **** This is a different mechanic from Drain HP/Drain MP and cannot be used
 *      together to prevent clashing.
 * **** Read the help file for more information.
 * 
 * Version 1.74: February 16, 2023
 * * Bug Fixes!
 * ** Fixed a bug that would cause a crash if your basic attack skill somehow
 *    manages to target neither an enemy nor an actor. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Auto-action sequence for jumping forward and attacking is now reinstated
 *    so that it's only disabled when the target and user are on the same side.
 *    If there is no target, a jump still occurs for visual player feedback.
 *    Update made by Olivia.
 * * New Features!
 * ** New notetag effect added by Olivia and sponsored by AndyL:
 * *** <Cannot Target User>
 * **** This will cause the action to be unable to select the user as target.
 * **** This is not a targeting scope. Instead, it is used in addition to any
 *      other targeting scopes out there.
 * 
 * Version 1.73: January 20, 2023
 * * Bug Fixes!
 * ** Active TPB custom action sequences will no longer play differently due to
 *    queued inputting actors causing motion refreshes. Fix made by Arisu.
 * ** Corrected and updated Anti-Tint UI animation offsets for MV animations.
 *    Fix made by Irina.
 * ** Fixed a problem with Sideview Battlers not working properly. Fix made
 *    by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for to add the following text to the <Target: x>
 *    notetag entries in order to avoid confusion.
 * *** This will overwrite the existing database scope and ignore the
 *     database's existing scope in favor of this.
 * * Feature Update!
 * ** <Extend: x> Troop Name Tag is now also usable as a Troop Comment Tag.
 * ** Action Sequence targeting has been updated with two new types "special"
 *    and "special x", to be used for future plugins.
 * * New Features!
 * ** New Notetags added by Irina and sponsored by AndyL:
 * *** <Target: Ally or Enemy>
 * *** <Target: Enemy or Ally>
 * **** Allows the player to target allies or enemies with the skill/item.
 * **** See help file for more information.
 * *** <Single or Multiple Select>
 * **** This will allow the skill/item to be able to select either single
 *      targets or multiple targets at once.
 * **** See help file for more information.
 * *** <Disperse Damage>
 * **** This will cause any damage dealt by this skill to be split equally
 *      amongst all targets of the skill including repeats.
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Multi-Target Windows
 * **** Settings that alter the Multi-Target Windows in battle.
 * 
 * Version 1.72: December 15, 2022
 * * Bug Fixes!
 * ** Fixed a transformation of a sideview enemy to a static enemy and back not
 *    working properly. Fix made by Irina.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Feature!
 * ** New Plugin Parameter added by Irina!
 * *** Plugin Parameters > HP Gauges > Settings > Animation Duration
 * **** How many frames should gauges animate themselves? Default: 20 frames.
 * ** New Plugin Parameters added by Yanfly!
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch > Max Power
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch > Max Duration
 * **** These new plugin parameters will cause targets that take HP damage to
 *      shake (in addition to a regular flinch) to provide better visual
 *      feedback to the player.
 * **** Shake Flinch will be kept disabled by default and only turned on when
 *      you want it to be.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.71: November 10, 2022
 * ** Fixed a problem with repeating animations from Visual State Effects
 *    causing softlocks. Fix made by Olivia.
 * 
 * Version 1.70: October 6, 2022
 * * Bug Fixes!
 * ** Fixed a problem with the "Border" style where if a battle portrait
 *    changed midway through the battle, the portrait shown didn't actually
 *    update properly. Fix made by Irina.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Olivia:
 * *** MECH: Active Chain Input Disable
 * **** Disables input for Active Chain Skills at this time.
 * **** Requires VisuMZ_3_ActiveChainSkills!
 * ** New Plugin Parameter added by Olivia and sponsored by Anon:
 * *** Plugin Parameters > Damage Settings > Popups > End Battle Show?
 * **** Show or hide popups upon victory or escape?
 * **** Used to hide battle-state removal popups.
 * 
 * Version 1.69: September 7, 2022
 * * Compatibility Update!
 * ** Better compatibility with VisuMZ Active Chain Skills.
 * ** Compatibility will be seen with VisuMZ_3_ActiveChainSkills version 1.02.
 * * Documentation Update!
 * ** Added notes to the following Action Sequences:
 * *** MOTION: Clear Freeze Frame and MOTION: Freeze Motion Frame
 * **** Only applies to sprite sheets.
 * **** Does NOT work with Dragonbones.
 * **** Use "DB: Dragonbones Time Scale" instead.
 * * Feature Update!
 * ** Reduced MV Animation misalignment when Screen Resolution does not match
 *    the UI Area Resolution. Update by Arisu.
 * ** Command Remember will now remember the locations of single skills. Update
 *    made by Olivia.
 * 
 * Version 1.68: August 4, 2022
 * * Feature Update!
 * ** Damage popups are now automatically cleared upon starting battles. This
 *    is to ensure that, if for some reason, residual damage popup requests
 *    will not be retained. Update made by Olivia.
 * 
 * Version 1.67: July 28, 2022
 * * Feature Updates!
 * ** Rounding window coordinates have been added for for 'XP' and 'Portrait'
 *    styles when window sizes happen to land on non-divisible numbers. Update
 *    made by Irina.
 * ** Enemy name position rounding is now enforced. Update made by Irina.
 * 
 * Version 1.66: July 14, 2022
 * * Bug Fixes!
 * ** Fixed a bug that caused the various Battleback Scaling JS custom plugin
 *    parameters to not work properly. Fix made by Irina.
 * 
 * Version 1.65: July 7, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Automatic action motions for HP and MP Recovery (Certain Hit type) will
 *    now use the "skill" cast SV animation instead of attack animation to
 *    better match the default RPG Maker MZ cast animation. Update by Olivia.
 * * New Features!
 * ** New troop name tag added by Olivia:
 * *** <Extend: x> and <Extend: x, x, x>
 * **** Adds enemies from another troop to the current troop.
 * **** Enemies from another troop will retain their database positions.
 * **** Extended troop members will be added in the order they're listed.
 * **** Be cautious of how many enemies you add as too many will lag the battle
 *      system. We are not responsible for frame drops due to this.
 * 
 * Version 1.64: June 16, 2022
 * * Bug Fixes!
 * ** "All Skills" battle command should now work with the updated version of
 *    VisuMZ Skills & States Core. Fix madde by Olivia.
 * * Compatibility Update
 * ** Plugins should be more compatible with one another.
 * 
 * Version 1.63: May 26, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** HP Gauge sprite now properly synchs with battler location.
 * * New Features!
 * ** New Action Sequence Effects added by Irina and sponsored by MirageV:
 * *** INJECT action sequence series
 * **** See the Action Sequence Impact changelog for details.
 * 
 * Version 1.62: April 22, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Battle Forced End Action Crash
 * **** Depending on various circumstances, currently active battlers can be
 *      cleared from the battle system at will due to a number of reasons.
 *      However, if it just so happens that the targets are cleared, too, with
 *      actions remaining, then a crash will follow up. This plugin will
 *      prevent that change. Fix made by Olivia.
 * 
 * Version 1.61: April 14, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Impact Effects added by Irina and collaborating with Manu Gaming!
 * *** Impact: Bizarro Inversion
 * *** Impact: Desaturation
 * *** Impact: Negative Inversion
 * *** Impact: Oversaturation
 * *** Impact: Time Scale
 * *** Impact: Time Stop
 * 
 * Version 1.60: April 7, 2022
 * * Bug Fixes!
 * ** <Bypass Soft Damage Cap> notetag should no longer cause crashes. Fix made
 *    by Olivia.
 * * Feature Update!
 * ** Removed one of the forced log window clear events that have made log
 *    window messages impossible to utilize for certain settings. Update made
 *    by Olivia.
 * 
 * Version 1.59: March 31, 2022
 * * Bug Fixes!
 * ** Escape failure will no longer trigger Post-Battle Common Events. Fix
 *    made by Arisu.
 * 
 * Version 1.58: March 24, 2022
 * * Documentation Update:
 * ** Added extra clarity to <Sideview Size: width, height> notetag:
 * *** This does NOT change the image size. This only changes the HITBOX size.
 * * Feature Update!
 * ** Added failsafes to prevent battlers from moving to non-finite coordinates
 *    if calculations are made for non-existent targets. Updated by Olivia.
 * ** Regeneration timing for TPB-based battle systems will now occur based on
 *    individual turn counts instead of global turn counts for initial turn 0
 *    checks. Updated by Olivia.
 * 
 * Version 1.57: February 17, 2022
 * * Feature Update!
 * ** Adjusted the offset properties for the anti-tint UI container to properly
 *    match the UI offsets if the anti-tint were to be off. Update by Irina.
 * 
 * Version 1.56: February 10, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Once Parallels for battle now operate outside of the battle process.
 *    Update made by Olivia.
 * * New Features!
 * ** New Troop Page comment tag added by Olivia and sponsored by Puddor:
 * *** <Once Parallel When Start Battle>
 * **** Causes the troop page to immediately run the moment the battle scene
 *      begins to fade in (not after it fades in). This is faster than a turn 0
 *      condition troop page. Troop page conditions are ignored.
 * **** This can be used for things like the Action Sequence Camera plugin, the
 *      Visual Battle Environment plugin, and/or initial battle poses and such
 *      in order to provide a near seamless battle transition experience.
 * **** This does NOT trigger when coming out of the options menu or party
 *      menu screens.
 * **** This WILL trigger when going from battle to battle nonstop via plugins
 *      like VisuStella MZ's Chain Battles.
 * **** When actors are moving towards their home positions, it will take
 *      around 30 frames by default. Use this information however you like.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.55: January 27 2022
 * * Compatibility Update!
 * ** RPG Maker MV animations with front view should now play in the correct
 *    area against actor faces. Update made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Animations now play on top of all actor faces/portraits regardless of the
 *    battle layout style. Update made by Olivia.
 * * New Features!
 * ** New notetag added by Arisu.
 * *** <Bypass Auto Action Sequence>
 * **** This notetag is used for the game devs that have the Action Sequence
 *      Plugin Parameter "Auto Notetag" on for applying the notetag
 *      <Custom Action Sequence> to every skill and item with common events.
 * **** This will allow items and skills to be able to launch their common
 *      events from the menu scene regardless of the inherent restriction to
 *      prevent action sequence based skills/items with common events from
 *      launching.
 * **** Ignore this if you have "Auto Notetag" disabled or set to false. By
 *      default, this setting is set to false. Please be aware of the changes
 *      you've made to your game before using it.
 * 
 * Version 1.54: January 13, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Overly-Protective Substitute
 * *** When an ally with critical health is being targeted by a friendly non-
 *     Certain Hit skill (such as a heal or buff) and another ally has the
 *     substitute state, the other ally would "protect" the originally targeted
 *     ally and take the heal or buff.
 * *** The new changed behavior is that now, substitute will not trigger for
 *     any actions whose scope targets allies.
 * *** Fix made by Olivia.
 * 
 * Version 1.53: December 30, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for updated features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Battle Layout > UI Elements > Anti-Tint UI?
 * **** Prevent UI Elements from being tinted?
 * **** This prevents UI Elements such as HP Gauges, Enemy Names, Battle
 *      Cursor, and Weakness Display from being affected by screen tint.
 * * Updated Feature!
 * ** Updated Plugin Command "PROJECTILE: Animation" by Arisu!
 * *** New Parameter: Wait For Animation?
 * **** Wait for animation to finish before going to the next command?
 * 
 * Version 1.52: December 16, 2021
 * * Compatibility Update!
 * ** RPG Maker MZ 1.4.0 compatibility update!
 * *** MV Animations played on screen level will now show up properly in the
 *     center of the screen.
 * 
 * Version 1.51: December 9, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence Plugin Commands added by Arisu:
 * *** MOVE: Change Home By Distance
 * *** MOVE: Change Home To Point
 * *** MOVE: Change Home To Target(s)
 * **** These Plugin Commands allow you to adjust the home position of
 *      battlers in sideview battle.
 * **** This is sideview only!
 * **** This does NOT work with front view!
 * **** For those wondering, going to the options screen, party screen, etc.
 *      won't reset the home positions like regular movement changes do.
 * **** Merry Christmas, Harold-gang!
 * 
 * Version 1.50: November 4, 2021
 * * Bug Fixes!
 * ** <Seal Attack> and <Seal Guard> should no longer be bypassed by
 *    auto-battle status. Fix made by Yanfly.
 * 
 * Version 1.49: October 28, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Action Sequence: MOTION: Freeze Motion Frame will now only show weapons
 *    when using a motion that is named either "attack", "thrust", "swing", or
 *    "missile". Update made by Irina.
 * ** Fail safe added to prevent Scene_Battle going into unsupported scenes
 *    like Scene_Equip and Scene_Skill. Update made by Olivia.
 * * New Feature!
 * ** New Action Sequence Plugin Command added by Arisu and sponsored by Anon:
 * *** MECH: Once Parallel
 * **** Plays a Common Event parallel to the battle event once without
 *      repeating itself when done.
 * **** When exiting battle scene, all Once Parallels are cleared.
 * **** Once Parallels are not retained upon reentering the scene.
 * **** Once Parallels are not stored in memory and cannot be saved.
 * 
 * Version 1.48: October 21, 2021
 * * Feature Update!
 * ** Animations are now played on top of battlers in the Front View XP Battle
 *    Layout appearance. Update made by Irina.
 * ** Battle Log, if decided to be shown, now updates faster. Update by Irina.
 * ** Default Critical Damage Bonus increase is now updated to account for
 *    HP Healing and MP Recovery. To update this, create a new project, with
 *    the newest version of Battle Core installed. Copy over the Plugin
 *    Parameters for the Damage Settings > Critical Hits > JS: Damage Formula
 *    to your own project's version. Update made by Irina.
 * 
 * Version 1.47: October 14, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Feature Update!
 * ** Back attachment sprites are now automatically updated with sprite
 *    battlers to be shifted towards the very back.
 * 
 * Version 1.46: September 23, 2021
 * * Bug Fixes!
 * ** Fixed problem with skills and items without action sequences preventing
 *    actions from occurring. Fix made by Yanfly.
 * 
 * Version 1.45: September 17, 2021
 * * Bug Fixes!
 * ** <JS Pre-End Action> and <JS Post-End Action> effects now have multiple
 *    checks to make sure that they don't launch multiple times when a battler
 *    without actions has a turn after one that does. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence notetags added by Yanfly and Arisu:
 * *** <Common Event Key: name>
 * *** <Common Event Keys: name, name, name>
 * *** <Common Event Keys>
 *      key
 *      key
 *      key
 *     </Common Event Keys>
 * **** Will generate Common Events for the skill/item with a corresponding
 *      key.
 * **** More information will be explained inside of the help file.
 * **** This feature is made for make the process of sharing Action Sequences
 *      to become easier without needing to line up Common Event ID's.
 * 
 * Version 1.44: August 20, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Irina and sponsored by Anon.
 * *** "ANIM: Play at Coordinate"
 * **** Plays an animation on the screen at a specific x, y coordinate even if
 *      there is no sprite attached.
 * **** Requires VisuMZ_0_CoreEngine!
 * 
 * Version 1.43: July 23, 2021
 * * Feature Update!
 * ** Immortality now works different with instant death mechanics. Skill
 *    effects that apply instant death or attack states that apply instant
 *    death will now trigger a flag instead of cancelling immortality. The
 *    flag will remain until immortality is manually cancelled via Action
 *    Sequence and then proc the death effect. This way, animations can remain
 *    to the end with instant death mechanics in mind. This does not affect
 *    script calls.
 * 
 * Version 1.42: July 16, 2021
 * * Bug Fixes!
 * ** Added another fail safe for empty common events used for pre-battle
 *    common events. Fix made by Olivia.
 * 
 * Version 1.41: July 2, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Added entries to <Battle Command> notetags and Plugin Parameters for
 *    "Party", "Combat Log", and "Weapon Swap" which weren't updated before.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * * New Features!
 * ** New Action Sequence added by Arisu:
 * *** MECH: Enemy Escape
 * **** Causes the enemy unit(s) to escape.
 * 
 * Version 1.40: June 25, 2021
 * * Bug Fixes!
 * ** Transformations from static enemies to and from animated SV enemies
 *    should no longer show both sprites. Fix made by Irina.
 * * Compatibility Update
 * ** Compatibility update with RPG Maker MZ 1.3.0+.
 * 
 * Version 1.39: June 18, 2021
 * * Bug Fixes!
 * ** MOVE: Home Reset should no longer trigger an end action function and
 *    cause plugins such as "Boost Action" to malfunction. Fix made by Olivia.
 * * Compatibility Update
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <Battle Layout: x> Troop Name tags can now work with comment tags. Update
 *    made by Irina.
 * ** Random encounter lists are now better shuffled for more variety with how
 *    the RNG seed works. Update made by Arisu.
 * 
 * Version 1.38: June 11, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Location calculations will now be based off the a battler's base position
 *    in order for animations, popups, and other aspects to line up properly
 *    when scaled. Update made by Irina.
 * ** Plugin Parameters for Enemy Battler Settings > Name have been rearranged
 *    for better organization. Update by Olivia.
 * * New Features!
 * ** New Notetags added by Olivia and sponsored by NSG:
 * *** <Sideview Shadow Scale X: x%>
 * *** <Sideview Shadow Scale X: x.y>
 * *** <Sideview Shadow Scale Y: x%>
 * *** <Sideview Shadow Scale Y: x.y>
 * **** These new notetags allow you to adjust the X and Y scale of the SV
 *      shadow sprite separately.
 * ** New Plugin Parameters added by Olivia and sponsored by NSG:
 * *** Enemy Battler Settings > Name > Name Visibility > Always Hidden
 * *** Enemy Battler Settings > Name > Name Visibility > By Selection?
 * **** Choose to have the names always hidden or by selection.
 * **** These are adjusted on a priority list.
 * 
 * Version 1.37: May 21, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia.
 * *** <Command Require Learn>
 * *** <Command Require Access>
 * **** These two commands determine the visibility of a battle command by
 *      whether or not the skill has been learned or accessible.
 * * Feature Update!
 * ** For those using TPB, each battler's regeneration phase will no longer
 *    tick multiple times in a single frame to prevent irregularities. Update
 *    made by Olivia.
 * 
 * Version 1.36: May 14, 2021
 * * Bug Fixes!
 * ** Reversed an HP/MP regeneration bug that was incorrectly reported for TPB.
 *    Fix made by Olivia.
 * * Documentation Update
 * ** Added "TPB/ATB Active Battle Actor Shifting" to Major Changes section:
 * *** This change has been active since the start of this plugin. It was not
 *     documented until now.
 * *** Pressing cancel on the Actor Command Window no longer switches between
 *     actors with a full TPB/ATB gauge before reaching the Party Command
 *     Window. This is to accomplish a couple of things: 1) reduce the number
 *     of button presses to reach the Party Command Window and 2) to prevent
 *     motion resets and disrupting action sequences. If this feature is vital
 *     to your battle system, we recommend that you do not use this plugin or
 *     any of the Battle Core-required plugins.
 * ** Feature Updates
 * *** Distortion sprite Y calculations will now be rounded upward for better
 *     visuals and prevent odd pixelation effects. Update made by Irina.
 * 
 * Version 1.35: May 7, 2021
 * * Bug Fixes!
 * ** Pre-Battle Common Events without a wait command at the end should no
 *    longer lock up by coincidentally pressing the menu key at the same time.
 *    Fix made by Olivia.
 * * Feature Update!
 * ** Added an extra check for TPB-based battle systems to not run turn end
 *    functions when it's not actually the actual turn end timing. Update made
 *    by Olivia.
 * ** "Damage Styles" plugin parameters are now moved to the top of the
 *    Damage Settings category. This should make it easier to acknowledge the
 *    existence of and not have it be an unknown entity. Update made by Irina.
 * 
 * Version 1.34: April 23, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Uses a better algorithm for determining shadow positioning. Update made
 *    by Olivia.
 * * New Features!
 * ** New additions made for Projectile action sequences.
 * ** "Start Location" and "Goal Location" now have "Target Location" parameter
 *    to determine which part of the target's body to send the projectile from
 *    or towards. Added by Olivia.
 * ** Requires VisuMZ_1_BattleCore version 1.34 to have affect.
 * 
 * Version 1.33: April 9, 2021
 * * Bug Fixes!
 * ** Skill costs should now be displayed on battle commands again. Bug fix
 *    made by Olivia.
 * ** Pre-Battle Common Events should no longer cause stalling when used with
 *    specific event commands. Bug fix made by Olivia.
 * * Compatibility Update!
 * ** Added "Weapon Swap" to the list of battle commands that can be added.
 * * Documentation Update!
 * ** Added "Weapon Swap" and "Combat Log" to the list of <Battle Commands> in
 *    the notetags section.
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia:
 * *** <Sideview Shadow Scale: x%> and <Sideview Shadow Scale: x.y>
 * **** Used for: Actor, Enemy Notetags
 * **** Adjusts the scaling size of the sideview battler's shadow.
 * 
 * Version 1.32: April 2, 2021
 * * Feature Update!
 * ** Sideview battler sprites when using front view will now factor in the
 *    window padding and appear properly centered to their focus point. Update
 *    made by Olivia.
 * 
 * Version 1.31: March 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Added "VisuStella MZ Compatibility" section for detailed compatibility
 *    explanations with the VisuMZ_3_BoostAction plugin.
 * 
 * Version 1.30: March 19, 2021
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <JS Targets> is now updated to include the default set of targets
 *    selected by the skill/item's original scope. Update made by Yanfly.
 * *** If you wish to clear it out, simply do 'targets = []' first.
 * 
 * Version 1.29: March 12, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Enemy Battler Settings > Name > Legacy Option
 * **** Use the legacy version (window) or new version (sprite).
 * **** WARNING: Legacy version is no longer supported for bugs.
 * **** Not all settings available here in the Plugin Parameters will be
 *      available to the legacy version (ie Always Visible and Attach States).
 * 
 * Version 1.28: March 5, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Arisu:
 * *** Plugin Parameters > Actor Command > Show Command Costs
 * **** If you don't want to show skill costs for your commands in the Actor
 *      Command Window, you can now hide them.
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battle Layout Settings > Status Window Elements
 * *** Battle Layout Settings > Status Window Elements > Battler Name
 * *** Battle Layout Settings > Status Window Elements > Gauge 1 (HP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 2 (MP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 3 (TP)
 * *** Battle Layout Settings > Status Window Elements > State Icon
 * *** Battle Layout Settings > Status Window Elements > TPB/ATB Gauge
 * **** These new Plugin Parameters allow you to offset the positions of the
 *      various Battle Status Window elements. Their base positions will be
 *      calculated by the Battle Layout used and then offset from there.
 * *** Battle Layout Settings > Status Window Elements > Window Skin
 * **** These settings allow you to set a specific window skin for the
 *      Battle Status Window or hide it from view completely.
 * *** Battle Layout Settings > Status Window Elements > Selectable Background
 * **** This option allows you to hide the black box that comes with the
 *      majority of selectable elements found in RPG Maker MZ in case it does
 *      not fit with how you want the Battle Status Window to look.
 * *** Battle Layout Settings > Status Window Elements > Back Attachment
 * *** Battle Layout Settings > Status Window Elements > Front Attachment
 * **** These settings allow you to attach images to the back/front of the
 *      Battle Status Window from the img/system/ folder.
 * **** You may offset X and Y positions for them as well.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Enemy Settings > Name: Always Visible
 * **** Determines if the enemy name will always be visible.
 * *** Plugin Parameters > Enemy Settings > Name: Attach States
 * **** Attach the enemy's state icon to the enemy name?
 * *** Plugin Parameters > Enemy Settings > Attach: Offset X/Y
 * **** Offset the attached state icon's position.
 * * Feature Update!
 * ** Switched drawing enemy names on the screen from window to sprite to
 *    reduce lag and for better screen positioning accuracy especially during
 *    screen zooming. Update by Olivia.
 * 
 * Version 1.27: February 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Critical
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Miss/Evade
 * **** Turns Switches ON if the action performs a critical hit, misses, or is
 *      evaded at any point.
 * **** Switch reverts to OFF whenever an action starts.
 * **** If multiple targets/hits are struck, as long as one hit respectively
 *      lands a critical hit, fails to land, then the switch will remain ON for
 *      the rest of the action.
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Damage
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Healing
 * **** Variable records target damage/healing during action.
 * **** Variable reverts to 0 whenever an action starts.
 * **** If multiple targets/hits are struck, the variable will record the total
 *      amount of damage/healing done for the remainder of the action (unless
 *      manually reseting to 0 during an Action Sequence).
 * 
 * Version 1.26: February 19, 2021
 * * Bug Fixes!
 * ** Battles with branching event paths found within a conditional branch or
 *    choice tree will no longer be skipped over. Fix made by Arisu.
 * * Compatibility Update
 * ** Returning to the battle scene from the options scene in a Tpb-base battle
 *    system now links the current actor. Update by Irina.
 * 
 * Version 1.25: February 5, 2021
 * * Compatibility Update
 * ** Added compatibility update with VisuStella MZ Skills and States Core's
 *    Plugin Parameter > State Settings > Action End Update
 * * Feature Update!
 * ** <Common Event: name> notetag no longer requires <Custom Action Sequence>
 *    notetag if the Plugin Parameter: Auto Notetag is enabled.
 * 
 * Version 1.24: January 29, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** MOVE: Move To Point and MOVE: Move To Target(s) Action Sequences'
 *    "Offset Adjustment" normal setting will now factor in Offset X and
 *    Offset Y positions unlike before where it cancels them. Update by Irina.
 * * New Features!
 * ** New notetag added by Arisu:
 * *** <Common Event: name>
 * **** Battle only: calls forth a Common Event of a matching name.
 * **** This is primarily used for users who are reorganizing around their
 *      Common Events and would still like to have their skills/items perform
 *      the correct Action Sequences in case the ID's are different.
 * 
 * Version 1.23: January 22, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** ACSET: All Targets Action Set and ACSET: Each Target Action Set updated
 * *** New parameter added: Dual/Multi Wield?
 * **** Add times struck based on weapon quantity equipped?
 * * New Features!
 * ** Dual Wielding now functions differently. Made by Olivia.
 * *** Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 *     animations at once, with the combined ATK of each weapon. It's confusing
 *     to look at and does not portray the nature of "Dual Wielding".
 * *** Dual Wielding, or in the case of users adding in third and fourth
 *     weapons, Multi Wielding is now changed. Each weapon is displayed
 *     individually, each producing its own attack animation, showing each
 *     weapon type, and applying only that weapon's ATK, Traits, and related
 *     effects. It is no longer a combined effect to display everything at once
 *     like RPG Maker MZ default.
 * *** If an actor has multiple weapon slots but some of them are unequipped,
 *     then the action will treat the attack as a single attack. There will be
 *     no barehanded attack to add on top of it. This is to match RPG Maker
 *     MZ's decision to omit a second animation if the same scenario is
 *     applied.
 * ** New Action Sequence Plugin Commands added by Yanfly
 * *** ANIM: Attack Animation 2+
 * **** Plays the animation associated with the user's 2nd weapon.
 *      Plays nothing if there is no 2nd weapon equipped.
 * ** New Action Sequence Plugin Commands added by Olivia
 * *** WEAPON: Clear Weapon Slot
 * *** WEAPON: Next Weapon Slot
 * *** WEAPON: Set Weapon Slot
 * **** These are Action Sequence Plugin Commands for devs who want finer
 *      control over Dual/Multi Wielding weapons.
 * 
 * Version 1.22: January 15, 2021
 * * Compatibility Update
 * ** Compatibility with "All Skills" Actor Command should now work with the
 *    Skills & States Core hide skill notetags.
 * 
 * Version 1.21: January 8, 2021
 * * Bug Fixes!
 * ** "MOVE: Home Reset" Plugin Command Action Sequence should work properly.
 *    Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Notetag snuck in by Arisu
 * *** <Auto Action Sequence>
 * **** Used for those who have the "Auto Notetag" Plugin Parameter enabled and
 *      just want to use an automatic Action Sequence instead.
 * ** New Plugin Parameter snuck in by Arisu!
 * *** Plugin Parameters > Action Sequences > Quality of Life > Auto Notetag
 * **** Automatically apply the <Custom Action Sequence> notetag effect to any
 *      item or skill that has a Common Event?
 * **** Any item or skill without a Common Event attached to it will use the
 *      Automatic Action Sequences instead.
 * **** The <Auto Action Sequence> notetag will disable this effect for that
 *      particular skill or item.
 * ** Arisu, you're going to be responsible for any bugs these may cause.
 * *** Bring it!!!!
 * **** And handling any bug report emails that are sent because this was
 *      turned on by accident.
 * ***** Please read the documentation, guys!
 * 
 * Version 1.20: January 1, 2021
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors that have received damage
 *    will return back to place after flinching. Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New notetags added by Yanfly:
 * *** <Battle Portrait Offset: +x, +y>
 * *** <Battle Portrait Offset X: +x>
 * *** <Battle Portrait Offset Y: +y>
 * **** This is used with the "Portrait" and "Border" Battle Layouts.
 * **** Offsets the X and Y coordinates for the battle portrait.
 * 
 * Version 1.19: December 25, 2020
 * * Bug Fixes!
 * ** Removing a state from a Sideview Enemy during the middle of their a non-
 *    looping motion will no longer reset their motion to neutral.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for updated feature(s)!
 * * Feature Update!
 * ** Action Sequence "PROJECTILE: Icon" now supports code for the "Icon"
 *    parameter. Update made by Yanfly.
 * 
 * Version 1.18: December 18, 2020
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors will no longer step back
 *    after an enemy's action is finished. Fix made by Yanfly and Shiro.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** Action Sequence "BTLOG: Add Text" is updated for the convenience of a new
 *    option to quickly copy the displayed text to the VisuStella MZ Combat Log
 *    if that plugin is installed. Added by Yanfly.
 * 
 * Version 1.17: December 11, 2020
 * * Bug Fixes!
 * ** Common Events in TPB Active that cause forced actions will no longer
 *    cause currently inputting actors that match the forced action battler to
 *    crash the game. Fix made by Yanfly and Shiro.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * Feature Update!
 * ** Action Sequence Impact Action Sequences "Shockwave from Each Target(s)",
 *    "Shockwave from Target(s) Center", and "Zoom Blur at Target(s) Center"
 *    now have "Offset X" and "Offset Y" plugin parameters. Added by Yanfly.
 * ** Action Sequence "MOVE: Move To Target(s)" is now changed so that if the
 *    "Melee Distance" value is set to 0, battlers will no longer stand a half
 *    body distance away. Added by Yanfly.
 * 
 * Version 1.16: December 4, 2020
 * * Bug Fixes!
 * ** Bug fixes made for the RPG Maker MZ base code. If a battler has no
 *    actions, then their action speed will not be Infinity. Fix by Olivia.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.15: November 29, 2020
 * * Bug Fixes!
 * ** Completely replacing the whole party at once will no longer cause the
 *    battle system to crash. Fix made by Olivia.
 * ** Pre-Battle Common Events will no longer cancel out any win/lose branches.
 *    Fix made by Arisu.
 * * Feature Update!
 * ** Custom Action Sequences will no longer close the Actor Command Input
 *    window unless absolutely necessary (like for Show Message events) during
 *    Active TPB/ATB. Change made by Arisu.
 * 
 * Version 1.14: November 22, 2020
 * * Feature Update!
 * ** Natural Miss and Evasion motions now have flinch distance.
 *    Added by Yanfly.
 * 
 * Version 1.13: November 15, 2020
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.12: November 8, 2020
 * * Bug Fixes!
 * ** Failsafes added to prevent common events from running if they're empty.
 *    Fix made by Irina.
 * ** Skip Party Command will now work properly with TPB-based battle systems.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** In preparation for upcoming VisuStella MZ plugins.
 * 
 * Version 1.11: November 1, 2020
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added clarity for the Plugin Parameters for the Common Events settings
 *    found in the mechanics section. The common events are only meant to run
 *    in the map scene and not for the battle scene. Update made by Irina.
 * * Feature Update!
 * ** The Plugin Parameter for Mechanics, Common Events (on Map), Defeat Event
 *    now has updated functionality. If this has a common event attached to it,
 *    then losing to random encounters will no longer send the player to the
 *    Game Over scene, but instead, send the player back to the map scene,
 *    where the Defeat Common Event will run. Update made by Irina.
 * 
 * Version 1.10: October 25, 2020
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Action Sequence Plugin Command added by Olivia:
 * *** MECH: Custom Damage Formula
 * **** Changes the current action's damage formula to custom.
 *      This will assume the MANUAL damage style.
 * ** New Notetag added by Irina:
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battleback Scaling Settings
 * **** These settings allow you to adjust how battlebacks scale to the screen
 *      in the game.
 * *** <Battler Sprite Grounded>
 * **** Prevents the enemy from being able to jumping and/or floating due to
 *      Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * Version 1.09: October 18, 2020
 * * Bug Fixes!
 * ** Exiting out of the Options menu scene or Party menu scene will no longer
 *    cause party members to reset their starting position. Fix made by Arisu
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * ** There was a documentation error with <JS Pre-Regenerate> and
 *    <JS Post-Regenerate>. Fix made by Yanfly.
 * *** Before, these were written as <JS Pre-Regenerate Turn> and
 *     <JS Post-Regenerate Turn>. The "Turn" part of the notetag has been
 *     removed in the documentation.
 * * Feature Update!
 * ** Damage sprites on actors are now centered relative to the actor's anchor.
 *    Change made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Command added by Yanfly:
 * *** MECH: Variable Popup
 * **** Causes the unit(s) to display a popup using the data stored inside
 *      a variable.
 * 
 * Version 1.08: October 11, 2020
 * * Bug Fixes!
 * ** Dead party members at the start of battle no longer start offscreen.
 *    Fix made by Arisu.
 * ** Removed party members from battle no longer count as moving battlers.
 *    Fix made by Yanfly.
 * ** Using specific motions should now have the weapons showing and not
 *    showing properly. Fix made by Yanfly.
 * 
 * Version 1.07: October 4, 2020
 * * Bug Fixes!
 * ** Adding and removing actors will now refresh the battle status display.
 *    Fix made by Irina.
 * ** Adding new states that would change the affected battler's state motion
 *    will automatically refresh the battler's motion. Fix made by Irina.
 * ** Boss Collapse animation fixed and will sink into the ground.
 *    Fix made by Irina.
 * ** Failsafes added for certain animation types. Fix made by Yanfly.
 * ** Freeze Motion for thrust, swing, and missile animations will now show the
 *    weapons properly. Fix made by Yanfly.
 * ** The Guard command will no longer display the costs of the Attack command.
 *    Fix made by Irina.
 * * Documentation Update!
 * ** Updated help file for newly added plugin parameters.
 * * Feature Updates!
 * ** When using the Change Battleback event command in battle, the game client
 *    will wait until both battlebacks are loaded before changing the both of
 *    them so that the appearance is synched together. Change made by Yanfly.
 * * New Features!
 * ** New plugin parameters added by Irina!
 * *** Plugin Parameters > Actor Battler Settings > Chant Style
 * **** What determines the chant motion? Hit type or skill type?
 * 
 * Version 1.06: September 27, 2020
 * * Bug Fixes!
 * ** Enemy Battler Plugin Parameter "Shadow Visible" should now work again.
 *    Fix made by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins. Added by Yanfly.
 * * Documentation Update!
 * ** Updated the help file for all the new plugin parameters.
 * * Feature Update!
 * ** Action Sequence "MECH: HP, MP, TP" will now automatically collapse an
 *    enemy if it has been killed by the effect.
 * ** All battle systems for front view will now have damage popups appear
 *    in front of the status window instead of just the Portrait battle layout.
 *    Update made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Commands from Irina!
 * *** MOTION: Clear Freeze Frame
 * *** MOTION: Freeze Motion Frame
 * **** You can freeze a battler's sprite's motion with a specific frame.
 * ** New notetags for Maps and name tags for Troops added by Yanfly!
 * *** <Battle Layout: type> to change the battle layout style used for
 *     specific maps and/or troops.
 * ** New plugin parameters added by Yanfly!
 * *** Plugin Parameters > Battle Layout Settings > Command Window Width
 * **** This plugin parameter lets you adjust the window width for Party and
 *      Actor Command windows in the Default and List Battle Layout styles.
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset X
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset Y
 * **** These plugin parameters allow you to offset the position of the enemy
 *      name positions on the screen by a specific amount.
 * 
 * Version 1.05: September 20, 2020
 * * Bug Fixes!
 * ** Actors now use their casting or charging animations again during TPB/ATB.
 *    Fix made by Yanfly.
 * ** Defeat requirement for enemies will no longer crash the game if turned on
 *    after creating
 * ** Escaping animation no longer has actors stay in place. Fixed by Yanfly.
 * ** Failsafes added for newly added weapon types that have not been adjusted
 *    in the Database > System 2 tab. Fixed by Irina.
 * ** Shadows now appear under the actor sprites. Fix made by Yanfly.
 * ** Victory during TPB will no longer cancel the victory animations of
 *    actors that will have their turn after. Fixed by Yanfly.
 * * Documentation Update!
 * ** All Anchor Plugin Parameter descriptions now state to use values between
 *    0 and 1 to be safe. Update made by Yanfly.
 * * Feature Update!
 * ** During Active TPB / ATB, canceling out of the actor command window will
 *    go directly into the party window without having to sort through all of
 *    the available active actors.
 * ** Going from the Party Command Window's Fight command will immediately
 *    return back to the actor command window that was canceled from.
 * * New Features!
 * ** Action Sequence Plugin Command "MOVE: Spin/Rotate" has been updated.
 * *** A new parameter has been added: "Revert Angle on Finish"
 * *** Added by Yanfly.
 * ** New plugin parameters have been added to Damage Settings.
 * *** Appear Position: Selects where you want popups to appear relative to the
 *     battler. Head, Center, Base. Added by Yanfly.
 * *** Offset X: Sets how much to offset the sprites by vertically.
 *     Added by Yanfly.
 * *** Offset Y: Sets how much to offset the sprites by horizontally.
 *     Added by Yanfly.
 * ** New plugin parameters have been added to Actor Battler Settings.
 * *** Priority: Active - Place the active actor on top of actor and
 *     enemy sprites. Added by Yanfly.
 * *** Priority: Actors - Prioritize actors over enemies when placing 
 *     sprites on top of each other. Added by Yanfly.
 * 
 * Version 1.04: September 13, 2020
 * * Bug Fixes!
 * ** Active Battler Sprites now remain on top and won't be hidden behind
 *    other sprites for better visual clarity. Fix made by Arisu.
 * ** Collapsing battlers will now show the dead motion properly. Fix made by
 *    Olivia.
 * ** Dead battlers can no longer be given immortality. Fix made by Olivia.
 * ** Going into the Options menu with no battleback set will no longer set a
 *    battle snapshot.
 * ** HP Gauges for Sideview Enemies are no longer flipped! Fix made by Yanfly.
 * ** Moving a dead battler would no longer reset their animation. Fix made by
 *    Olivia.
 * ** Pre-Battle Common Events now work with events instead of just random
 *    encounters. Fix made by Yanfly.
 * ** Sideview Enemy shadows no longer twitch. Fix made by Irina.
 * * Documentation Updates!
 * ** Added further explanations for Anchor X and Anchor Y plugin parameters.
 *    This is because there's a lot of confusion for users who aren't familiar
 *    with how sprites work. Added by Irina.
 * ** <Magic Reduction: x> notetag updated to say magical damage instead of
 *    physical damage. Fix made by Yanfly.
 * * New Features!
 * ** Additional Action Sequence Plugin Commands have been added in preparation
 *    of upcoming plugins! Additions made by Irina.
 * *** Action Sequences - Angle (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Camera (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Skew (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Zoom (for VisuMZ_3_ActSeqCamera)
 * ** Additional Action Sequence Plugin Commands have been made available now
 *    and added to Battle Core! Additions made by Irina.
 * *** MOVE: Scale/Grow/Shrink
 * *** MOVE: Skew/Distort
 * *** MOVE: Spin/Rotate
 * *** MOVE: Wait For Scale
 * *** MOVE: Wait For Skew
 * *** MOVE: Wait For Spin
 * ** Plugin Parameters Additions. Additions made by Irina.
 * *** Plugin Params > Actor Battler Settings > Offset X
 * *** Plugin Params > Actor Battler Settings > Offset Y
 * *** Plugin Params > Actor Battler Settings > Smooth Image
 * *** Plugin Params > Enemy Battler Settings > Offset X
 * *** Plugin Params > Enemy Battler Settings > Offset Y
 * *** Plugin Params > Enemy Battler Settings > Smooth Image
 * 
 * Version 1.03: September 6, 2020
 * * Bug Fixes!
 * ** Animated Battlers will refresh their motions from the death motion once
 *    they're revived instead of waiting for their next input phase. Fix made
 *    by Yanfly.
 * ** Battle Log speed sometimes went by too fast for certain enabled messages.
 *    Wait timers are now added to them, like state results, buff results, and
 *    debuff results. Fix made by Yanfly.
 * ** Boss Collapse animation now works properly. Fix made by Yanfly.
 * ** Freeze fix for TPB (Wait) if multiple actors get a turn at the same time.
 *    Fix made by Olivia.
 * ** Pressing cancel on a target window after selecting a single skill no
 *    longer causes the status window to twitch.
 * ** Sideview Enemies had a split frame of being visible if they were to start
 *    off hidden in battle. Fix made by Shaz.
 * * Compatibility Update:
 * ** Battle Core's Sprite_Damage.setup() function is now separated fro the
 *    default to allow for better compatibility. Made by Yanfly.
 * * Documentation Update:
 * ** Inserted more information for "Damage Popups" under "Major Changes"
 * * New Features!
 * ** <Magic Penetration: x>, <Magic Penetration: x%> notetags added.
 * ** <Magic Reduction: x>, <Magic Reduction: x%> notetags added.
 * ** <Battle UI Offset: +x, +y>, <Battle UI Offset X: +x>, and
 *    <Battle UI Offset Y: +y> notetags added for adjusting the positions of
 *    HP Gauges and State Icons.
 * *** Notetags added by Yanfly.
 * 
 * Version 1.02: August 30, 2020
 * * Bug Fixes!
 * ** Failsafes added for parsing battle targets. Fix made by Yanfly.
 * ** Immortality is no longer ignored by skills/items with the Normal Attack
 *    state effect. Fix made by Yanfly.
 * ** Miss and Evasion sound effects work again! Fix made by Yanfly.
 * ** Selecting "Escape" from the Actor Command Window will now have the
 *    Inputting Battler show its escape motion. Fix made by Yanfly.
 * ** Wait for Movement now applies to SV Enemies. Fix made by Yanfly.
 * * New Features!
 * ** Plugin Command "ACSET: Finish Action" now has an option to turn off the
 *    Immortality of targets. Feature added by Yanfly.
 * * Optimization Update
 * ** Uses less resources when making checks for Pre-Battle Battle Start events
 * 
 * Version 1.01: August 23, 2020
 * * Bug Fixes!
 * ** Plugin Parameters > Damage Settings > Damage Formats are now fixed.
 *    Fix made by Olivia.
 * ** TPB Battle System with Disable Party Command fixed. Fix made by Olivia.
 * ** States now show in list format if faces are disabled. Fix made by Yanfly.
 * ** The default damage styles were missing the 'v' variable to allow for
 *    variable data input. These are back now. Fix made by Yanfly.
 * *** Users updating from version 1.00 will need to fix this problem by either
 *     removing the plugin from the Plugin Manager list and reinstalling it, or
 *     going to Plugin Parameters > Damage Settings > Style List > the style
 *     you want, and adding "const v = $gameVariables._data;" to JS: Formula
 * * New Notetags Added:
 * ** <Command Show Switch: x> added by Olivia
 * ** <Command Show All Switches: x,x,x> added by Olivia
 * ** <Command Show Any Switches: x,x,x> added by Olivia
 * ** <Command Hide Switch: x> added by Olivia
 * ** <Command Hide All Switches: x,x,x> added by Olivia
 * ** <Command Hide Any Switches: x,x,x> added by Olivia
 * ** <JS Command Visible> added by Olivia
 *
 * Version 1.00: August 20, 2020
 * * Finished Plugin!
 *
 * ============================================================================
 * End of Helpfile
 * ============================================================================
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceStart
 * @text -
 * @desc The following are Action Sequences commands/sets.
 * These Plugin Commands only work in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSet
 * @text Action Sequence - Action Sets
 * @desc Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_SetupAction
 * @text ACSET: Setup Action Set
 * @desc The generic start to most actions.
 * 
 * @arg DisplayAction:eval
 * @text Display Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: On
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionStart:eval
 * @text Battle Step
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg CastAnimation:eval
 * @text Cast Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_WholeActionSet
 * @text ACSET: All Targets Action Set
 * @desc Affects all targets simultaneously performing the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_TargetActionSet
 * @text ACSET: Each Target Action Set
 * @desc Goes through each target one by one to perform the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount1:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount2:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed * 2
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_FinishAction
 * @text ACSET: Finish Action
 * @desc The generic ending to most actions.
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForNewLine:eval
 * @text Wait For New Line
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effects
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ClearBattleLog:eval
 * @text Clear Battle Log
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEnd:eval
 * @text Home Reset
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAngle
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAngle
 * @text Action Sequences - Angle
 * @desc Allows you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeAngle
 * @text ANGLE: Change Angle
 * @desc Changes the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc Change the camera angle to this many degrees.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_Reset
 * @text ANGLE: Reset Angle
 * @desc Reset any angle settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_WaitForAngle
 * @text ANGLE: Wait For Angle
 * @desc Waits for angle changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAnimation
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAnimation
 * @text Action Sequences - Animations
 * @desc These Action Sequences are related to the 'Animations' that
 * can be found in the Animations tab of the Database.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ActionAnimation
 * @text ANIM: Action Animation
 * @desc Plays the animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation
 * @text ANIM: Attack Animation
 * @desc Plays the animation associated with the user's 1st weapon.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation2
 * @text ANIM: Attack Animation 2+
 * @desc Plays the animation associated with the user's other weapons.
 * Plays nothing if there is no other weapon equipped.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Slot:eval
 * @text Slot
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 2
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonAnimation
 * @text ANIM: Balloon Animation
 * @desc Plays a balloon animation on target(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg Balloon:str
 * @text Balloon Type
 * @type select
 * @option Exclamation
 * @option Question
 * @option Music Note
 * @option Heart
 * @option Anger
 * @option Sweat
 * @option Frustration
 * @option Silence
 * @option Light Bulb
 * @option Zzz
 * @option User-defined 1
 * @option User-defined 2
 * @option User-defined 3
 * @option User-defined 4
 * @option User-defined 5
 * @desc What kind of balloon should be played on target(s)?
 * @default Exclamation
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIcon
 * @text ANIM: Balloon Icon (Single)
 * @desc Plays a balloon animation using an icon on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg IconIndex:num
 * @text Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIconRange
 * @text ANIM: Balloon Icon (Range)
 * @desc Plays a balloon animation an icon range on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg startIcon:num
 * @text Starting Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg endIcon:num
 * @text Ending Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIconSpecific
 * @text ANIM: Balloon Icon (Specific)
 * @desc Plays a balloon animation with specific icons on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg icons:arraynum
 * @text Icons
 * @type string[]
 * @desc Insert the ID(s) of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default []
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_CastAnimation
 * @text ANIM: Cast Animation
 * @desc Plays the cast animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait
 * @text ANIM: Change Battle Portrait
 * @desc Changes the battle portrait of the actor (if it's an actor).
 * Can be used outside of battle/action sequences.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to change the portraits for.
 * Valid units can only be actors.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/pictures/
 * @desc Select the file to change the actor's portrait to.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_GuardAnimation
 * @text ANIM: Guard Animation
 * @desc Plays the animation associated with the user's guard action (if any).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ItemAnimation
 * @text ANIM: Item Animation
 * @desc Plays the animation associated with a specific item.
 * 
 * @arg ItemID:eval
 * @text Item ID
 * @type item
 * @desc Which item ID will the animation come from?
 * @default 7
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_PlayAtCoordinate
 * @text ANIM: Play at Coordinate
 * @desc Plays an animation on the screen at a specific x, y coordinate.
 * Requires VisuMZ_0_CoreEngine!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Animation
 * @type animation
 * @desc Plays this animation.
 * @default 1
 * 
 * @arg Coordinates
 *
 * @arg pointX:eval
 * @text X
 * @parent Coordinates
 * @desc X coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 *
 * @arg pointY:eval
 * @text Y
 * @parent Coordinates
 * @desc Y coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 *
 * @arg Mirror:eval
 * @text Mirror Animation?
 * @parent Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute Animation?
 * @parent Animation
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the animation?
 * @default false
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion?
 * @parent Animation
 * @type boolean
 * @on Wait
 * @off Normal
 * @desc Wait the animation to finish before continuing?
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimation
 * @text ANIM: Show Animation
 * @desc Plays the a specific animation on unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Select which animation to play on unit(s).
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimationJS
 * @text ANIM: Show Animation JS
 * @desc Plays the a specific animation on unit(s).
 * Uses JavaScript to determine animation ID.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:eval
 * @text JS: Animation ID
 * @desc Select which animation to play on unit(s).
 * Uses JavaScript to determine animation ID.
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_SkillAnimation
 * @text ANIM: Skill Animation
 * @desc Plays the animation associated with a specific skill.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will the animation come from?
 * @default 99
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_WaitForAnimation
 * @text ANIM: Wait For Animation
 * @desc Causes the interpreter to wait for any animation(s) to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceBattleLog
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakBattleLog
 * @text Action Sequences - Battle Log
 * @desc These Action Sequences are related to the Battle Log Window,
 * the window found at the top of the battle screen.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_AddText
 * @text BTLOG: Add Text
 * @desc Adds a new line of text into the Battle Log.
 * 
 * @arg Text:str
 * @text Text
 * @desc Add this text into the Battle Log.
 * Text codes allowed.
 * @default Insert text here.
 * 
 * @arg CopyCombatLog:eval
 * @text Copy to Combat Log?
 * @type boolean
 * @on Copy Text
 * @off Don't Copy
 * @desc Copies text to the Combat Log.
 * Requires VisuMZ_4_CombatLog
 * @default true
 *
 * @arg CombatLogIcon:num
 * @text Combat Log Icon
 * @parent CopyCombatLog:eval
 * @desc What icon would you like to bind to this entry?
 * Requires VisuMZ_4_CombatLog
 * @default 87
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Clear
 * @text BTLOG: Clear Battle Log
 * @desc Clears all the text in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_DisplayAction
 * @text BTLOG: Display Action
 * @desc Displays the current action in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PopBaseLine
 * @text BTLOG: Pop Base Line
 * @desc Removes the Battle Log's last added base line and 
 * all text up to its former location.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PushBaseLine
 * @text BTLOG: Push Base Line
 * @desc Adds a new base line to where the Battle Log currently is at.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Refresh
 * @text BTLOG: Refresh Battle Log
 * @desc Refreshes the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_UI
 * @text BTLOG: UI Show/Hide
 * @desc Shows or hides the Battle UI (including the Battle Log).
 * 
 * @arg ShowHide:eval
 * @text Show/Hide?
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows/hides the Battle UI.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForBattleLog
 * @text BTLOG: Wait For Battle Log
 * @desc Causes the interpreter to wait for the Battle Log to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForNewLine
 * @text BTLOG: Wait For New Line
 * @desc Causes the interpreter to wait for a new line in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCamera
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCamera
 * @text Action Sequences - Camera
 * @desc Allows you to have control over the camera.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Clamp
 * @text CAMERA: Clamp ON/OFF
 * @desc Turns battle camera clamping on/off.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Setting:eval
 * @text ON/OFF
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Turns camera clamping on/off.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusPoint
 * @text CAMERA: Focus Point
 * @desc Focus the battle camera on a certain point in the screen.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg FocusX:eval
 * @text X Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg FocusY:eval
 * @text Y Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusTarget
 * @text CAMERA: Focus Target(s)
 * @desc Focus the battle camera on certain battler target(s).
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to focus the battle camera on.
 * @default ["user"]
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Offset
 * @text CAMERA: Offset
 * @desc Offset the battle camera from the focus target.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @desc How much to offset the camera X by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @desc How much to offset the camera Y by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for offset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Reset
 * @text CAMERA: Reset
 * @desc Reset the battle camera settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg ResetFocus:eval
 * @text Reset Focus?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the focus point?
 * @default true
 * 
 * @arg ResetOffset:eval
 * @text Reset Offset?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the camera offset?
 * @default true
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for reset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_WaitForCamera
 * @text CAMERA: Wait For Camera
 * @desc Waits for camera to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCutin
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCutin
 * @text Action Sequences - Cutins
 * @desc Allows you to have control over Visual Cutin Effects.
 * Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_AddVisualCutinEffect
 * @text CUTIN: Add Visual Cutin Effect
 * @desc Adds the Visual Cutin Effect using these desired settings.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg Basic
 * @text Basic Settings
 * 
 * @arg type:str
 * @text Cutin Style Type
 * @parent Basic
 * @type select
 * @option -
 * @option Whole
 * @option -
 * @option Showcase
 * @option -
 * @option LeftHorzSpan
 * @option CenterHorzSpan
 * @option RightHorzSpan
 * @option -
 * @option LeftHorzSlash
 * @option RightHorzSlash
 * @option -
 * @option LeftVertSlash
 * @option RightVertSlash
 * @option -
 * @option LeftMajor
 * @option RightMajor
 * @option -
 * @option LeftMinor
 * @option CenterMinor
 * @option RightMinor
 * @option -
 * @option LeftDiamond
 * @option CenterDiamond
 * @option RightDiamond
 * @option -
 * @option LeftGemstone
 * @option CenterGemstone
 * @option RightGemstone
 * @option -
 * @option TopLeftQuad
 * @option TopRightQuad
 * @option BottomLeftQuad
 * @option BottomRightQuad
 * @option -
 * @option TopLeftCorner
 * @option TopRightCorner
 * @option BottomLeftCorner
 * @option BottomRightCorner
 * @option -
 * @option Row1stThird
 * @option Row2ndThird
 * @option Row3rdThird
 * @option -
 * @option Row1stFourth
 * @option Row2ndFourth
 * @option Row3rdFourth
 * @option Row4thFourth
 * @option -
 * @option Row1stFifth
 * @option Row2ndFifth
 * @option Row3rdFifth
 * @option Row4thFifth
 * @option Row5thFifth
 * @option -
 * @option Col1stThird
 * @option Col2ndThird
 * @option Col3rdThird
 * @option -
 * @option Col1stFourth
 * @option Col2ndFourth
 * @option Col3rdFourth
 * @option Col4thFourth
 * @option -
 * @option Col1stFifth
 * @option Col2ndFifth
 * @option Col3rdFifth
 * @option Col4thFifth
 * @option Col5thFifth
 * @option -
 * @option SixPack1
 * @option SixPack2
 * @option SixPack3
 * @option SixPack4
 * @option SixPack5
 * @option SixPack6
 * @option -
 * @option EightPack1
 * @option EightPack2
 * @option EightPack3
 * @option EightPack4
 * @option EightPack5
 * @option EightPack6
 * @option EightPack7
 * @option EightPack8
 * @option -
 * @option TwelvePack1
 * @option TwelvePack2
 * @option TwelvePack3
 * @option TwelvePack4
 * @option TwelvePack5
 * @option TwelvePack6
 * @option TwelvePack7
 * @option TwelvePack8
 * @option TwelvePack9
 * @option TwelvePack10
 * @option TwelvePack11
 * @option TwelvePack12
 * @option -
 * @desc What Visual Cutin Effect style type do you wish to use?
 * Only one of each cutin-style type can be present.
 * @default CenterHorzSpan
 * 
 * @arg Targets:arraystr
 * @text Portrait Target
 * @parent Basic
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to grab the Visual Cutin Effect portrait
 * data from. First unit will be used to make portrait.
 * @default ["user"]
 *
 * @arg parallaxFilename:str
 * @text Parallax Filename
 * @parent Basic
 * @type file
 * @dir img/parallaxes/
 * @require 1
 * @desc Pick a parallax to use for the Visual Cutin Effect.
 * Pick (None) to not use a parallax.
 * @default >>>ATTENTION<<<
 *
 * @arg bgColor:str
 * @text Background Color
 * @parent Basic
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #888888
 *
 * @arg ExtraSettings:struct
 * @text Extra Settings
 * @type struct<VisualCutinEffect>
 * @desc Extra Plugin Command settings pertaining to this Visual Cutin Effect.
 * @default {}
 * 
 * @arg WaitForEntrance:eval
 * @text Wait For Entrance
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin entrance is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_EndVisualCutinEffectAll
 * @text CUTIN: End Visual Cutin Effect (All)
 * @desc Ends all Visual Cutin Effects currently present.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg WaitForExit:eval
 * @text Wait For Exit
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin exit is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_EndVisualCutinEffectType
 * @text CUTIN: End Visual Cutin Effect (Type)
 * @desc Ends the Visual Cutin Effect with the matching type.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg type:str
 * @text Cutin Style Type
 * @type select
 * @option -
 * @option Whole
 * @option -
 * @option Showcase
 * @option -
 * @option LeftHorzSpan
 * @option CenterHorzSpan
 * @option RightHorzSpan
 * @option -
 * @option LeftHorzSlash
 * @option RightHorzSlash
 * @option -
 * @option LeftVertSlash
 * @option RightVertSlash
 * @option -
 * @option LeftMajor
 * @option RightMajor
 * @option -
 * @option LeftMinor
 * @option CenterMinor
 * @option RightMinor
 * @option -
 * @option LeftDiamond
 * @option CenterDiamond
 * @option RightDiamond
 * @option -
 * @option LeftGemstone
 * @option CenterGemstone
 * @option RightGemstone
 * @option -
 * @option TopLeftQuad
 * @option TopRightQuad
 * @option BottomLeftQuad
 * @option BottomRightQuad
 * @option -
 * @option TopLeftCorner
 * @option TopRightCorner
 * @option BottomLeftCorner
 * @option BottomRightCorner
 * @option -
 * @option Row1stThird
 * @option Row2ndThird
 * @option Row3rdThird
 * @option -
 * @option Row1stFourth
 * @option Row2ndFourth
 * @option Row3rdFourth
 * @option Row4thFourth
 * @option -
 * @option Row1stFifth
 * @option Row2ndFifth
 * @option Row3rdFifth
 * @option Row4thFifth
 * @option Row5thFifth
 * @option -
 * @option Col1stThird
 * @option Col2ndThird
 * @option Col3rdThird
 * @option -
 * @option Col1stFourth
 * @option Col2ndFourth
 * @option Col3rdFourth
 * @option Col4thFourth
 * @option -
 * @option Col1stFifth
 * @option Col2ndFifth
 * @option Col3rdFifth
 * @option Col4thFifth
 * @option Col5thFifth
 * @option -
 * @option SixPack1
 * @option SixPack2
 * @option SixPack3
 * @option SixPack4
 * @option SixPack5
 * @option SixPack6
 * @option -
 * @option EightPack1
 * @option EightPack2
 * @option EightPack3
 * @option EightPack4
 * @option EightPack5
 * @option EightPack6
 * @option EightPack7
 * @option EightPack8
 * @option -
 * @option TwelvePack1
 * @option TwelvePack2
 * @option TwelvePack3
 * @option TwelvePack4
 * @option TwelvePack5
 * @option TwelvePack6
 * @option TwelvePack7
 * @option TwelvePack8
 * @option TwelvePack9
 * @option TwelvePack10
 * @option TwelvePack11
 * @option TwelvePack12
 * @option -
 * @desc What Visual Cutin Effect style type do you wish to end?
 * @default CenterHorzSpan
 * 
 * @arg WaitForExit:eval
 * @text Wait For Exit
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin exit is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_WaitForEntrance
 * @text CUTIN: Wait for Cutin Entrance
 * @desc Wait until all cutin entrances are finished before performing the next event command. Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_WaitForExit
 * @text CUTIN: Wait for Cutin Exit
 * @desc Wait until all cutin exits are finished before performing the next event command. Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 *
 * @command ActionSequenceSpaceDragonbones
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreaDragonbones
 * @text Action Sequences - Dragonbones
 * @desc These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesMotionAni
 * @text DB: Dragonbones Animation
 * @desc Causes the unit(s) to play a Dragonbones motion animation.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg MotionAni:str
 * @text Motion Animation
 * @desc What is the name of the Dragonbones motion animation you wish to play?
 * @default attack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesTimeScale
 * @text DB: Dragonbones Time Scale
 * @desc Causes the unit(s) to change their Dragonbones time scale.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg TimeScale:num
 * @text Time Scale
 * @desc Change the value of the Dragonbones time scale to this.
 * @default 1.0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceElements
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakElements
 * @text Action Sequences - Elements
 * @desc These Action Sequences are related to elements.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_AddElements
 * @text ELE: Add Elements
 * @desc Adds element(s) to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to add onto the action.
 * Insert multiple element ID's to add multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_Clear
 * @text ELE: Clear Element Changes
 * @desc Clears all element changes made through Action Sequences.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_ForceElements
 * @text ELE: Force Elements
 * @desc Forces only specific element(s) when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to force in the action.
 * Insert multiple element ID's to force multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_NullElements
 * @text ELE: Null Element
 * @desc Forces no element to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceGrid
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakGrid
 * @text Action Sequences - Grid
 * @desc These Action Sequences are Battle Grid System-related.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_ActionAnimationAtNode
 * @text GRID: Action Animation at Node
 * @desc Plays action animation at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AddPassiveStatesToNode
 * @text GRID: Add Passive State(s) to Node
 * @desc Adds Passive State(s) at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg StateIDs:arraynum
 * @text State ID(s)
 * @type state[]
 * @desc Select which State ID(s) to add as a Passive State.
 * @default []
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to add the Passive State Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to add a Passive State(s) to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to add a Passive State(s) to.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AddTriggerToNode
 * @text GRID: Add Trigger to Node
 * @desc Adds Trigger to target node. Target node cannot have battler.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg SkillID:num
 * @text Skill ID
 * @type skill
 * @desc Select which Skill ID(s) to add as the trigger.
 * @default 1
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to add the Trigger Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to add a Trigger to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to add a Trigger to.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationIDAtNode
 * @text GRID: Animation ID at Node
 * @desc Plays specific animation ID at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Play this animation at target node.
 * @default 1
 *
 * @arg Mirror:eval
 * @text Mirror?
 * @parent AnimationID:num
 * @type boolean
 * @on Mirror Animation
 * @off Don't Mirror
 * @desc Mirror this animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute?
 * @parent AnimationID:num
 * @type boolean
 * @on Mute Animation
 * @off Don't Mute
 * @desc Mute this animation?
 * @default false
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationJsAtNode
 * @text GRID: Animation JS at Node
 * @desc Uses JS to calculate which animation to play at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * @arg AnimationID:eval
 * @text JS: Animation ID
 * @desc Calculate which animation to play on unit(s).
 * Uses JavaScript to determine animation ID.
 * @default 1
 *
 * @arg Mirror:eval
 * @text Mirror?
 * @parent AnimationID:eval
 * @type boolean
 * @on Mirror Animation
 * @off Don't Mirror
 * @desc Mirror this animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute?
 * @parent AnimationID:eval
 * @type boolean
 * @on Mute Animation
 * @off Don't Mute
 * @desc Mute this animation?
 * @default false
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationTypeAtNode
 * @text GRID: Animation Type at Node
 * @desc Plays certain animation type at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg Type:str
 * @text Animation Type
 * @type select
 * @option Attack
 * @option Guard
 * @option Item
 * @option Skill
 * @desc What is the animation type you would like to play?
 * @default Attack
 * 
 * @arg Slot:eval
 * @text Slot (Attack Type)
 * @parent Type:str
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 1
 * 
 * @arg ItemID:num
 * @text Item ID (Item Type)
 * @parent Type:str
 * @type item
 * @desc Which item ID will the animation come from?
 * @default 7
 * 
 * @arg SkillID:num
 * @text Skill ID (Skill Type)
 * @parent Type:str
 * @type skill
 * @desc Which skill ID will the animation come from?
 * @default 99
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_MoveTargetsInDirection
 * @text GRID: Move Target(s) In Direction
 * @desc Moves target(s) in a specific direction to other Nodes.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to move.
 * @default ["all targets"]
 * 
 * @arg MoveType:str
 * @text Movement Type
 * @type select
 * @option -
 * @option Exact
 * @option -
 * @option Mid
 * @option -
 * @option Switch
 * @option Switch Mid
 * @option -
 * @option Crash
 * @option Crash Mid
 * @option -
 * @desc Select the Movement type rulings.
 * See VisuMZ_2_BattleGridSystem help file for details.
 * @default Mid
 * 
 * @arg Direction:str
 * @text Direction
 * @parent MoveType:str
 * @type select
 * @option -
 * @option Upward
 * @option Downward
 * @option -
 * @option Up-Forward
 * @option Forward
 * @option Down-Forward
 * @option -
 * @option Up-Backward
 * @option Backward
 * @option Down-Backward
 * @option -
 * @option Up-Leftward
 * @option Leftward
 * @option Down-Leftward
 * @option -
 * @option Up-Rightward
 * @option Rightward
 * @option Down-Rightward
 * @option -
 * @desc Select the movement direction.
 * @default Backward
 *
 * @arg Distance:eval
 * @text Distance
 * @parent MoveType:str
 * @desc The number of nodes to be moved.
 * You may use JavaScript code.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 *
 * @arg SilentMove:eval
 * @text Silent Change?
 * @type boolean
 * @on Silent
 * @off Visual
 * @desc Silent: Discreet changes shown. More apparent later.
 * Visual: Instant changes shown.
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_PullToTargetNode
 * @text GRID: Pull To Target Node
 * @desc Pulls battlers towards target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to pull on?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to pull to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to pull to.
 * @default 1
 *
 * @arg Strength:eval
 * @text Strength
 * @desc Input the strength level of the pull.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_PushFromTargetNode
 * @text GRID: Push From Target Node
 * @desc Pushes battlers away from target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to push from?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to push from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to push from.
 * @default 1
 *
 * @arg Strength:eval
 * @text Strength
 * @desc Input the strength level of the push.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_ClearPassiveStatesFromNode
 * @text GRID: Remove All Passive States from Node
 * @desc Removes all all Passive State effects at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to clear the Node for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to clear Passive States from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to clear Passive States from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_RemovePassiveStatesFromNode
 * @text GRID: Remove Passive State(s) from Node
 * @desc Remove Passive State(s) at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg StateIDs:arraynum
 * @text State ID(s)
 * @type state[]
 * @desc Select which State ID(s) to remove as a Passive State.
 * @default []
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to remove the Passive State Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to remove a Passive State(s) from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to remove a Passive State(s) from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_RemoveTriggerFromNode
 * @text GRID: Remove Trigger from Node
 * @desc Removes Trigger from target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to clear Triggers for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to clear Triggers from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to clear Triggers from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_TeleportToNode
 * @text GRID: Teleport To Node
 * @desc Teleports user/random opponent to target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to teleport to?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to teleport to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to teleport.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_TraverseToNode
 * @text GRID: Traverse To Node
 * @desc Traverses user/random opponent to target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to traverse to?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to traverse to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to traverse.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceHorror
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakHorror
 * @text Action Sequences - Horror Effects
 * @desc These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_Clear
 * @text HORROR: Clear All Filters
 * @desc Clear all Horror Effects filters on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove Horror Effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchCreate
 * @text HORROR: Glitch Create
 * @desc Creates the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg slices:num
 * @text Glitch Slices
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Glitch slices to be used with the target.
 * @default 10
 *
 * @arg offset:num
 * @text Glitch Offset
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Default offset value.
 * @default 100
 *
 * @arg animated:eval
 * @text Glitch Animated?
 * @parent FilterGlitch
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the glitch effect?
 * @default true
 *
 * @arg aniFrequency:num
 * @text Glitch Frequency
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how frequent to make the glitch effect?
 * Lower = often     Higher = rarer
 * @default 300
 *
 * @arg aniStrength:num
 * @text Glitch Strength
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how strong is the glitch effect?
 * Lower = weaker     Higher = stronger
 * @default 30
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchRemove
 * @text HORROR: Glitch Remove
 * @desc Removes the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseCreate
 * @text HORROR: Noise Create
 * @desc Creates the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg noise:num
 * @text Noise Rate
 * @parent FilterNoise
 * @desc Noise rate to be used with the target.
 * @default 0.3
 *
 * @arg animated:eval
 * @text Noise Animated
 * @parent FilterNoise
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the noise for the target?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseRemove
 * @text HORROR: Noise Remove
 * @desc Removes the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVCreate
 * @text HORROR: TV Create
 * @desc Creates the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg lineWidth:num
 * @text TV Line Thickness
 * @parent FilterTV
 * @type number
 * @min 1
 * @desc Default TV line thickness
 * Lower = thinner     Higher = thicker
 * @default 5
 *
 * @arg vignetting:num
 * @text TV Corner Size
 * @parent FilterTV
 * @desc Default TV line corner size
 * Lower = smaller     Higher = bigger
 * @default 0.3
 *
 * @arg animated:eval
 * @text TV Animated
 * @parent FilterTV
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the TV?
 * @default true
 *
 * @arg aniSpeed:num
 * @text TV Speed
 * @parent FilterTV
 * @desc Speed used to animate the TV if animated
 * Lower = slower     Higher = faster
 * @default 0.25
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVRemove
 * @text HORROR: TV Remove
 * @desc Removes the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceImpact
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakImpact
 * @text Action Sequences - Impact
 * @desc These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_BlueRedInvert
 * @text IMPACT: Bizarro Inversion
 * @desc Swaps blue/red colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Bizarro?
 * @type boolean
 * @on Enable / Bizarro
 * @off Disable / Normal
 * @desc Enable Bizarro Inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ColorBreak
 * @text IMPACT: Color Break
 * @desc Breaks the colors on the screen before reassembling.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Intensity:eval
 * @text Intensity
 * @desc What is the intensity of the color break effect?
 * @default 60
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the color break effect?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutBack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Desaturate
 * @text IMPACT: Desaturation
 * @desc Desaturates all colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Desaturate?
 * @type boolean
 * @on Enable / Desaturate
 * @off Disable / Normal
 * @desc Enable Desaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurScreen
 * @text IMPACT: Motion Blur Screen
 * @desc Creates a motion blur on the whole screen.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.1
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurTarget
 * @text IMPACT: Motion Blur Target(s)
 * @desc Creates a motion blur on selected target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion blur effects for.
 * @default ["user"]
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.5
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailCreate
 * @text IMPACT: Motion Trail Create
 * @desc Creates a motion trail effect for the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion trail effects for.
 * @default ["user"]
 *
 * @arg delay:num
 * @text Delay
 * @type number
 * @min 1
 * @desc How many frames to delay by when creating a motion trail?
 * The higher the delay, the less after images there are.
 * @default 1
 *
 * @arg duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion trail last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg hue:num
 * @text Hue
 * @type number
 * @min 0
 * @max 360
 * @desc What do you want to be the hue for the motion trail?
 * @default 0
 *
 * @arg opacityStart:num
 * @text Starting Opacity
 * @type number
 * @min 0
 * @max 255
 * @desc What starting opacity value do you want for the motion
 * trail? Opacity values decrease over time.
 * @default 200
 *
 * @arg tone:eval
 * @text Tone
 * @desc What tone do you want for the motion trail?
 * Format: [Red, Green, Blue, Gray]
 * @default [0, 0, 0, 0]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailRemove
 * @text IMPACT: Motion Trail Remove
 * @desc Removes the motion trail effect from the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to clear motion trail effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Negative
 * @text IMPACT: Negative Inversion
 * @desc Inverts all the colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Negative?
 * @type boolean
 * @on Enable / Negative
 * @off Disable / Normal
 * @desc Enable negative inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Oversaturate
 * @text IMPACT: Oversaturation
 * @desc Oversaturates colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Oversaturate?
 * @type boolean
 * @on Enable / Oversaturate
 * @off Disable / Normal
 * @desc Enable Oversaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwavePoint
 * @text IMPACT: Shockwave at Point
 * @desc Creates a shockwave at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveEachTargets
 * @text IMPACT: Shockwave from Each Target(s)
 * @desc Creates a shockwave at each of the target(s) location(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveCenterTargets
 * @text IMPACT: Shockwave from Target(s) Center
 * @desc Creates a shockwave from the center of the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeScale
 * @text IMPACT: Time Scale
 * @desc Adjust time to go faster or slower!
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc Adjusts how fast/slow time goes.
 * 1.00 is normal. Lower is slower. Higher is faster.
 * @default 1.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeStop
 * @text IMPACT: Time Stop
 * @desc Stops time for a set amount of milliseconds.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg ms:eval
 * @text Milliseconds
 * @desc How many milliseconds should time stop for?
 * 1000 milliseconds = 1 second.
 * @default 1000
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurPoint
 * @text IMPACT: Zoom Blur at Point
 * @desc Creates a zoom blur at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurTargetCenter
 * @text IMPACT: Zoom Blur at Target(s) Center
 * @desc Creates a zoom blur at the center of targets.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a zoom blur from.
 * @default ["user"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a zoom blur from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceInject
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakInject
 * @text Action Sequences - Inject
 * @desc These Action Sequences are related to injected animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationStart
 * @text INJECT: Animation Begin
 * @desc Injects and plays a whole spritesheet animation.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to inject the animation on.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/sv_actors/
 * @desc Select the animation spritesheet file.
 * Located in the /img/sv_actors/ folder.
 * @default Untitled
 *
 * @arg horzCells:num
 * @text Horizontal Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many horizontal cells (or columns) are there?
 * @default 1
 *
 * @arg vertCells:num
 * @text Vertical Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many vertical cells (or rows) are there?
 * @default 1
 *
 * @arg frameDelay:num
 * @text Frame Delay
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many frames are played inbetween cells?
 * @default 1
 *
 * @arg smooth:eval
 * @text Smooth Bitmap?
 * @parent Filename:str
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth the spritesheet graphic?
 * @default false
 * 
 * @arg Offset
 *
 * @arg offsetX:eval
 * @text Offset X
 * @parent Offset
 * @desc Offsets the X position of the injected animation.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg offsetY:eval
 * @text Offset Y
 * @parent Offset
 * @desc Offsets the Y position of the injected animation.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationEnd
 * @text INJECT: Animation End
 * @desc Stops and ends any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to stop injected animation(s).
 * @default ["user"]
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationPauseResume
 * @text INJECT: Animation Pause/Resume
 * @desc Pauses/resumes any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to pause injected animation(s).
 * @default ["user"]
 *
 * @arg pause:eval
 * @text Pause?
 * @parent Filename:str
 * @type boolean
 * @on Pause
 * @off Resume
 * @desc Pause the injected animation?
 * @default true
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_WaitForInjectAni
 * @text INJECT: Wait For Injected Animation
 * @desc Waits for injected animations to complete before performing
 * next command. Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMechanics
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMechanics
 * @text Action Sequences - Mechanics
 * @desc These Action Sequences are related to various mechanics
 * related to the battle system.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActionEffect
 * @text MECH: Action Effect
 * @desc Causes the unit(s) to take damage/healing from action and
 * incurs any changes made such as buffs and states.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActiveChainInputDisable
 * @text MECH: Active Chain Input Disable
 * @desc Disables input for Active Chain Skills at this time.
 * Requires VisuMZ_3_ActiveChainSkills!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddBuffDebuff
 * @text MECH: Add Buff/Debuff
 * @desc Adds buff(s)/debuff(s) to unit(s). 
 * Determine which parameters are affected and their durations.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s) and/or debuff(s).
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to buff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["ATK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to debuff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["DEF"]
 * 
 * @arg Turns:eval
 * @text Turns
 * @desc Number of turns to set the parameter(s) buffs to.
 * You may use JavaScript code.
 * @default 5
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddState
 * @text MECH: Add State
 * @desc Adds state(s) to unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s).
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to add to unit(s).
 * Insert multiple state ID's to add multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AnalyzeWeakness
 * @text MECH: Analyze Weakness
 * @desc Reveal elemental weakness(es) from target(s).
 * Requires VisuMZ_3_WeaknessDisplay!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reveal elemental weaknesses for.
 * @default ["all targets"]
 * 
 * @arg Reveal:eval
 * @text Reveal
 * @desc How many elemental weaknesses do you wish to reveal?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ArmorPenetration
 * @text MECH: Armor Penetration
 * @desc Adds an extra layer of defensive penetration/reduction.
 * You may use JavaScript code for any of these.
 *
 * @arg ArmorPenetration
 * @text Armor/Magic Penetration
 * 
 * @arg ArPenRate:eval
 * @text Rate
 * @parent ArmorPenetration
 * @desc Penetrates an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArPenFlat:eval
 * @text Flat
 * @parent ArmorPenetration
 * @desc Penetrates a flat amount of armor by this value.
 * @default 0
 *
 * @arg ArmorReduction
 * @text Armor/Magic Reduction
 * 
 * @arg ArRedRate:eval
 * @text Rate
 * @parent ArmorReduction
 * @desc Reduces an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArRedFlat:eval
 * @text Flat
 * @parent ArmorReduction
 * @desc Reduces a flat amount of armor by this value.
 * @default 0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AtbGauge
 * @text MECH: ATB Gauge
 * @desc Alters the ATB/TPB Gauges.
 * Requires VisuMZ_2_BattleSystemATB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 *
 * @arg Charging
 * 
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the ATB Gauge if it is currently charging.
 * @default -0.00
 * 
 * @arg Casting
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the ATB Gauge if it is currently casting.
 * @default -0.00
 * 
 * @arg Interrupt:eval
 * @text Interrupt?
 * @parent Casting
 * @type boolean
 * @on Interrupt
 * @off Don't Interrupt
 * @desc Interrupt the ATB Gauge if it is currently casting?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsChange
 * @text MECH: Boost Points Change
 * @desc Changes Boost Points for target(s).
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Boost Points for.
 * @default ["user"]
 * 
 * @arg BoostPoints:eval
 * @text Alter Boost Points By
 * @desc Alters the unit(s) Boost Points.
 * Positive for gaining points. Negative for losing points.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsStoreData
 * @text MECH: Boost Store Data
 * @desc Stores the number of Boosts used this action inside a variable.
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg VariableID:num
 * @text Variable ID
 * @type variable
 * @desc Which variable do you want to store the data inside?
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldChange
 * @text MECH: Break Shield Change
 * @desc Changes Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Break Shields for.
 * @default ["all targets"]
 * 
 * @arg BreakShields:eval
 * @text Alter Break Shields By
 * @desc Alters the unit(s) Break Shields.
 * Positive for gaining shields. Negative for losing shields.
 * @default -1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldReset
 * @text MECH: Break Shield Reset
 * @desc Resets Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reset the Break Shields for.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BtbGain
 * @text MECH: BTB Brave Points
 * @desc Alters the target(s) Brave Points to an exact value.
 * Requires VisuMZ_2_BattleSystemBTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 * 
 * @arg BravePoints:eval
 * @text Alter Brave Points By
 * @desc Alters the target(s) Brave Points.
 * Positive for gaining BP. Negative for losing BP.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Collapse
 * @text MECH: Collapse
 * @desc Causes the unit(s) to perform its collapse animation
 * if the unit(s) has died.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to process a death collapse.
 * @default ["all targets"]
 * 
 * @arg ForceDeath:eval
 * @text Force Death
 * @type boolean
 * @on On
 * @off Off
 * @desc Force death even if the unit has not reached 0 HP?
 * This will remove immortality.
 * @default false
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effect?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for the collapse effect to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbOrder
 * @text MECH: CTB Order
 * @desc Alters the CTB Turn Order.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg ChangeOrderBy:eval
 * @text Change Order By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbSpeed
 * @text MECH: CTB Speed
 * @desc Alters the CTB Speed.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Speed for.
 * @default ["all targets"]
 *
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the CTB Speed if it is currently charging.
 * @default -0.00
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the CTB Speed if it is currently casting.
 * @default -0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CustomDmgFormula
 * @text MECH: Custom Damage Formula
 * @desc Changes the current action's damage formula to custom.
 * This will assume the MANUAL damage style.
 * 
 * @arg Formula:str
 * @text Formula
 * @desc Changes the current action's damage formula to custom.
 * Use 'default' to revert the damage formula.
 * @default default
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DamagePopup
 * @text MECH: Damage Popup
 * @desc Causes the unit(s) to display the current state of
 * damage received or healed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a damage popup.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DeathBreak
 * @text MECH: Dead Label Jump
 * @desc If the active battler is dead, jump to a specific label in the common event.
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If the active battler is dead, jump to this specific label in the common event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateAttackEffect
 * @text MECH: Emulate Attack Effect
 * @desc Emulate an "Action Effect" but using a the user's
 * attack skill instead of the current action.
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateGuardEffect
 * @text MECH: Emulate Guard Effect
 * @desc Emulate an "Action Effect" but using a the user's
 * guard skill instead of the current action.
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateItemEffect
 * @text MECH: Emulate Item Effect
 * @desc Emulate an "Action Effect" but using a specific item
 * instead of the current action.
 * 
 * @arg ItemID:eval
 * @text Item ID
 * @type item
 * @desc Which item ID will be emulated?
 * @default 7
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateSkillCost
 * @text MECH: Emulate Skill Cost
 * @desc Pick a skill for target(s) to emulate paying the cost of.
 * Includes cooldowns and limited uses.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will have its cost paid for?
 * Use 0 for current action's skill.
 * @default 0
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateSkillEffect
 * @text MECH: Emulate Skill Effect
 * @desc Emulate an "Action Effect" but using a specific skill
 * instead of the current action.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will be emulated?
 * @default 99
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EnemyEscape
 * @text MECH: Enemy Escape
 * @desc Causes the enemy unit(s) to escape.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to escape.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EtbAction
 * @text MECH: ETB Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Requires VisuMZ_2_BattleSystemETB!
 * 
 * @arg ActionCount:eval
 * @text Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Positive for gaining energy. Negative for losing energy.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_FtbAction
 * @text MECH: FTB Action Count
 * @desc Alters the subject team's available Action Count.
 * Requires VisuMZ_2_BattleSystemFTB!
 * 
 * @arg ActionCount:eval
 * @text Action Count
 * @desc Alters the subject team's available Action Count.
 * Positive for gaining actions. Negative for losing actions.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_HpMpTp
 * @text MECH: HP, MP, TP
 * @desc Alters the HP, MP, and TP values for unit(s).
 * Positive values for healing. Negative values for damage.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["user"]
 *
 * @arg HP
 * 
 * @arg HP_Rate:eval
 * @text HP Rate
 * @parent HP
 * @desc Changes made to HP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg HP_Flat:eval
 * @text HP Flat
 * @parent HP
 * @desc Flat changes made to HP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg MP
 * 
 * @arg MP_Rate:eval
 * @text MP Rate
 * @parent MP
 * @desc Changes made to MP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg MP_Flat:eval
 * @text MP Flat
 * @parent MP
 * @desc Flat changes made to MP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 *
 * @arg TP
 * 
 * @arg TP_Rate:eval
 * @text TP Rate
 * @parent TP
 * @desc Changes made to TP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg TP_Flat:eval
 * @text TP Flat
 * @parent TP
 * @desc Flat changes made to TP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg ShowPopup:eval
 * @text Damage Popup?
 * @type boolean
 * @on On
 * @off Off
 * @desc Display a damage popup after?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Immortal
 * @text MECH: Immortal
 * @desc Changes the immortal flag of targets. If immortal flag is
 * removed and a unit would die, collapse that unit.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Alter the immortal flag of these groups. If immortal flag
 * is removed and a unit would die, collapse that unit.
 * @default ["user","all targets"]
 * 
 * @arg Immortal:eval
 * @text Immortal
 * @type boolean
 * @on On
 * @off Off
 * @desc Turn immortal flag for unit(s) on/off?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Multipliers
 * @text MECH: Multipliers
 * @desc Changes the multipliers for the current action.
 * You may use JavaScript code for any of these.
 *
 * @arg CriticalHit
 * @text Critical Hit%
 * 
 * @arg CriticalHitRate:eval
 * @text Rate
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalHitFlat:eval
 * @text Flat
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this flat bonus.
 * @default +0.00
 *
 * @arg CriticalDmg
 * @text Critical Damage
 * 
 * @arg CriticalDmgRate:eval
 * @text Rate
 * @parent CriticalDmg
 * @desc Affects critical damage by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalDmgFlat:eval
 * @text Flat
 * @parent CriticalDmg
 * @desc Affects critical damage by this flat bonus.
 * @default +0.00
 *
 * @arg Damage
 * @text Damage/Healing
 * 
 * @arg DamageRate:eval
 * @text Rate
 * @parent Damage
 * @desc Sets the damage/healing multiplier for current action.
 * @default 1.00
 * 
 * @arg DamageFlat:eval
 * @text Flat
 * @parent Damage
 * @desc Sets the damage/healing bonus for current action.
 * @default +0.00
 *
 * @arg HitRate
 * @text Hit Rate
 * 
 * @arg HitRate:eval
 * @text Rate
 * @parent HitRate
 * @desc Affects chance to connect attack by this multiplier.
 * @default 1.00
 * 
 * @arg HitFlat:eval
 * @text Flat
 * @parent HitRate
 * @desc Affects chance to connect attack by this flat bonus.
 * @default +0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OnceParallel
 * @text MECH: Once Parallel
 * @desc Plays a Common Event parallel to the battle event once
 * without repeating itself when done.
 *
 * @arg CommonEventID:num
 * @text Common Event ID
 * @type common_event
 * @desc The ID of the parallel Common Event to play.
 * Does NOT repeat itself when finished.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OtbOrder
 * @text MECH: OTB Order
 * @desc Alters the OTB Turn Order. Best used with single targets.
 * Requires VisuMZ_2_BattleSystemOTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the OTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg CurrentTurn:eval
 * @text Current Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @arg NextTurn:eval
 * @text Next Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @arg FollowTurn:eval
 * @text Follow Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbAlterCost
 * @text MECH: PTB Alter Cost
 * @desc Alters the action's cost settings.
 * Requires VisuMZ_2_BattleSystemPTB!
 *
 * @arg Override:eval
 * @text Override?
 * @type boolean
 * @on Override Permanent
 * @off Require Temporary
 * @desc Overrides any 'permanent' settings for Changeability?
 * @default false
 *
 * @arg alterChange:str
 * @text Alter Changeability
 * @type select
 * @option Unchanged - Cost type is unchanged after this effect
 * @value unchanged
 * @option Permanent - Cost type can no longer be changed after
 * @value permanent
 * @option Temporary - Cost type can still be changed after
 * @value temporary
 * @desc Allow the cost type and value to be changeable?
 * @default unchanged
 *
 * @arg alterType:str
 * @text Alter Cost Type
 * @type select
 * @option Unchanged - No changes are made
 * @value unchanged
 * @option Consume - Removes half, otherwise consumes full
 * @value consume
 * @option Convert - Converts full => half, otherwise consumes half
 * @value convert
 * @option Compress - Consumes half, otherwise converts full => half
 * @value compress
 * @desc Change the cost type to this scenario.
 * Use 'Unchanged' for no changes.
 * @default convert
 *
 * @arg alterCost:eval
 * @text Alter Cost Value
 * @desc What is the default action cost for this scenario?
 * @default +0
 *
 * @arg alterPriority:eval
 * @text Priority
 * @desc What is this scenario's priority? Scenario outcomes with
 * equal or lower priorities cannot override types and costs.
 * @default 50
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbConvert
 * @text MECH: PTB Conversion
 * @desc Converts full actions into half actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg ConvertCount:eval
 * @text Conversion Count
 * @desc Converts full actions into half actions.
 * If not enough, consume half actions.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbFullHalfAction
 * @text MECH: PTB Full/Half Action(s)
 * @desc Alters the subject team's available Full/Half Actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg FullActions:eval
 * @text Full Actions
 * @desc Alters the subject team's available Full Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 * 
 * @arg HalfActions:eval
 * @text Half Actions
 * @desc Alters the subject team's available Half Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveBuffDebuff
 * @text MECH: Remove Buff/Debuff
 * @desc Removes buff(s)/debuff(s) from unit(s). 
 * Determine which parameters are removed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have the buff(s) and/or debuff(s) removed.
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which buffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which debuffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveState
 * @text MECH: Remove State
 * @desc Remove state(s) from unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have states removed from.
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to remove from unit(s).
 * Insert multiple state ID's to remove multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StateTurnsChangeBy
 * @text MECH: State Turns Change By
 * @desc Changes target(s) state turns by an amount.
 * Requires VisuMZ_1_SkillsStatesCore!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to affect state turns for.
 * @default ["all targets"]
 *
 * @arg StateID:num
 * @text State ID
 * @type state
 * @desc What is the ID of the state you wish to change turns for?
 * Only works on states that can have turns.
 * @default 5
 *
 * @arg Turns:eval
 * @text Change Turns By
 * @desc How many turns should the state be changed to?
 * You may use JavaScript code.
 * @default +1
 *
 * @arg AutoAddState:eval
 * @text Auto-Add State?
 * @type boolean
 * @on Auto-Add
 * @off Don't Add
 * @desc Automatically adds state if actor(s) does not have it applied?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StateTurnsChangeTo
 * @text MECH: State Turns Change To
 * @desc Changes target(s) state turns to a specific value.
 * Requires VisuMZ_1_SkillsStatesCore!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to affect state turns for.
 * @default ["all targets"]
 *
 * @arg StateID:num
 * @text State ID
 * @type state
 * @desc What is the ID of the state you wish to change turns for?
 * Only works on states that can have turns.
 * @default 5
 *
 * @arg Turns:eval
 * @text Change Turns To
 * @desc How many turns should the state be changed to?
 * You may use JavaScript code.
 * @default 10
 *
 * @arg AutoAddState:eval
 * @text Auto-Add State?
 * @type boolean
 * @on Auto-Add
 * @off Don't Add
 * @desc Automatically adds state if target(s) does not have it applied?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExploit
 * @text MECH: STB Exploit Effect
 * @desc Utilize the STB Exploitation mechanics!
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Exploited:eval
 * @text Target(s) Exploited?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Exploit the below targets?
 * @default true
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to become exploited.
 * @default ["all targets"]
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploited status?
 * @default false
 * 
 * @arg Exploiter:eval
 * @text User Exploiter?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Allow the user to become the exploiter?
 * @default true
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploiter status?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExtraAction
 * @text MECH: STB Extra Action
 * @desc Adds an extra action for the currently active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Extra Actions
 * @parent Charging
 * @desc How many extra actions should the active battler gain?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbRemoveExcessActions
 * @text MECH: STB Remove Excess Actions
 * @desc Removes excess actions from the active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Remove Actions
 * @parent Charging
 * @desc How many actions to remove from the active battler?
 * You may use JavaScript code.
 * @default 99
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_SwapWeapon
 * @text MECH: Swap Weapon
 * @desc Causes the unit(s) to swap their weapon for another.
 * Requires VisuMZ_2_WeaponSwapSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to swap weapons for.
 * @default ["user"]
 * 
 * @arg WeaponTypeID:eval
 * @text Weapon Type ID
 * @desc Which weapon type to swap to?
 * This is NOT the weapon's ID. It's the weapon TYPE.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_TextPopup
 * @text MECH: Text Popup
 * @desc Causes the unit(s) to display a text popup.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Text:str
 * @text Text
 * @desc What text do you wish to display?
 * @default Text
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Text:str
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_VariablePopup
 * @text MECH: Variable Popup
 * @desc Causes the unit(s) to display a popup using the data
 * stored inside a variable.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Variable:num
 * @text Variable ID
 * @type variable
 * @desc Get data from which variable to display as a popup?
 * @default 1
 * 
 * @arg DigitGrouping:eval
 * @text Digit Grouping
 * @parent Variable:num
 * @type boolean
 * @on Group Digits
 * @off Don't Group
 * @desc Use digit grouping to separate numbers?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Variable:num
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [0, 0, 0, 0]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_WaitForEffect
 * @text MECH: Wait For Effect
 * @desc Waits for the effects to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMotion
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMotion
 * @text Action Sequences - Motion
 * @desc These Action Sequences allow you the ability to control
 * the motions of sideview sprites.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_ClearFreezeFrame
 * @text MOTION: Clear Freeze Frame
 * @desc Clears any freeze frames from the unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to clear freeze frames for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_FreezeMotionFrame
 * @text MOTION: Freeze Motion Frame
 * @desc Forces a freeze frame instantly at the selected motion.
 * Automatically clears with a new motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to freeze motions for.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Freeze this motion for the unit(s).
 * @default attack
 * 
 * @arg Frame:num
 * @text Frame Index
 * @desc Which frame do you want to freeze the motion on?
 * Frame index values start at 0.
 * @default 2
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_MotionType
 * @text MOTION: Motion Type
 * @desc Causes the unit(s) to play the selected motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default attack
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_PerformAction
 * @text MOTION: Perform Action
 * @desc Causes the unit(s) to play the proper motion based
 * on the current action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_RefreshMotion
 * @text MOTION: Refresh Motion
 * @desc Cancels any set motions unit(s) has to do and use
 * their most natural motion at the moment.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to refresh their motion state.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_WaitMotionFrame
 * @text MOTION: Wait By Motion Frame
 * @desc Creates a wait equal to the number of motion frames passing.
 * Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 * @arg MotionFrameWait:num
 * @text Motion Frames to Wait?
 * @type number
 * @min 1
 * @desc Each "frame" is equal to the value found in
 * Plugin Parameters => Actors => Motion Speed
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMovement
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMovement
 * @text Action Sequences - Movement
 * @desc These Action Sequences allow you the ability to control
 * the sprites of actors and enemies in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_BattleStep
 * @text MOVE: Battle Step
 * @desc Causes the unit(s) to move forward past their home position
 * to prepare for action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveBy
 * @text MOVE: Change Home By Distance
 * @desc Change unit(s)'s home position by a distance from their
 * current home position(s). Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to change by.
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to change home by.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToJsPoint
 * @text MOVE: Change Home To JS Coordinates
 * @desc Change home position(s) to specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DestinationJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s)'s new home position.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToPoint
 * @text MOVE: Change Home To Point
 * @desc Change home position(s) to a target point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default center
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToTarget
 * @text MOVE: Change Home To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to change home position to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceDirection
 * @text MOVE: Face Direction
 * @desc Causes the unit(s) to face forward or backward.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Direction:str
 * @text Direction
 * @type combo
 * @option forward
 * @option backward
 * @option random
 * @desc Select which direction to face.
 * @default forward
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceJsPoint
 * @text MOVE: Face JS Coordinates
 * @desc Causes the unit(s) to face specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 *
 * @arg PointJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s) to face towards.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FacePoint
 * @text MOVE: Face Point
 * @desc Causes the unit(s) to face a point on the screen.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Point:str
 * @text Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceTarget
 * @text MOVE: Face Target(s)
 * @desc Causes the unit(s) to face other targets on the screen.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (facing)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for the turning unit(s) to face.
 * @default ["current target"]
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the unit(s) instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Float
 * @text MOVE: Float
 * @desc Causes the unit(s) to float above the ground.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make float.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Vertical distance to float upward.
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total float amount.
 * @default 12
 *
 * @arg EasingType:str
 * @text Float Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForFloat:eval
 * @text Wait For Float?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for floating to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeReset
 * @text MOVE: Home Reset
 * @desc Causes the unit(s) to move back to their home position(s)
 * and face back to their original direction(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["alive battlers"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Jump
 * @text MOVE: Jump
 * @desc Causes the unit(s) to jump into the air.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make jump.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Max jump height to go above the ground
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total jump amount.
 * @default 12
 * 
 * @arg WaitForJump:eval
 * @text Wait For Jump?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for jumping to complete before performing next command?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveBy
 * @text MOVE: Move Distance
 * @desc Moves unit(s) by a distance from their current position(s).
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to move unit(s).
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to move.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToJsPoint
 * @text MOVE: Move To JS Coordinates
 * @desc Moves unit(s) to specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DestinationJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s) to move to.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToPoint
 * @text MOVE: Move To Point
 * @desc Moves unit(s) to a designated point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToTarget
 * @text MOVE: Move To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to move to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Opacity
 * @text MOVE: Opacity
 * @desc Causes the unit(s) to change opacity.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change opacity.
 * @default ["user"]
 * 
 * @arg Opacity:eval
 * @text Desired Opacity
 * @desc Change to this opacity value.
 * You may use JavaScript code.
 * @default 255
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for opacity change.
 * @default 12
 *
 * @arg EasingType:str
 * @text Opacity Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForOpacity:eval
 * @text Wait For Opacity?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for opacity changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Scale
 * @text MOVE: Scale/Grow/Shrink
 * @desc Causes the unit(s) to scale, grow, or shrink?.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change the scale of.
 * @default ["user"]
 * 
 * @arg ScaleX:eval
 * @text Scale X
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg ScaleY:eval
 * @text Scale Y
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to scale for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Scale Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForScale:eval
 * @text Wait For Scale?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for scaling to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Skew
 * @text MOVE: Skew/Distort
 * @desc Causes the unit(s) to skew.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to skew.
 * @default ["user"]
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc X variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Y variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to skew for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Spin
 * @text MOVE: Spin/Rotate
 * @desc Causes the unit(s) to spin.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to spin.
 * @default ["user"]
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc How many degrees to spin?
 * @default 360
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to spin for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Spin Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg RevertAngle:eval
 * @text Revert Angle on Finish
 * @type boolean
 * @on Revert
 * @off Don't
 * @desc Revert angle after spinning?
 * @default true
 * 
 * @arg WaitForSpin:eval
 * @text Wait For Spin?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for spin to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForFloat
 * @text MOVE: Wait For Float
 * @desc Waits for floating to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForJump
 * @text MOVE: Wait For Jump
 * @desc Waits for jumping to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForMovement
 * @text MOVE: Wait For Movement
 * @desc Waits for movement to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForOpacity
 * @text MOVE: Wait For Opacity
 * @desc Waits for opacity changes to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForScale
 * @text MOVE: Wait For Scale
 * @desc Waits for scaling to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSkew
 * @text MOVE: Wait For Skew
 * @desc Waits for skewing to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSpin
 * @text MOVE: Wait For Spin
 * @desc Waits for spinning to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceProjectile
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakProjectile
 * @text Action Sequences - Projectiles
 * @desc Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Animation
 * @text PROJECTILE: Animation
 * @desc Create an animation projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Settings
 * @type animation
 * @desc Determine which animation to use as a projectile.
 * @default 77
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to finish before going to the next command?
 * @default false
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExAni>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","EasingType:str":"Linear","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Icon
 * @text PROJECTILE: Icon
 * @desc Create an icon projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Icon:eval
 * @text Icon Index
 * @parent Settings
 * @desc Determine which icon to use as a projectile.
 * You may use JavaScript code.
 * @default 118
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Picture
 * @text PROJECTILE: Picture
 * @desc Create a picture projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Picture:str
 * @text Picture Filename
 * @parent Settings
 * @type file
 * @dir img/pictures/
 * @desc Determine which picture to use as a projectile.
 * @default Untitled
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceSkew
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSkew
 * @text Action Sequences - Skew
 * @desc Allows you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeSkew
 * @text SKEW: Change Skew
 * @desc Changes the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc Change the camera skew X to this value.
 * @default 0
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Change the camera skew Y to this value.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_Reset
 * @text SKEW: Reset Skew
 * @desc Reset any skew settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_WaitForSkew
 * @text SKEW: Wait For Skew
 * @desc Waits for skew changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceTarget
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakTarget
 * @text Action Sequences - Target
 * @desc If using a manual target by target Action Sequence,
 * these commands will give you full control over its usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_CurrentIndex
 * @text TARGET: Current Index
 * @desc Sets the current index to this value.
 * Then decide to jump to a label (optional).
 * 
 * @arg Index:eval
 * @text Set Index To
 * @desc Sets current targeting index to this value.
 * 0 is the starting index of a target group.
 * @default 0
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_NextTarget
 * @text TARGET: Next Target
 * @desc Moves index forward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_PrevTarget
 * @text TARGET: Previous Target
 * @desc Moves index backward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_RandTarget
 * @text TARGET: Random Target
 * @desc Sets index randomly to determine new currernt target.
 * Then decide to jump to a label (optional).
 * 
 * @arg ForceRandom:eval
 * @text Force Random?
 * @type boolean
 * @on On
 * @off Off
 * @desc Index cannot be its previous index amount after random.
 * @default false
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceVoice
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakVoice
 * @text Action Sequences - Voice
 * @desc Allows you to play battle voices.
 * Requires VisuMZ_3_BattleVoices!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleVoice_PlayCommonLine
 * @text VOICE: Play Common Line
 * @desc Plays a common voice line from target battler(s).
 * Requires VisuMZ_3_BattleVoices!
 * 
 * @arg Targets:arraystr
 * @text Speaker Target(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play voice lines from.
 * @default ["user"]
 *
 * @arg VoiceLine:str
 * @text Voice Line
 * @type select
 * @option -
 * @value -
 * @option ---Battle Phase---
 * @value -
 * @option On Battle Start
 * @value BattleStart
 * @option On Battle Input
 * @value BattleInput
 * @option On Battle Victory
 * @value BattleVictory
 * @option Victory => Level Up
 * @value BattleVictoryLevelUp
 * @option Escape => Success
 * @value BattleEscapeSuccess
 * @option Escape => Failure
 * @value BattleEscapeFailure
 * @option -
 * @value -
 * @option ---On Action Start---
 * @value -
 * @option Basic Action => Regular Attack
 * @value ActionStartBasicAttack
 * @option Basic Action => Regular Guard
 * @value ActionStartBasicGuard
 * @option Skill Usage For Allies => Certain Hit
 * @value ActionStartSkillAllyCertainHit
 * @option Skill Usage For Allies => Physical
 * @value ActionStartSkillAllyPhysical
 * @option Skill Usage For Allies => Magical
 * @value ActionStartSkillAllyMagical
 * @option Skill Usage For Enemies => Certain Hit
 * @value ActionStartSkillEnemyCertainHit
 * @option Skill Usage For Enemies => Physical
 * @value ActionStartSkillEnemyPhysical
 * @option Skill Usage For Enemies => Magical
 * @value ActionStartSkillEnemyMagical
 * @option Item Usage For Allies
 * @value ActionStartItemAlly
 * @option Item Usage For Enemies
 * @value ActionStartItemEnemy
 * @option -
 * @value -
 * @option ---Perform Action---
 * @value -
 * @option Basic Action => Attack Motion
 * @value PerformActionBasicAttack
 * @option Basic Action => Critical Action
 * @value PerformActionCritical
 * @option Basic Action => Defeat Opponent
 * @value PerformActionDefeatFoe
 * @option Basic Action => Missed Action
 * @value PerformActionMiss
 * @option Skill Usage => Certain Hit
 * @value PerformActionSkillCertainHit
 * @option Skill Usage => Physical
 * @value PerformActionSkillPhysical
 * @option Skill Usage => Magical
 * @value PerformActionSkillMagical
 * @option -
 * @value -
 * @option ---On HP Change---
 * @value -
 * @option Life State => On Death
 * @value HpChangeDeath
 * @option Life State => On Revive
 * @value HpChangeRevive
 * @option On Damage => Damage <= 0%
 * @value HpChangeDamageNone
 * @option On Damage => Damage < 25%
 * @value HpChangeDamageLight
 * @option On Damage => Damage < 50%
 * @value HpChangeDamageMedium
 * @option On Damage => Damage >= 50%
 * @value HpChangeDamageHeavy
 * @option On Damage => Guarding Damage
 * @value HpChangeDamageGuard
 * @option On Recovery => Recovery < 25%
 * @value HpChangeRecoverLight
 * @option On Recovery => Recovery < 50%
 * @value HpChangeRecoverMedium
 * @option On Recovery => Recovery >= 50%
 * @value HpChangeRecoverHeavy
 * @option -
 * @value -
 * @option ---On Action Result---
 * @value -
 * @option On Miss/Evasion
 * @value ActionResultEvasion
 * @option On Magic Evasion
 * @value ActionResultMagicEvasion
 * @option On Counter
 * @value ActionResultCounter
 * @option On Reflection
 * @value ActionResultReflection
 * @option On Substitute
 * @value ActionResultSubstitute
 * @option -
 * @value -
 * @option ---Buff/Debuff Related---
 * @value -
 * @option On Buff Apply
 * @value BuffAdd
 * @option On Buff Remove
 * @value BuffRemove
 * @option On Debuff Apply
 * @value DebuffAdd
 * @option On Debuff Remove
 * @value DebuffRemove
 * @option -
 * @value -
 * @option ---State Related---
 * @value -
 * @option Positive States => On State Apply
 * @value StatePositiveAdd
 * @option Positive States => text On State Remove
 * @value StatePositiveRemove
 * @option Negative States => On State Apply
 * @value StateNegativeAdd
 * @option Negative States => On State Remove
 * @value StateNegativeRemove
 * @option Neutral States => On State Apply
 * @value StateNeutralAdd
 * @option Neutral States => On State Remove
 * @value StateNeutralRemove
 * @option -
 * @value -
 * @option ---Miscellaneous---
 * @value -
 * @option Voice Preview
 * @value CharaCreatePreview
 * @option -
 * @value -
 * @desc What voice line do you wish to play?
 * @default ActionStartBasicAttack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleVoice_PlaySpecialLine
 * @text VOICE: Play Special Line
 * @desc Plays a special voice line from target battler(s).
 * Requires VisuMZ_3_BattleVoices!
 * 
 * @arg Targets:arraystr
 * @text Speaker Target(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play voice lines from.
 * @default ["user"]
 *
 * @arg VoiceLineType:str
 * @text Voice Line Type
 * @type select
 * @option Action Name
 * @value ActionName
 * @option Chant Line
 * @value ChantLine
 * @option Item Name
 * @value ItemName
 * @option Skill Name
 * @value SkillName
 * @option Spell Name
 * @value SpellName
 * @option Unique Lines
 * @value UniqueLine
 * @desc What voice line type do you wish to play?
 * @default ActionName
 *
 * @arg Letter:str
 * @text Name / Letter
 * @type select
 * @option A
 * @option B
 * @option C
 * @option D
 * @option E
 * @option F
 * @option G
 * @option H
 * @option I
 * @option J
 * @option K
 * @option L
 * @option M
 * @option N
 * @option O
 * @option P
 * @option Q
 * @option R
 * @option S
 * @option T
 * @option U
 * @option V
 * @option W
 * @option X
 * @option Y
 * @option Z
 * @desc What voice letter/name do you want to play?
 * @default A
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceWeapon
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakWeapon
 * @text Action Sequences - Weapon
 * @desc Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_ClearActiveWeapon
 * @text WEAPON: Clear Weapon Slot
 * @desc Clears the active weapon slot (making others valid again).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to clear the active weapon slot for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_NextActiveWeapon
 * @text WEAPON: Next Weapon Slot
 * @desc Goes to next active weapon slot (making others invalid).
 * If next slot is weaponless, don't label jump.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the next active weapon slot for.
 * @default ["user"]
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a weapon is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_SetActiveWeapon
 * @text WEAPON: Set Weapon Slot
 * @desc Sets the active weapon slot (making others invalid).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the active weapon slot for.
 * @default ["user"]
 * 
 * @arg SlotID:eval
 * @text Weapon Slot ID
 * @desc Select weapon slot to make active (making others invalid).
 * Use 0 to clear and normalize. You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceZoom
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakZoom
 * @text Action Sequences - Zoom
 * @desc Allows you to have control over the screen zoom.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Scale
 * @text ZOOM: Change Scale
 * @desc Changes the zoom scale.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc The zoom scale to change to.
 * @default 1.0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Reset
 * @text ZOOM: Reset Zoom
 * @desc Reset any zoom settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_WaitForZoom
 * @text ZOOM: Wait For Zoom
 * @desc Waits for zoom to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceEnd
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @ ==========================================================================
 * @ Plugin Parameters
 * @ ==========================================================================
 *
 * @param BreakHead
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleCore
 * @default Plugin Parameters
 *
 * @param ATTENTION
 * @default READ THE HELP FILE
 *
 * @param BreakSettings
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param AutoBattle:struct
 * @text Auto Battle Settings
 * @type struct<AutoBattle>
 * @desc Settings pertaining to Auto Battle.
 * @default {"BattleDisplay":"","AutoBattleMsg:str":"Press %1 or %2 to stop Auto Battle","AutoBattleOK:str":"OK","AutoBattleCancel:str":"Cancel","AutoBattleBgType:num":"1","AutoBattleRect:func":"\"const width = Graphics.width;\\nconst height = this.calcWindowHeight(1, false);\\nconst x = 0;\\nconst y = (Graphics.height - height) / 2;\\nreturn new Rectangle(x, y, width, height);\"","Options":"","AddOption:eval":"true","AdjustRect:eval":"true","StartName:str":"Auto Battle Start","StyleName:str":"Auto Battle Style","StyleOFF:str":"Attack","StyleON:str":"Skills"}
 *
 * @param Damage:struct
 * @text Damage Settings
 * @type struct<Damage>
 * @desc Settings pertaining to damage calculations.
 * @default {"DamageStyles":"","DefaultDamageStyle:str":"Standard","DamageStyleList:arraystruct":"[\"{\\\"Name:str\\\":\\\"Standard\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"Armor Scaling\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"CT\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\\\\\nvalue = attackStat * 4;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"D4\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nlet stat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n    armor = 0;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n    armor = 0;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"DQ\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Get Primary Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Check for Recovery\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    let value = stat * multiplier * sign;\\\\\\\\n    return isNaN(value) ? 0 : value;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = 0;\\\\\\\\nif (stat < ((2 + armor) / 2)) {\\\\\\\\n    // Plink Damage\\\\\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\\\\\n    value = baseline / 3;\\\\\\\\n} else {\\\\\\\\n    // Normal Damage\\\\\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\\\\\n    value = baseline / 2;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF7\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare base Damage\\\\\\\\nlet baseDamage = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = 6 * (a.mat + level);\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.def + level);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.mdf + level);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Final Damage\\\\\\\\nlet value = baseDamage;\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    value += 22 * power;\\\\\\\\n} else {\\\\\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF8\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Damage\\\\\\\\nlet Value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\\\\\n    value *= power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.mat + power;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\\\\\n    value *= power / 256;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = (power + a.def) * power / 2;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = (power + a.mdf) * power / 2;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF9\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Main Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Base Damage\\\\\\\\nlet baseDamage = power;\\\\\\\\nif (this.isPhysical()) {\\\\\\\\n    baseDamage += stat;\\\\\\\\n}\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    baseDamage -= armor;\\\\\\\\n    baseDamage = Math.max(1, baseDamage);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Bonus Damage\\\\\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\\\\\n\\\\\\\\n// Declare Final Damage\\\\\\\\nlet value = baseDamage * bonusDamage * sign;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF10\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Create Damage Offense Value\\\\\\\\nlet value = power;\\\\\\\\n\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.def + power) / 2);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.mdf + power) / 2);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Damage Defense Value\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\\\\\n    armor = Math.max(armor, 1);\\\\\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\\\\\n} else if (this.isRecover()) {\\\\\\\\n    value *= -1;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MK\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nconst denominator = Math.max(200 + armor, 1);\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.atk / denominator;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.mat / denominator;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.def / 200;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.mdf / 200;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MOBA\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Value\\\\\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\\\\\n\\\\\\\\n// Apply Attacker's Offense Parameter\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value *= a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value *= a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"PKMN\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\"]","Cap":"","EnableDamageCap:eval":"false","DefaultHardCap:num":"9999","EnableSoftCap:eval":"false","DefaultSoftCap:num":"0.80","DefaultSoftScaler:num":"0.1275","Popups":"","PopupDuration:num":"128","NewPopupBottom:eval":"true","PopupPosition:str":"base","PopupOffsetX:num":"0","PopupOffsetY:num":"0","PopupShiftX:num":"8","PopupShiftY:num":"-28","hpDamageFmt:str":"-%1","hpHealingFmt:str":"+%1","mpDamageFmt:str":"-%1 %2","mpHealingFmt:str":"+%1 %2","CriticalColor:eval":"[255, 0, 0, 160]","CriticalDuration:num":"128","Formulas":"","OverallFormulaJS:func":"\"// Declare Constants\\nconst target = arguments[0];\\nconst critical = arguments[1];\\nconst item = this.item();\\n\\n// Get Base Damage\\nconst baseValue = this.evalDamageFormula(target);\\n\\n// Calculate Element Modifiers\\nlet value = baseValue * this.calcElementRate(target);\\n\\n// Calculate Physical and Magical Modifiers\\nif (this.isPhysical()) {\\n    value *= target.pdr;\\n}\\nif (this.isMagical()) {\\n    value *= target.mdr;\\n}\\n\\n// Apply Healing Modifiers\\nif (baseValue < 0) {\\n    value *= target.rec;\\n}\\n\\n// Apply Critical Modifiers\\nif (critical) {\\n    value = this.applyCritical(value);\\n}\\n\\n// Apply Variance and Guard Modifiers\\nvalue = this.applyVariance(value, item.damage.variance);\\nvalue = this.applyGuard(value, target);\\n\\n// Finalize Damage\\nvalue = Math.round(value);\\nreturn value;\"","VarianceFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst variance = arguments[1];\\n\\n// Calculate Variance\\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\\n\\n// Return Damage\\nreturn damage >= 0 ? damage + v : damage - v;\"","GuardFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst target = arguments[1];\\n\\n// Return Damage Early\\nconst note = this.item().note;\\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\\nif (!target.isGuard()) return damage;\\nif (damage < 0) return damage;\\n\\n// Declare Guard Rate\\nlet guardRate = 0.5;\\nguardRate /= target.grd;\\n\\n// Return Damage\\nreturn damage * guardRate;\"","Critical":"","CriticalHitRateJS:func":"\"// Declare Constants\\nconst user = this.subject();\\nconst target = arguments[0];\\n\\n// Create Base Critical Rate\\nlet rate = this.subject().cri * (1 - target.cev);\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<ALWAYS CRITICAL>/i)) {\\n    return 1;\\n}\\nif (note.match(/<SET CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    return Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    rate *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    rate += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL RATE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL RATE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Apply LUK Buffs/Debuffs\\nconst lukStack = this.subject().buff(7);\\nrate *= 2 ** lukStack;\\n\\n// Return Rate\\nreturn rate;\"","CriticalHitMultiplier:func":"\"// Declare Constants\\nconst user = this.subject();\\nlet damage = arguments[0];\\nlet multiplier = 2.0;\\nlet bonusDamage = this.subject().luk * this.subject().cri;\\nif (this.isHpRecover() || this.isMpRecover()) {\\n    bonusDamage *= -1;\\n}\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\\\d+)([%％])>/i)) {\\n    multiplier = Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    multiplier += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\\\d+)([%％])>/i)) {\\n    bonusDamage *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL DAMAGE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL DAMAGE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Return Damage\\nreturn damage * multiplier + bonusDamage;\""}
 *
 * @param Mechanics:struct
 * @text Mechanics Settings
 * @type struct<Mechanics>
 * @desc Settings pertaining to various game mechanics.
 * @default {"ActionSpeed":"","AllowRandomSpeed:eval":"false","CalcActionSpeedJS:func":"\"// Declare Constants\\nconst agi = this.subject().agi;\\n\\n// Create Speed\\nlet speed = agi;\\nif (this.allowRandomSpeed()) {\\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\\n}\\nif (this.item()) {\\n    speed += this.item().speed;\\n}\\nif (this.isAttack()) {\\n    speed += this.subject().attackSpeed();\\n}\\n\\n// Return Speed\\nreturn speed;\"","BaseTroop":"","BaseTroopIDs:arraynum":"[\"1\"]","CommonEvents":"","BattleStartEvent:num":"0","BattleEndEvent:num":"0","VictoryEvent:num":"0","DefeatEvent:num":"0","EscapeSuccessEvent:num":"0","EscapeFailEvent:num":"0","Escape":"","CalcEscapeRatioJS:func":"\"// Calculate Escape Ratio\\nlet ratio = 0.5;\\nratio *= $gameParty.agility();\\nratio /= $gameTroop.agility();\\n\\n// Return Ratio\\nreturn ratio;\"","CalcEscapeRaiseJS:func":"\"// Calculate Escape Ratio\\nlet value = 0.1;\\nvalue += $gameParty.aliveMembers().length;\\n\\n// Return Value\\nreturn value;\"","BattleJS":"","PreStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleVictoryJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeSuccessJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeFailureJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleDefeatJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","TurnJS":"","PreStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","ActionJS":"","PreStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PreApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\""}
 *
 * @param CmdWindows
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleLayout:struct
 * @text Battle Layout Settings
 * @type struct<BattleLayout>
 * @desc Settings that adjust how the battle layout appears.
 * @default {"Style:str":"default","ListStyle":"","ShowFacesListStyle:eval":"true","CommandWidth:num":"192","XPStyle":"","XPActorCommandLines:num":"4","XPActorDefaultHeight:num":"64","XPSpriteYLocation:str":"name","PotraitStyle":"","ShowPortraits:eval":"true","PortraitScale:num":"0.5","BorderStyle":"","SkillItemBorderCols:num":"1","ShowPortraitsBorderStyle:eval":"true","PortraitScaleBorderStyle:num":"1.25","SkillItemWindows":"","SkillItemMiddleLayout:eval":"false","SkillItemStandardCols:num":"2"}
 *
 * @param BattleLog:struct
 * @text Battle Log Settings
 * @type struct<BattleLog>
 * @desc Settings that adjust how Window_BattleLog behaves.
 * @default {"General":"","BackColor:str":"#000000","MaxLines:num":"10","MessageWait:num":"16","TextAlign:str":"center","BattleLogRectJS:func":"\"const wx = 0;\\nconst wy = 0;\\nconst ww = Graphics.boxWidth;\\nconst wh = this.calcWindowHeight(10, false);\\nreturn new Rectangle(wx, wy, ww, wh);\"","StartTurn":"","StartTurnShow:eval":"true","StartTurnMsg:str":"Turn %1","StartTurnWait:num":"40","DisplayAction":"","ActionCenteredName:eval":"true","ActionSkillMsg1:eval":"false","ActionSkillMsg2:eval":"true","ActionItemMsg:eval":"false","ActionChanges":"","ShowCounter:eval":"true","ShowReflect:eval":"true","ShowSubstitute:eval":"true","ActionResults":"","ShowFailure:eval":"false","ShowCritical:eval":"false","ShowMissEvasion:eval":"false","ShowHpDmg:eval":"false","ShowMpDmg:eval":"false","ShowTpDmg:eval":"false","DisplayStates":"","ShowAddedState:eval":"false","ShowRemovedState:eval":"false","ShowCurrentState:eval":"false","ShowAddedBuff:eval":"false","ShowAddedDebuff:eval":"false","ShowRemovedBuff:eval":"false"}
 *
 * @param BattlebackScale:struct
 * @text Battleback Scaling
 * @type struct<Battleback>
 * @desc Settings that adjust how battlebacks scale.
 * @default {"DefaultStyle:str":"MZ","jsOneForOne:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst scale = 1.0;\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = 0;\\nthis.y = 0;\"","jsScaleToFit:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = this.width / this.bitmap.width;\\nconst ratioY = this.height / this.bitmap.height;\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScaleDown:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScale Up:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\""}
 *
 * @param PartyCmd:struct
 * @text Party Command Window
 * @type struct<PartyCmd>
 * @desc Settings that alter the Party Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconFight:num":"76","CommandAddAutoBattle:eval":"true","CmdIconAutoBattle:num":"78","CmdTextAutoBattle:str":"Auto","CommandAddOptions:eval":"true","CmdIconOptions:num":"83","ActiveTpbOptionsMessage:str":"Options Menu queued after action is complete.","CmdIconEscape:num":"82","Access":"","SkipPartyCmd:eval":"true","DisablePartyCmd:eval":"false","HelpWindow":"","HelpFight:str":"Select actions to fight.","HelpAutoBattle:str":"Sets party to Auto Battle mode.","HelpOptions:str":"Opens up the Options Menu.","HelpEscape:str":"Attempt to escape the battle."}
 *
 * @param ActorCmd:struct
 * @text Actor Command Window
 * @type struct<ActorCmd>
 * @desc Settings that alter the Actor Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconItem:num":"176","IconStypeNorm:num":"78","IconStypeMagic:num":"79","BattleCmd":"","BattleCmdList:arraystr":"[\"attack\",\"skills\",\"guard\",\"item\",\"escape\"]","HelpWindow":"","HelpSkillType:str":"Opens up a list of skills under the \\C[16]%1\\C[0] category.","HelpItem:str":"Opens up a list of items that you can use.","HelpEscape:str":"Attempt to escape the battle.","HelpAutoBattle:str":"Automatically choose an action suitable for combat."}
 * 
 * @param MultiTarget:struct
 * @text Multi-Target Windows
 * @type struct<MultiTarget>
 * @desc Settings that alter the Multi-Target Windows in battle.
 * @default {"Properties":"","WindowWidth:num":"280","BgType:num":"2","ShowButton:eval":"true","Vocab":"","AllActorsText:str":"All Allies","AllEnemiesText:str":"All Enemies","Offsets":"","ActorOffsets":"","ActorOffsetX:num":"+0","ActorOffsetY:num":"+0","EnemyOffsets":"","EnemyOffsetX:num":"+0","EnemyOffsetY:num":"+0"}
 *
 * @param VisualBreak
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param Actor:struct
 * @text Actor Battler Settings
 * @type struct<Actor>
 * @desc Settings that alter various properties for actors.
 * @default {"Flinch":"","FlinchDistanceX:num":"12","FlinchDistanceY:num":"0","FlinchDuration:num":"6","SvBattlers":"","AnchorX:num":"0.5","AnchorY:num":"1.0","ChantStyle:eval":"true","OffsetX:num":"0","OffsetY:num":"0","MotionSpeed:num":"12","PrioritySortActive:eval":"true","PrioritySortActors:eval":"false","Shadow:eval":"true","SmoothImage:eval":"true","HomePosJS:func":"\"// Declare Constants\\nconst sprite = this;\\nconst actor = this._actor;\\nconst index = arguments[0];\\n\\n// Make Calculations\\nlet x = Math.round((Graphics.width / 2) + 192)\\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\\nx += index * 32;\\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\\ny += index * 48;\\n\\n// Home Position Offsets\\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\\\+\\\\-]\\\\d+),[ ]([\\\\+\\\\-]\\\\d+)>/i;\\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\\nx = xOffsets.reduce((r, offset) => r + offset, x);\\ny = yOffsets.reduce((r, offset) => r + offset, y);\\n\\n// Set Home Position\\nthis.setHome(x, y);\""}
 *
 * @param Enemy:struct
 * @text Enemy Battler Settings
 * @type struct<Enemy>
 * @desc Settings that alter various properties for enemies.
 * @default {"Visual":"","AttackAnimation:num":"1","EmergeText:eval":"false","OffsetX:num":"0","OffsetY:num":"0","SmoothImage:eval":"true","SelectWindow":"","FrontViewSelect:eval":"false","SideviewSelect:eval":"true","NameFontSize:num":"22","SvBattlers":"","AllowCollapse:eval":"false","AnchorX:num":"0.5","AnchorY:num":"1.0","MotionIdle:str":"walk","Shadow:eval":"true","Width:num":"64","Height:num":"64","WtypeId:num":"0"}
 *
 * @param HpGauge:struct
 * @text HP Gauge Settings
 * @type struct<HpGauge>
 * @desc Settings that adjust the visual HP Gauge displayed in battle.
 * @default {"Display":"","ShowActorGauge:eval":"false","ShowEnemyGauge:eval":"true","RequiresDefeat:eval":"false","BTestBypass:eval":"true","Settings":"","AnchorX:num":"0.5","AnchorY:num":"1.0","Scale:num":"0.5","OffsetX:num":"0","OffsetY:num":"-3","Options":"","AddHpGaugeOption:eval":"true","AdjustRect:eval":"true","Name:str":"Show HP Gauge"}
 *
 * @param ActionSequence:struct
 * @text Action Sequence Settings
 * @type struct<ActionSequence>
 * @desc Settings that adjust how certain Action Sequences work.
 * @default {"AutoSequences":"","AutoMeleeSolo:eval":"true","AutoMeleeAoE:eval":"true","CastAnimations":"","CastCertain:num":"120","CastPhysical:num":"52","CastMagical:num":"51","CounterReflection":"","CounterPlayback:eval":"true","ReflectAnimation:num":"53","ReflectPlayback:eval":"true","Stepping":"","MeleeDistance:num":"24","StepDistanceX:num":"48","StepDistanceY:num":"0","StepDuration:num":"12"}
 *
 * @param BreakEnd1
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param End Of
 * @default Plugin Parameters
 *
 * @param BreakEnd2
 * @text --------------------------
 * @default ----------------------------------
 *
 */
/* ----------------------------------------------------------------------------
 * Auto Battle Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~AutoBattle:
 *
 * @param BattleDisplay
 * @text Battle Display
 *
 * @param AutoBattleMsg:str
 * @text Message
 * @parent BattleDisplay
 * @desc Message that's displayed when Auto Battle is on.
 * Text codes allowed. %1 - OK button, %2 - Cancel button
 * @default Press %1 or %2 to stop Auto Battle
 *
 * @param AutoBattleOK:str
 * @text OK Button
 * @parent BattleDisplay
 * @desc Text used to represent the OK button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default OK
 *
 * @param AutoBattleCancel:str
 * @text Cancel Button
 * @parent BattleDisplay
 * @desc Text used to represent the Cancel button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default Cancel
 *
 * @param AutoBattleBgType:num
 * @text Background Type
 * @parent BattleDisplay
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for Auto Battle window.
 * @default 1
 *
 * @param AutoBattleRect:func
 * @text JS: X, Y, W, H
 * @parent BattleDisplay
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const width = Graphics.width;\nconst height = this.calcWindowHeight(1, false);\nconst x = 0;\nconst y = (Graphics.height - height) / 2;\nreturn new Rectangle(x, y, width, height);"
 *
 * @param Options
 *
 * @param AddOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the Auto Battle options to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param StartName:str
 * @text Startup Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Start
 *
 * @param StyleName:str
 * @text Style Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Style
 *
 * @param StyleOFF:str
 * @text OFF
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is OFF.
 * @default Attack
 *
 * @param StyleON:str
 * @text ON
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is ON.
 * @default Skills
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Damage:
 *
 * @param DamageStyles
 * @text Damage Styles
 *
 * @param DefaultDamageStyle:str
 * @text Default Style
 * @parent DamageStyles
 * @desc Which Damage Style do you want to set as default?
 * Use 'Manual' to not use any styles at all.
 * @default Standard
 *
 * @param DamageStyleList:arraystruct
 * @text Style List
 * @parent DamageStyles
 * @type struct<DamageStyle>[]
 * @desc A list of the damage styles available.
 * These are used to calculate base damage.
 * @default ["{\"Name:str\":\"Standard\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"Armor Scaling\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"CT\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\nvalue = attackStat * 4;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"D4\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nlet stat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n    armor = 0;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n    armor = 0;\\\\n}\\\\n\\\\n// Calculate Damage \\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"DQ\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\n}\\\\n\\\\n// Get Primary Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Check for Recovery\\\\nif (this.isRecover()) {\\\\n    let value = stat * multiplier * sign;\\\\n    return isNaN(value) ? 0 : value;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = 0;\\\\nif (stat < ((2 + armor) / 2)) {\\\\n    // Plink Damage\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\n    value = baseline / 3;\\\\n} else {\\\\n    // Normal Damage\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\n    value = baseline / 2;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF7\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare base Damage\\\\nlet baseDamage = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = 6 * (a.mat + level);\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.def + level);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.mdf + level);\\\\n}\\\\n\\\\n// Calculate Final Damage\\\\nlet value = baseDamage;\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isRecover()) {\\\\n    value += 22 * power;\\\\n} else {\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF8\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Damage\\\\nlet Value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\n    value *= power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.mat + power;\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\n    value *= power / 256;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = (power + a.def) * power / 2;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = (power + a.mdf) * power / 2;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF9\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Declare Main Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Declare Base Damage\\\\nlet baseDamage = power;\\\\nif (this.isPhysical()) {\\\\n    baseDamage += stat;\\\\n}\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    baseDamage -= armor;\\\\n    baseDamage = Math.max(1, baseDamage);\\\\n}\\\\n\\\\n// Declare Bonus Damage\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\n\\\\n// Declare Final Damage\\\\nlet value = baseDamage * bonusDamage * sign;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF10\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Create Damage Offense Value\\\\nlet value = power;\\\\n\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = power * ((a.def + power) / 2);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = power * ((a.mdf + power) / 2);\\\\n}\\\\n\\\\n// Apply Damage Defense Value\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\n    armor = Math.max(armor, 1);\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\n} else if (this.isRecover()) {\\\\n    value *= -1;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MK\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nconst denominator = Math.max(200 + armor, 1);\\\\n\\\\n// Calculate Damage \\\\nlet value = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.atk / denominator;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.mat / denominator;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = 200 * a.def / 200;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = 200 * a.mdf / 200;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MOBA\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Value\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\n\\\\n// Apply Attacker's Offense Parameter\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value *= a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value *= a.mdf;\\\\n}\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"PKMN\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}"]
 *
 * @param Cap
 * @text Damage Cap
 *
 * @param EnableDamageCap:eval
 * @text Enable Damage Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Put a maximum hard damage cap on how far damage can go?
 * This can be broken through the usage of notetags.
 * @default false
 *
 * @param DefaultHardCap:num
 * @text Default Hard Cap
 * @parent EnableDamageCap:eval
 * @type number
 * @min 1
 * @desc The default hard damage cap used before applying damage.
 * @default 9999
 *
 * @param EnableSoftCap:eval
 * @text Enable Soft Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Soft caps ease in the damage values leading up to the 
 * hard damage cap. Requires hard Damage Cap enabled.
 * @default false
 *
 * @param DefaultSoftCap:num
 * @text Base Soft Cap Rate
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.80
 *
 * @param DefaultSoftScaler:num
 * @text Soft Scale Constant
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.1275
 *
 * @param Popups
 *
 * @param PopupDuration:num
 * @text Popup Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a popup stays visible.
 * @default 128
 *
 * @param NewPopupBottom:eval
 * @text Newest Popups Bottom
 * @parent Popups
 * @type boolean
 * @on Bottom
 * @off Top
 * @desc Puts the newest popups at the bottom.
 * @default true
 *
 * @param PopupPosition:str
 * @text Appear Position
 * @parent Popups
 * @type select
 * @option Head - At the top of the battler.
 * @value head
 * @option Center - At the center of the battler.
 * @value center
 * @option Base - At the foot of the battler.
 * @value base
 * @desc Selects where you want popups to appear relative to the battler.
 * @default base
 *
 * @param EndBattlePopups:eval
 * @text End Battle Show?
 * @parent Popups
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide popups upon victory or escape?
 * Used to hide battle-state removal popups.
 * @default true
 *
 * @param PopupOffsetX:num
 * @text Offset X
 * @parent Popups
 * @desc Sets how much to offset the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param PopupOffsetY:num
 * @text Offset Y
 * @parent Popups
 * @desc Sets how much to offset the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PopupShiftX:num
 * @text Shift X
 * @parent Popups
 * @desc Sets how much to shift the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 8
 *
 * @param PopupShiftY:num
 * @text Shift Y
 * @parent Popups
 * @desc Sets how much to shift the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default -28
 *
 * @param hpDamageFmt:str
 * @text HP Damage Format
 * @parent Popups
 * @desc Determines HP damage format for popup.
 * %1 - Value, %2 - HP Text
 * @default -%1
 *
 * @param hpHealingFmt:str
 * @text HP Healing Format
 * @parent Popups
 * @desc Determines HP healing format for popup.
 * %1 - Value, %2 - HP Text
 * @default +%1
 *
 * @param mpDamageFmt:str
 * @text MP Damage Format
 * @parent Popups
 * @desc Determines MP damage format for popup.
 * %1 - Value, %2 - MP Text
 * @default -%1 %2
 *
 * @param mpHealingFmt:str
 * @text MP Healing Format
 * @parent Popups
 * @desc Determines MP healing format for popup.
 * %1 - Value, %2 - MP Text
 * @default +%1 %2
 *
 * @param CriticalColor:eval
 * @text Critical Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 *
 * @param CriticalDuration:num
 * @text Critical Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a the flash lasts.
 * @default 128
 *
 * @param Formulas
 *
 * @param OverallFormulaJS:func
 * @text JS: Overall Formula
 * @parent Formulas
 * @type note
 * @desc The overall formula used when calculating damage.
 * @default "// Declare Constants\nconst target = arguments[0];\nconst critical = arguments[1];\nconst item = this.item();\n\n// Get Base Damage\nconst baseValue = this.evalDamageFormula(target);\n\n// Calculate Element Modifiers\nlet value = baseValue * this.calcElementRate(target);\n\n// Calculate Physical and Magical Modifiers\nif (this.isPhysical()) {\n    value *= target.pdr;\n}\nif (this.isMagical()) {\n    value *= target.mdr;\n}\n\n// Apply Healing Modifiers\nif (baseValue < 0) {\n    value *= target.rec;\n}\n\n// Apply Critical Modifiers\nif (critical) {\n    value = this.applyCritical(value);\n}\n\n// Apply Variance and Guard Modifiers\nvalue = this.applyVariance(value, item.damage.variance);\nvalue = this.applyGuard(value, target);\n\n// Finalize Damage\nvalue = Math.round(value);\nreturn value;"
 *
 * @param VarianceFormulaJS:func
 * @text JS: Variance Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage variance.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst variance = arguments[1];\n\n// Calculate Variance\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\n\n// Return Damage\nreturn damage >= 0 ? damage + v : damage - v;"
 *
 * @param GuardFormulaJS:func
 * @text JS: Guard Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage is guarded.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst target = arguments[1];\n\n// Return Damage Early\nconst note = this.item().note;\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\nif (!target.isGuard()) return damage;\nif (damage < 0) return damage;\n\n// Declare Guard Rate\nlet guardRate = 0.5;\nguardRate /= target.grd;\n\n// Return Damage\nreturn damage * guardRate;"
 *
 * @param Critical
 * @text Critical Hits
 *
 * @param CriticalHitRateJS:func
 * @text JS: Rate Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Rates.
 * @default "// Declare Constants\nconst user = this.subject();\nconst target = arguments[0];\n\n// Create Base Critical Rate\nlet rate = this.subject().cri * (1 - target.cev);\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<ALWAYS CRITICAL>/i)) {\n    return 1;\n}\nif (note.match(/<SET CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    return Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    rate *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    rate += Number(RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL RATE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL RATE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Apply LUK Buffs/Debuffs\nconst lukStack = this.subject().buff(7);\nrate *= 2 ** lukStack;\n\n// Return Rate\nreturn rate;"
 *
 * @param CriticalHitMultiplier:func
 * @text JS: Damage Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Damage modification.
 * @default "// Declare Constants\nconst user = this.subject();\nlet damage = arguments[0];\nlet multiplier = 2.0;\nlet bonusDamage = this.subject().luk * this.subject().cri;\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\d+)([%％])>/i)) {\n    multiplier = Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    multiplier += Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\d+)([%％])>/i)) {\n    bonusDamage *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL DAMAGE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL DAMAGE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Return Damage\nreturn damage * multiplier + bonusDamage;"
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Formula Style
 * ----------------------------------------------------------------------------
 */
/*~struct~DamageStyle:
 *
 * @param Name:str
 * @text Name
 * @desc Name of this Damage Style.
 * Used for notetags and such.
 * @default Untitled
 *
 * @param Formula:func
 * @text JS: Formula
 * @parent Name:str
 * @type note
 * @desc The base formula for this Damage Style.
 * @default "// Define Constants\nconst item = this.item();\nconst a = this.subject();\nconst b = target;\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\n\n// Create Damage Value\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\n\n// Return Value\nreturn isNaN(value) ? 0 : value;"
 *
 * @param ItemsEquipsCore
 * @text Items & Equips Core
 *
 * @param DamageType
 * @text Damage Label
 * @parent ItemsEquipsCore
 *
 * @param DamageType1:str
 * @text HP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType2:str
 * @text MP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType3:str
 * @text HP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType4:str
 * @text MP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType5:str
 * @text HP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageType6:str
 * @text MP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageDisplay:func
 * @text JS: Damage Display
 * @parent ItemsEquipsCore
 * @type note
 * @desc Code used the data displayed for this category.
 * @default "// Define Constants\nconst item = this._item;\nconst formula = item.damage.formula;\nconst a = this._tempActorA;\nconst b = this._tempActorB;\nconst user = a;\nconst target = b;\n\n// Return Value\ntry {\n    const value = Math.max(eval(formula), 0);\n    return '%1%'.format(Math.round(value * 100));\n} catch (e) {\n    if ($gameTemp.isPlaytest()) {\n        console.log('Damage Formula Error for %1'.format(this._item.name));\n    }\n    return '?????';\n}"
 *
 */
/* ----------------------------------------------------------------------------
 * Mechanics Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Mechanics:
 *
 * @param ActionSpeed
 * @text Action Speed
 *
 * @param AllowRandomSpeed:eval
 * @text Allow Random Speed?
 * @parent ActionSpeed
 * @type boolean
 * @on Allow
 * @off Disable
 * @desc Allow speed to be randomized base off the user's AGI?
 * @default false
 *
 * @param SyncBuffExpire:eval
 * @text Turn End Buffs Expire
 * @parent ActionSpeed
 * @type boolean
 * @on Expire
 * @off Don't Expire
 * @desc Normally, buffs expire after all actions end.
 * But here, you can have buffs expire on turn end.
 * @default false
 *
 * @param CalcActionSpeedJS:func
 * @text JS: Calculate
 * @parent ActionSpeed
 * @type note
 * @desc Code used to calculate action speed.
 * @default "// Declare Constants\nconst agi = this.subject().agi;\n\n// Create Speed\nlet speed = agi;\nif (this.allowRandomSpeed()) {\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\n}\nif (this.item()) {\n    speed += this.item().speed;\n}\nif (this.isAttack()) {\n    speed += this.subject().attackSpeed();\n}\n\n// Return Speed\nreturn speed;"
 *
 * @param BaseTroop
 * @text Base Troop
 *
 * @param BaseTroopIDs:arraynum
 * @text Base Troop ID's
 * @parent BaseTroop
 * @type troop[]
 * @desc Select the Troop ID(s) to duplicate page events from for all other troops.
 * @default ["1"]
 *
 * @param CommonEvents
 * @text Common Events (on Map)
 *
 * @param BattleStartEvent:num
 * @text Pre-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Common Event to run before each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param BattleEndEvent:num
 * @text Post-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run after each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param VictoryEvent:num
 * @text Victory Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon victory on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param DefeatEvent:num
 * @text Defeat Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon defeat on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeSuccessEvent:num
 * @text Escape Success Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape success on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeFailEvent:num
 * @text Escape Fail Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape failure on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param Escape
 *
 * @param CalcEscapeRatioJS:func
 * @text JS: Calc Escape Ratio
 * @parent Escape
 * @type note
 * @desc Code used to calculate the escape success ratio.
 * @default "// Calculate Escape Ratio\nlet ratio = 0.5;\nratio *= $gameParty.agility();\nratio /= $gameTroop.agility();\n\n// Return Ratio\nreturn ratio;"
 *
 * @param CalcEscapeRaiseJS:func
 * @text JS: Calc Escape Raise
 * @parent Escape
 * @type note
 * @desc Code used to calculate how much the escape success ratio raises upon each failure.
 * @default "// Calculate Escape Ratio\nlet value = 0.1;\nvalue += $gameParty.aliveMembers().length;\n\n// Return Value\nreturn value;"
 *
 * @param Switches
 *
 * @param SwitchCritical:num
 * @text Switch: Critical
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action performs a critical hit.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param SwitchMissEvade:num
 * @text Switch: Miss/Evade
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action misses/is evaded.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param Variables
 *
 * @param VariableDmg:num
 * @text Variable: Damage
 * @parent Variables
 * @type variable
 * @desc Variable records target damage during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param VariableHeal:num
 * @text Variable: Healing
 * @parent Variables
 * @type variable
 * @desc Variable records target healing during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param BattleJS
 * @text JS: Battle-Related
 * 
 * @param PreStartBattleJS:func
 * @text JS: Pre-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartBattleJS:func
 * @text JS: Post-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleVictoryJS:func
 * @text JS: Battle Victory
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processVictory()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeSuccessJS:func
 * @text JS: Escape Success
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeSuccess()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeFailureJS:func
 * @text JS: Escape Failure
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeFailure()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleDefeatJS:func
 * @text JS: Battle Defeat
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processDefeat()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param PreEndBattleJS:func
 * @text JS: Pre-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndBattleJS:func
 * @text JS: Post-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param TurnJS
 * @text JS: Turn-Related
 *
 * @param PreStartTurnJS:func
 * @text JS: Pre-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartTurnJS:func
 * @text JS: Post-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreEndTurnJS:func
 * @text JS: Pre-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndTurnJS:func
 * @text JS: Post-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreRegenerateJS:func
 * @text JS: Pre-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostRegenerateJS:func
 * @text JS: Post-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param ActionJS
 * @text JS: Action-Related
 *
 * @param PreStartActionJS:func
 * @text JS: Pre-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostStartActionJS:func
 * @text JS: Post-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PreApplyJS:func
 * @text JS: Pre-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreDamageJS:func
 * @text JS: Pre-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostDamageJS:func
 * @text JS: Post-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostApplyJS:func
 * @text JS: Post-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreEndActionJS:func
 * @text JS: Pre-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostEndActionJS:func
 * @text JS: Post-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Layout Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLayout:
 *
 * @param Style:str
 * @text Battle Layout Style
 * @type select
 * @option Default - Shows actor faces in Battle Status.
 * @value default
 * @option List - Lists actors in Battle Status.
 * @value list
 * @option XP - Shows actor battlers in a stretched Battle Status.
 * @value xp
 * @option Portrait - Shows portraits in a stretched Battle Status.
 * @value portrait
 * @option Border - Displays windows around the screen border.
 * @value border
 * @option Frontview Battle UI - Requires VisuMZ_3_FrontviewBattleUI
 * @value frontview_ui
 * @option Sideview Battle UI - Requires VisuMZ_3_SideviewBattleUI
 * @value sideview_ui
 * @desc The style used for the battle layout.
 * @default default
 *
 * @param ListStyle
 * @text List Style
 * @parent Style:str
 *
 * @param ShowFacesListStyle:eval
 * @text Show Faces
 * @parent ListStyle
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows faces in List Style?
 * @default true
 *
 * @param CommandWidth:num
 * @text Command Window Width
 * @parent ListStyle
 * @type number
 * @min 1
 * @desc Determine the window width for the Party and Actor Command
 * Windows. Affects Default and List Battle Layout styles.
 * @default 192
 *
 * @param XPStyle
 * @text XP Style
 * @parent Style:str
 *
 * @param XPActorCommandLines:num
 * @text Command Lines
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Number of action lines in the Actor Command Window for the XP Style.
 * @default 4
 *
 * @param XPActorDefaultHeight:num
 * @text Sprite Height
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Default sprite height used when if the sprite's height has not been determined yet.
 * @default 64
 *
 * @param XPSpriteYLocation:str
 * @text Sprite Base Location
 * @parent XPStyle
 * @type select
 * @option Above Name - Sprite is located above the name.
 * @value name
 * @option Bottom - Sprite is located at the bottom of the window.
 * @value bottom
 * @option Centered - Sprite is centered in the window.
 * @value center
 * @option Top - Sprite is located at the top of the window.
 * @value top
 * @desc Determine where the sprite is located on the Battle Status Window.
 * @default name
 *
 * @param PotraitStyle
 * @text Portrait Style
 * @parent Style:str
 *
 * @param ShowPortraits:eval
 * @text Show Portraits?
 * @parent PotraitStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait instead of a face.
 * @default true
 *
 * @param PortraitScale:num
 * @text Portrait Scaling
 * @parent PotraitStyle
 * @desc If portraits are used, scale them by this much.
 * @default 0.5
 *
 * @param BorderStyle
 * @text Border Style
 * @parent Style:str
 *
 * @param SkillItemBorderCols:num
 * @text Columns
 * @parent BorderStyle
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 1
 *
 * @param ShowPortraitsBorderStyle:eval
 * @text Show Portraits?
 * @parent BorderStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait at the edge of the screen.
 * @default true
 *
 * @param PortraitScaleBorderStyle:num
 * @text Portrait Scaling
 * @parent BorderStyle
 * @desc If portraits are used, scale them by this much.
 * @default 1.0
 *
 * @param SkillItemWindows
 * @text Skill & Item Windows
 *
 * @param SkillItemMiddleLayout:eval
 * @text Middle Layout
 * @parent SkillItemWindows
 * @type boolean
 * @on Middle
 * @off Bottom
 * @desc Shows the Skill & Item Windows in mid-screen?
 * @default false
 *
 * @param SkillItemStandardCols:num
 * @text Columns
 * @parent SkillItemWindows
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 2
 *
 * @param StatusWindow
 * @text Status Window Elements
 *
 * @param StatusWindowName
 * @text Battler Name
 * @parent StatusWindow
 *
 * @param NameOffsetX:num
 * @text Offset: X
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param NameOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowHpGauge
 * @text Gauge 1 (HP)
 * @parent StatusWindow
 *
 * @param HpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param HpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowMpGauge
 * @text Gauge 2 (MP)
 * @parent StatusWindow
 *
 * @param MpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param MpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpGauge
 * @text Gauge 3 (TP)
 * @parent StatusWindow
 *
 * @param TpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowStateIcon
 * @text State Icon
 * @parent StatusWindow
 *
 * @param StateIconOffsetX:num
 * @text Offset: X
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StateIconOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpbGauge
 * @text TPB/ATB Gauge
 * @parent StatusWindow
 *
 * @param TpbGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpbGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowSkin
 * @text Window Skin
 * @parent StatusWindow
 *
 * @param StatusWindowSkinFilename:str
 * @text Filename
 * @parent StatusWindowSkin
 * @type file
 * @dir img/system/
 * @desc Filename used for the Battle Status Window skin.
 * Leave this empty to use the default window skin.
 * @default 
 *
 * @param StatusWindowSkinHide:eval
 * @text Hide Window Skin?
 * @parent StatusWindowSkin
 * @type boolean
 * @on No Window Skin
 * @off Default Skin
 * @desc Show/Hide the window skin for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowSelectBack
 * @text Selectable Background
 * @parent StatusWindow
 *
 * @param StatusWindowSelectableBackHide:eval
 * @text Hide Selectable BG?
 * @parent StatusWindowSelectBack
 * @type boolean
 * @on No Selectable BG
 * @off Default Selectable BG
 * @desc Show/Hide the selectable background box for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowAttachments
 * @text Attachments
 * @parent StatusWindow
 *
 * @param StatusWindowBackAttachment
 * @text Back Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentBack:str
 * @text Filename
 * @parent StatusWindowBackAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the back of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentBackOffsetX:num
 * @text Offset: X
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentBackOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowFrontAttachment
 * @text Front Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentFront:str
 * @text Filename
 * @parent StatusWindowFrontAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the front of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentFrontOffsetX:num
 * @text Offset: X
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentFrontOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param UiElements
 * @text UI Elements
 *
 * @param AntiTintUiElements:eval
 * @text Anti-Tint UI?
 * @parent UiElements
 * @type boolean
 * @on Prevent Tint
 * @off Allow Tint
 * @desc Prevent UI Elements from being tinted?
 * @default true
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Log Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLog:
 *
 * @param General
 *
 * @param BackColor:str
 * @text Back Color
 * @parent General
 * @desc Use #rrggbb for a hex color.
 * @default #000000
 *
 * @param MaxLines:num
 * @text Max Lines
 * @parent General
 * @type number
 * @min 1
 * @desc Maximum number of lines to be displayed.
 * @default 10
 *
 * @param MessageWait:num
 * @text Message Wait
 * @parent General
 * @type number
 * @min 1
 * @desc Number of frames for a usual message wait.
 * @default 16
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent General
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Window_BattleLog.
 * @default center
 *
 * @param BattleLogRectJS:func
 * @text JS: X, Y, W, H
 * @parent General
 * @type note
 * @desc Code used to determine the dimensions for the battle log.
 * @default "const wx = 0;\nconst wy = 0;\nconst ww = Graphics.boxWidth;\nconst wh = this.calcWindowHeight(10, false);\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 * @param StartTurn
 * @text Start Turn
 *
 * @param StartTurnShow:eval
 * @text Show Start Turn?
 * @parent StartTurn
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display turn changes at the start of the turn?
 * @default false
 *
 * @param StartTurnMsg:str
 * @text Start Turn Message
 * @parent StartTurn
 * @desc Message displayed at turn start.
 * %1 - Turn Count
 * @default Turn %1
 *
 * @param StartTurnWait:num
 * @text Start Turn Wait
 * @parent StartTurn
 * @type number
 * @min 1
 * @desc Number of frames to wait after a turn started.
 * @default 40
 *
 * @param DisplayAction
 * @text Display Action
 *
 * @param ActionCenteredName:eval
 * @text Show Centered Action?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display a centered text of the action name?
 * @default true
 *
 * @param ActionSkillMsg1:eval
 * @text Show Skill Message 1?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 1st skill message?
 * @default false
 *
 * @param ActionSkillMsg2:eval
 * @text Show Skill Message 2?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 2nd skill message?
 * @default true
 *
 * @param ActionItemMsg:eval
 * @text Show Item Message?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the item use message?
 * @default false
 *
 * @param ActionChanges
 * @text Action Changes
 *
 * @param ShowCounter:eval
 * @text Show Counter?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display counter text?
 * @default true
 *
 * @param ShowReflect:eval
 * @text Show Reflect?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display magic reflection text?
 * @default true
 *
 * @param ShowSubstitute:eval
 * @text Show Substitute?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display substitute text?
 * @default true
 *
 * @param ActionResults
 * @text Action Results
 *
 * @param ShowFailure:eval
 * @text Show No Effect?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display no effect text?
 * @default false
 *
 * @param ShowCritical:eval
 * @text Show Critical?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display critical text?
 * @default false
 *
 * @param ShowMissEvasion:eval
 * @text Show Miss/Evasion?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display miss/evasion text?
 * @default false
 *
 * @param ShowHpDmg:eval
 * @text Show HP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display HP Damage text?
 * @default false
 *
 * @param ShowMpDmg:eval
 * @text Show MP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display MP Damage text?
 * @default false
 *
 * @param ShowTpDmg:eval
 * @text Show TP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display TP Damage text?
 * @default false
 *
 * @param DisplayStates
 * @text Display States
 *
 * @param ShowAddedState:eval
 * @text Show Added States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added states text?
 * @default false
 *
 * @param ShowRemovedState:eval
 * @text Show Removed States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed states text?
 * @default false
 *
 * @param ShowCurrentState:eval
 * @text Show Current States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the currently affected state text?
 * @default false
 *
 * @param ShowAddedBuff:eval
 * @text Show Added Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added buffs text?
 * @default false
 *
 * @param ShowAddedDebuff:eval
 * @text Show Added Debuffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added debuffs text?
 * @default false
 *
 * @param ShowRemovedBuff:eval
 * @text Show Removed Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed de/buffs text?
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Battleback Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Battleback:
 *
 * @param DefaultStyle:str
 * @text Default Style
 * @type select
 * @option MZ (MZ's default style)
 * @value MZ
 * @option 1:1 (No Scaling)
 * @value 1:1
 * @option Scale To Fit (Scale to screen size)
 * @value ScaleToFit
 * @option Scale Down (Scale Downward if Larger than Screen)
 * @value ScaleDown
 * @option Scale Up (Scale Upward if Smaller than Screen)
 * @value ScaleUp
 * @desc The default scaling style used for battlebacks.
 * @default MZ
 *
 * @param jsOneForOne:func
 * @text JS: 1:1
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst scale = 1.0;\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = 0;\nthis.y = 0;"
 *
 * @param jsScaleToFit:func
 * @text JS: Scale To Fit
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = this.width / this.bitmap.width;\nconst ratioY = this.height / this.bitmap.height;\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleDown:func
 * @text JS: Scale Down
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleUp:func
 * @text JS: Scale Up
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 */
/* ----------------------------------------------------------------------------
 * Party Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~PartyCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Party Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Party Command Window.
 * @default left
 *
 * @param CmdIconFight:num
 * @text Fight Icon
 * @parent Cmd
 * @desc The icon used for the Fight command.
 * @default 76
 *
 * @param CommandAddAutoBattle:eval
 * @text Add Auto Battle?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Auto Battle" command to the Command Window?
 * @default true
 *
 * @param CmdIconAutoBattle:num
 * @text Auto Battle Icon
 * @parent CommandAddAutoBattle:eval
 * @desc The icon used for the Auto Battle command.
 * @default 78
 *
 * @param CmdTextAutoBattle:str
 * @text Auto Battle Text
 * @parent CommandAddAutoBattle:eval
 * @desc The text used for the Auto Battle command.
 * @default Auto
 *
 * @param CommandAddOptions:eval
 * @text Add Options?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Options" command to the Command Window?
 * @default true
 *
 * @param CmdIconOptions:num
 * @text Options Icon
 * @parent CommandAddOptions:eval
 * @desc The icon used for the Options command.
 * @default 83
 *
 * @param ActiveTpbOptionsMessage:str
 * @text Active TPB Message
 * @parent CommandAddOptions:eval
 * @desc Message that will be displayed when selecting options during the middle of an action.
 * @default Options Menu queued after action is complete.
 *
 * @param CmdIconEscape:num
 * @text Escape Icon
 * @parent Cmd
 * @desc The icon used for the Escape command.
 * @default 82
 *
 * @param Access
 *
 * @param SkipPartyCmd:eval
 * @text Skip Party Command
 * @parent Access
 * @type boolean
 * @on Skip
 * @off Don't
 * @desc DTB: Skip Party Command selection on turn start.
 * TPB: Skip Party Command selection at battle start.
 * @default true
 *
 * @param DisablePartyCmd:eval
 * @text Disable Party Command
 * @parent Access
 * @type boolean
 * @on Disable
 * @off Don't
 * @desc Disable the Party Command Window entirely?
 * @default false
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpFight:str
 * @text Fight
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Select actions to fight.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Sets party to Auto Battle mode.
 *
 * @param HelpOptions:str
 * @text Options
 * @parent HelpWindow
 * @desc Text displayed when selecting the Options command.
 * @default Opens up the Options Menu.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActorCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Actor Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Actor Command Window.
 * @default left
 *
 * @param CmdIconItem:num
 * @text Item Icon
 * @parent Cmd
 * @desc The icon used for the Item command.
 * @default 176
 *
 * @param IconStypeNorm:num
 * @text Normal SType Icon
 * @parent Cmd
 * @desc Icon used for normal skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 78
 *
 * @param IconStypeMagic:num
 * @text Magic SType Icon
 * @parent Cmd
 * @desc Icon used for magic skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 79
 *
 * @param BattleCmd
 * @text Battle Commands
 *
 * @param BattleCmdList:arraystr
 * @text Command List
 * @parent BattleCmd
 * @type combo[]
 * @option attack
 * @option skills
 * @option guard
 * @option item
 * @option party
 * @option escape
 * @option auto battle
 * @option stypes
 * @option stype: x
 * @option stype: name
 * @option all skills
 * @option skill: x
 * @option skill: name
 * @option combat log
 * @option talk
 * @option weapon swap
 * @desc List of battle commands that appear by default
 * if the <Battle Commands> notetag isn't present.
 * @default ["attack","skills","guard","party","item"]
 *
 * @param ShowCosts:eval
 * @text Show Command Costs
 * @parent BattleCmd
 * @type boolean
 * @on Show Costs
 * @off Hide Costs
 * @desc If a battle command has a resource cost, show it?
 * @default true
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpSkillType:str
 * @text Skill Types
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Opens up a list of skills under the \C[16]%1\C[0] category.
 *
 * @param HelpItem:str
 * @text Items
 * @parent HelpWindow
 * @desc Text displayed when selecting the item command.
 * @default Opens up a list of items that you can use.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Automatically choose an action suitable for combat.
 *
 * @param HelpParty:str
 * @text Party
 * @parent HelpWindow
 * @desc Text displayed when selecting the Party command.
 * Requires 
 * @default Automatically choose an action suitable for combat.
 *
 */
/* ----------------------------------------------------------------------------
 * Multi-Target Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~MultiTarget:
 *
 * @param Properties
 * 
 * @param WindowWidth:num
 * @text Window Width
 * @parent Properties
 * @type number
 * @min 1
 * @desc What is the width used for the Multi-Target Window?
 * @default 280
 *
 * @param BgType:num
 * @text Background Type
 * @parent Properties
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for these windows.
 * @default 2
 *
 * @param ShowButton:eval
 * @text Show Button
 * @parent Properties
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows the keyboard/controller button to press?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @param Vocab
 *
 * @param AllActorsText:str
 * @text All Actors
 * @parent Vocab
 * @desc What is the text used for the "All Actors" button?
 * @default All Allies
 *
 * @param AllEnemiesText:str
 * @text All Enemies
 * @parent Vocab
 * @desc What is the text used for the "All Enemies" button?
 * @default All Enemies
 * 
 * @param Offsets
 * 
 * @param ActorOffsets
 * @text Actor Offsets
 * @parent Offsets
 *
 * @param ActorOffsetX:num
 * @text Offset X
 * @parent ActorOffsets
 * @desc Offsets the button's x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param ActorOffsetY:num
 * @text Offset Y
 * @parent ActorOffsets
 * @desc Offsets the button's y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @param EnemyOffsets
 * @text Enemy Offsets
 * @parent Offsets
 *
 * @param EnemyOffsetX:num
 * @text Offset X
 * @parent EnemyOffsets
 * @desc Offsets the button's x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param EnemyOffsetY:num
 * @text Offset Y
 * @parent EnemyOffsets
 * @desc Offsets the button's y position.
 * Negative: up. Positive: down.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Actor:
 *
 * @param Flinch
 *
 * @param FlinchDistanceX:num
 * @text Flinch Distance X
 * @parent Flinch
 * @desc The normal X distance when flinching.
 * @default 12
 *
 * @param FlinchDistanceY:num
 * @text Flinch Distance Y
 * @parent Flinch
 * @desc The normal Y distance when flinching.
 * @default 0
 *
 * @param FlinchDuration:num
 * @text Flinch Duration
 * @parent Flinch
 * @desc The number of frames for a flinch to complete.
 * @default 6
 *
 * @param ShakeFlinch:eval
 * @text Shake Flinch
 * @parent Flinch
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Perform a shake flinch when taking damage?
 * @default false
 *
 * @param ShakeFlinchDuration:num
 * @text Max Duration
 * @parent ShakeFlinch:eval
 * @type number
 * @min 1
 * @desc Maximum duration a shake flinch can have.
 * This is reduced relative to the amount of damage taken.
 * @default 24
 *
 * @param ShakeFlinchPower:num
 * @text Max Power
 * @parent ShakeFlinch:eval
 * @type number
 * @min 1
 * @desc The power rating of a shake flinch at full damage.
 * This is reduced relative to the amount of damage taken.
 * @default 48
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param ChantStyle:eval
 * @text Chant Style
 * @parent SvBattlers
 * @type boolean
 * @on Magical Hit Type
 * @off Magical Skill Type
 * @desc What determines the chant motion?
 * Hit type or skill type?
 * @default true
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent SvBattlers
 * @desc Offsets X position where actor is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent SvBattlers
 * @desc Offsets Y position where actor is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param MotionSpeed:num
 * @text Motion Speed
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc The number of frames in between each motion.
 * @default 12
 *
 * @param PrioritySortActive:eval
 * @text Priority: Active
 * @parent SvBattlers
 * @type boolean
 * @on Active Actor over All Else
 * @off Active Actor is Sorted Normally
 * @desc Place the active actor on top of actor and enemy sprites.
 * @default false
 *
 * @param PrioritySortActors:eval
 * @text Priority: Actors
 * @parent SvBattlers
 * @type boolean
 * @on Actors over Enemies
 * @off Sort by Y Position
 * @desc Prioritize actors over enemies when placing sprites on top
 * of each other.
 * @default true
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent SvBattlers
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default false
 *
 * @param HomePosJS:func
 * @text JS: Home Position
 * @parent SvBattlers
 * @type note
 * @desc Code used to calculate the home position of actors.
 * @default "// Declare Constants\nconst sprite = this;\nconst actor = this._actor;\nconst index = arguments[0];\n\n// Make Calculations\nlet x = Math.round((Graphics.width / 2) + 192)\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\nx += index * 32;\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\ny += index * 48;\n\n// Home Position Offsets\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\+\\-]\\d+),[ ]([\\+\\-]\\d+)>/i;\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\nx = xOffsets.reduce((r, offset) => r + offset, x);\ny = yOffsets.reduce((r, offset) => r + offset, y);\n\n// Set Home Position\nthis.setHome(x, y);"
 *
 */
/* ----------------------------------------------------------------------------
 * Enemy Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Enemy:
 *
 * @param Visual
 *
 * @param AttackAnimation:num
 * @text Attack Animation
 * @parent Visual
 * @type animation
 * @desc Default attack animation used for enemies.
 * Use <Attack Animation: x> for custom animations.
 * @default 1
 *
 * @param EmergeText:eval
 * @text Emerge Text
 * @parent Visual
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide the 'Enemy emerges!' text at the start of battle.
 * @default false
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent Visual
 * @desc Offsets X position where enemy is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent Visual
 * @desc Offsets Y position where enemy is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent Visual
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default true
 *
 * @param SelectWindow
 * @text Select Window
 *
 * @param LastSelected:eval
 * @text Any: Last Selected
 * @parent SelectWindow
 * @type boolean
 * @on Last Selected
 * @off FV/SV Priority
 * @desc Prioritize last selected enemy over front view or sideview settings?
 * @default true
 *
 * @param FrontViewSelect:eval
 * @text FV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using frontview, auto select the enemy furthest right.
 * @default false
 *
 * @param SideviewSelect:eval
 * @text SV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using sideview, auto select the enemy furthest right.
 * @default true
 * 
 * @param Name
 *
 * @param NameLegacy:eval
 * @text Legacy Option
 * @parent Name
 * @type boolean
 * @on Legacy Version
 * @off New Version (Sprite)
 * @desc Use the legacy version (window) or new version (sprite).
 * WARNING: Legacy version is no longer supported for bugs.
 * @default false
 *
 * @param NameFontSize:num
 * @text Font Size
 * @parent Name
 * @desc Font size used for enemy names.
 * @default 22
 * 
 * @param NamePosition
 * @text Name Position
 * @parent Name
 *
 * @param NameOffsetX:num
 * @text Offset X
 * @parent NamePosition
 * @desc Offset the enemy name's X position by this much.
 * Negative goes left. Positive goes right.
 * @default 0
 *
 * @param NameOffsetY:num
 * @text Offset Y
 * @parent NamePosition
 * @desc Offset the enemy name's Y position by this much.
 * Negative goes up. Positive goes down.
 * @default 0
 *
 * @param NameAttachStateIcon:eval
 * @text Attach States
 * @parent Name
 * @type boolean
 * @on Attach
 * @off Normal Position
 * @desc Attach the enemy's state icon to the enemy name?
 * @default false
 *
 * @param AttachStateOffsetX:num
 * @text Attach: Offset X
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's X position by?
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param AttachStateOffsetY:num
 * @text Attach: Offset Y
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's Y position by?
 * Negative goes up. Positive goes down.
 * @default +0
 * 
 * @param NameVisibility
 * @text Name Visibility
 * @parent Name
 *
 * @param NameAlwaysHidden:eval
 * @text Always Hidden
 * @parent NameVisibility
 * @type boolean
 * @on Always Hidden
 * @off No Priority
 * @desc Determines if the enemy name will always be visible.
 * Highest priority.
 * @default false
 *
 * @param NameAlwaysVisible:eval
 * @text Always Visible
 * @parent NameVisibility
 * @type boolean
 * @on Always Visible
 * @off Hide when Unselected
 * @desc Determines if the enemy name will always be visible.
 * Medium priority.
 * @default false
 *
 * @param NameAlwaysSelectOnly:eval
 * @text By Selection?
 * @parent NameVisibility
 * @type boolean
 * @on Visible when Selected
 * @off Visible when Targeting
 * @desc Determines the conditions for enemy name visibility.
 * Lowest priority.
 * @default false
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AllowCollapse:eval
 * @text Allow Collapse
 * @parent SvBattlers
 * @type boolean
 * @on Allow
 * @off Don't
 * @desc Causes defeated enemies with SV Battler graphics
 * to "fade away" when defeated?
 * @default false
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param MotionIdle:str
 * @text Motion: Idle
 * @parent SvBattlers
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Sets default idle animation used by Sideview Battlers.
 * @default walk
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param Width:num
 * @text Size: Width
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default width for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param Height:num
 * @text Size: Height
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default height for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param WtypeId:num
 * @text Weapon Type
 * @parent SvBattlers
 * @type number
 * @min 0
 * @desc Sets default weapon type used by Sideview Battlers.
 * Use 0 for Bare Hands.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * HP Gauge Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~HpGauge:
 *
 * @param Display
 * @text Show Gauges For
 *
 * @param ShowActorGauge:eval
 * @text Actors
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the actor sprites' heads?
 * Requires SV Actors to be visible.
 * @default true
 *
 * @param ShowEnemyGauge:eval
 * @text Enemies
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the enemy sprites' heads?
 * Can be bypassed with <Hide HP Gauge> notetag.
 * @default true
 *
 * @param RequiresDefeat:eval
 * @text Requires Defeat?
 * @parent ShowEnemyGauge:eval
 * @type boolean
 * @on Require Defeat First
 * @off No Requirement
 * @desc Requires defeating the enemy once to show HP Gauge?
 * Can be bypassed with <Show HP Gauge> notetag.
 * @default true
 *
 * @param BTestBypass:eval
 * @text Battle Test Bypass?
 * @parent RequiresDefeat:eval
 * @type boolean
 * @on Bypass
 * @off Don't Bypass
 * @desc Bypass the defeat requirement in battle test?
 * @default true
 *
 * @param Settings
 *
 * @param AniDuration:num
 * @text Animation Duration
 * @parent Settings
 * @type number
 * @min 1
 * @desc How many frames should gauges animate themselves?
 * Default: 20 frames.
 * @default 20
 *
 * @param AnchorX:num
 * @text Anchor X
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor X to be?
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor Y
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor Y to be?
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param Scale:num
 * @text Scale
 * @parent Settings
 * @desc How large/small do you want the HP Gauge to be scaled?
 * @default 0.5
 *
 * @param OffsetX:num
 * @text Offset X
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's X by?
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset Y
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's Y by?
 * @default -3
 *
 * @param Options
 * @text Options
 *
 * @param AddHpGaugeOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the 'Show HP Gauge' option to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param Name:str
 * @text Option Name
 * @parent Options
 * @desc Command name of the option.
 * @default Show HP Gauge
 *
 */
/* ----------------------------------------------------------------------------
 * Action Sequence Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActionSequence:
 *
 * @param AutoSequences
 * @text Automatic Sequences
 *
 * @param AutoMeleeSolo:eval
 * @text Melee Single Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, single target actions?
 * @default true
 *
 * @param AutoMeleeAoE:eval
 * @text Melee Multi Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, multi-target actions?
 * @default true
 *
 * @param QoL
 * @text Quality of Life
 *
 * @param AutoNotetag:eval
 * @text Auto Notetag
 * @parent QoL
 * @type boolean
 * @on Automatic
 * @off Manual
 * @desc Automatically apply the <Custom Action Sequence> notetag
 * effect to any item or skill that has a Common Event?
 * @default false
 *
 * @param CastAnimations
 * @text Cast Animations
 *
 * @param CastCertain:num
 * @text Certain Hit
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Certain Hit skills.
 * @default 120
 *
 * @param CastPhysical:num
 * @text Physical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Physical skills.
 * @default 52
 *
 * @param CastMagical:num
 * @text Magical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Magical skills.
 * @default 51
 *
 * @param CounterReflection
 * @text Counter/Reflect
 *
 * @param CounterPlayback:eval
 * @text Counter Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param ReflectAnimation:num
 * @text Reflect Animation
 * @parent CounterReflection
 * @type animation
 * @desc Animation played when an action is reflected.
 * @default 53
 *
 * @param ReflectPlayback:eval
 * @text Reflect Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param Stepping
 *
 * @param MeleeDistance:num
 * @text Melee Distance
 * @parent Stepping
 * @desc Minimum distance in pixels for Movement Action Sequences.
 * @default 24
 *
 * @param StepDistanceX:num
 * @text Step Distance X
 * @parent Stepping
 * @desc The normal X distance when stepping forward.
 * @default 48
 *
 * @param StepDistanceY:num
 * @text Step Distance Y
 * @parent Stepping
 * @desc The normal Y distance when stepping forward.
 * @default 0
 *
 * @param StepDuration:num
 * @text Step Duration
 * @parent Stepping
 * @desc The number of frames for a stepping action to complete.
 * @default 12
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Start Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileStart:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Start from battler target(s)
 * @value target
 * @option Point - Start from a point on the screen
 * @value point
 * @desc Select where the projectile should start from.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to start the projectile from.
 * @default ["user"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Create one projectile at the center of the targets?
 * Or create a projectile for each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile from.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Goal Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileGoal:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Goal is battler target(s)
 * @value target
 * @option Point - Goal is a point on the screen
 * @value point
 * @desc Select where the projectile should go to.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for projectile to go to.
 * @default ["all targets"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Set goal in the center of targets?
 * Or create a projectile to go to each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile at.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Animation Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExAni:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the projectile's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 * 
 * @param Emulate
 * @text Effect Emulation
 * 
 * @param EmulateActionEffect:eval
 * @text Action Effect?
 * @parent Emulate
 * @type boolean
 * @on Emulate
 * @off Don't Emulate
 * @desc Emulate current Action Effect when projectile reaches
 * target? Only works with start/goal targets.
 * @default false
 * 
 * @param EmulateItemEffect:eval
 * @text Item Effect ID
 * @parent Emulate
 * @type item
 * @desc Emulate an Item Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 * 
 * @param EmulateSkillEffect:eval
 * @text Skill Effect ID
 * @parent Emulate
 * @type skill
 * @desc Emulate a Skill Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 *
 * @param OnceParallel:num
 * @text Common Event ID
 * @parent Emulate
 * @type common_event
 * @desc Plays a Once Parallel Common Event upon reaching target.
 * Use 0 to not use. Works regardless of start/goal targets.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExtra:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the projectile's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param BlendMode:num
 * @text Blend Mode
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the projectile?
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Hue:eval
 * @text Hue
 * @parent Settings
 * @desc Adjust the hue of the projectile.
 * Insert a number between 0 and 360.
 * @default 0
 * 
 * @param Scale:eval
 * @text Scale
 * @parent Settings
 * @desc Adjust the size scaling of the projectile.
 * Use decimals for exact control.
 * @default 1.0
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 * 
 * @param Emulate
 * @text Effect Emulation
 * 
 * @param EmulateActionEffect:eval
 * @text Action Effect?
 * @parent Emulate
 * @type boolean
 * @on Emulate
 * @off Don't Emulate
 * @desc Emulate current Action Effect when projectile reaches
 * target? Only works with start/goal targets.
 * @default false
 * 
 * @param EmulateItemEffect:eval
 * @text Item Effect ID
 * @parent Emulate
 * @type item
 * @desc Emulate an Item Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 * 
 * @param EmulateSkillEffect:eval
 * @text Skill Effect ID
 * @parent Emulate
 * @type skill
 * @desc Emulate a Skill Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 *
 * @param OnceParallel:num
 * @text Common Event ID
 * @parent Emulate
 * @type common_event
 * @desc Plays a Once Parallel Common Event upon reaching target.
 * Use 0 to not use. Works regardless of start/goal targets.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * Visual Cutin Effect Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~VisualCutinEffect:
 *
 * @param Transition
 * 
 * @param enterDuration:num
 * @text Entrance Duration
 * @parent Transition
 * @type number
 * @desc How many frames does it take to fully enter?
 * Used when a Visual Cutin Effect starts.
 * @default 12
 * 
 * @param exitDuration:num
 * @text Exit Duration
 * @parent Transition
 * @type number
 * @desc How many frames does it take to fully exit?
 * Used when a Visual Cutin Effect ends.
 * @default 12
 *
 * @param Cutin
 * @text Cutin Settings
 *
 * @param bgShow:eval
 * @text Show BG Color?
 * @parent Cutin
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Add a background color for this cutin?
 * Background colors appear behind the parallax.
 * @default true
 *
 * @param outlineShow:eval
 * @text Show Outline?
 * @parent Cutin
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show the cutin outline?
 * @default true
 *
 * @param Portrait
 * @text Portrait Settings
 *
 * @param PortraitBase
 * @text Base Properties
 * @parent Portrait
 * 
 * @param portraitAnchorX:num
 * @text Anchor X
 * @parent PortraitBase
 * @desc Determines the sprite anchor X alignment.
 * 0.0: Left, 0.5: Center, 1.0: Right.
 * @default 0.5
 * 
 * @param portraitAnchorY:num
 * @text Anchor Y
 * @parent PortraitBase
 * @desc Determines the sprite anchor Y alignment.
 * 0.0: Top, 0.5: Middle, 1.0: Bottom.
 * @default 0.5
 *
 * @param portraitHue:num
 * @text Hue
 * @parent PortraitBase
 * @type number
 * @min 0
 * @max 360
 * @desc Do you wish to adjust this cutin's portrait hue?
 * @default 0
 * 
 * @param portraitOpacity:num
 * @text Opacity
 * @parent PortraitBase
 * @type number
 * @max 255
 * @desc What is the opacity level of this cutin's portrait?
 * @default 255
 * 
 * @param portraitOffsetX:num
 * @text Offset X
 * @parent PortraitBase
 * @desc Offsets the cutin portrait's X location.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @param portraitOffsetY:num
 * @text Offset Y
 * @parent PortraitBase
 * @desc Offsets the cutin portrait's Y location.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param PortraitEnter
 * @text Entrance Properties
 * @parent Portrait
 * 
 * @param portraitEnterX:num
 * @text Entrance X
 * @parent PortraitEnter
 * @desc Sets the cutin portrait's X entrance.
 * Negative: from left. Positive: from right.
 * @default +0
 * 
 * @param portraitEnterY:num
 * @text Entrance Y
 * @parent PortraitEnter
 * @desc Sets the cutin portrait's Y entrance.
 * Negative: from up. Positive: from down.
 * @default +0
 *
 * @param portraitEnterEasingType:str
 * @text Entrance Easing
 * @parent PortraitEnter
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @param PortraitExit
 * @text Exit Properties
 * @parent Portrait
 * 
 * @param portraitExitX:num
 * @text Exit X
 * @parent PortraitExit
 * @desc Sets the cutin portrait's X exit.
 * Negative: to left. Positive: to right.
 * @default +0
 * 
 * @param portraitExitY:num
 * @text Exit Y
 * @parent PortraitExit
 * @desc Sets the cutin portrait's Y exit.
 * Negative: to up. Positive: to down.
 * @default +0
 *
 * @param portraitExitEasingType:str
 * @text Exit Easing
 * @parent PortraitExit
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @param PortraitFlip
 * @text Flip Properties
 * @parent Portrait
 *
 * @param portraitFlipHorz:eval
 * @text Flip Horizontally?
 * @parent PortraitFlip
 * @type boolean
 * @on Flip
 * @off Don't Flip
 * @desc Flip the cutin portrait horizontally?
 * @default false
 *
 * @param portraitFlipVert:eval
 * @text Flip Vertically?
 * @parent PortraitFlip
 * @type boolean
 * @on Flip
 * @off Don't Flip
 * @desc Flip the cutin portrait vertically?
 * @default false
 *
 * @param PortraitScale
 * @text Scaling Properties
 * @parent Portrait
 * 
 * @param portraitForcedScale:num
 * @text Forced Scaling
 * @parent PortraitScale
 * @desc Do you want to force a scaling ratio?
 * Leave as 0 for none. Disables "Fit to Scale?".
 * @default 0.0
 *
 * @param portraitScaleToFit:eval
 * @text Fit to Scale?
 * @parent PortraitScale
 * @type boolean
 * @on Fit to Scale
 * @off Don't Scale
 * @desc Scale the cutin portrait to fit the cutin style?
 * Cannot be used with "Forced Scaling".
 * @default true
 *
 * @param portraitScaleMax:eval
 * @text Scale Max?
 * @parent portraitScaleToFit:eval
 * @type boolean
 * @on Scale Maximum
 * @off Scale Minimum
 * @desc Scale the cutin portrait to the maximum fit or
 * scale the cutin portrait to the minimum fit.
 * @default false
 *
 * @param PortraitAni
 * @text Animated Portraits
 * @parent Portrait
 *
 * @param animatedPortraitLooping:eval
 * @text Loop?
 * @parent PortraitAni
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Will loop back to beginning once ended.
 * Requires VisuMZ_4_AnimatedPictures!
 * @default true
 *
 * @param animatedPortraitWaitFrames:num
 * @text Wait Frames
 * @parent PortraitAni
 * @type number
 * @min 1
 * @desc Frames to wait before moving to next cell.
 * Requires VisuMZ_4_AnimatedPictures!
 * @default 4
 *
 * @param Parallax
 * @text Parallax Settings
 *
 * @param ParallaxBase
 * @text Base Settings
 * @parent Parallax
 *
 * @param parallaxBlendMode:num
 * @text Blend Mode
 * @parent ParallaxBase
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the cutin?
 * @default 0
 *
 * @param parallaxHue:num
 * @text Hue
 * @parent ParallaxBase
 * @type number
 * @min 0
 * @max 360
 * @desc Do you wish to adjust this cutin's parallax hue?
 * @default 0
 *
 * @param parallaxHueEnemyModifier:num
 * @text Enemy Modifier
 * @parent parallaxHue:num
 * @desc Adjust the hue value by this if the cutin target is an enemy.
 * @default +0
 * 
 * @param parallaxOpacity:num
 * @text Opacity
 * @parent ParallaxBase
 * @type number
 * @max 255
 * @desc What is the opacity level of this cutin's parallax?
 * @default 255
 *
 * @param ParallaxScroll
 * @text Scrolling Settings
 * @parent Parallax
 * 
 * @param parallaxOffsetX:num
 * @text Offset X
 * @parent ParallaxScroll
 * @desc Offsets the cutin parallax's X location.
 * Negative: left. Positive: right.
 * @default +0.0
 * 
 * @param parallaxOffsetY:num
 * @text Offset Y
 * @parent ParallaxScroll
 * @desc Offsets the cutin parallax's Y location.
 * Negative: up. Positive: down.
 * @default +0.0
 * 
 * @param parallaxScrollX:num
 * @text Scroll X
 * @parent ParallaxScroll
 * @desc How many pixels does the parallax scroll horizontally?
 * Negative: Scroll to right. Positive: Scroll to left.
 * @default +0.0
 *
 * @param parallaxScrollXinvertEnemy:eval
 * @text Invert for Enemy?
 * @parent parallaxScrollX:num
 * @type boolean
 * @on Invert
 * @off Don't Invert
 * @desc Invert the X scroll direction if the cutin target is an enemy?
 * @default false
 * 
 * @param parallaxScrollY:num
 * @text Scroll Y
 * @parent ParallaxScroll
 * @desc How many pixels does the parallax scroll vertically?
 * Negative: Scroll to down. Positive: Scroll to up.
 * @default +0.0
 *
 * @param parallaxScrollYinvertEnemy:eval
 * @text Invert for Enemy?
 * @parent parallaxScrollY:num
 * @type boolean
 * @on Invert
 * @off Don't Invert
 * @desc Invert the Y scroll direction if the cutin target is an enemy?
 * @default false
 *
 */
//=============================================================================

const _0x3823ba=_0xf8bb;(function(_0x1b24b3,_0x5833ef){const _0x19e1f6=_0xf8bb,_0x49ed15=_0x1b24b3();while(!![]){try{const _0x43996f=-parseInt(_0x19e1f6(0x9b7))/0x1*(parseInt(_0x19e1f6(0x2a7))/0x2)+parseInt(_0x19e1f6(0xa39))/0x3*(parseInt(_0x19e1f6(0x16a))/0x4)+parseInt(_0x19e1f6(0xc56))/0x5+parseInt(_0x19e1f6(0x4e3))/0x6+parseInt(_0x19e1f6(0x898))/0x7*(-parseInt(_0x19e1f6(0x812))/0x8)+-parseInt(_0x19e1f6(0x619))/0x9+-parseInt(_0x19e1f6(0x4ae))/0xa;if(_0x43996f===_0x5833ef)break;else _0x49ed15['push'](_0x49ed15['shift']());}catch(_0x4c05d8){_0x49ed15['push'](_0x49ed15['shift']());}}}(_0x2f55,0x9277a));var label=_0x3823ba(0x4f3),tier=tier||0x0,dependencies=[],pluginData=$plugins[_0x3823ba(0x3a2)](function(_0x510bf8){const _0x7ee995=_0x3823ba;return _0x510bf8[_0x7ee995(0x32d)]&&_0x510bf8[_0x7ee995(0x81e)]['includes']('['+label+']');})[0x0];VisuMZ[label][_0x3823ba(0x242)]=VisuMZ[label]['Settings']||{},VisuMZ[_0x3823ba(0xb9f)]=function(_0x38a32d,_0x14e04c){const _0x34c070=_0x3823ba;for(const _0xf936ab in _0x14e04c){if(_0xf936ab['match'](/(.*):(.*)/i)){if(_0x34c070(0xc68)===_0x34c070(0xc68)){const _0x583d60=String(RegExp['$1']),_0x537d65=String(RegExp['$2'])[_0x34c070(0x2d8)]()[_0x34c070(0xaf4)]();let _0x2af694,_0x972cdb,_0x39d24f;switch(_0x537d65){case _0x34c070(0xcc3):_0x2af694=_0x14e04c[_0xf936ab]!==''?Number(_0x14e04c[_0xf936ab]):0x0;break;case _0x34c070(0x592):_0x972cdb=_0x14e04c[_0xf936ab]!==''?JSON[_0x34c070(0xd93)](_0x14e04c[_0xf936ab]):[],_0x2af694=_0x972cdb[_0x34c070(0x4d0)](_0x165004=>Number(_0x165004));break;case _0x34c070(0xbc9):_0x2af694=_0x14e04c[_0xf936ab]!==''?eval(_0x14e04c[_0xf936ab]):null;break;case _0x34c070(0x659):_0x972cdb=_0x14e04c[_0xf936ab]!==''?JSON[_0x34c070(0xd93)](_0x14e04c[_0xf936ab]):[],_0x2af694=_0x972cdb['map'](_0x3d2d6a=>eval(_0x3d2d6a));break;case _0x34c070(0x25c):_0x2af694=_0x14e04c[_0xf936ab]!==''?JSON[_0x34c070(0xd93)](_0x14e04c[_0xf936ab]):'';break;case _0x34c070(0xb0e):_0x972cdb=_0x14e04c[_0xf936ab]!==''?JSON[_0x34c070(0xd93)](_0x14e04c[_0xf936ab]):[],_0x2af694=_0x972cdb[_0x34c070(0x4d0)](_0x31e422=>JSON[_0x34c070(0xd93)](_0x31e422));break;case _0x34c070(0xa5d):_0x2af694=_0x14e04c[_0xf936ab]!==''?new Function(JSON['parse'](_0x14e04c[_0xf936ab])):new Function(_0x34c070(0xa34));break;case _0x34c070(0x5ed):_0x972cdb=_0x14e04c[_0xf936ab]!==''?JSON[_0x34c070(0xd93)](_0x14e04c[_0xf936ab]):[],_0x2af694=_0x972cdb[_0x34c070(0x4d0)](_0x695dee=>new Function(JSON[_0x34c070(0xd93)](_0x695dee)));break;case'STR':_0x2af694=_0x14e04c[_0xf936ab]!==''?String(_0x14e04c[_0xf936ab]):'';break;case'ARRAYSTR':_0x972cdb=_0x14e04c[_0xf936ab]!==''?JSON[_0x34c070(0xd93)](_0x14e04c[_0xf936ab]):[],_0x2af694=_0x972cdb[_0x34c070(0x4d0)](_0x3792ab=>String(_0x3792ab));break;case'STRUCT':_0x39d24f=_0x14e04c[_0xf936ab]!==''?JSON[_0x34c070(0xd93)](_0x14e04c[_0xf936ab]):{},_0x38a32d[_0x583d60]={},VisuMZ[_0x34c070(0xb9f)](_0x38a32d[_0x583d60],_0x39d24f);continue;case _0x34c070(0xb09):_0x972cdb=_0x14e04c[_0xf936ab]!==''?JSON[_0x34c070(0xd93)](_0x14e04c[_0xf936ab]):[],_0x2af694=_0x972cdb[_0x34c070(0x4d0)](_0x22fc97=>VisuMZ['ConvertParams']({},JSON[_0x34c070(0xd93)](_0x22fc97)));break;default:continue;}_0x38a32d[_0x583d60]=_0x2af694;}else{_0x1b43df[_0x34c070(0xd03)](_0x2f9c13);if(_0xa3c629)_0x166ffe[_0x34c070(0xd8b)]();}}}return _0x38a32d;},(_0x8ee9f2=>{const _0x387cbd=_0x3823ba,_0x426fe6=_0x8ee9f2[_0x387cbd(0x450)];for(const _0xbfd8d2 of dependencies){if(_0x387cbd(0x7de)!==_0x387cbd(0x7de)){if(this[_0x387cbd(0x786)]===_0x349cd3)return;_0x3e1151[_0x387cbd(0x8d6)][_0x387cbd(0x423)][_0x387cbd(0x162)](this);}else{if(!Imported[_0xbfd8d2]){alert(_0x387cbd(0xcf5)[_0x387cbd(0xabf)](_0x426fe6,_0xbfd8d2)),SceneManager[_0x387cbd(0x824)]();break;}}}const _0x5443c8=_0x8ee9f2[_0x387cbd(0x81e)];if(_0x5443c8[_0x387cbd(0xd57)](/\[Version[ ](.*?)\]/i)){const _0x29a715=Number(RegExp['$1']);_0x29a715!==VisuMZ[label][_0x387cbd(0xd18)]&&(_0x387cbd(0x510)==='rfWhy'?(alert(_0x387cbd(0x4a5)['format'](_0x426fe6,_0x29a715)),SceneManager[_0x387cbd(0x824)]()):this[_0x387cbd(0x1f8)]['setHue'](_0x23876a));}if(_0x5443c8[_0x387cbd(0xd57)](/\[Tier[ ](\d+)\]/i)){if(_0x387cbd(0x457)===_0x387cbd(0x457)){const _0x343e13=Number(RegExp['$1']);_0x343e13<tier?(alert('%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.'[_0x387cbd(0xabf)](_0x426fe6,_0x343e13,tier)),SceneManager[_0x387cbd(0x824)]()):tier=Math['max'](_0x343e13,tier);}else{const _0x3bae9e=_0x70086e[_0x21c1e8];if(!_0x3bae9e)return![];if(_0x3bae9e['list'][_0x387cbd(0xb23)]<=0x1)return![];return!![];}}VisuMZ['ConvertParams'](VisuMZ[label][_0x387cbd(0x242)],_0x8ee9f2['parameters']);})(pluginData),VisuMZ[_0x3823ba(0x140)]=function(_0x220f72){const _0x33064f=_0x3823ba;let _0x2464cd=[];for(const _0x4519af of _0x220f72){_0x2464cd=_0x2464cd[_0x33064f(0x145)](VisuMZ['ConvertActionSequenceTarget'](_0x4519af));}return _0x2464cd[_0x33064f(0x3a2)](_0x222fa3=>_0x222fa3);},VisuMZ[_0x3823ba(0x2e5)]=function(_0xaeefa9){const _0x55dd44=_0x3823ba,_0x143e23=BattleManager[_0x55dd44(0xbee)]()[_0x55dd44(0x3a2)](_0x245c3c=>_0x245c3c&&_0x245c3c[_0x55dd44(0xb7d)]()),_0x5912b2=BattleManager[_0x55dd44(0x527)],_0x24c16d=BattleManager[_0x55dd44(0xa2b)],_0x4154a8=BattleManager[_0x55dd44(0xa71)]?BattleManager['_allTargets']['slice'](0x0):_0x143e23;_0xaeefa9=_0xaeefa9[_0x55dd44(0x8cf)]()[_0x55dd44(0xaf4)]();if(_0xaeefa9==='user')return[_0x5912b2];else{if(_0xaeefa9===_0x55dd44(0x48b))return[_0x24c16d];else{if(_0xaeefa9===_0x55dd44(0xa0d)){if(_0x24c16d){if(_0x55dd44(0x477)!=='mUFOP')this[_0x55dd44(0x396)]=new _0x4a560a(_0x1b2915),this[_0x55dd44(0xac2)]();else{const _0x1b8617=_0x4154a8[_0x55dd44(0x122)](_0x24c16d);return _0x1b8617>=0x0?[_0x4154a8[_0x1b8617-0x1]||_0x24c16d]:[_0x24c16d];}}}else{if(_0xaeefa9==='text\x20target'){if(_0x24c16d){const _0xc32660=_0x4154a8[_0x55dd44(0x122)](_0x24c16d);return _0xc32660>=0x0?[_0x4154a8[_0xc32660+0x1]||_0x24c16d]:[_0x24c16d];}}else{if(_0xaeefa9===_0x55dd44(0x1c0))return _0x4154a8;else{if(_0xaeefa9===_0x55dd44(0xd0c))return[_0x5912b2]['concat'](_0x4154a8);else{if(_0xaeefa9==='not\x20focus')return _0x55dd44(0x36c)!==_0x55dd44(0xa44)?_0x143e23[_0x55dd44(0x3a2)](_0x5a1d4c=>_0x5a1d4c!==_0x5912b2&&!_0x4154a8[_0x55dd44(0x97e)](_0x5a1d4c)&&_0x5a1d4c[_0x55dd44(0xb73)]()):_0x440a67[_0x55dd44(0x4f3)][_0x55dd44(0xc8e)][_0x55dd44(0x162)](this);else{if(_0xaeefa9===_0x55dd44(0xd41)){if(_0x55dd44(0xca5)!==_0x55dd44(0xb9d))return[VisuMZ[_0x55dd44(0x9a4)]()];else{let _0x40fcd9=_0x362c87[_0x55dd44(0x975)](_0x2c9464[_0x55dd44(0xa36)]);_0x40fcd9=this['disperseDamage'](_0x40fcd9),_0x40fcd9!==0x0&&(_0x110897['gainTp'](_0x40fcd9),this[_0x55dd44(0xc40)](_0xe285c8));}}else{if(_0xaeefa9[_0x55dd44(0xd57)](/SPECIAL (.*)>/i)){if(_0x55dd44(0xcc9)!==_0x55dd44(0xce7)){const _0x20c253=String(RegExp['$1'])[_0x55dd44(0x22f)](',')[_0x55dd44(0x4d0)](_0x3d0064=>_0x3d0064[_0x55dd44(0xaf4)]());return[VisuMZ[_0x55dd44(0x248)](_0x20c253)];}else{this[_0x55dd44(0x7aa)](_0x5cdb8c);return;}}}}}}}}}}if(_0x5912b2){if(_0xaeefa9===_0x55dd44(0x119))return _0x5912b2['friendsUnit']()[_0x55dd44(0xd31)]();else{if(_0xaeefa9===_0x55dd44(0x90e))return _0x5912b2[_0x55dd44(0x691)]()['aliveMembers']()[_0x55dd44(0x3a2)](_0x1bec12=>_0x1bec12!==_0x5912b2);else{if(_0xaeefa9==='alive\x20friends\x20not\x20target')return _0x5912b2[_0x55dd44(0x691)]()[_0x55dd44(0xd31)]()['filter'](_0x237bad=>_0x237bad!==_0x24c16d);else{if(_0xaeefa9===_0x55dd44(0x7b0))return _0x5912b2['friendsUnit']()[_0x55dd44(0xb6d)]();else{if(_0xaeefa9['match'](/FRIEND INDEX (\d+)/i)){if('ZoTGa'===_0x55dd44(0x541))this[_0x55dd44(0xab0)](_0x55dd44(0x525));else{const _0x574a4e=Number(RegExp['$1']);return[_0x5912b2['friendsUnit']()['members']()[_0x574a4e]];}}}}}}if(_0xaeefa9===_0x55dd44(0xd6b))return _0x5912b2['opponentsUnit']()[_0x55dd44(0xd31)]();else{if(_0xaeefa9==='alive\x20opponents\x20not\x20target')return _0x5912b2[_0x55dd44(0x686)]()[_0x55dd44(0xd31)]()[_0x55dd44(0x3a2)](_0x24c1df=>_0x24c1df!==_0x24c16d);else{if(_0xaeefa9===_0x55dd44(0x106))return _0x5912b2[_0x55dd44(0x686)]()[_0x55dd44(0xb6d)]();else{if(_0xaeefa9[_0x55dd44(0xd57)](/OPPONENT INDEX (\d+)/i)){if('awrMg'!==_0x55dd44(0x434)){const _0x5204d5=Number(RegExp['$1']);return[_0x5912b2[_0x55dd44(0x686)]()[_0x55dd44(0x292)]()[_0x5204d5]];}else return _0x51651c[_0x55dd44(0x4f3)][_0x55dd44(0xbe8)][_0x55dd44(0x162)](this);}}}}}if(_0xaeefa9===_0x55dd44(0x6d6))return $gameParty[_0x55dd44(0xd31)]();else{if(_0xaeefa9===_0x55dd44(0xd54)){if(_0x55dd44(0x901)==='DRVPx')this['_battleField'][_0x55dd44(0x538)](this[_0x55dd44(0x672)]);else return $gameParty['aliveMembers']()['filter'](_0x39cb56=>_0x39cb56!==_0x5912b2);}else{if(_0xaeefa9===_0x55dd44(0xbb2)){if(_0x55dd44(0x440)===_0x55dd44(0x440))return $gameParty[_0x55dd44(0xd31)]()[_0x55dd44(0x3a2)](_0x2d8c0a=>_0x2d8c0a!==_0x24c16d);else _0xeb0881['_tpbNeedsPartyCommand']=![],this[_0x55dd44(0x6eb)]();}else{if(_0xaeefa9===_0x55dd44(0x590))return $gameParty[_0x55dd44(0xb6d)]();else{if(_0xaeefa9[_0x55dd44(0xd57)](/ACTOR INDEX (\d+)/i)){const _0x23277b=Number(RegExp['$1']);return[$gameParty['members']()[_0x23277b]];}else{if(_0xaeefa9[_0x55dd44(0xd57)](/ACTOR ID (\d+)/i)){const _0x286a2a=Number(RegExp['$1']);return[$gameActors['actor'](_0x286a2a)];}}}}}}if(_0xaeefa9===_0x55dd44(0x4eb))return $gameTroop[_0x55dd44(0xd31)]();else{if(_0xaeefa9===_0x55dd44(0xd8c))return'SvfmV'===_0x55dd44(0x340)?$gameTroop['aliveMembers']()['filter'](_0x4675f3=>_0x4675f3!==_0x5912b2):!![];else{if(_0xaeefa9==='alive\x20enemies\x20not\x20target'){if('vKLsg'===_0x55dd44(0x37d))return $gameTroop['aliveMembers']()[_0x55dd44(0x3a2)](_0x2377ca=>_0x2377ca!==_0x24c16d);else{if(!_0x3de8b4[_0x55dd44(0x4f3)][_0x55dd44(0x242)][_0x55dd44(0x735)][_0x55dd44(0x9b1)])return![];if(_0x4f282f[_0x55dd44(0xce8)]())return!![];return _0xc00a2f[_0x55dd44(0x72e)]&&_0x56a208[_0x55dd44(0x3da)]();}}else{if(_0xaeefa9===_0x55dd44(0x83c))return $gameTroop['deadMembers']();else{if(_0xaeefa9[_0x55dd44(0xd57)](/ENEMY INDEX (\d+)/i)){const _0x3a421c=Number(RegExp['$1']);return[$gameTroop[_0x55dd44(0x292)]()[_0x3a421c]];}else{if(_0xaeefa9[_0x55dd44(0xd57)](/ENEMY ID (\d+)/i)){const _0x210182=Number(RegExp['$1']);return $gameTroop[_0x55dd44(0xd31)]()[_0x55dd44(0x3a2)](_0x48d08f=>_0x48d08f[_0x55dd44(0xce6)]()===_0x210182);}}}}}}if(_0xaeefa9===_0x55dd44(0x1cd))return _0x143e23[_0x55dd44(0x3a2)](_0x10634e=>_0x10634e[_0x55dd44(0x8ed)]());else{if(_0xaeefa9===_0x55dd44(0x8db))return _0x143e23[_0x55dd44(0x3a2)](_0x562ab2=>_0x562ab2[_0x55dd44(0x8ed)]()&&_0x562ab2!==_0x5912b2);else{if(_0xaeefa9===_0x55dd44(0x26d)){if(_0x55dd44(0x90a)===_0x55dd44(0x225))_0x53fe85[_0x55dd44(0x4f3)][_0x55dd44(0x9cc)][_0x55dd44(0x162)](this),this[_0x55dd44(0x6b9)]();else return _0x143e23[_0x55dd44(0x3a2)](_0x3c49bb=>_0x3c49bb['isAlive']()&&_0x3c49bb!==_0x24c16d);}else{if(_0xaeefa9==='dead\x20battlers')return _0x143e23[_0x55dd44(0x3a2)](_0x4b64fd=>_0x4b64fd[_0x55dd44(0x3b8)]());}}}return[];},VisuMZ[_0x3823ba(0x9a4)]=function(){return BattleManager['_target'];},VisuMZ[_0x3823ba(0x248)]=function(_0x57a958){const _0x3a46b5=_0x3823ba;return BattleManager[_0x3a46b5(0xa2b)];},PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],'ActSeq_Set_SetupAction',_0x57825b=>{const _0x432061=_0x3823ba;if(!SceneManager[_0x432061(0xbc6)]())return;VisuMZ[_0x432061(0xb9f)](_0x57825b,_0x57825b);const _0x28edc3=$gameTemp['getLastPluginCommandInterpreter'](),_0x1afed3=BattleManager[_0x432061(0x131)],_0x9fbd81=BattleManager[_0x432061(0x527)],_0x1fa4a7=BattleManager[_0x432061(0xa71)]?BattleManager['_allTargets'][_0x432061(0xc36)](0x0):[],_0x2d5d16=BattleManager[_0x432061(0xd61)];if(!_0x28edc3||!_0x1afed3||!_0x9fbd81)return;if(!_0x1afed3[_0x432061(0x733)]())return;if(_0x57825b['DisplayAction'])_0x2d5d16[_0x432061(0x31b)](_0x9fbd81,_0x1afed3[_0x432061(0x733)]());if(_0x57825b[_0x432061(0x1e0)]){if(_0x432061(0x5a1)===_0x432061(0x5a1))_0x2d5d16[_0x432061(0x3d9)](_0x432061(0x289),_0x9fbd81,_0x1fa4a7,!![]);else{if(_0x551179[_0x432061(0x98a)]===0x0)this[_0x432061(0xb90)](_0x432061(0x49f));else{if(_0x2c6e23[_0x432061(0x98a)]===0x1)this['requestMotion'](_0x432061(0x9e3));else _0x3683b3['type']===0x2&&this['requestMotion'](_0x432061(0x687));}this['startWeaponAnimation'](_0x44b516['weaponImageId']);}}if(_0x57825b[_0x432061(0x99d)])_0x2d5d16[_0x432061(0x3d9)](_0x432061(0xa5f),_0x9fbd81,_0x1afed3);if(_0x57825b[_0x432061(0x9c5)])_0x2d5d16[_0x432061(0x3d9)]('waitForMovement');if(_0x57825b[_0x432061(0x17f)])_0x2d5d16['push'](_0x432061(0x987),_0x9fbd81,_0x1afed3);if(_0x57825b[_0x432061(0xa29)])_0x2d5d16[_0x432061(0x3d9)](_0x432061(0x414));_0x28edc3[_0x432061(0xab0)]('battlelog');}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],'ActSeq_Set_WholeActionSet',_0x1186a3=>{const _0x3cfd6d=_0x3823ba;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x3cfd6d(0xb9f)](_0x1186a3,_0x1186a3);const _0x3462cc=$gameTemp[_0x3cfd6d(0xaa7)](),_0x4d5441=BattleManager[_0x3cfd6d(0x131)],_0x1b07b9=BattleManager[_0x3cfd6d(0x527)],_0x2a35fa=BattleManager['_allTargets']?BattleManager[_0x3cfd6d(0xa71)][_0x3cfd6d(0xc36)](0x0):[],_0x5aa106=BattleManager[_0x3cfd6d(0xd61)],_0x374cf1=_0x1186a3[_0x3cfd6d(0xbb5)]??![];if(!_0x3462cc||!_0x4d5441||!_0x1b07b9)return;if(!_0x4d5441[_0x3cfd6d(0x733)]())return;let _0x33caf2=_0x374cf1?_0x5aa106[_0x3cfd6d(0xd5d)](_0x1b07b9):0x1;for(let _0x29e2e0=0x0;_0x29e2e0<_0x33caf2;_0x29e2e0++){_0x374cf1&&_0x1b07b9[_0x3cfd6d(0x4e0)]()&&_0x5aa106[_0x3cfd6d(0x3d9)](_0x3cfd6d(0x3a5),_0x1b07b9,_0x29e2e0);if(_0x1186a3[_0x3cfd6d(0x493)])_0x5aa106[_0x3cfd6d(0x3d9)](_0x3cfd6d(0xba8),_0x1b07b9,_0x4d5441);if(_0x1186a3[_0x3cfd6d(0x968)]>0x0)_0x5aa106[_0x3cfd6d(0x3d9)]('waitCount',_0x1186a3['WaitCount']);if(_0x1186a3['ActionAnimation'])_0x5aa106['push'](_0x3cfd6d(0x550),_0x1b07b9,_0x2a35fa,_0x4d5441[_0x3cfd6d(0x733)]()[_0x3cfd6d(0x161)]);if(_0x1186a3['WaitForAnimation'])_0x5aa106[_0x3cfd6d(0x3d9)](_0x3cfd6d(0x414));for(const _0x491659 of _0x2a35fa){if(!_0x491659)continue;if(_0x1186a3[_0x3cfd6d(0xd4e)])_0x5aa106[_0x3cfd6d(0x3d9)]('actionEffect',_0x1b07b9,_0x491659);}}if(_0x374cf1&&_0x1b07b9[_0x3cfd6d(0x4e0)]()){if(_0x3cfd6d(0xa0a)!==_0x3cfd6d(0xa0a))return!![];else _0x5aa106[_0x3cfd6d(0x3d9)](_0x3cfd6d(0x70a),_0x1b07b9);}if(_0x1186a3[_0x3cfd6d(0x1e0)])_0x5aa106[_0x3cfd6d(0x3d9)](_0x3cfd6d(0x289),_0x1b07b9,_0x2a35fa,![]);_0x3462cc[_0x3cfd6d(0xab0)]('battlelog');}),PluginManager[_0x3823ba(0xa46)](pluginData['name'],_0x3823ba(0x55f),_0x5453ad=>{const _0x297eb4=_0x3823ba;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x297eb4(0xb9f)](_0x5453ad,_0x5453ad);const _0x592c22=$gameTemp[_0x297eb4(0xaa7)](),_0x2031c1=BattleManager['_action'],_0x4695dc=BattleManager[_0x297eb4(0x527)],_0x4aa1da=BattleManager['_allTargets']?BattleManager[_0x297eb4(0xa71)]['slice'](0x0):[],_0x95557d=BattleManager[_0x297eb4(0xd61)],_0x266a4a=_0x5453ad[_0x297eb4(0xbb5)]??![];if(!_0x592c22||!_0x2031c1||!_0x4695dc)return;if(!_0x2031c1['item']())return;let _0x19ab4f=_0x266a4a?_0x95557d[_0x297eb4(0xd5d)](_0x4695dc):0x1;for(let _0x54301d=0x0;_0x54301d<_0x19ab4f;_0x54301d++){if(_0x297eb4(0x7c7)===_0x297eb4(0x7c7))for(const _0xf8d3d0 of _0x4aa1da){if(!_0xf8d3d0)continue;_0x266a4a&&_0x4695dc[_0x297eb4(0x4e0)]()&&_0x95557d[_0x297eb4(0x3d9)](_0x297eb4(0x3a5),_0x4695dc,_0x54301d);if(_0x5453ad['PerformAction'])_0x95557d[_0x297eb4(0x3d9)]('performAction',_0x4695dc,_0x2031c1);if(_0x5453ad[_0x297eb4(0xa57)]>0x0)_0x95557d['push'](_0x297eb4(0x3cc),_0x5453ad[_0x297eb4(0xa57)]);if(_0x5453ad[_0x297eb4(0x52b)])_0x95557d[_0x297eb4(0x3d9)](_0x297eb4(0x550),_0x4695dc,[_0xf8d3d0],_0x2031c1[_0x297eb4(0x733)]()[_0x297eb4(0x161)]);if(_0x5453ad['WaitCount2']>0x0)_0x95557d['push'](_0x297eb4(0x3cc),_0x5453ad[_0x297eb4(0xb61)]);if(_0x5453ad[_0x297eb4(0xd4e)])_0x95557d[_0x297eb4(0x3d9)](_0x297eb4(0x14c),_0x4695dc,_0xf8d3d0);}else this['_waitMode']='';}_0x266a4a&&_0x4695dc[_0x297eb4(0x4e0)]()&&(_0x297eb4(0x587)!=='Pmqob'?(this['resizeWindowBorderStyle'](_0x711b39),this[_0x297eb4(0x790)]()):_0x95557d[_0x297eb4(0x3d9)](_0x297eb4(0x70a),_0x4695dc));if(_0x5453ad[_0x297eb4(0x1e0)])_0x95557d[_0x297eb4(0x3d9)](_0x297eb4(0x289),_0x4695dc,_0x4aa1da,![]);_0x592c22[_0x297eb4(0xab0)](_0x297eb4(0x6dc));}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],'ActSeq_Set_FinishAction',_0xcc0417=>{const _0xc08ec2=_0x3823ba;if(!SceneManager[_0xc08ec2(0xbc6)]())return;VisuMZ[_0xc08ec2(0xb9f)](_0xcc0417,_0xcc0417);const _0x1dbf8a=$gameTemp[_0xc08ec2(0xaa7)](),_0x509eea=BattleManager[_0xc08ec2(0x131)],_0x2ab7ef=BattleManager[_0xc08ec2(0x527)],_0x560cf5=BattleManager[_0xc08ec2(0xa71)]?BattleManager[_0xc08ec2(0xa71)]['slice'](0x0):[],_0x35af4f=BattleManager[_0xc08ec2(0xd61)];if(!_0x1dbf8a||!_0x509eea||!_0x2ab7ef)return;if(!_0x509eea[_0xc08ec2(0x733)]())return;if(_0xcc0417[_0xc08ec2(0x1e0)])_0x35af4f[_0xc08ec2(0x3d9)](_0xc08ec2(0x289),_0x2ab7ef,_0x560cf5,![]);if(_0xcc0417[_0xc08ec2(0xab7)])_0x35af4f[_0xc08ec2(0x3d9)](_0xc08ec2(0xae4));if(_0xcc0417[_0xc08ec2(0x486)])_0x35af4f[_0xc08ec2(0x3d9)]('waitForEffect');if(_0xcc0417[_0xc08ec2(0x76a)])_0x35af4f['push']('clear');if(_0xcc0417[_0xc08ec2(0xa60)])_0x35af4f['push'](_0xc08ec2(0x817),_0x2ab7ef);if(_0xcc0417[_0xc08ec2(0x9c5)])_0x35af4f['push']('waitForMovement');_0x1dbf8a[_0xc08ec2(0xab0)]('battlelog');}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_ChangeAngle',_0x273ed9=>{const _0x4480b5=_0x3823ba;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x4480b5(0x29c)])return;VisuMZ[_0x4480b5(0xb9f)](_0x273ed9,_0x273ed9);const _0x570c2d=$gameTemp[_0x4480b5(0xaa7)](),_0x68faa5=_0x273ed9['WaitForAngle'];if(!_0x570c2d)return;$gameScreen[_0x4480b5(0x5bc)](_0x273ed9[_0x4480b5(0x348)],_0x273ed9['Duration'],_0x273ed9[_0x4480b5(0x890)]);if(_0x68faa5)_0x570c2d['setWaitMode'](_0x4480b5(0x93c));}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],'ActSeq_Angle_Reset',_0x27581c=>{const _0x843e55=_0x3823ba;if(!SceneManager[_0x843e55(0xbc6)]())return;if(!Imported[_0x843e55(0x29c)])return;VisuMZ[_0x843e55(0xb9f)](_0x27581c,_0x27581c);const _0x1b0a0d=$gameTemp[_0x843e55(0xaa7)](),_0x2453d0=_0x27581c[_0x843e55(0xd3d)];if(!_0x1b0a0d)return;$gameScreen[_0x843e55(0x5bc)](0x0,_0x27581c[_0x843e55(0x438)],_0x27581c[_0x843e55(0x890)]);if(_0x2453d0)_0x1b0a0d[_0x843e55(0xab0)]('battleAngle');}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0xb24),_0x22cdbf=>{const _0x562541=_0x3823ba;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;const _0x3da4c6=$gameTemp[_0x562541(0xaa7)]();if(!_0x3da4c6)return;_0x3da4c6[_0x562541(0xab0)](_0x562541(0x93c));}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0x834),_0x5aafc2=>{const _0x2adb26=_0x3823ba;if(!SceneManager[_0x2adb26(0xbc6)]())return;VisuMZ['ConvertParams'](_0x5aafc2,_0x5aafc2);const _0x4474de=$gameTemp[_0x2adb26(0xaa7)](),_0x4d8b9c=BattleManager['_action'],_0x335c23=BattleManager['_subject'],_0x5c5645=VisuMZ['CreateActionSequenceTargets'](_0x5aafc2['Targets']),_0x519070=_0x5aafc2[_0x2adb26(0x723)],_0x18311d=BattleManager[_0x2adb26(0xd61)];if(!_0x4474de||!_0x4d8b9c||!_0x335c23)return;if(!_0x4d8b9c[_0x2adb26(0x733)]())return;let _0x1349a5=_0x4d8b9c[_0x2adb26(0x733)]()['animationId'];if(_0x1349a5<0x0)_0x1349a5=_0x335c23[_0x2adb26(0x6c3)]();$gameTemp[_0x2adb26(0x8e9)](_0x5c5645,_0x1349a5,_0x519070),_0x5aafc2[_0x2adb26(0xa29)]&&_0x4474de['setWaitMode'](_0x2adb26(0x5d0));}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0x3c4),_0x216f15=>{const _0x425257=_0x3823ba;if(!SceneManager[_0x425257(0xbc6)]())return;VisuMZ[_0x425257(0xb9f)](_0x216f15,_0x216f15);const _0x2530b0=$gameTemp['getLastPluginCommandInterpreter'](),_0xe1572e=BattleManager['_subject'],_0x24d702=VisuMZ['CreateActionSequenceTargets'](_0x216f15[_0x425257(0xad2)]),_0x5ccd2e=_0x216f15[_0x425257(0x723)],_0x363bc8=BattleManager[_0x425257(0xd61)];if(!_0x2530b0||!_0xe1572e)return;const _0x49c5dc=_0xe1572e[_0x425257(0x6c3)]();$gameTemp[_0x425257(0x8e9)](_0x24d702,_0x49c5dc,_0x5ccd2e),_0x216f15['WaitForAnimation']&&_0x2530b0['setWaitMode'](_0x425257(0x5d0));}),PluginManager['registerCommand'](pluginData[_0x3823ba(0x450)],_0x3823ba(0x768),_0x263661=>{const _0x3223fa=_0x3823ba;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x263661,_0x263661);const _0x48c540=_0x510b97[_0x3223fa(0x367)](_0x263661[_0x3223fa(0xa2d)]);if(_0x48c540<=0x0)return;const _0x31bc3b=$gameTemp['getLastPluginCommandInterpreter'](),_0x510b97=BattleManager['_subject'],_0x52c16c=VisuMZ[_0x3223fa(0x140)](_0x263661[_0x3223fa(0xad2)]),_0x345799=_0x263661[_0x3223fa(0x723)],_0x316be2=BattleManager[_0x3223fa(0xd61)];if(!_0x31bc3b||!_0x510b97)return;$gameTemp[_0x3223fa(0x8e9)](_0x52c16c,_0x48c540,_0x345799),_0x263661[_0x3223fa(0xa29)]&&(_0x3223fa(0x6b5)!==_0x3223fa(0x7f6)?_0x31bc3b[_0x3223fa(0xab0)](_0x3223fa(0x5d0)):this[_0x3223fa(0xbf1)][_0x3223fa(0xc03)]=![]);}),PluginManager['registerCommand'](pluginData['name'],_0x3823ba(0x463),_0x414acf=>{const _0x109f18=_0x3823ba;if(!SceneManager[_0x109f18(0xbc6)]())return;VisuMZ[_0x109f18(0xb9f)](_0x414acf,_0x414acf);const _0x5096c7=$gameTemp['getLastPluginCommandInterpreter'](),_0x23bb0a=VisuMZ['CreateActionSequenceTargets'](_0x414acf[_0x109f18(0xad2)]),_0x35917f=_0x414acf[_0x109f18(0x4fe)];let _0x51cd85=0x0;switch(_0x35917f[_0x109f18(0x2d8)]()[_0x109f18(0xaf4)]()){case'!':case _0x109f18(0xc27):_0x51cd85=0x1;break;case'?':case _0x109f18(0xb0b):_0x51cd85=0x2;break;case _0x109f18(0x650):case _0x109f18(0xb0d):case'MUSIC\x20NOTE':case'MUSIC-NOTE':case _0x109f18(0xc14):_0x51cd85=0x3;break;case'HEART':case'LOVE':_0x51cd85=0x4;break;case _0x109f18(0x165):case'ANGER':_0x51cd85=0x5;break;case _0x109f18(0x96c):_0x51cd85=0x6;break;case _0x109f18(0x899):case _0x109f18(0x8fa):case _0x109f18(0x3f1):_0x51cd85=0x7;break;case _0x109f18(0x5fb):case _0x109f18(0x1eb):_0x51cd85=0x8;break;case _0x109f18(0x5a0):case _0x109f18(0xbae):case _0x109f18(0x66f):case _0x109f18(0x1a7):case _0x109f18(0x229):_0x51cd85=0x9;break;case'Z':case'ZZ':case'ZZZ':case _0x109f18(0x86c):_0x51cd85=0xa;break;case'USER-DEFINED\x201':_0x51cd85=0xb;break;case _0x109f18(0x6a1):_0x51cd85=0xc;break;case _0x109f18(0x7f8):_0x51cd85=0xd;break;case'USER-DEFINED\x204':_0x51cd85=0xe;break;case _0x109f18(0x617):_0x51cd85=0xf;break;}for(const _0x166cdd of _0x23bb0a){if(!_0x166cdd)continue;$gameTemp[_0x109f18(0x48e)](_0x166cdd,_0x51cd85);}_0x414acf[_0x109f18(0x549)]&&_0x5096c7&&(_0x109f18(0x2a6)!==_0x109f18(0x2a6)?_0x262290['actionBattleCoreJS']('PostEndActionJS'):(_0x5096c7[_0x109f18(0x498)](0x1),_0x5096c7['setWaitMode']('battleBalloon')));}),PluginManager[_0x3823ba(0xa46)](pluginData['name'],_0x3823ba(0x98f),_0x2add1a=>{const _0x35e1ac=_0x3823ba;if(!SceneManager[_0x35e1ac(0xbc6)]())return;if(!Imported[_0x35e1ac(0x6c4)])return;VisuMZ[_0x35e1ac(0xb9f)](_0x2add1a,_0x2add1a);const _0x28d9ab=$gameTemp[_0x35e1ac(0xaa7)](),_0x2823c9=VisuMZ[_0x35e1ac(0x140)](_0x2add1a[_0x35e1ac(0xad2)]),_0x1a3f9d=_0x2add1a[_0x35e1ac(0x508)];for(const _0x4c7376 of _0x2823c9){if(!_0x4c7376)continue;$gameTemp['requestBattleBalloon'](_0x4c7376,[_0x1a3f9d]);}_0x2add1a[_0x35e1ac(0x549)]&&_0x28d9ab&&('azBwM'!==_0x35e1ac(0xb29)?(_0x5f1923['skew']['x']=(_0x13c35b[_0x35e1ac(0xd1c)]['x']*(_0x3d1a5d-0x1)+this[_0x35e1ac(0x608)])/_0x6def7f,_0x56131a[_0x35e1ac(0xd1c)]['y']=(_0x459c4d[_0x35e1ac(0xd1c)]['y']*(_0x1867ff-0x1)+this['_targetSkewY'])/_0x454f40):(_0x28d9ab['wait'](0x1),_0x28d9ab['setWaitMode']('battleBalloon')));}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0x6cb),_0x2ecf2c=>{const _0x172962=_0x3823ba;if(!SceneManager[_0x172962(0xbc6)]())return;if(!Imported[_0x172962(0x6c4)])return;VisuMZ[_0x172962(0xb9f)](_0x2ecf2c,_0x2ecf2c);const _0x166578=$gameTemp[_0x172962(0xaa7)](),_0xc60b30=VisuMZ[_0x172962(0x140)](_0x2ecf2c['Targets']),_0xcced2d=Math[_0x172962(0x28a)](Number(_0x2ecf2c[_0x172962(0x669)]||0x0),Number(_0x2ecf2c[_0x172962(0x422)]||0x0)),_0x14e390=Math[_0x172962(0xd19)](Number(_0x2ecf2c[_0x172962(0x669)]||0x0),Number(_0x2ecf2c[_0x172962(0x422)]||0x0)),_0x224aca=[];for(let _0x6347b4=_0xcced2d;_0x6347b4<=_0x14e390;_0x6347b4++){_0x224aca[_0x172962(0x3d9)](_0x6347b4);}for(const _0x2c1f30 of _0xc60b30){if(!_0x2c1f30)continue;$gameTemp[_0x172962(0x48e)](_0x2c1f30,_0x224aca);}if(_0x2ecf2c['WaitComplete']&&_0x166578){if('SKTSL'!==_0x172962(0xc34)){if(!this[_0x172962(0x61a)])return;this[_0x172962(0x61a)]['y']=this[_0x172962(0xcf6)]-this['y']-0x2;}else _0x166578[_0x172962(0x498)](0x1),_0x166578[_0x172962(0xab0)](_0x172962(0x5f6));}}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Animation_BalloonIconSpecific',_0x30cd9b=>{const _0xd0d47e=_0x3823ba;if(!SceneManager[_0xd0d47e(0xbc6)]())return;if(!Imported[_0xd0d47e(0x6c4)])return;VisuMZ['ConvertParams'](_0x30cd9b,_0x30cd9b);const _0x4e4546=$gameTemp['getLastPluginCommandInterpreter'](),_0xda8d1a=VisuMZ[_0xd0d47e(0x140)](_0x30cd9b[_0xd0d47e(0xad2)]),_0x5b7a11=_0x30cd9b[_0xd0d47e(0x480)];for(const _0x88d7ac of _0xda8d1a){if(!_0x88d7ac)continue;$gameTemp[_0xd0d47e(0x48e)](_0x88d7ac,_0x5b7a11);}_0x30cd9b[_0xd0d47e(0x549)]&&_0x4e4546&&(_0xd0d47e(0x689)==='xOWiZ'?this[_0xd0d47e(0x2e8)](_0xd0d47e(0xd3f)):(_0x4e4546['wait'](0x1),_0x4e4546['setWaitMode'](_0xd0d47e(0x5f6))));}),PluginManager[_0x3823ba(0xa46)](pluginData['name'],_0x3823ba(0x949),_0xd02ba3=>{const _0x2b3825=_0x3823ba;if(!SceneManager[_0x2b3825(0xbc6)]())return;VisuMZ[_0x2b3825(0xb9f)](_0xd02ba3,_0xd02ba3);const _0x470580=$gameTemp[_0x2b3825(0xaa7)](),_0x1ccbe6=BattleManager[_0x2b3825(0x131)],_0x209a91=_0xd02ba3[_0x2b3825(0x723)],_0x52b331=VisuMZ['CreateActionSequenceTargets'](_0xd02ba3[_0x2b3825(0xad2)]);if(!_0x470580||!_0x1ccbe6)return;if(!_0x1ccbe6[_0x2b3825(0x733)]())return;for(const _0x518575 of _0x52b331){if(!_0x518575)continue;_0x518575[_0x2b3825(0x987)](_0x1ccbe6,_0x209a91);}if(_0xd02ba3['WaitForAnimation'])_0x470580['setWaitMode'](_0x2b3825(0x5d0));}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0x5cf),_0x813624=>{const _0x3feb6e=_0x3823ba;VisuMZ[_0x3feb6e(0xb9f)](_0x813624,_0x813624);const _0x265555=$gameTemp[_0x3feb6e(0xaa7)](),_0x1be4de=VisuMZ[_0x3feb6e(0x140)](_0x813624[_0x3feb6e(0xad2)]),_0x488381=_0x813624[_0x3feb6e(0xd8a)];if(!_0x488381)return;for(const _0x54a16c of _0x1be4de){if(_0x3feb6e(0xd95)!==_0x3feb6e(0x7c6)){if(!_0x54a16c)continue;if(!_0x54a16c[_0x3feb6e(0x4e0)]())continue;_0x54a16c['setBattlePortrait'](_0x488381);}else return _0x2eb1c2[_0x3feb6e(0x4f3)][_0x3feb6e(0x242)][_0x3feb6e(0x9fc)][_0x3feb6e(0xc62)];}}),PluginManager['registerCommand'](pluginData[_0x3823ba(0x450)],'ActSeq_Animation_GuardAnimation',_0x2201e8=>{const _0x2df38c=_0x3823ba;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x2df38c(0xb9f)](_0x2201e8,_0x2201e8);const _0x29e5c0=$gameTemp[_0x2df38c(0xaa7)](),_0x1e3807=BattleManager[_0x2df38c(0x527)],_0x5a96a0=VisuMZ['CreateActionSequenceTargets'](_0x2201e8[_0x2df38c(0xad2)]),_0x2b24e9=_0x2201e8[_0x2df38c(0x723)];if(!_0x29e5c0||!_0x1e3807)return;const _0x354e85=$dataSkilles[_0x1e3807[_0x2df38c(0xd0a)]()],_0x2c1ae9=_0x354e85['animationId'];$gameTemp[_0x2df38c(0x8e9)](_0x5a96a0,_0x2c1ae9,_0x2b24e9),_0x2201e8[_0x2df38c(0xa29)]&&_0x29e5c0['setWaitMode'](_0x2df38c(0x5d0));}),PluginManager[_0x3823ba(0xa46)](pluginData['name'],_0x3823ba(0xc6f),_0x3583a9=>{const _0x53ff7a=_0x3823ba;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x53ff7a(0xb9f)](_0x3583a9,_0x3583a9);const _0xe7b339=$gameTemp[_0x53ff7a(0xaa7)](),_0x2bfa8b=VisuMZ['CreateActionSequenceTargets'](_0x3583a9[_0x53ff7a(0xad2)]),_0x1f7daa=Number(_0x3583a9[_0x53ff7a(0x58b)]||0x1),_0x41e09e=$dataItems[_0x1f7daa],_0x1b4f07=_0x3583a9[_0x53ff7a(0x723)];if(!_0xe7b339)return;if(!_0x41e09e)return;let _0x76d5fe=_0x41e09e[_0x53ff7a(0x161)];$gameTemp[_0x53ff7a(0x8e9)](_0x2bfa8b,_0x76d5fe,_0x1b4f07),_0x3583a9['WaitForAnimation']&&('fqlyE'!=='fqlyE'?this['_battlerContainer'][_0x53ff7a(0x538)](_0xc1105b):_0xe7b339[_0x53ff7a(0xab0)](_0x53ff7a(0x5d0)));}),PluginManager[_0x3823ba(0xa46)](pluginData['name'],'ActSeq_Animation_PlayAtCoordinate',_0x361d4d=>{const _0x1dc9be=_0x3823ba;if(!SceneManager[_0x1dc9be(0xaa3)])return;if(!SceneManager[_0x1dc9be(0xaa3)][_0x1dc9be(0x8a5)])return;if(!Imported['VisuMZ_0_CoreEngine'])return;VisuMZ[_0x1dc9be(0xb9f)](_0x361d4d,_0x361d4d);const _0x3a3000=$gameTemp['getLastPluginCommandInterpreter'](),_0x3c5fe7=Math[_0x1dc9be(0x282)](_0x361d4d['pointX']),_0x3ddcc2=Math[_0x1dc9be(0x282)](_0x361d4d[_0x1dc9be(0x872)]);$gameTemp['requestPointAnimation'](_0x3c5fe7,_0x3ddcc2,_0x361d4d[_0x1dc9be(0x1dd)],_0x361d4d[_0x1dc9be(0x723)],_0x361d4d[_0x1dc9be(0x13a)]),_0x361d4d[_0x1dc9be(0x549)]&&_0x3a3000&&('bDGzl'===_0x1dc9be(0x276)?(this['_homeX']=(this['_homeX']*(_0x160432-0x1)+this[_0x1dc9be(0x83d)])/_0x3e90df,this[_0x1dc9be(0x372)]=(this[_0x1dc9be(0x372)]*(_0x4db124-0x1)+this[_0x1dc9be(0x97c)])/_0x24b309):(SceneManager[_0x1dc9be(0xaa3)]['_spriteset'][_0x1dc9be(0xcd3)](),_0x3a3000[_0x1dc9be(0xab0)](_0x1dc9be(0x5d0))));}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],'ActSeq_Animation_ShowAnimation',_0x3cc408=>{const _0x4defb4=_0x3823ba;if(!SceneManager[_0x4defb4(0xbc6)]())return;VisuMZ['ConvertParams'](_0x3cc408,_0x3cc408);const _0x48e487=$gameTemp['getLastPluginCommandInterpreter'](),_0x3263e3=VisuMZ[_0x4defb4(0x140)](_0x3cc408[_0x4defb4(0xad2)]),_0x563079=_0x3cc408[_0x4defb4(0x1dd)],_0xb4f010=_0x3cc408[_0x4defb4(0x723)];if(!_0x48e487)return;$gameTemp[_0x4defb4(0x8e9)](_0x3263e3,_0x563079,_0xb4f010);if(_0x3cc408[_0x4defb4(0xa29)])_0x48e487['setWaitMode'](_0x4defb4(0x5d0));}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0x76e),_0x38b751=>{const _0x1dd2e4=_0x3823ba;if(!SceneManager[_0x1dd2e4(0xbc6)]())return;VisuMZ[_0x1dd2e4(0xb9f)](_0x38b751,_0x38b751);const _0x10fc52=$gameTemp[_0x1dd2e4(0xaa7)](),_0x308d3d=VisuMZ['CreateActionSequenceTargets'](_0x38b751[_0x1dd2e4(0xad2)]),_0x59c312=Number(_0x38b751[_0x1dd2e4(0x1dd)])||0x1,_0x5af289=_0x38b751[_0x1dd2e4(0x723)];if(!_0x10fc52)return;$gameTemp[_0x1dd2e4(0x8e9)](_0x308d3d,_0x59c312,_0x5af289);if(_0x38b751[_0x1dd2e4(0xa29)])_0x10fc52[_0x1dd2e4(0xab0)](_0x1dd2e4(0x5d0));}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],'ActSeq_Animation_SkillAnimation',_0x42f636=>{const _0x172551=_0x3823ba;if(!SceneManager[_0x172551(0xbc6)]())return;VisuMZ['ConvertParams'](_0x42f636,_0x42f636);const _0xa87789=$gameTemp[_0x172551(0xaa7)](),_0x295cdf=VisuMZ[_0x172551(0x140)](_0x42f636[_0x172551(0xad2)]),_0x2d8063=Number(_0x42f636[_0x172551(0xbe2)]||0x1),_0x2ace56=$dataSkills[_0x2d8063],_0x425984=_0x42f636[_0x172551(0x723)];if(!_0xa87789)return;if(!_0x2ace56)return;let _0x140c70=_0x2ace56[_0x172551(0x161)];$gameTemp['requestAnimation'](_0x295cdf,_0x140c70,_0x425984),_0x42f636[_0x172551(0xa29)]&&_0xa87789[_0x172551(0xab0)]('battleAnimation');}),PluginManager[_0x3823ba(0xa46)](pluginData['name'],_0x3823ba(0x6a2),_0x5b9ded=>{const _0x28eaff=_0x3823ba;if(!SceneManager[_0x28eaff(0xbc6)]())return;const _0x460633=$gameTemp[_0x28eaff(0xaa7)]();if(!_0x460633)return;_0x460633['setWaitMode']('battleAnimation');}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0x9a2),_0x375b0f=>{const _0x269115=_0x3823ba;if(!SceneManager[_0x269115(0xbc6)]())return;VisuMZ[_0x269115(0xb9f)](_0x375b0f,_0x375b0f);const _0x2dc10a=BattleManager[_0x269115(0xd61)],_0x42707c=_0x375b0f[_0x269115(0x65e)]&&Imported[_0x269115(0xafc)];_0x2dc10a[_0x269115(0xc47)](_0x375b0f[_0x269115(0x729)]),_0x42707c&&Imported[_0x269115(0xafc)]&&$gameSystem[_0x269115(0x61b)](_0x375b0f[_0x269115(0x729)]||'',_0x375b0f[_0x269115(0x46e)]||0x0);}),PluginManager[_0x3823ba(0xa46)](pluginData['name'],_0x3823ba(0x749),_0x3d7819=>{const _0x373fdb=_0x3823ba;if(!SceneManager['isSceneBattle']())return;const _0x18a04b=BattleManager[_0x373fdb(0xd61)];_0x18a04b[_0x373fdb(0xcd2)]();}),PluginManager[_0x3823ba(0xa46)](pluginData['name'],_0x3823ba(0xb6e),_0x4ad364=>{const _0x37641a=_0x3823ba;if(!SceneManager[_0x37641a(0xbc6)]())return;const _0x3a4c16=$gameTemp[_0x37641a(0xaa7)](),_0x5f3e40=BattleManager['_action'],_0x5e445f=BattleManager['_subject'],_0x1d1eca=BattleManager[_0x37641a(0xd61)];if(!_0x3a4c16||!_0x5f3e40||!_0x5e445f)return;if(!_0x5f3e40[_0x37641a(0x733)]())return;_0x1d1eca[_0x37641a(0x31b)](_0x5e445f,_0x5f3e40[_0x37641a(0x733)]()),_0x3a4c16['setWaitMode'](_0x37641a(0x6dc));}),PluginManager['registerCommand'](pluginData['name'],_0x3823ba(0x3e4),_0x1e7dc7=>{const _0x4bbd28=_0x3823ba;if(!SceneManager['isSceneBattle']())return;const _0x564a65=BattleManager[_0x4bbd28(0xd61)];_0x564a65['popBaseLine']();}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0x263),_0x5c8149=>{const _0x22cc54=_0x3823ba;if(!SceneManager[_0x22cc54(0xbc6)]())return;const _0x3559a3=BattleManager[_0x22cc54(0xd61)];_0x3559a3[_0x22cc54(0x620)]();}),PluginManager[_0x3823ba(0xa46)](pluginData['name'],_0x3823ba(0xc20),_0x548d16=>{const _0x7cf5a5=_0x3823ba;if(!SceneManager['isSceneBattle']())return;const _0x537495=BattleManager[_0x7cf5a5(0xd61)];_0x537495[_0x7cf5a5(0x912)]();}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0x2d4),_0x55f511=>{const _0x1e35a4=_0x3823ba;if(!SceneManager[_0x1e35a4(0xbc6)]())return;VisuMZ[_0x1e35a4(0xb9f)](_0x55f511,_0x55f511),SceneManager[_0x1e35a4(0xaa3)][_0x1e35a4(0x4c6)](_0x55f511[_0x1e35a4(0x3fb)]);}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0x917),_0x270828=>{const _0x180853=_0x3823ba;if(!SceneManager[_0x180853(0xbc6)]())return;const _0x2d3750=$gameTemp[_0x180853(0xaa7)]();_0x2d3750[_0x180853(0xab0)](_0x180853(0x6dc));}),PluginManager[_0x3823ba(0xa46)](pluginData['name'],'ActSeq_BattleLog_WaitForNewLine',_0x348b1d=>{const _0x591c64=_0x3823ba;if(!SceneManager[_0x591c64(0xbc6)]())return;const _0x3cf812=$gameTemp['getLastPluginCommandInterpreter'](),_0x42e154=BattleManager[_0x591c64(0xd61)];_0x42e154['waitForNewLine'](),_0x3cf812[_0x591c64(0xab0)]('battlelog');}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0x925),_0x2ed809=>{const _0x256ccd=_0x3823ba;if(!SceneManager[_0x256ccd(0xbc6)]())return;if(!Imported[_0x256ccd(0x29c)])return;VisuMZ[_0x256ccd(0xb9f)](_0x2ed809,_0x2ed809);const _0x58a12f=$gameScreen['battleCameraData']();_0x58a12f['cameraClamp']=_0x2ed809[_0x256ccd(0x60c)];}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0x2d1),_0x19dd91=>{const _0x53bc82=_0x3823ba;if(!SceneManager[_0x53bc82(0xbc6)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x53bc82(0xb9f)](_0x19dd91,_0x19dd91);const _0x50951b=$gameTemp[_0x53bc82(0xaa7)](),_0x548896=_0x19dd91[_0x53bc82(0x4fa)];$gameScreen[_0x53bc82(0xb83)](_0x19dd91[_0x53bc82(0x331)],_0x19dd91['FocusY'],_0x19dd91['Duration'],_0x19dd91[_0x53bc82(0x890)]);if(_0x548896)_0x50951b[_0x53bc82(0xab0)](_0x53bc82(0xbd6));}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],'ActSeq_Camera_FocusTarget',_0x1d438d=>{const _0x4df058=_0x3823ba;if(!SceneManager[_0x4df058(0xbc6)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x4df058(0xb9f)](_0x1d438d,_0x1d438d);const _0x114581=$gameTemp[_0x4df058(0xaa7)](),_0x134dc4=VisuMZ[_0x4df058(0x140)](_0x1d438d[_0x4df058(0xad2)]),_0x2c56e9=_0x1d438d['WaitForCamera'];$gameScreen[_0x4df058(0x554)](_0x134dc4,_0x1d438d['Duration'],_0x1d438d[_0x4df058(0x890)]);if(_0x2c56e9)_0x114581[_0x4df058(0xab0)](_0x4df058(0xbd6));}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0x633),_0xf521bb=>{const _0x876394=_0x3823ba;if(!SceneManager[_0x876394(0xbc6)]())return;if(!Imported[_0x876394(0x29c)])return;VisuMZ['ConvertParams'](_0xf521bb,_0xf521bb);const _0x13c640=$gameTemp[_0x876394(0xaa7)](),_0x36f2a2=_0xf521bb['WaitForCamera'];$gameScreen[_0x876394(0x7fb)](_0xf521bb[_0x876394(0x24e)],_0xf521bb[_0x876394(0x615)],_0xf521bb[_0x876394(0x438)],_0xf521bb[_0x876394(0x890)]);if(_0x36f2a2)_0x13c640[_0x876394(0xab0)](_0x876394(0xbd6));}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0x4ef),_0x7d0b0e=>{const _0x5724d0=_0x3823ba;if(!SceneManager[_0x5724d0(0xbc6)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x5724d0(0xb9f)](_0x7d0b0e,_0x7d0b0e);const _0xeff473=$gameTemp['getLastPluginCommandInterpreter'](),_0x4b138a=_0x7d0b0e['ResetFocus'],_0x5043bf=_0x7d0b0e[_0x5724d0(0xb94)],_0x5234b8=_0x7d0b0e[_0x5724d0(0x4fa)];if(_0x4b138a){const _0x335bcb=Math[_0x5724d0(0x282)](Graphics[_0x5724d0(0x204)]/0x2),_0x234d14=Math[_0x5724d0(0x282)](Graphics['height']/0x2);$gameScreen[_0x5724d0(0xb83)](_0x335bcb,_0x234d14,_0x7d0b0e[_0x5724d0(0x438)],_0x7d0b0e[_0x5724d0(0x890)]);}_0x5043bf&&$gameScreen[_0x5724d0(0x7fb)](0x0,0x0,_0x7d0b0e[_0x5724d0(0x438)],_0x7d0b0e['EasingType']);if(_0x5234b8)_0xeff473['setWaitMode']('battleCamera');}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0x18b),_0x4e6e30=>{const _0xdaf508=_0x3823ba;if(!SceneManager[_0xdaf508(0xbc6)]())return;if(!Imported[_0xdaf508(0x29c)])return;const _0xcb989b=$gameTemp[_0xdaf508(0xaa7)]();if(!_0xcb989b)return;_0xcb989b[_0xdaf508(0xab0)](_0xdaf508(0xbd6));}),VisuMZ[_0x3823ba(0x4f3)]['CreateCutinSettings']=function(_0x3841ae){const _0x2b2f18=_0x3823ba;_0x3841ae['portraitFilename']='';const _0x297c47=VisuMZ[_0x2b2f18(0xae7)][_0x2b2f18(0x9ef)](_0x3841ae),_0x2b97be=VisuMZ[_0x2b2f18(0x140)](_0x3841ae[_0x2b2f18(0xad2)])[0x0]||null;return _0x2b97be&&(_0x297c47[_0x2b2f18(0x667)]=_0x2b97be[_0x2b2f18(0xc86)](),_0x297c47[_0x2b2f18(0x36f)]=_0x2b97be[_0x2b2f18(0x9a8)](),_0x297c47['portraitHue']=_0x2b97be['visualCutinPortraitHue'](),_0x297c47[_0x2b2f18(0x31e)]=_0x2b97be['visualCutinPortraitType'](),_0x2b97be[_0x2b2f18(0x737)]()&&(_0x2b97be['flipVisualCutinHorz']()&&(_0x2b2f18(0x136)==='gMJNw'?_0x297c47['portraitFlipHorz']=!_0x297c47['portraitFlipHorz']:(this[_0x2b2f18(0x924)]=0x0,this[_0x2b2f18(0x782)]=0x0)),_0x2b97be[_0x2b2f18(0x47d)]()&&(_0x297c47['portraitFlipVert']=!_0x297c47['portraitFlipVert']),_0x297c47['portraitType']===_0x2b2f18(0x6e0)&&(_0x297c47['portraitFlipHorz']=!_0x297c47['portraitFlipHorz']),_0x3841ae['ExtraSettings'][_0x2b2f18(0x886)]&&(_0x297c47[_0x2b2f18(0x8df)]*=-0x1),_0x3841ae['ExtraSettings'][_0x2b2f18(0xcd6)]&&(_0x2b2f18(0x577)!==_0x2b2f18(0x577)?this[_0x2b2f18(0xb78)]=_0x2b2f18(0x4d8):_0x297c47[_0x2b2f18(0xb08)]*=-0x1),_0x297c47[_0x2b2f18(0x9a9)]+=_0x3841ae[_0x2b2f18(0x13e)][_0x2b2f18(0xb63)]??0x0)),_0x297c47;},PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0x86b),_0x4401cc=>{const _0x14b359=_0x3823ba;if(!SceneManager[_0x14b359(0xbc6)]())return;if(!Imported[_0x14b359(0x1d9)])return;VisuMZ['ConvertParams'](_0x4401cc,_0x4401cc);const _0x162788=VisuMZ[_0x14b359(0x4f3)][_0x14b359(0x9ef)](_0x4401cc);SceneManager[_0x14b359(0xaa3)]['startVisualCutin'](_0x162788);const _0x12e678=$gameTemp[_0x14b359(0xaa7)]();_0x12e678&&_0x4401cc['WaitForEntrance']&&_0x12e678[_0x14b359(0xab0)]('cutinEnter');}),PluginManager[_0x3823ba(0xa46)](pluginData['name'],_0x3823ba(0x202),_0x20404e=>{const _0x1030e4=_0x3823ba;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1030e4(0x1d9)])return;VisuMZ[_0x1030e4(0xb9f)](_0x20404e,_0x20404e),SceneManager[_0x1030e4(0xaa3)]['clearAllVisualCutins']();const _0x2b9f9d=$gameTemp[_0x1030e4(0xaa7)]();_0x2b9f9d&&_0x20404e[_0x1030e4(0x706)]&&_0x2b9f9d['setWaitMode'](_0x1030e4(0x461));}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],'ActSeq_Cutin_EndVisualCutinEffectType',_0x547520=>{const _0x3e36dd=_0x3823ba;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x3e36dd(0x1d9)])return;VisuMZ['ConvertParams'](_0x547520,_0x547520);const _0x470f52=_0x547520[_0x3e36dd(0x98a)][_0x3e36dd(0x8cf)]()[_0x3e36dd(0xaf4)]();SceneManager[_0x3e36dd(0xaa3)]['endVisualCutin'](_0x470f52);const _0xb42810=$gameTemp[_0x3e36dd(0xaa7)]();_0xb42810&&_0x547520['WaitForExit']&&_0xb42810[_0x3e36dd(0xab0)](_0x3e36dd(0x461));}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0x288),_0x58238e=>{const _0xc59d2c=_0x3823ba;if(!SceneManager[_0xc59d2c(0xbc6)]())return;if(!Imported[_0xc59d2c(0x1d9)])return;const _0x231a63=$gameTemp['getLastPluginCommandInterpreter']();_0x231a63['setWaitMode']('cutinEnter');}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],'ActSeq_Cutin_WaitForExit',_0x4962fe=>{const _0x5be8dd=_0x3823ba;if(!SceneManager[_0x5be8dd(0xbc6)]())return;if(!Imported[_0x5be8dd(0x1d9)])return;const _0x57f4c2=$gameTemp[_0x5be8dd(0xaa7)]();_0x57f4c2[_0x5be8dd(0xab0)](_0x5be8dd(0x461));}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0x1ce),_0x3dd12b=>{const _0x1db492=_0x3823ba;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1db492(0x465)])return;VisuMZ['ConvertParams'](_0x3dd12b,_0x3dd12b);const _0x10ac8c=VisuMZ[_0x1db492(0x140)](_0x3dd12b[_0x1db492(0xad2)]),_0x1d9732=_0x3dd12b[_0x1db492(0xcb3)][_0x1db492(0x8cf)]()[_0x1db492(0xaf4)]();for(const _0x154d66 of _0x10ac8c){if(!_0x154d66)continue;_0x154d66[_0x1db492(0x320)](_0x1d9732);}}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],'ActSeq_DB_DragonbonesTimeScale',_0xc128fd=>{const _0x1afadd=_0x3823ba;if(!SceneManager[_0x1afadd(0xbc6)]())return;if(!Imported['VisuMZ_2_DragonbonesUnion'])return;VisuMZ[_0x1afadd(0xb9f)](_0xc128fd,_0xc128fd);const _0x355f79=VisuMZ['CreateActionSequenceTargets'](_0xc128fd[_0x1afadd(0xad2)]),_0x57bea3=_0xc128fd[_0x1afadd(0x789)];for(const _0x551b33 of _0x355f79){if(!_0x551b33)continue;_0x551b33['dragonbonesData']()['timeScale']=_0x57bea3;}}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0x78c),_0x10995b=>{const _0x27f5dc=_0x3823ba;if(!SceneManager[_0x27f5dc(0xbc6)]())return;if(!Imported[_0x27f5dc(0x9d7)])return;VisuMZ[_0x27f5dc(0xb9f)](_0x10995b,_0x10995b);const _0x1481d1=BattleManager[_0x27f5dc(0x131)],_0x5a12a2=_0x10995b[_0x27f5dc(0x85a)];if(!_0x1481d1)return;_0x1481d1[_0x27f5dc(0x4e4)]=_0x5a12a2;}),PluginManager[_0x3823ba(0xa46)](pluginData['name'],_0x3823ba(0x640),_0x78a740=>{const _0x11194e=_0x3823ba;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_1_ElementStatusCore'])return;const _0x2e8231=BattleManager[_0x11194e(0x131)];if(!_0x2e8231)return;_0x2e8231['clearElementChanges']();}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],'ActSeq_Element_ForceElements',_0x39f524=>{const _0x41a557=_0x3823ba;if(!SceneManager[_0x41a557(0xbc6)]())return;if(!Imported['VisuMZ_1_ElementStatusCore'])return;VisuMZ['ConvertParams'](_0x39f524,_0x39f524);const _0x4ee8b4=BattleManager['_action'],_0x594ec8=_0x39f524['Elements'];if(!_0x4ee8b4)return;_0x4ee8b4[_0x41a557(0x532)]=_0x594ec8;}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0x4ce),_0x35c910=>{const _0x913b7f=_0x3823ba;if(!SceneManager[_0x913b7f(0xbc6)]())return;if(!Imported[_0x913b7f(0x9d7)])return;const _0x546369=BattleManager['_action'];if(!_0x546369)return;_0x546369[_0x913b7f(0x3b9)]=!![];}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0x589),_0x52d3f0=>{const _0x58fe09=_0x3823ba;VisuMZ[_0x58fe09(0x734)][_0x58fe09(0x589)](_0x52d3f0);}),PluginManager[_0x3823ba(0xa46)](pluginData['name'],'ActSeq_Grid_AddPassiveStatesToNode',_0x3c346e=>{const _0x464b8f=_0x3823ba;VisuMZ[_0x464b8f(0x734)]['ActSeq_Grid_AddPassiveStatesToNode'](_0x3c346e);}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0x89e),_0x660012=>{const _0x4f8465=_0x3823ba;VisuMZ[_0x4f8465(0x734)]['ActSeq_Grid_AddTriggerToNode'](_0x660012);}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0xae1),_0x135cf8=>{const _0x52f1b1=_0x3823ba;VisuMZ[_0x52f1b1(0x734)][_0x52f1b1(0xae1)](_0x135cf8);}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0x772),_0x67827a=>{const _0x36474d=_0x3823ba;VisuMZ[_0x36474d(0x734)][_0x36474d(0x772)](_0x67827a);}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0x79e),_0x5b57a4=>{const _0x513035=_0x3823ba;VisuMZ['BattleGridSystem'][_0x513035(0x79e)](_0x5b57a4);}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0x1fc),_0x302693=>{const _0x5650f9=_0x3823ba;VisuMZ[_0x5650f9(0x734)][_0x5650f9(0x1fc)](_0x302693);}),PluginManager['registerCommand'](pluginData[_0x3823ba(0x450)],'ActSeq_Grid_MoveTargetsInDirection',_0x20a32e=>{VisuMZ['BattleGridSystem']['ActSeq_Grid_MoveTargetsInDirection'](_0x20a32e);}),PluginManager[_0x3823ba(0xa46)](pluginData['name'],_0x3823ba(0xaae),_0x127cac=>{const _0x419e6c=_0x3823ba;VisuMZ[_0x419e6c(0x734)][_0x419e6c(0xaae)](_0x127cac);}),PluginManager['registerCommand'](pluginData[_0x3823ba(0x450)],_0x3823ba(0x237),_0xa1b4b=>{const _0x47e8f9=_0x3823ba;VisuMZ[_0x47e8f9(0x734)]['ActSeq_Grid_PushFromTargetNode'](_0xa1b4b);}),PluginManager[_0x3823ba(0xa46)](pluginData['name'],_0x3823ba(0x7c5),_0x2ccd62=>{const _0x4a9d91=_0x3823ba;VisuMZ[_0x4a9d91(0x734)][_0x4a9d91(0x7c5)](_0x2ccd62);}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0x8f3),_0x4fafc6=>{const _0x1573d9=_0x3823ba;VisuMZ[_0x1573d9(0x734)][_0x1573d9(0x8f3)](_0x4fafc6);}),PluginManager[_0x3823ba(0xa46)](pluginData['name'],_0x3823ba(0xd7d),_0xbadaef=>{const _0x1aca76=_0x3823ba;VisuMZ['BattleGridSystem'][_0x1aca76(0xd7d)](_0xbadaef);}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0x9d0),_0x2872fd=>{const _0x1ffbe6=_0x3823ba;VisuMZ['BattleGridSystem'][_0x1ffbe6(0x9d0)](_0x2872fd);}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0x37f),_0x1d8fe5=>{const _0x22e707=_0x3823ba;if(!Imported[_0x22e707(0x78d)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x22e707(0xb9f)](_0x1d8fe5,_0x1d8fe5);const _0x5cea6c=VisuMZ[_0x22e707(0x140)](_0x1d8fe5[_0x22e707(0xad2)]);for(const _0x2f291d of _0x5cea6c){if(!_0x2f291d)continue;_0x2f291d[_0x22e707(0xa4d)](_0x22e707(0x78b)),_0x2f291d[_0x22e707(0xa4d)](_0x22e707(0x238)),_0x2f291d['removeHorrorEffect']('tv'),_0x2f291d[_0x22e707(0x713)]();}$gamePlayer['refresh']();}),PluginManager['registerCommand'](pluginData[_0x3823ba(0x450)],'ActSeq_Horror_GlitchCreate',_0x17c634=>{const _0x5f002d=_0x3823ba;if(!Imported[_0x5f002d(0x78d)])return;if(!SceneManager[_0x5f002d(0xbc6)]())return;VisuMZ[_0x5f002d(0xb9f)](_0x17c634,_0x17c634);const _0x16f8d4=VisuMZ[_0x5f002d(0x140)](_0x17c634[_0x5f002d(0xad2)]),_0x47550f=_0x5f002d(0x238);_0x17c634[_0x5f002d(0x8cb)]=Math[_0x5f002d(0xacc)](_0x17c634['slices']/0x2),_0x17c634[_0x5f002d(0x4cc)]=_0x17c634[_0x5f002d(0x1ef)],_0x17c634[_0x5f002d(0x5d7)]=!![];for(const _0x361b26 of _0x16f8d4){if(_0x5f002d(0x383)!==_0x5f002d(0x383))_0x4dc54e=!_0x7a01ff;else{if(!_0x361b26)continue;_0x361b26['setHorrorEffectSettings'](_0x47550f,_0x17c634);}}$gamePlayer['refresh']();}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],'ActSeq_Horror_GlitchRemove',_0x3ae0ff=>{const _0x225c3c=_0x3823ba;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x225c3c(0xbc6)]())return;VisuMZ[_0x225c3c(0xb9f)](_0x3ae0ff,_0x3ae0ff);const _0xb4b4d6=VisuMZ[_0x225c3c(0x140)](_0x3ae0ff[_0x225c3c(0xad2)]);for(const _0x2f982c of _0xb4b4d6){if(!_0x2f982c)continue;_0x2f982c[_0x225c3c(0xa4d)](_0x225c3c(0x238));}$gamePlayer[_0x225c3c(0x912)]();}),PluginManager['registerCommand'](pluginData[_0x3823ba(0x450)],_0x3823ba(0xd2b),_0x349717=>{const _0x10ec82=_0x3823ba;if(!Imported[_0x10ec82(0x78d)])return;if(!SceneManager[_0x10ec82(0xbc6)]())return;VisuMZ[_0x10ec82(0xb9f)](_0x349717,_0x349717);const _0x271288=VisuMZ[_0x10ec82(0x140)](_0x349717['Targets']),_0x36c84e=_0x10ec82(0x78b);for(const _0x2157c8 of _0x271288){if(_0x10ec82(0x466)===_0x10ec82(0x519)){if(!this[_0x10ec82(0x9c0)][_0x10ec82(0x395)](_0x213d5c['id']))return![];}else{if(!_0x2157c8)continue;_0x2157c8['setHorrorEffectSettings'](_0x36c84e,_0x349717);}}$gamePlayer['refresh']();}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0x610),_0x64d9fc=>{const _0x58b568=_0x3823ba;if(!Imported[_0x58b568(0x78d)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x58b568(0xb9f)](_0x64d9fc,_0x64d9fc);const _0x3356ab=VisuMZ[_0x58b568(0x140)](_0x64d9fc[_0x58b568(0xad2)]);for(const _0x12fa7b of _0x3356ab){if(!_0x12fa7b)continue;_0x12fa7b[_0x58b568(0xa4d)](_0x58b568(0x78b));}$gamePlayer[_0x58b568(0x912)]();}),PluginManager[_0x3823ba(0xa46)](pluginData['name'],_0x3823ba(0x783),_0x39c1db=>{const _0x4a0b79=_0x3823ba;if(!Imported[_0x4a0b79(0x78d)])return;if(!SceneManager[_0x4a0b79(0xbc6)]())return;VisuMZ[_0x4a0b79(0xb9f)](_0x39c1db,_0x39c1db);const _0x170c6f=VisuMZ[_0x4a0b79(0x140)](_0x39c1db['Targets']),_0x2f94dd='tv';for(const _0xc315aa of _0x170c6f){if(!_0xc315aa)continue;_0xc315aa[_0x4a0b79(0x984)](_0x2f94dd,_0x39c1db);}$gamePlayer[_0x4a0b79(0x912)]();}),PluginManager['registerCommand'](pluginData['name'],_0x3823ba(0x156),_0x3c7415=>{const _0x2975b4=_0x3823ba;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x2975b4(0xb9f)](_0x3c7415,_0x3c7415);const _0x13fdb0=VisuMZ[_0x2975b4(0x140)](_0x3c7415[_0x2975b4(0xad2)]);for(const _0x28b3d7 of _0x13fdb0){if(!_0x28b3d7)continue;_0x28b3d7[_0x2975b4(0xa4d)]('tv');}$gamePlayer['refresh']();}),PluginManager['registerCommand'](pluginData[_0x3823ba(0x450)],_0x3823ba(0x2a5),_0x199438=>{const _0x310dc4=_0x3823ba;if(!Imported[_0x310dc4(0x16b)])return;const _0x40105e=SceneManager[_0x310dc4(0xaa3)]['_spriteset'];if(!_0x40105e)return;if(VisuMZ[_0x310dc4(0x79b)]['version']<=1.04){if(_0x310dc4(0x9cb)===_0x310dc4(0x9cb)){alert(_0x310dc4(0x25b)),SceneManager[_0x310dc4(0x824)]();return;}else this[_0x310dc4(0x396)]['_stateSprite'][_0x310dc4(0x6cc)]['x']=-0x1/(this[_0x310dc4(0x6cc)]['x']||0.001),this[_0x310dc4(0x396)][_0x310dc4(0x317)]['scale']['y']=0x1/(this[_0x310dc4(0x6cc)]['y']||0.001);}VisuMZ[_0x310dc4(0xb9f)](_0x199438,_0x199438);const _0x3be03b=_0x199438['Enable'];_0x40105e[_0x310dc4(0x87d)](_0x3be03b);}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0x278),_0xeec28b=>{const _0x5cedda=_0x3823ba;if(!SceneManager[_0x5cedda(0xbc6)]())return;if(!Imported[_0x5cedda(0x16b)])return;const _0x31ce7a=SceneManager[_0x5cedda(0xaa3)][_0x5cedda(0x8a5)];if(!_0x31ce7a)return;VisuMZ[_0x5cedda(0xb9f)](_0xeec28b,_0xeec28b);const _0x5ce8ed=_0xeec28b[_0x5cedda(0x7f3)]||0x1,_0x441385=_0xeec28b['Duration']||0x1,_0x209c1a=_0xeec28b[_0x5cedda(0x890)]||_0x5cedda(0x12f);_0x31ce7a['setupRgbSplitImpactFilter'](_0x5ce8ed,_0x441385,_0x209c1a);}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0x809),_0x98c45=>{const _0x672449=_0x3823ba;if(!Imported[_0x672449(0x16b)])return;const _0x271dfa=SceneManager[_0x672449(0xaa3)][_0x672449(0x8a5)];if(!_0x271dfa)return;if(VisuMZ['ActSeqImpact']['version']<=1.04){alert(_0x672449(0x25b)),SceneManager[_0x672449(0x824)]();return;}VisuMZ[_0x672449(0xb9f)](_0x98c45,_0x98c45);const _0x4450bd=_0x98c45[_0x672449(0x9bf)];_0x271dfa[_0x672449(0xc6d)](_0x4450bd);}),PluginManager[_0x3823ba(0xa46)](pluginData['name'],_0x3823ba(0x8bd),_0x2b8105=>{const _0x1d3385=_0x3823ba;if(!SceneManager[_0x1d3385(0xbc6)]())return;if(!Imported[_0x1d3385(0x16b)])return;const _0x36ea49=SceneManager[_0x1d3385(0xaa3)][_0x1d3385(0x8a5)];if(!_0x36ea49)return;VisuMZ[_0x1d3385(0xb9f)](_0x2b8105,_0x2b8105);const _0x261e53=Number(_0x2b8105[_0x1d3385(0x348)])||0x0,_0x5b2b98=Number(_0x2b8105[_0x1d3385(0x665)]),_0x356c85=_0x2b8105[_0x1d3385(0x438)]||0x1,_0xc86995=_0x2b8105[_0x1d3385(0x890)]||'Linear';_0x36ea49['setupMotionBlurImpactFilter'](_0x261e53,_0x5b2b98,_0x356c85,_0xc86995);}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0xb99),_0x2efbe0=>{const _0x22453d=_0x3823ba;if(!SceneManager[_0x22453d(0xbc6)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x47a0ac=SceneManager[_0x22453d(0xaa3)][_0x22453d(0x8a5)];if(!_0x47a0ac)return;VisuMZ[_0x22453d(0xb9f)](_0x2efbe0,_0x2efbe0);const _0x4b3367=Number(_0x2efbe0[_0x22453d(0x348)])||0x0,_0xe1983c=Number(_0x2efbe0[_0x22453d(0x665)]),_0x2a8e51=_0x2efbe0['Duration']||0x1,_0x1832e9=_0x2efbe0[_0x22453d(0x890)]||_0x22453d(0x12f),_0x4f2cef=VisuMZ[_0x22453d(0x140)](_0x2efbe0['Targets']);for(const _0x19f762 of _0x4f2cef){if(_0x22453d(0xc26)===_0x22453d(0x1b6)){const _0x1b3884=_0x13847d[_0x3ddfe9];if(_0x1b3884){if(_0x1b3884[_0x22453d(0x920)][_0x22453d(0xd57)](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){const _0x49ebed=_0x520c37(_0x325516['$1'])['split'](/[\r\n]+/)[_0x22453d(0xbc4)](''),_0x110b2d=this[_0x22453d(0xb8f)](_0x49ebed);_0x51ec29=this['getEnemyIdWithName'](_0x110b2d)||_0x1e1f93,_0x3443f8=_0xf74c94[_0x22453d(0x2fd)](_0x238d81);}}return _0x2a5299;}else{if(!_0x19f762)continue;if(!_0x19f762[_0x22453d(0x798)]())continue;_0x19f762['battler']()[_0x22453d(0xa7f)](_0x4b3367,_0xe1983c,_0x2a8e51,_0x1832e9);}}}),PluginManager[_0x3823ba(0xa46)](pluginData['name'],_0x3823ba(0x2ef),_0x532e6c=>{const _0x28cf8d=_0x3823ba;if(!SceneManager[_0x28cf8d(0xbc6)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;VisuMZ[_0x28cf8d(0xb9f)](_0x532e6c,_0x532e6c);const _0x21aae0={'delay':_0x532e6c[_0x28cf8d(0x969)],'duration':_0x532e6c[_0x28cf8d(0xd25)],'hue':_0x532e6c[_0x28cf8d(0x5d1)],'opacityStart':_0x532e6c['opacityStart'],'tone':_0x532e6c[_0x28cf8d(0xcf4)],'visible':!![]},_0x26f4a7=VisuMZ[_0x28cf8d(0x140)](_0x532e6c[_0x28cf8d(0xad2)]);for(const _0x27e768 of _0x26f4a7){if(!_0x27e768)continue;_0x27e768[_0x28cf8d(0x679)](_0x21aae0);}}),PluginManager[_0x3823ba(0xa46)](pluginData['name'],'ActSeq_Impact_MotionTrailRemove',_0x454a9f=>{const _0x3d169a=_0x3823ba;if(!SceneManager[_0x3d169a(0xbc6)]())return;if(!Imported[_0x3d169a(0x16b)])return;VisuMZ[_0x3d169a(0xb9f)](_0x454a9f,_0x454a9f);const _0x223f0e=VisuMZ[_0x3d169a(0x140)](_0x454a9f[_0x3d169a(0xad2)]);for(const _0x429b68 of _0x223f0e){if(_0x3d169a(0x9aa)!==_0x3d169a(0x9aa)){if(this[_0x3d169a(0x7d5)]())return!![];return![];}else{if(!_0x429b68)continue;_0x429b68[_0x3d169a(0x7be)]();}}}),PluginManager[_0x3823ba(0xa46)](pluginData['name'],_0x3823ba(0xca3),_0x3800f1=>{const _0x45506c=_0x3823ba;if(!Imported[_0x45506c(0x16b)])return;const _0x3189f7=SceneManager[_0x45506c(0xaa3)][_0x45506c(0x8a5)];if(!_0x3189f7)return;if(VisuMZ['ActSeqImpact'][_0x45506c(0xd18)]<=1.04){alert(_0x45506c(0x25b)),SceneManager[_0x45506c(0x824)]();return;}VisuMZ['ConvertParams'](_0x3800f1,_0x3800f1);const _0x3e59c6=_0x3800f1[_0x45506c(0x9bf)];_0x3189f7['setupNegativeImpactFilter'](_0x3e59c6);}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0xbe9),_0x3d8c21=>{const _0xfa5519=_0x3823ba;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x277feb=SceneManager[_0xfa5519(0xaa3)][_0xfa5519(0x8a5)];if(!_0x277feb)return;if(VisuMZ['ActSeqImpact'][_0xfa5519(0xd18)]<=1.04){alert(_0xfa5519(0x25b)),SceneManager[_0xfa5519(0x824)]();return;}VisuMZ[_0xfa5519(0xb9f)](_0x3d8c21,_0x3d8c21);const _0x42040a=_0x3d8c21[_0xfa5519(0x9bf)];_0x277feb[_0xfa5519(0xc2e)](_0x42040a);}),PluginManager['registerCommand'](pluginData[_0x3823ba(0x450)],'ActSeq_Impact_ShockwavePoint',_0x20ae8f=>{const _0x41e4f6=_0x3823ba;if(!Imported[_0x41e4f6(0x16b)])return;const _0x1ad5ee=SceneManager[_0x41e4f6(0xaa3)][_0x41e4f6(0x8a5)];if(!_0x1ad5ee)return;VisuMZ[_0x41e4f6(0xb9f)](_0x20ae8f,_0x20ae8f);const _0x19632b=_0x20ae8f['X']||0x0,_0x4a7702=_0x20ae8f['Y']||0x0,_0xb00a8c=_0x20ae8f[_0x41e4f6(0x4b3)]||0x0,_0xe7df1=_0x20ae8f[_0x41e4f6(0xcab)]||0x0,_0x324e75=_0x20ae8f[_0x41e4f6(0x438)]||0x1;_0x1ad5ee['setupShockwaveImpactFilter'](_0x19632b,_0x4a7702,_0xb00a8c,_0xe7df1,_0x324e75);}),PluginManager[_0x3823ba(0xa46)](pluginData['name'],'ActSeq_Impact_ShockwaveEachTargets',_0x2e72a3=>{const _0x59b116=_0x3823ba;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x59b116(0x16b)])return;const _0x436eae=SceneManager['_scene'][_0x59b116(0x8a5)];if(!_0x436eae)return;VisuMZ[_0x59b116(0xb9f)](_0x2e72a3,_0x2e72a3);const _0x46397d=VisuMZ[_0x59b116(0x140)](_0x2e72a3[_0x59b116(0xad2)]),_0x406d6b=_0x2e72a3[_0x59b116(0x684)],_0x56fb4d=_0x2e72a3[_0x59b116(0x24e)]||0x0,_0xfaf7a6=_0x2e72a3[_0x59b116(0x615)]||0x0,_0x12f357=_0x2e72a3['Amp']||0x0,_0x4aeb2c=_0x2e72a3['Wave']||0x0,_0x67cf1e=_0x2e72a3[_0x59b116(0x438)]||0x1;for(const _0x3210f8 of _0x46397d){if('sdmch'!==_0x59b116(0x868)){if(!_0x3210f8)continue;if(!_0x3210f8[_0x59b116(0x798)]())continue;const _0x167ad3=_0x3210f8[_0x59b116(0x798)]();let _0xc445eb=_0x167ad3[_0x59b116(0x12d)],_0x558568=_0x167ad3[_0x59b116(0xcf6)];_0xc445eb+=(Graphics['width']-Graphics['boxWidth'])/0x2,_0x558568+=(Graphics[_0x59b116(0xd6d)]-Graphics[_0x59b116(0x53c)])/0x2;if(_0x406d6b[_0x59b116(0xd57)](/front/i))_0xc445eb+=(_0x3210f8['isEnemy']()?0x1:-0x1)*_0x167ad3[_0x59b116(0xbdb)]()/0x2;else _0x406d6b['match'](/back/i)&&(_0xc445eb+=(_0x3210f8[_0x59b116(0x737)]()?-0x1:0x1)*_0x167ad3['mainSpriteWidth']()/0x2);if(_0x406d6b['match'](/head/i))'wXzzp'!=='wXzzp'?(_0x5acc1f[_0x59b116(0x4f3)][_0x59b116(0x74c)]['call'](this,_0x54bcf7),this['clearTargetBattlerKey']()):_0x558568-=_0x167ad3['mainSpriteHeight']();else _0x406d6b[_0x59b116(0xd57)](/center/i)&&(_0x558568-=_0x167ad3['mainSpriteHeight']()/0x2);_0xc445eb+=_0x56fb4d,_0x558568+=_0xfaf7a6,_0x436eae['setupShockwaveImpactFilter'](_0xc445eb,_0x558568,_0x12f357,_0x4aeb2c,_0x67cf1e);}else{this[_0x59b116(0x43f)][_0x59b116(0xa63)](),this[_0x59b116(0x55b)][_0x59b116(0x35e)]();if(!_0x3213fb[_0x59b116(0x4f3)][_0x59b116(0x72b)])return;if(_0x10888a['VisuMZ_2_BattleSystemCTB']&&_0x3e70c6[_0x59b116(0x897)]())return;if(_0x2152b8[_0x59b116(0x1ae)]){_0x562232['_currentActor']['setActionState'](_0x59b116(0xd27));const _0x43eff4=_0x1b2b51[_0x59b116(0x1ae)]['battler']();if(_0x43eff4)_0x43eff4[_0x59b116(0xaa4)]();}_0x2ff497[_0x59b116(0x1ae)]=null;}}}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],'ActSeq_Impact_ShockwaveCenterTargets',_0x45d3e0=>{const _0x94b3df=_0x3823ba;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x94b3df(0x16b)])return;const _0x2fe40d=SceneManager[_0x94b3df(0xaa3)]['_spriteset'];if(!_0x2fe40d)return;VisuMZ[_0x94b3df(0xb9f)](_0x45d3e0,_0x45d3e0);const _0x3ea90a=VisuMZ[_0x94b3df(0x140)](_0x45d3e0[_0x94b3df(0xad2)]),_0x23953a=_0x45d3e0['TargetLocation'],_0x3c814c=_0x45d3e0['OffsetX']||0x0,_0x1c9419=_0x45d3e0[_0x94b3df(0x615)]||0x0,_0x5e385f=_0x45d3e0[_0x94b3df(0x4b3)]||0x0,_0x65818a=_0x45d3e0[_0x94b3df(0xcab)]||0x0,_0x158671=_0x45d3e0[_0x94b3df(0x438)]||0x1,_0x4731ae=Math[_0x94b3df(0x28a)](..._0x3ea90a['map'](_0x1f8464=>_0x1f8464[_0x94b3df(0x798)]()[_0x94b3df(0x12d)]-_0x1f8464[_0x94b3df(0x798)]()[_0x94b3df(0xbdb)]()/0x2)),_0x4d47b6=Math['max'](..._0x3ea90a[_0x94b3df(0x4d0)](_0x3a9e56=>_0x3a9e56[_0x94b3df(0x798)]()[_0x94b3df(0x12d)]+_0x3a9e56[_0x94b3df(0x798)]()['mainSpriteWidth']()/0x2)),_0x52e4f1=Math['min'](..._0x3ea90a[_0x94b3df(0x4d0)](_0x3462d7=>_0x3462d7[_0x94b3df(0x798)]()[_0x94b3df(0xcf6)]-_0x3462d7[_0x94b3df(0x798)]()[_0x94b3df(0x5ba)]())),_0x23685e=Math[_0x94b3df(0xd19)](..._0x3ea90a['map'](_0xd6b1a6=>_0xd6b1a6['battler']()['_baseY'])),_0x2cb6ef=_0x3ea90a[_0x94b3df(0x3a2)](_0xf29a19=>_0xf29a19[_0x94b3df(0x4e0)]())[_0x94b3df(0xb23)],_0x3975fd=_0x3ea90a['filter'](_0x54a78c=>_0x54a78c[_0x94b3df(0x737)]())[_0x94b3df(0xb23)];let _0x57d67f=0x0,_0x43f5cb=0x0;if(_0x23953a['match'](/front/i))_0x57d67f=_0x2cb6ef>=_0x3975fd?_0x4731ae:_0x4d47b6;else{if(_0x23953a[_0x94b3df(0xd57)](/middle/i))_0x94b3df(0x604)===_0x94b3df(0xad3)?(this['push'](_0x94b3df(0x620)),this[_0x94b3df(0x7ea)](_0x512587),this[_0x94b3df(0x58d)](_0x5f1858),this[_0x94b3df(0x3d9)](_0x94b3df(0xae4))):(_0x57d67f=(_0x4731ae+_0x4d47b6)/0x2,melee=-0x1);else _0x23953a[_0x94b3df(0xd57)](/back/i)&&(_0x57d67f=_0x2cb6ef>=_0x3975fd?_0x4d47b6:_0x4731ae);}if(_0x23953a[_0x94b3df(0xd57)](/head/i)){if(_0x94b3df(0x9a6)!==_0x94b3df(0x9a6)){const _0x5275fb=_0x57da45[_0x94b3df(0x204)],_0x19172f=_0x47d82f['round']((_0x1469a0[_0x94b3df(0xc13)]-_0x5275fb)/0x2),_0x5267d0=this['helpAreaHeight'](),_0xc5a86a=(_0x3b800a['height']-_0x2a0480[_0x94b3df(0x53c)])/-0x2;return new _0x3853b7(_0x19172f,_0xc5a86a,_0x5275fb,_0x5267d0);}else _0x43f5cb=_0x52e4f1;}else{if(_0x23953a['match'](/center/i))_0x43f5cb=(_0x52e4f1+_0x23685e)/0x2;else _0x23953a[_0x94b3df(0xd57)](/base/i)&&(_0x43f5cb=_0x23685e);}_0x57d67f+=(Graphics['width']-Graphics[_0x94b3df(0xc13)])/0x2,_0x43f5cb+=(Graphics[_0x94b3df(0xd6d)]-Graphics[_0x94b3df(0x53c)])/0x2,_0x57d67f+=_0x3c814c,_0x43f5cb+=_0x1c9419,_0x2fe40d['setupShockwaveImpactFilter'](_0x57d67f,_0x43f5cb,_0x5e385f,_0x65818a,_0x158671);}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],'ActSeq_Impact_TimeScale',_0x724d19=>{const _0x41658c=_0x3823ba;if(!Imported[_0x41658c(0x16b)])return;const _0x48d91e=SceneManager[_0x41658c(0xaa3)]['_spriteset'];if(!_0x48d91e)return;if(VisuMZ[_0x41658c(0x79b)][_0x41658c(0xd18)]<=1.04){alert(_0x41658c(0x25b)),SceneManager['exit']();return;}VisuMZ[_0x41658c(0xb9f)](_0x724d19,_0x724d19);const _0x3f65ae=$gameTemp[_0x41658c(0xaa7)](),_0x12b97b=Math['max'](0.01,_0x724d19['Scale']);$gameTemp[_0x41658c(0x757)](_0x12b97b,_0x3f65ae);}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0xb3c),_0x895e67=>{const _0xaa2f4a=_0x3823ba;if(!Imported[_0xaa2f4a(0x16b)])return;const _0x55dd6e=SceneManager[_0xaa2f4a(0xaa3)][_0xaa2f4a(0x8a5)];if(!_0x55dd6e)return;if(VisuMZ[_0xaa2f4a(0x79b)][_0xaa2f4a(0xd18)]<=1.04){if('cgNYl'!==_0xaa2f4a(0xcc8)){alert(_0xaa2f4a(0x25b)),SceneManager[_0xaa2f4a(0x824)]();return;}else this['_distortionSprite']['addChild'](this[_0xaa2f4a(0xc2b)]);}VisuMZ[_0xaa2f4a(0xb9f)](_0x895e67,_0x895e67);const _0x46d614=$gameTemp[_0xaa2f4a(0xaa7)](),_0x1cd257=_0x895e67['ms']||0x1;VisuMZ[_0xaa2f4a(0x79b)][_0xaa2f4a(0x321)](_0x1cd257,_0x46d614);}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0x45d),_0x53bae4=>{const _0x27bd61=_0x3823ba;if(!Imported[_0x27bd61(0x16b)])return;const _0x45b617=SceneManager[_0x27bd61(0xaa3)][_0x27bd61(0x8a5)];if(!_0x45b617)return;VisuMZ[_0x27bd61(0xb9f)](_0x53bae4,_0x53bae4);const _0x23c7d6=_0x53bae4['X']||0x0,_0x2a3270=_0x53bae4['Y']||0x0,_0x58aa5e=_0x53bae4[_0x27bd61(0x8f4)]||0x0,_0x1aecd4=_0x53bae4[_0x27bd61(0x8b5)]||0x0,_0x4c155f=_0x53bae4[_0x27bd61(0x438)]||0x1,_0x582019=_0x53bae4[_0x27bd61(0x890)]||_0x27bd61(0x12f);_0x45b617[_0x27bd61(0x36d)](_0x58aa5e,_0x23c7d6,_0x2a3270,_0x1aecd4,_0x4c155f,_0x582019);}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0xda1),_0x20d755=>{const _0x8603a7=_0x3823ba;if(!Imported[_0x8603a7(0x16b)])return;const _0x4a7e26=SceneManager[_0x8603a7(0xaa3)][_0x8603a7(0x8a5)];if(!_0x4a7e26)return;VisuMZ['ConvertParams'](_0x20d755,_0x20d755);const _0x3ba830=VisuMZ['CreateActionSequenceTargets'](_0x20d755[_0x8603a7(0xad2)]),_0x3c0628=_0x20d755[_0x8603a7(0x684)],_0x11a0e6=_0x20d755['OffsetX']||0x0,_0x44088e=_0x20d755[_0x8603a7(0x615)]||0x0,_0x4af0c8=_0x20d755[_0x8603a7(0x8f4)]||0x0,_0xf304f4=_0x20d755['Radius']||0x0,_0x3ad429=_0x20d755[_0x8603a7(0x438)]||0x1,_0x3f1c6a=_0x20d755[_0x8603a7(0x890)]||_0x8603a7(0x12f),_0x60a3f7=Math['min'](..._0x3ba830['map'](_0x38858e=>_0x38858e['battler']()[_0x8603a7(0x12d)]-_0x38858e[_0x8603a7(0x798)]()[_0x8603a7(0xbdb)]()/0x2)),_0x31b453=Math[_0x8603a7(0xd19)](..._0x3ba830[_0x8603a7(0x4d0)](_0x387487=>_0x387487['battler']()[_0x8603a7(0x12d)]+_0x387487[_0x8603a7(0x798)]()[_0x8603a7(0xbdb)]()/0x2)),_0x413d77=Math[_0x8603a7(0x28a)](..._0x3ba830['map'](_0x33b155=>_0x33b155['battler']()[_0x8603a7(0xcf6)]-_0x33b155[_0x8603a7(0x798)]()[_0x8603a7(0x5ba)]())),_0x5f0cdc=Math[_0x8603a7(0xd19)](..._0x3ba830[_0x8603a7(0x4d0)](_0x3cbd23=>_0x3cbd23[_0x8603a7(0x798)]()[_0x8603a7(0xcf6)])),_0x67e25d=_0x3ba830[_0x8603a7(0x3a2)](_0x3796d4=>_0x3796d4['isActor']())[_0x8603a7(0xb23)],_0x32d9cf=_0x3ba830['filter'](_0x1bca0f=>_0x1bca0f[_0x8603a7(0x737)]())[_0x8603a7(0xb23)];let _0x5e6d2f=0x0,_0x4b52c1=0x0;if(_0x3c0628[_0x8603a7(0xd57)](/front/i))_0x5e6d2f=_0x67e25d>=_0x32d9cf?_0x60a3f7:_0x31b453;else{if(_0x3c0628[_0x8603a7(0xd57)](/middle/i))_0x5e6d2f=(_0x60a3f7+_0x31b453)/0x2,melee=-0x1;else _0x3c0628[_0x8603a7(0xd57)](/back/i)&&(_0x8603a7(0x2b0)==='yPffN'?this[_0x8603a7(0xc5c)][_0x8603a7(0x538)](this[_0x8603a7(0x873)]):_0x5e6d2f=_0x67e25d>=_0x32d9cf?_0x31b453:_0x60a3f7);}if(_0x3c0628[_0x8603a7(0xd57)](/head/i))_0x4b52c1=_0x413d77;else{if(_0x3c0628[_0x8603a7(0xd57)](/center/i))_0x4b52c1=(_0x413d77+_0x5f0cdc)/0x2;else{if(_0x3c0628[_0x8603a7(0xd57)](/base/i)){if(_0x8603a7(0x338)==='fRVOd')return _0x494db4[_0x8603a7(0xbc6)]()?(_0x1e9542['_scene'][_0x8603a7(0x8a5)][_0x8603a7(0x2f8)](_0x1abe51[0x0],_0x5296fe[0x1]),!![]):_0x1357da[_0x8603a7(0x4f3)]['Game_Interpreter_command283'][_0x8603a7(0x162)](this,_0x11f383);else _0x4b52c1=_0x5f0cdc;}}}_0x5e6d2f+=(Graphics[_0x8603a7(0x204)]-Graphics[_0x8603a7(0xc13)])/0x2,_0x4b52c1+=(Graphics[_0x8603a7(0xd6d)]-Graphics[_0x8603a7(0x53c)])/0x2,_0x5e6d2f+=_0x11a0e6,_0x4b52c1+=_0x44088e,_0x4a7e26[_0x8603a7(0x36d)](_0x4af0c8,_0x5e6d2f,_0x4b52c1,_0xf304f4,_0x3ad429,_0x3f1c6a);}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0x5eb),_0x4ee9b6=>{const _0x9bb79=_0x3823ba;if(!Imported[_0x9bb79(0x16b)])return;const _0x49879b=SceneManager[_0x9bb79(0xaa3)]['_spriteset'];if(!_0x49879b)return;if(VisuMZ['ActSeqImpact']['version']<=1.05){alert(_0x9bb79(0x25b)),SceneManager[_0x9bb79(0x824)]();return;}VisuMZ[_0x9bb79(0xb9f)](_0x4ee9b6,_0x4ee9b6);const _0x26d556=VisuMZ[_0x9bb79(0x140)](_0x4ee9b6['Targets']),_0x347dc2={'filename':_0x4ee9b6[_0x9bb79(0xd8a)],'horzCells':_0x4ee9b6[_0x9bb79(0x79f)]||0x1,'vertCells':_0x4ee9b6[_0x9bb79(0x337)]||0x1,'frameDelay':_0x4ee9b6['frameDelay']||0x1,'smooth':_0x4ee9b6['smooth']||![],'anchorX':_0x4ee9b6[_0x9bb79(0xc22)]||0x0,'anchorY':_0x4ee9b6[_0x9bb79(0x8f1)]||0x0,'offsetX':_0x4ee9b6[_0x9bb79(0x681)]||0x0,'offsetY':_0x4ee9b6[_0x9bb79(0xca0)]||0x0};for(const _0x6cbc75 of _0x26d556){if('SQhtB'!==_0x9bb79(0xb96)){if(!_0x6cbc75)continue;if(!_0x6cbc75[_0x9bb79(0x798)]())continue;_0x6cbc75[_0x9bb79(0x798)]()[_0x9bb79(0x5ff)](_0x347dc2);}else return _0x21b5f0['BattleCore'][_0x9bb79(0x242)][_0x9bb79(0x9fc)]['AnchorY'];}const _0x3455fb=$gameTemp['getLastPluginCommandInterpreter']();_0x3455fb&&(_0x9bb79(0x602)!==_0x9bb79(0x602)?this[_0x9bb79(0x1ae)]=null:_0x3455fb[_0x9bb79(0xab0)](_0x9bb79(0xa64)));}),PluginManager['registerCommand'](pluginData[_0x3823ba(0x450)],'ActSeq_Inject_AnimationEnd',_0x48694f=>{const _0x2791f7=_0x3823ba;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x4c0e48=SceneManager[_0x2791f7(0xaa3)]['_spriteset'];if(!_0x4c0e48)return;if(VisuMZ[_0x2791f7(0x79b)]['version']<=1.05){alert(_0x2791f7(0x25b)),SceneManager[_0x2791f7(0x824)]();return;}VisuMZ[_0x2791f7(0xb9f)](_0x48694f,_0x48694f);const _0x21413e=VisuMZ[_0x2791f7(0x140)](_0x48694f[_0x2791f7(0xad2)]);for(const _0x49d2b0 of _0x21413e){if(_0x2791f7(0x8d5)===_0x2791f7(0xb91)){if(!_0x243005[_0x2791f7(0x839)]())return;const _0x313d55=this[_0x2791f7(0x798)]();if(!_0x313d55)return;if(_0x5904d4)this['setBattlerFacePoint'](_0x39353e+_0x313d55['_baseX'],_0x55780d+_0x313d55[_0x2791f7(0xcf6)],![]);_0x54cb3d+=_0x313d55['_homeX'],_0x42ae3b+=_0x313d55[_0x2791f7(0x372)],_0x313d55[_0x2791f7(0xd2f)](_0x4f6d1c,_0x310e88,_0x3d5af2,_0x571949),this[_0x2791f7(0xa67)]=_0x4818a7,this[_0x2791f7(0x710)]=_0x24473e;}else{if(!_0x49d2b0)continue;if(!_0x49d2b0['battler']())continue;_0x49d2b0[_0x2791f7(0x798)]()[_0x2791f7(0x851)]();}}}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0x9c8),_0x335b16=>{const _0x2a26e5=_0x3823ba;if(!Imported[_0x2a26e5(0x16b)])return;const _0x43935e=SceneManager[_0x2a26e5(0xaa3)]['_spriteset'];if(!_0x43935e)return;if(VisuMZ[_0x2a26e5(0x79b)][_0x2a26e5(0xd18)]<=1.05){if(_0x2a26e5(0x889)==='BlEFy'){const _0x18aa48=_0x454f45[_0x2a26e5(0x122)](_0x28262f[_0x2a26e5(0x2d8)]()[_0x2a26e5(0xaf4)]());_0x18aa48>=0x0&&_0x18aa48<=0x7&&_0x3c941b[_0x2a26e5(0x7b6)](_0x18aa48)&&_0x389c7e[_0x2a26e5(0x3c9)](_0x18aa48);}else{alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager['exit']();return;}}VisuMZ['ConvertParams'](_0x335b16,_0x335b16);const _0x40fb2b=VisuMZ[_0x2a26e5(0x140)](_0x335b16[_0x2a26e5(0xad2)]),_0x2e3c95=_0x335b16['pause'];for(const _0x56351e of _0x40fb2b){if(!_0x56351e)continue;if(!_0x56351e[_0x2a26e5(0x798)]())continue;_0x56351e[_0x2a26e5(0x798)]()[_0x2a26e5(0x41e)](_0x2e3c95);}}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0xb3f),_0x5f2402=>{const _0x3c8f5f=_0x3823ba;if(!SceneManager[_0x3c8f5f(0xbc6)]())return;const _0x7da794=$gameTemp[_0x3c8f5f(0xaa7)]();if(!_0x7da794)return;_0x7da794[_0x3c8f5f(0xab0)](_0x3c8f5f(0x5ae));}),PluginManager[_0x3823ba(0xa46)](pluginData['name'],'ActSeq_Mechanics_ActionEffect',_0x4bca76=>{const _0x21e20e=_0x3823ba;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x4bca76,_0x4bca76);const _0x373ff1=$gameTemp[_0x21e20e(0xaa7)](),_0x4ce963=BattleManager[_0x21e20e(0x131)],_0x406f92=BattleManager[_0x21e20e(0x527)],_0x368e14=BattleManager[_0x21e20e(0xd61)];if(!_0x373ff1||!_0x4ce963||!_0x406f92)return;if(!_0x4ce963[_0x21e20e(0x733)]())return;const _0x37b4b2=VisuMZ[_0x21e20e(0x140)](_0x4bca76['Targets']);for(const _0x422ebf of _0x37b4b2){if(!_0x422ebf)continue;_0x368e14['push']('actionEffect',_0x406f92,_0x422ebf);}_0x373ff1[_0x21e20e(0xab0)](_0x21e20e(0x6dc));}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0xd7f),_0x31e842=>{if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActiveChainSkills'])return;$gameTemp['_performActionEnd']=!![];}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],'ActSeq_Mechanics_AddBuffDebuff',_0x52688b=>{const _0x57e531=_0x3823ba;if(!SceneManager[_0x57e531(0xbc6)]())return;VisuMZ['ConvertParams'](_0x52688b,_0x52688b);const _0x273f03=['MAXHP',_0x57e531(0x81c),_0x57e531(0xd4f),_0x57e531(0xd33),_0x57e531(0xbcf),_0x57e531(0x45c),_0x57e531(0x756),_0x57e531(0x2b2)],_0x7bb16d=_0x52688b[_0x57e531(0xc31)],_0x1b9c50=_0x52688b[_0x57e531(0x25a)],_0x4a8786=_0x52688b[_0x57e531(0x59a)],_0x326a27=VisuMZ[_0x57e531(0x140)](_0x52688b['Targets']);for(const _0x2bfad4 of _0x326a27){if(_0x57e531(0xc82)===_0x57e531(0xa17)){if(this[_0x57e531(0x110)]()&&!this[_0x57e531(0x8e2)]()){const _0x5db209=this[_0x57e531(0x733)]()[_0x57e531(0x58f)];return _0x5db209[_0x57e531(0xd57)](/(?:ENEMY|FOE)/i)&&_0x5db209[_0x57e531(0xd57)](/OR/i)&&_0x5db209[_0x57e531(0xd57)](/(?:ALLY|FRIEND)/i);}else return![];}else{if(!_0x2bfad4)continue;for(const _0x105864 of _0x7bb16d){const _0x4ee015=_0x273f03['indexOf'](_0x105864['toUpperCase']()['trim']());_0x4ee015>=0x0&&_0x4ee015<=0x7&&_0x2bfad4[_0x57e531(0x628)](_0x4ee015,_0x4a8786);}for(const _0x29954f of _0x1b9c50){if('WVAoL'!==_0x57e531(0x626)){const _0x362388=_0x1f01bc[_0x57e531(0x6fe)](this[_0x57e531(0x7a0)]()['id']);if(_0x362388[_0x57e531(0xd57)](/<(?:EXTEND|ADD):[ ](.*?)>/i)){const _0x80bca1=_0x149280['$1'][_0x57e531(0x22f)](',')[_0x57e531(0x4d0)](_0x5e7651=>_0xae11ac(_0x5e7651));this['checkExtendTroopCompatibility'](),this[_0x57e531(0x46f)](_0x80bca1);}}else{const _0x5f500d=_0x273f03[_0x57e531(0x122)](_0x29954f['toUpperCase']()[_0x57e531(0xaf4)]());if(_0x5f500d>=0x0&&_0x5f500d<=0x7){if(_0x57e531(0x60b)!==_0x57e531(0xa9f))_0x2bfad4['addDebuff'](_0x5f500d,_0x4a8786);else{_0x4e28e1=_0xc5a52a[_0x57e531(0x4f3)]['Game_Action_makeTargets'][_0x57e531(0x162)](this);const _0x198b45=_0x549a5f[_0x57e531(0x4f3)]['createKeyJS'](this[_0x57e531(0x733)](),_0x57e531(0xad2));return _0x312505=_0x3a0f8f[_0x57e531(0x4f3)]['JS'][_0x198b45][_0x57e531(0x162)](this,this[_0x57e531(0x29d)](),_0x3c4af5),this[_0x57e531(0xaed)](_0x129446);}}}}}}}),PluginManager[_0x3823ba(0xa46)](pluginData['name'],_0x3823ba(0x260),_0x4de198=>{const _0x322a33=_0x3823ba;if(!SceneManager[_0x322a33(0xbc6)]())return;VisuMZ[_0x322a33(0xb9f)](_0x4de198,_0x4de198);const _0x4f1739=_0x4de198[_0x322a33(0x327)],_0x68085d=VisuMZ[_0x322a33(0x140)](_0x4de198[_0x322a33(0xad2)]);for(const _0x1c6fda of _0x68085d){if(_0x322a33(0x8d3)!==_0x322a33(0x8d3))return[this['getSpecificBattlerKeyTarget']()];else{if(!_0x1c6fda)continue;for(const _0x15a839 of _0x4f1739){_0x1c6fda[_0x322a33(0xa08)](_0x15a839);}}}}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0x5e3),_0x272644=>{const _0x4b3512=_0x3823ba;if(!SceneManager[_0x4b3512(0xbc6)]())return;VisuMZ['ConvertParams'](_0x272644,_0x272644);const _0x2c59c0=BattleManager[_0x4b3512(0x131)],_0x303f20={'arPenRate':_0x272644[_0x4b3512(0xa99)],'arPenFlat':_0x272644['ArPenFlat'],'arRedRate':_0x272644[_0x4b3512(0xb12)],'arRedFlat':_0x272644['ArRedFlat']};_0x2c59c0[_0x4b3512(0x37a)]=_0x303f20;}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],'ActSeq_Mechanics_AnalyzeWeakness',_0xa5423c=>{const _0x229901=_0x3823ba;if(!SceneManager[_0x229901(0xbc6)]())return;if(!Imported[_0x229901(0x6e4)])return;VisuMZ[_0x229901(0xb9f)](_0xa5423c,_0xa5423c);const _0x46cb3b=VisuMZ[_0x229901(0x140)](_0xa5423c[_0x229901(0xad2)]),_0x1118fc=_0xa5423c[_0x229901(0x419)]||0x1;for(const _0xf8e0d4 of _0x46cb3b){if(_0x229901(0x597)!=='AaWvT'){if(!_0xf8e0d4)continue;if(!_0xf8e0d4[_0x229901(0x737)]())continue;_0xf8e0d4['revealNewWeaknesses'](_0x1118fc);}else{if(!_0x5459de[_0x229901(0xbc6)]())return;if(!_0x40fb71[_0x229901(0x29c)])return;_0x455787[_0x229901(0xb9f)](_0x50813f,_0x17a8cd);const _0x3e5a8d=_0x5ad398[_0x229901(0xaa7)](),_0x3fa6ab=_0x57f9a0[_0x229901(0x140)](_0x306d10[_0x229901(0xad2)]),_0x2791c6=_0x38a594[_0x229901(0x4fa)];_0x1d22f9[_0x229901(0x554)](_0x3fa6ab,_0x44b807['Duration'],_0x19ed78[_0x229901(0x890)]);if(_0x2791c6)_0x3e5a8d[_0x229901(0xab0)](_0x229901(0xbd6));}}}),PluginManager['registerCommand'](pluginData['name'],_0x3823ba(0xd94),_0x53133e=>{const _0x1df5b3=_0x3823ba;if(!SceneManager[_0x1df5b3(0xbc6)]())return;if(!Imported[_0x1df5b3(0x50f)])return;if(!BattleManager[_0x1df5b3(0x892)]())return;VisuMZ[_0x1df5b3(0xb9f)](_0x53133e,_0x53133e);const _0x14116b=VisuMZ[_0x1df5b3(0x140)](_0x53133e[_0x1df5b3(0xad2)]),_0x2880d3=_0x53133e[_0x1df5b3(0x765)],_0x51e565=_0x53133e[_0x1df5b3(0x765)],_0x37bae7=_0x53133e[_0x1df5b3(0x34b)];for(const _0x33d269 of _0x14116b){if(_0x1df5b3(0xa43)==='JByvh'){if(!_0x33d269)continue;if(_0x33d269['isAtbChargingState']()){if(_0x1df5b3(0xa66)===_0x1df5b3(0xa66))_0x33d269[_0x1df5b3(0x7d2)](_0x2880d3);else{const _0x18546f=_0x49b84c[_0x1df5b3(0x846)]();if(_0x18546f&&_0x18546f[_0x1df5b3(0x798)])_0x18546f[_0x1df5b3(0x798)]()[_0x1df5b3(0xaa4)]();_0x20e5a5[_0x1df5b3(0x4f3)][_0x1df5b3(0xaa8)][_0x1df5b3(0x162)](this);}}else{if(_0x33d269[_0x1df5b3(0x65a)]()){_0x33d269[_0x1df5b3(0xd03)](_0x51e565);if(_0x37bae7)_0x33d269[_0x1df5b3(0xd8b)]();}}}else{const _0x25fd6f=_0x3fc1a0[_0x1df5b3(0x4f3)][_0x1df5b3(0x242)][_0x1df5b3(0x9fc)];this[_0x1df5b3(0x1a0)]=_0x61cd82[_0x1df5b3(0xacc)]((_0x25fd6f['ShakeFlinchDuration']??0x18)*_0x2865cf),this[_0x1df5b3(0x780)]=_0x225c77['max'](this[_0x1df5b3(0x780)],_0xb8d023);}}}),PluginManager[_0x3823ba(0xa46)](pluginData['name'],_0x3823ba(0x994),_0x27083c=>{const _0x2f9545=_0x3823ba;if(!SceneManager[_0x2f9545(0xbc6)]())return;if(!Imported[_0x2f9545(0xa91)])return;VisuMZ[_0x2f9545(0xb9f)](_0x27083c,_0x27083c);const _0x507c0c=VisuMZ['CreateActionSequenceTargets'](_0x27083c[_0x2f9545(0xad2)]),_0x5bba76=_0x27083c['BoostPoints'];for(const _0x566801 of _0x507c0c){if(!_0x566801)continue;_0x566801[_0x2f9545(0x5c4)](_0x5bba76);}}),PluginManager[_0x3823ba(0xa46)](pluginData['name'],_0x3823ba(0x33e),_0x3a99bb=>{const _0x18c97b=_0x3823ba;if(!SceneManager[_0x18c97b(0xbc6)]())return;if(!Imported['VisuMZ_3_BoostAction'])return;if(!BattleManager[_0x18c97b(0x527)])return;VisuMZ['ConvertParams'](_0x3a99bb,_0x3a99bb);const _0x298ab4=_0x3a99bb[_0x18c97b(0x4bd)];$gameVariables[_0x18c97b(0xccb)](_0x298ab4,BattleManager[_0x18c97b(0x527)][_0x18c97b(0x73d)]());}),PluginManager[_0x3823ba(0xa46)](pluginData['name'],_0x3823ba(0x8f6),_0x3c747b=>{const _0x3a2257=_0x3823ba;if(!SceneManager[_0x3a2257(0xbc6)]())return;if(!Imported[_0x3a2257(0x3ab)])return;VisuMZ[_0x3a2257(0xb9f)](_0x3c747b,_0x3c747b);const _0x1ceba8=VisuMZ[_0x3a2257(0x140)](_0x3c747b[_0x3a2257(0xad2)]),_0x2020c8=_0x3c747b['BreakShields'];for(const _0x2d9fbf of _0x1ceba8){if(!_0x2d9fbf)continue;if(_0x2d9fbf[_0x3a2257(0x67b)]())continue;if(!_0x2d9fbf[_0x3a2257(0x48a)]())continue;_0x2d9fbf['alterBreakShield'](_0x2020c8);}}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0x4e7),_0x1a4dea=>{const _0x5ede5b=_0x3823ba;if(!SceneManager[_0x5ede5b(0xbc6)]())return;if(!Imported[_0x5ede5b(0x3ab)])return;VisuMZ[_0x5ede5b(0xb9f)](_0x1a4dea,_0x1a4dea);const _0x378bb1=VisuMZ[_0x5ede5b(0x140)](_0x1a4dea[_0x5ede5b(0xad2)]);for(const _0x36ea63 of _0x378bb1){if('AiNhU'!==_0x5ede5b(0x8af)){if(!this[_0x5ede5b(0x6b7)])return![];if(this[_0x5ede5b(0x319)]>0x0)return!![];return _0x1cd859['BattleCore'][_0x5ede5b(0x22d)]['call'](this);}else{if(!_0x36ea63)continue;if(_0x36ea63[_0x5ede5b(0x67b)]())continue;if(!_0x36ea63['isAffectedByBreakShield']())continue;_0x36ea63[_0x5ede5b(0xb6a)]();}}}),PluginManager['registerCommand'](pluginData[_0x3823ba(0x450)],_0x3823ba(0x7cd),_0x46a316=>{const _0x51b966=_0x3823ba;if(!SceneManager[_0x51b966(0xbc6)]())return;if(!Imported[_0x51b966(0x1bc)])return;if(!BattleManager[_0x51b966(0x618)]())return;VisuMZ[_0x51b966(0xb9f)](_0x46a316,_0x46a316);const _0x2a5db1=VisuMZ[_0x51b966(0x140)](_0x46a316[_0x51b966(0xad2)]),_0x323ec6=_0x46a316[_0x51b966(0x2f2)];for(const _0x1f19c5 of _0x2a5db1){if(!_0x1f19c5)continue;_0x1f19c5[_0x51b966(0x497)](_0x323ec6);}}),PluginManager[_0x3823ba(0xa46)](pluginData['name'],_0x3823ba(0x64d),_0x598a23=>{const _0x160767=_0x3823ba;if(!SceneManager[_0x160767(0xbc6)]())return;VisuMZ['ConvertParams'](_0x598a23,_0x598a23);const _0x3dc748=$gameTemp[_0x160767(0xaa7)](),_0x684137=BattleManager['_action'],_0x3bd6f7=BattleManager[_0x160767(0x527)];if(!_0x3dc748||!_0x684137||!_0x3bd6f7)return;if(!_0x684137[_0x160767(0x733)]())return;const _0x20e7bb=VisuMZ['CreateActionSequenceTargets'](_0x598a23['Targets']);for(const _0x2c470c of _0x20e7bb){if(_0x160767(0x84d)!=='JPAqd')_0x4d0c11[_0x160767(0x734)][_0x160767(0x9d0)](_0x310f65);else{if(!_0x2c470c)continue;if(_0x598a23[_0x160767(0x540)]){if(_0x160767(0x352)!==_0x160767(0xa02))_0x2c470c[_0x160767(0x473)](),_0x2c470c['addState'](_0x2c470c[_0x160767(0xa68)]());else return this['isActionSelectionValid']();}_0x2c470c[_0x160767(0x71f)]()&&_0x2c470c[_0x160767(0x9e5)]();}}_0x3dc748[_0x160767(0xab0)](_0x160767(0x223));}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0x142),_0x584a49=>{const _0x1cfe19=_0x3823ba;if(!SceneManager[_0x1cfe19(0xbc6)]())return;if(!Imported[_0x1cfe19(0x594)])return;if(!BattleManager[_0x1cfe19(0x897)]())return;VisuMZ[_0x1cfe19(0xb9f)](_0x584a49,_0x584a49);const _0xbe3e31=VisuMZ['CreateActionSequenceTargets'](_0x584a49[_0x1cfe19(0xad2)]),_0xf22dd=_0x584a49['ChangeOrderBy'];for(const _0x52a5ca of _0xbe3e31){if(_0x1cfe19(0x421)==='fUQBx')this[_0x1cfe19(0xda0)]=this[_0x1cfe19(0x41d)](),this[_0x1cfe19(0xb25)](),_0x41b83c[_0x1cfe19(0x8d6)]['refresh'][_0x1cfe19(0x162)](this);else{if(!_0x52a5ca)continue;_0x52a5ca[_0x1cfe19(0xa6e)](_0xf22dd);}}}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0x310),_0x113cce=>{const _0x259765=_0x3823ba;if(!SceneManager[_0x259765(0xbc6)]())return;if(!Imported[_0x259765(0x594)])return;if(!BattleManager[_0x259765(0x897)]())return;VisuMZ[_0x259765(0xb9f)](_0x113cce,_0x113cce);const _0x48b68c=VisuMZ[_0x259765(0x140)](_0x113cce[_0x259765(0xad2)]),_0x1b8757=_0x113cce[_0x259765(0x765)],_0x39c518=_0x113cce[_0x259765(0x765)];for(const _0x5eedd0 of _0x48b68c){if(!_0x5eedd0)continue;if(_0x5eedd0['_tpbState']==='charging')_0x5eedd0[_0x259765(0x993)](_0x1b8757);else _0x5eedd0[_0x259765(0xcd5)]===_0x259765(0x95a)&&_0x5eedd0[_0x259765(0x19e)](_0x39c518);}}),PluginManager[_0x3823ba(0xa46)](pluginData['name'],_0x3823ba(0xd11),_0x1af173=>{const _0x8e252a=_0x3823ba;if(!SceneManager[_0x8e252a(0xbc6)]())return;VisuMZ['ConvertParams'](_0x1af173,_0x1af173);const _0x213606=BattleManager['_action'];if(!_0x213606)return;let _0x3ca2ef=_0x1af173[_0x8e252a(0x801)];_0x213606[_0x8e252a(0xc04)](_0x3ca2ef);}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0x858),_0x81981f=>{const _0x501d79=_0x3823ba;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x501d79(0xb9f)](_0x81981f,_0x81981f);const _0x2f8921=VisuMZ[_0x501d79(0x140)](_0x81981f[_0x501d79(0xad2)]);for(const _0x2d7a2e of _0x2f8921){if(!_0x2d7a2e)continue;if(_0x2d7a2e[_0x501d79(0x192)]())_0x2d7a2e['startDamagePopup']();}}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],'ActSeq_Mechanics_DeathBreak',_0x457e41=>{const _0x14990f=_0x3823ba;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x457e41,_0x457e41);const _0x1617d3=$gameTemp[_0x14990f(0xaa7)](),_0xc6d47=BattleManager['_subject'],_0xa3fc87=_0x457e41['JumpToLabel'];if(!_0x1617d3)return;if(!_0xc6d47)return;_0xc6d47&&_0xc6d47[_0x14990f(0x3b8)]()&&_0xa3fc87[_0x14990f(0x2d8)]()[_0x14990f(0xaf4)]()!==_0x14990f(0x928)&&_0x1617d3[_0x14990f(0x45e)]([_0xa3fc87]);}),PluginManager[_0x3823ba(0xa46)](pluginData['name'],_0x3823ba(0x5fc),_0x13644a=>{const _0x3b36cf=_0x3823ba;if(!SceneManager[_0x3b36cf(0xbc6)]())return;VisuMZ[_0x3b36cf(0xb9f)](_0x13644a,_0x13644a);const _0x3a7713=$gameTemp[_0x3b36cf(0xaa7)](),_0xe13aea=BattleManager[_0x3b36cf(0xd61)];if(!_0x3a7713)return;const _0x151eac=VisuMZ[_0x3b36cf(0x140)](_0x13644a[_0x3b36cf(0xc0f)]),_0x521318=VisuMZ[_0x3b36cf(0x140)](_0x13644a['Targets']);for(const _0x6b80f3 of _0x151eac){for(const _0x35a4e2 of _0x521318){if(_0x3b36cf(0x6a3)!=='JEuNJ'){if(!_0x35a4e2)continue;const _0x3ef3e7=$dataSkills[_0x6b80f3[_0x3b36cf(0x17c)]()];_0xe13aea[_0x3b36cf(0x3d9)](_0x3b36cf(0x4a7),_0x6b80f3,_0x35a4e2,_0x3ef3e7);}else _0x2b7091=_0x561b05[this[_0x3b36cf(0x9c0)][_0x3b36cf(0xd0a)]()];}}_0x3a7713[_0x3b36cf(0xab0)]('battlelog');}),PluginManager[_0x3823ba(0xa46)](pluginData['name'],_0x3823ba(0x2d3),_0x37470c=>{const _0x4ebed7=_0x3823ba;if(!SceneManager[_0x4ebed7(0xbc6)]())return;VisuMZ[_0x4ebed7(0xb9f)](_0x37470c,_0x37470c);const _0x3274ef=$gameTemp[_0x4ebed7(0xaa7)](),_0xacc92c=BattleManager[_0x4ebed7(0xd61)];if(!_0x3274ef)return;const _0x1a2e1f=VisuMZ['CreateActionSequenceTargets'](_0x37470c['Users']),_0x5ea44c=VisuMZ[_0x4ebed7(0x140)](_0x37470c['Targets']);for(const _0x4edc93 of _0x1a2e1f){if(_0x4ebed7(0xb18)===_0x4ebed7(0x4cd))this[_0x4ebed7(0x596)]();else for(const _0xc5a31a of _0x5ea44c){if(!_0xc5a31a)continue;const _0x474488=$dataSkills[_0x4edc93[_0x4ebed7(0xd0a)]()];_0xacc92c['push'](_0x4ebed7(0x4a7),_0x4edc93,_0xc5a31a,_0x474488);}}_0x3274ef[_0x4ebed7(0xab0)](_0x4ebed7(0x6dc));}),PluginManager[_0x3823ba(0xa46)](pluginData['name'],'ActSeq_Mechanics_EmulateItemEffect',_0x45fbac=>{const _0x5e8eb9=_0x3823ba;if(!SceneManager[_0x5e8eb9(0xbc6)]())return;VisuMZ[_0x5e8eb9(0xb9f)](_0x45fbac,_0x45fbac);const _0x59cc21=$gameTemp['getLastPluginCommandInterpreter'](),_0x4a1912=BattleManager[_0x5e8eb9(0xd61)],_0x3d36e9=Number(_0x45fbac[_0x5e8eb9(0x58b)]||0x1),_0x5c77c=$dataItems[_0x3d36e9];if(!_0x59cc21)return;if(!_0x5c77c)return;const _0x1c67fa=VisuMZ[_0x5e8eb9(0x140)](_0x45fbac['Users']),_0x135750=VisuMZ[_0x5e8eb9(0x140)](_0x45fbac[_0x5e8eb9(0xad2)]);for(const _0x55675a of _0x1c67fa){for(const _0x5ac2b7 of _0x135750){if(_0x5e8eb9(0x4a3)!==_0x5e8eb9(0xc67)){if(!_0x5ac2b7)continue;_0x4a1912[_0x5e8eb9(0x3d9)]('emulateActionEffect',_0x55675a,_0x5ac2b7,_0x5c77c);}else{const _0x39e4fb=this[_0x5e8eb9(0x1a0)];this['_shakeFlinchPower']=this[_0x5e8eb9(0x780)]*(_0x39e4fb-0x1)/_0x39e4fb,this[_0x5e8eb9(0x1a0)]--,this[_0x5e8eb9(0x1a0)]<=0x0&&(this[_0x5e8eb9(0x780)]=0x0);}}}_0x59cc21[_0x5e8eb9(0xab0)]('battlelog');}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0x800),_0x353084=>{const _0x32229e=_0x3823ba;if(!SceneManager[_0x32229e(0xbc6)]())return;VisuMZ['ConvertParams'](_0x353084,_0x353084);let _0x2bea11=Number(_0x353084[_0x32229e(0xbe2)]||0x0);if(_0x2bea11<=0x0){const _0x12107b=BattleManager[_0x32229e(0x131)];if(_0x12107b&&_0x12107b[_0x32229e(0x6f9)]())_0x2bea11=_0x12107b[_0x32229e(0x733)]()['id'];else{if(_0x32229e(0x8e3)===_0x32229e(0x29e))_0x88c41c[_0x2bf590][_0x32229e(0x162)](this,_0x4b8927);else return;}}const _0x1a5bab=$dataSkills[_0x2bea11];if(!_0x1a5bab)return;const _0x5535e1=VisuMZ[_0x32229e(0x140)](_0x353084[_0x32229e(0xc0f)]);for(const _0x43ed4a of _0x5535e1){if('wVebi'!==_0x32229e(0x66b))_0x43ed4a[_0x32229e(0x1bd)](_0x1a5bab);else return _0x958556[_0x32229e(0xd31)]()[_0x32229e(0x3a2)](_0x5bfa6f=>_0x5bfa6f!==_0x214724);}}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],'ActSeq_Mechanics_EmulateSkillEffect',_0x12f066=>{const _0x250b7a=_0x3823ba;if(!SceneManager[_0x250b7a(0xbc6)]())return;VisuMZ['ConvertParams'](_0x12f066,_0x12f066);const _0x55e98=$gameTemp['getLastPluginCommandInterpreter'](),_0x1a4247=BattleManager[_0x250b7a(0xd61)],_0x5146ff=Number(_0x12f066[_0x250b7a(0xbe2)]||0x1),_0x499fa7=$dataSkills[_0x5146ff];if(!_0x55e98)return;if(!_0x499fa7)return;const _0x34edd1=VisuMZ['CreateActionSequenceTargets'](_0x12f066[_0x250b7a(0xc0f)]),_0x395c28=VisuMZ[_0x250b7a(0x140)](_0x12f066[_0x250b7a(0xad2)]);for(const _0x26aee5 of _0x34edd1){if(_0x250b7a(0x5e4)===_0x250b7a(0x5e4))for(const _0x5a46b5 of _0x395c28){if(!_0x5a46b5)continue;_0x1a4247[_0x250b7a(0x3d9)](_0x250b7a(0x4a7),_0x26aee5,_0x5a46b5,_0x499fa7);}else this[_0x250b7a(0x6cd)]()?delete _0x3c49b3[_0x250b7a(0x431)][_0x250b7a(0x5d2)]:_0x18a333[_0x250b7a(0x9f6)](_0x250b7a(0x5d2),this['actorCommandCancelTPB']['bind'](this));}_0x55e98['setWaitMode'](_0x250b7a(0x6dc));}),PluginManager['registerCommand'](pluginData[_0x3823ba(0x450)],'ActSeq_Mechanics_EnemyEscape',_0x537bf8=>{const _0x376405=_0x3823ba;if(!SceneManager[_0x376405(0xbc6)]())return;VisuMZ[_0x376405(0xb9f)](_0x537bf8,_0x537bf8);const _0x2c5ae3=VisuMZ[_0x376405(0x140)](_0x537bf8[_0x376405(0xad2)]);for(const _0x24117f of _0x2c5ae3){if(!_0x24117f)continue;if(!_0x24117f[_0x376405(0x737)]())continue;_0x24117f['escape']();}}),PluginManager['registerCommand'](pluginData['name'],_0x3823ba(0xa4a),_0x4a29d1=>{const _0x20a2b3=_0x3823ba;if(!SceneManager[_0x20a2b3(0xbc6)]())return;if(!Imported[_0x20a2b3(0xa03)])return;if(!BattleManager[_0x20a2b3(0xc8d)]())return;VisuMZ[_0x20a2b3(0xb9f)](_0x4a29d1,_0x4a29d1);const _0x474054=_0x4a29d1['ActionCount'];BattleManager[_0x20a2b3(0x527)]&&BattleManager[_0x20a2b3(0x527)][_0x20a2b3(0x691)]()['gainCurrentActionsETB'](_0x474054);}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0x6fa),_0x54d5eb=>{const _0x30f6d0=_0x3823ba;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_2_BattleSystemFTB'])return;if(!BattleManager['isFTB']())return;VisuMZ[_0x30f6d0(0xb9f)](_0x54d5eb,_0x54d5eb);const _0x3bc430=_0x54d5eb[_0x30f6d0(0x515)];BattleManager[_0x30f6d0(0x527)]&&(_0x30f6d0(0x767)==='Ffrjb'?BattleManager[_0x30f6d0(0x527)][_0x30f6d0(0x691)]()[_0x30f6d0(0x9c9)](_0x3bc430):_0x296c3f=_0x3b21b1>=_0x1e3e34?_0x210c48:_0x4940ab);}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0x8b4),_0x49fe9f=>{const _0x4a4568=_0x3823ba;if(!SceneManager[_0x4a4568(0xbc6)]())return;VisuMZ[_0x4a4568(0xb9f)](_0x49fe9f,_0x49fe9f);const _0x1ed564=VisuMZ['CreateActionSequenceTargets'](_0x49fe9f[_0x4a4568(0xad2)]),_0x4b25f4=_0x49fe9f[_0x4a4568(0xd28)],_0x1ad35e=_0x49fe9f['HP_Flat'],_0x567e71=_0x49fe9f['MP_Rate'],_0x555044=_0x49fe9f[_0x4a4568(0x7a3)],_0x552322=_0x49fe9f[_0x4a4568(0x58e)],_0x1c60fe=_0x49fe9f[_0x4a4568(0xbe4)],_0x1695d7=_0x49fe9f[_0x4a4568(0x3ac)];for(const _0x571047 of _0x1ed564){if(!_0x571047)continue;const _0x385cd5=_0x571047[_0x4a4568(0x8ed)](),_0x52f37f=Math[_0x4a4568(0x282)](_0x4b25f4*_0x571047[_0x4a4568(0x505)]+_0x1ad35e),_0x499d90=Math[_0x4a4568(0x282)](_0x567e71*_0x571047[_0x4a4568(0x257)]+_0x555044),_0x45a609=Math[_0x4a4568(0x282)](_0x552322*_0x571047[_0x4a4568(0x5ce)]()+_0x1c60fe);if(_0x52f37f!==0x0)_0x571047['gainHp'](_0x52f37f);if(_0x499d90!==0x0)_0x571047[_0x4a4568(0x929)](_0x499d90);if(_0x45a609!==0x0)_0x571047[_0x4a4568(0x931)](_0x45a609);if(_0x1695d7)_0x571047[_0x4a4568(0x3a6)]();_0x385cd5&&_0x571047[_0x4a4568(0x3b8)]()&&_0x571047['performCollapse']();}}),PluginManager['registerCommand'](pluginData[_0x3823ba(0x450)],_0x3823ba(0x405),_0x101c26=>{const _0x28f35c=_0x3823ba;if(!SceneManager[_0x28f35c(0xbc6)]())return;VisuMZ[_0x28f35c(0xb9f)](_0x101c26,_0x101c26);const _0x8d4667=VisuMZ[_0x28f35c(0x140)](_0x101c26[_0x28f35c(0xad2)]);for(const _0x5272ff of _0x8d4667){if(!_0x5272ff)continue;_0x5272ff['setImmortal'](_0x101c26[_0x28f35c(0x385)]);}}),PluginManager['registerCommand'](pluginData[_0x3823ba(0x450)],_0x3823ba(0xa96),_0x1a10de=>{const _0x573737=_0x3823ba;if(!SceneManager[_0x573737(0xbc6)]())return;VisuMZ[_0x573737(0xb9f)](_0x1a10de,_0x1a10de);const _0x1a25b0=BattleManager[_0x573737(0x131)],_0x34f593={'criticalHitRate':_0x1a10de[_0x573737(0x6d9)],'criticalHitFlat':_0x1a10de['CriticalHitFlat'],'criticalDmgRate':_0x1a10de[_0x573737(0x64c)],'criticalDmgFlat':_0x1a10de[_0x573737(0xd14)],'damageRate':_0x1a10de[_0x573737(0xc96)],'damageFlat':_0x1a10de[_0x573737(0xc4a)],'hitRate':_0x1a10de[_0x573737(0x178)],'hitFlat':_0x1a10de[_0x573737(0xa3e)]};_0x1a25b0['_multipliers']=_0x34f593;}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],'ActSeq_Mechanics_OnceParallel',_0x2f99db=>{const _0x240c56=_0x3823ba;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x240c56(0xb9f)](_0x2f99db,_0x2f99db);const _0x9bfa32=_0x2f99db[_0x240c56(0xb97)];SceneManager[_0x240c56(0xaa3)][_0x240c56(0x16e)](_0x9bfa32);}),PluginManager[_0x3823ba(0xa46)](pluginData['name'],'ActSeq_Mechanics_OtbOrder',_0x1e541c=>{const _0x302775=_0x3823ba;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_2_BattleSystemOTB'])return;if(!BattleManager[_0x302775(0xbd7)]())return;VisuMZ[_0x302775(0xb9f)](_0x1e541c,_0x1e541c);const _0x154aa5=VisuMZ[_0x302775(0x140)](_0x1e541c['Targets']);for(const _0x4fc4d3 of _0x154aa5){if(!_0x4fc4d3)continue;let _0x59fba1=_0x1e541c['CurrentTurn'],_0x43d1c5=_0x1e541c[_0x302775(0x8a0)],_0x514f39=_0x1e541c[_0x302775(0x811)];if(BattleManager['_actionBattlers'][_0x302775(0x97e)](_0x4fc4d3)){if(_0x302775(0xd65)===_0x302775(0xd65))_0x59fba1+=_0x514f39;else{if(this[_0x302775(0x1ae)][_0x302775(0x2d5)]())return;this[_0x302775(0x64b)](),this['checkTpbInputClose'](),!this[_0x302775(0x527)]&&!this[_0x302775(0x1ae)]&&_0xa12759['_scene'][_0x302775(0x1f4)]();}}else _0x43d1c5+=_0x514f39;BattleManager[_0x302775(0x15e)](_0x4fc4d3,-_0x59fba1,![]),BattleManager[_0x302775(0x15e)](_0x4fc4d3,-_0x43d1c5,!![]);}}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0x62e),_0x82b24d=>{const _0x4a1463=_0x3823ba;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x4a1463(0x4ca)])return;if(!BattleManager[_0x4a1463(0x69d)]())return;VisuMZ[_0x4a1463(0xb9f)](_0x82b24d,_0x82b24d);const _0x464aa9=BattleManager[_0x4a1463(0x527)]['friendsUnit'](),_0x4917b9=_0x82b24d['Override'],_0x3030fa=_0x82b24d[_0x4a1463(0x81b)]||_0x4a1463(0xa0f),_0x3c2162=_0x82b24d[_0x4a1463(0x92e)]||_0x4a1463(0xa0f),_0x14c6fd=_0x82b24d[_0x4a1463(0x342)]||0x0,_0x169c65=_0x82b24d[_0x4a1463(0xc10)]||0x0;(_0x464aa9['canAlterActionCostPTB']()||_0x4917b9)&&(_0x4917b9&&(_0x464aa9[_0x4a1463(0xce1)]=_0x464aa9[_0x4a1463(0xce1)]||{},_0x464aa9[_0x4a1463(0xce1)]['priority']=0x0),_0x464aa9[_0x4a1463(0x167)](_0x3030fa,_0x3c2162,_0x14c6fd,_0x169c65));}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0x882),_0x53556c=>{const _0x1e0d48=_0x3823ba;if(!SceneManager[_0x1e0d48(0xbc6)]())return;if(!Imported['VisuMZ_2_BattleSystemPTB'])return;if(!BattleManager[_0x1e0d48(0x69d)]())return;VisuMZ[_0x1e0d48(0xb9f)](_0x53556c,_0x53556c);const _0x2c64bb=BattleManager[_0x1e0d48(0x527)]['friendsUnit']();let _0x13a737=Math['max'](_0x53556c['ConvertCount'],0x0),_0x3d88ee=_0x2c64bb[_0x1e0d48(0x8be)](),_0x27d9b2=_0x2c64bb[_0x1e0d48(0x4da)]();while(_0x13a737--){if(_0x1e0d48(0x3e0)===_0x1e0d48(0x53d))_0x3bc7f6=_0xdef9a7[_0x1e0d48(0x798)]()[_0x1e0d48(0x43c)],_0x370653=_0x31df91[_0x1e0d48(0x798)]()[_0x1e0d48(0x372)];else{if(_0x3d88ee<=0x0&&_0x27d9b2<=0x0)break;else{if(_0x3d88ee>0x0){if(_0x1e0d48(0x14b)===_0x1e0d48(0x69a))return this['needsSelectionBattleCore']();else _0x3d88ee--,_0x27d9b2++;}else _0x27d9b2--;}}}_0x2c64bb[_0x1e0d48(0xba7)](_0x3d88ee),_0x2c64bb[_0x1e0d48(0x91c)](_0x27d9b2);}),PluginManager['registerCommand'](pluginData[_0x3823ba(0x450)],_0x3823ba(0x445),_0x1c301f=>{const _0xc83865=_0x3823ba;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0xc83865(0x4ca)])return;if(!BattleManager[_0xc83865(0x69d)]())return;VisuMZ['ConvertParams'](_0x1c301f,_0x1c301f);const _0x4ac823=BattleManager['_subject'][_0xc83865(0x691)]();let _0x4405f3=_0x1c301f['FullActions'],_0x42112a=_0x1c301f['HalfActions'];_0x4ac823[_0xc83865(0x300)](_0x4405f3),_0x4ac823[_0xc83865(0x6af)](_0x42112a);}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],'ActSeq_Mechanics_RemoveBuffDebuff',_0x2568d6=>{const _0x402596=_0x3823ba;if(!SceneManager[_0x402596(0xbc6)]())return;VisuMZ[_0x402596(0xb9f)](_0x2568d6,_0x2568d6);const _0x112190=[_0x402596(0x743),_0x402596(0x81c),_0x402596(0xd4f),'DEF','MAT','MDF',_0x402596(0x756),_0x402596(0x2b2)],_0x28c20b=_0x2568d6[_0x402596(0xc31)],_0x334197=_0x2568d6[_0x402596(0x25a)],_0x4d5c8d=VisuMZ[_0x402596(0x140)](_0x2568d6['Targets']);for(const _0x2fae61 of _0x4d5c8d){if(!_0x2fae61)continue;for(const _0x4f086a of _0x28c20b){const _0x811a0d=_0x112190['indexOf'](_0x4f086a[_0x402596(0x2d8)]()['trim']());_0x811a0d>=0x0&&_0x811a0d<=0x7&&_0x2fae61[_0x402596(0x7b6)](_0x811a0d)&&_0x2fae61[_0x402596(0x3c9)](_0x811a0d);}for(const _0x27b0dc of _0x334197){const _0x5d3966=_0x112190[_0x402596(0x122)](_0x27b0dc[_0x402596(0x2d8)]()['trim']());_0x5d3966>=0x0&&_0x5d3966<=0x7&&_0x2fae61['isDebuffAffected'](_0x5d3966)&&_0x2fae61[_0x402596(0x3c9)](_0x5d3966);}}}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0x451),_0x54b91c=>{const _0x4402de=_0x3823ba;if(!SceneManager[_0x4402de(0xbc6)]())return;VisuMZ[_0x4402de(0xb9f)](_0x54b91c,_0x54b91c);const _0x50c9f0=_0x54b91c[_0x4402de(0x327)],_0x1d540b=VisuMZ[_0x4402de(0x140)](_0x54b91c['Targets']);for(const _0x6207a of _0x1d540b){if(_0x4402de(0xd5b)==='QvmNh'){if(!_0x6207a)continue;for(const _0x29adc1 of _0x50c9f0){_0x6207a[_0x4402de(0x6e7)](_0x29adc1);}}else{if(!_0x55faa4[_0x4402de(0xbc6)]())return;_0x33d508['ConvertParams'](_0x468d90,_0xd3d54f);const _0x29bdfc=_0x4675be[_0x4402de(0x131)],_0x2629b4={'arPenRate':_0x4bf221[_0x4402de(0xa99)],'arPenFlat':_0x24bee1[_0x4402de(0x46b)],'arRedRate':_0x3a78ba[_0x4402de(0xb12)],'arRedFlat':_0x406622[_0x4402de(0x700)]};_0x29bdfc[_0x4402de(0x37a)]=_0x2629b4;}}}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0x702),_0x5369e6=>{const _0x522f49=_0x3823ba;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x522f49(0xa3c)])return;VisuMZ[_0x522f49(0xb9f)](_0x5369e6,_0x5369e6);const _0x1b6da9=VisuMZ[_0x522f49(0x140)](_0x5369e6['Targets']),_0x2edc74=Number(_0x5369e6[_0x522f49(0xa05)]),_0x8fe04e=Number(_0x5369e6[_0x522f49(0x59a)]),_0x35276d=_0x5369e6[_0x522f49(0x472)];for(const _0x177aec of _0x1b6da9){if(!_0x177aec)continue;if(_0x35276d&&!_0x177aec['isStateAffected'](_0x2edc74)){if(_0x522f49(0x18f)!==_0x522f49(0xd44))_0x177aec[_0x522f49(0xa08)](_0x2edc74),_0x177aec[_0x522f49(0x4a2)](_0x2edc74,_0x8fe04e);else{if(_0x3c49ab[_0x522f49(0x6b7)]&&_0xd43836[_0x522f49(0x6b7)]){if(_0x23994e['_battler'][_0x522f49(0x4e0)]()&&_0x3f84be[_0x522f49(0x6b7)][_0x522f49(0x737)]())return 0x1;else{if(_0x11525f[_0x522f49(0x6b7)]['isActor']()&&_0x25cba1['_battler'][_0x522f49(0x737)]())return-0x1;}}}}else _0x177aec[_0x522f49(0x760)](_0x2edc74,_0x8fe04e);}}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0xbf3),_0x527c32=>{const _0x29fc0b=_0x3823ba;if(!SceneManager[_0x29fc0b(0xbc6)]())return;if(!Imported['VisuMZ_1_SkillsStatesCore'])return;VisuMZ['ConvertParams'](_0x527c32,_0x527c32);const _0x2ce04f=VisuMZ['CreateActionSequenceTargets'](_0x527c32[_0x29fc0b(0xad2)]),_0x4b7103=Number(_0x527c32[_0x29fc0b(0xa05)]),_0x468045=Math[_0x29fc0b(0xd19)](Number(_0x527c32[_0x29fc0b(0x59a)]),0x0),_0x401ded=_0x527c32[_0x29fc0b(0x472)];for(const _0x2f2f96 of _0x2ce04f){if(_0x29fc0b(0xbcb)===_0x29fc0b(0x418))this[_0x29fc0b(0x782)]=(this[_0x29fc0b(0x782)]*(_0x6120b9-0x1)+this[_0x29fc0b(0x924)])/_0x408f70;else{if(!_0x2f2f96)continue;_0x401ded&&!_0x2f2f96[_0x29fc0b(0x479)](_0x4b7103)&&_0x2f2f96['addState'](_0x4b7103),_0x2f2f96[_0x29fc0b(0x4a2)](_0x4b7103,_0x468045);}}}),PluginManager[_0x3823ba(0xa46)](pluginData['name'],_0x3823ba(0xcfa),_0x46060b=>{const _0x5e149e=_0x3823ba;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x5e149e(0xaf5)])return;if(!BattleManager[_0x5e149e(0xbbc)]())return;VisuMZ[_0x5e149e(0xb9f)](_0x46060b,_0x46060b);const _0x52fd7b=_0x46060b[_0x5e149e(0x8d4)],_0x5b4e65=VisuMZ[_0x5e149e(0x140)](_0x46060b[_0x5e149e(0xad2)]),_0x4d346e=_0x46060b['ForceExploited'],_0x4183aa=_0x46060b['Exploiter'],_0x18bbb8=_0x46060b['ForceExploiter'],_0x4d9986=BattleManager['_action'];if(_0x52fd7b)for(const _0x79a31f of _0x5b4e65){if(!_0x79a31f)continue;if(_0x79a31f===user)continue;if(_0x4d346e)_0x79a31f['setSTBExploited'](![]);_0x79a31f[_0x5e149e(0xd9e)](BattleManager[_0x5e149e(0x527)],_0x4d9986);}if(_0x4183aa&&BattleManager[_0x5e149e(0x527)]){if(_0x5e149e(0xa85)!==_0x5e149e(0xa85))this[_0x5e149e(0xc43)](_0x3fda4f);else{if(_0x18bbb8)BattleManager['_subject'][_0x5e149e(0x853)](![]);const _0x490d43=_0x5b4e65[0x0];BattleManager[_0x5e149e(0x409)](_0x490d43,_0x4d9986);}}}),PluginManager['registerCommand'](pluginData[_0x3823ba(0x450)],_0x3823ba(0x13b),_0x291590=>{const _0x501d06=_0x3823ba;if(!SceneManager[_0x501d06(0xbc6)]())return;if(!Imported[_0x501d06(0xaf5)])return;if(!BattleManager['isSTB']())return;VisuMZ['ConvertParams'](_0x291590,_0x291590);const _0x3ee309=_0x291590[_0x501d06(0x552)];BattleManager[_0x501d06(0x527)]&&BattleManager[_0x501d06(0x527)][_0x501d06(0xc83)](_0x3ee309);}),PluginManager['registerCommand'](pluginData[_0x3823ba(0x450)],_0x3823ba(0xccd),_0x163cf2=>{const _0x2fd05e=_0x3823ba;if(!SceneManager[_0x2fd05e(0xbc6)]())return;if(!Imported['VisuMZ_2_BattleSystemSTB'])return;if(!BattleManager['isSTB']())return;VisuMZ[_0x2fd05e(0xb9f)](_0x163cf2,_0x163cf2);let _0x389711=_0x163cf2[_0x2fd05e(0x552)];if(BattleManager['_subject']){BattleManager[_0x2fd05e(0x527)][_0x2fd05e(0xd4c)]=BattleManager['_subject']['_actions']||[];while(_0x389711--){if('IemWc'===_0x2fd05e(0x6df))return _0xee31b8;else{if(BattleManager[_0x2fd05e(0x527)][_0x2fd05e(0xd4c)][_0x2fd05e(0xb23)]<=0x0)break;BattleManager['_subject']['_actions'][_0x2fd05e(0x32c)]();}}}}),PluginManager[_0x3823ba(0xa46)](pluginData['name'],_0x3823ba(0x603),_0x2b574a=>{const _0x129123=_0x3823ba;if(!SceneManager[_0x129123(0xbc6)]())return;if(!Imported['VisuMZ_2_WeaponSwapSystem'])return;VisuMZ[_0x129123(0xb9f)](_0x2b574a,_0x2b574a);const _0x59dcba=VisuMZ['CreateActionSequenceTargets'](_0x2b574a['Targets']),_0x27fbba=_0x2b574a[_0x129123(0xc4b)];for(const _0x42d5e3 of _0x59dcba){if(!_0x42d5e3)continue;if(!_0x42d5e3[_0x129123(0x4e0)]())continue;_0x42d5e3[_0x129123(0x24f)](_0x27fbba);}}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],'ActSeq_Mechanics_TextPopup',_0x39944c=>{const _0x8473f9=_0x3823ba;if(!SceneManager[_0x8473f9(0xbc6)]())return;VisuMZ[_0x8473f9(0xb9f)](_0x39944c,_0x39944c);const _0x149882=VisuMZ[_0x8473f9(0x140)](_0x39944c[_0x8473f9(0xad2)]),_0x458f21=_0x39944c[_0x8473f9(0x729)],_0x321e62={'textColor':ColorManager[_0x8473f9(0x2cf)](_0x39944c[_0x8473f9(0x63a)]),'flashColor':_0x39944c[_0x8473f9(0x6f1)],'flashDuration':_0x39944c['FlashDuration']};for(const _0x490ebd of _0x149882){if(_0x8473f9(0x68c)===_0x8473f9(0x68c)){if(!_0x490ebd)continue;_0x490ebd[_0x8473f9(0x193)](_0x458f21,_0x321e62);}else this['_mainSprite']['bitmap'][_0x8473f9(0x64e)]=this[_0x8473f9(0x6b7)]['battlerSmoothImage']();}}),PluginManager[_0x3823ba(0xa46)](pluginData['name'],_0x3823ba(0xc6c),_0x7db4b1=>{const _0x1cb6aa=_0x3823ba;if(!SceneManager[_0x1cb6aa(0xbc6)]())return;VisuMZ[_0x1cb6aa(0xb9f)](_0x7db4b1,_0x7db4b1);const _0x1d695e=VisuMZ[_0x1cb6aa(0x140)](_0x7db4b1[_0x1cb6aa(0xad2)]);let _0x26e89d=$gameVariables[_0x1cb6aa(0x16d)](_0x7db4b1[_0x1cb6aa(0xb8a)]);Imported[_0x1cb6aa(0x32f)]&&_0x7db4b1['DigitGrouping']&&(_0x26e89d=VisuMZ[_0x1cb6aa(0x92f)](_0x26e89d));const _0x955071=String(_0x26e89d),_0x39fe85={'textColor':ColorManager[_0x1cb6aa(0x2cf)](_0x7db4b1[_0x1cb6aa(0x63a)]),'flashColor':_0x7db4b1[_0x1cb6aa(0x6f1)],'flashDuration':_0x7db4b1[_0x1cb6aa(0x3aa)]};for(const _0xe794e1 of _0x1d695e){if(_0x1cb6aa(0xc2f)!=='iqrCi'){if(!_0xe794e1)continue;_0xe794e1[_0x1cb6aa(0x193)](_0x955071,_0x39fe85);}else{const _0xa43741=this[_0x1cb6aa(0x9c0)];if(_0xa43741)_0xa43741[_0x1cb6aa(0xd07)]=_0x46fc2f;this[_0x1cb6aa(0x34f)]();}}}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0x6bc),_0x5013d6=>{const _0x292e2f=_0x3823ba;if(!SceneManager['isSceneBattle']())return;const _0x1ccd25=$gameTemp[_0x292e2f(0xaa7)]();if(!_0x1ccd25)return;_0x1ccd25[_0x292e2f(0xab0)](_0x292e2f(0x223));}),PluginManager['registerCommand'](pluginData['name'],_0x3823ba(0x5fe),_0x40f018=>{const _0x230cdd=_0x3823ba;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x230cdd(0xb9f)](_0x40f018,_0x40f018);const _0x1aacb1=VisuMZ[_0x230cdd(0x140)](_0x40f018[_0x230cdd(0xad2)]);for(const _0x294fb2 of _0x1aacb1){if(!_0x294fb2)continue;_0x294fb2['clearFreezeMotion']();}}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],'ActSeq_Motion_FreezeMotionFrame',_0x26dfe7=>{const _0x10398b=_0x3823ba;if(!SceneManager[_0x10398b(0xbc6)]())return;VisuMZ[_0x10398b(0xb9f)](_0x26dfe7,_0x26dfe7);const _0x1c0709=VisuMZ['CreateActionSequenceTargets'](_0x26dfe7['Targets']),_0x590778=_0x26dfe7[_0x10398b(0x3b4)]['toLowerCase']()[_0x10398b(0xaf4)]();let _0x1232fe=_0x26dfe7[_0x10398b(0x2eb)];const _0x62396e=_0x26dfe7[_0x10398b(0x43e)];![_0x10398b(0x484),_0x10398b(0x49f),_0x10398b(0x9e3),_0x10398b(0x687)][_0x10398b(0x97e)](_0x590778)&&(_0x1232fe=![]);for(const _0x797a33 of _0x1c0709){if(_0x10398b(0x9af)!==_0x10398b(0x9af))this[_0x10398b(0x790)]();else{if(!_0x797a33)continue;_0x797a33[_0x10398b(0x3a4)](_0x590778,_0x1232fe,_0x62396e);}}}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0xad1),_0x28d4c1=>{const _0x1bbf79=_0x3823ba;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x1bbf79(0xb9f)](_0x28d4c1,_0x28d4c1);const _0x275248=VisuMZ['CreateActionSequenceTargets'](_0x28d4c1[_0x1bbf79(0xad2)]),_0x11da71=_0x28d4c1[_0x1bbf79(0x3b4)][_0x1bbf79(0x8cf)]()[_0x1bbf79(0xaf4)](),_0x5ec131=_0x28d4c1[_0x1bbf79(0x2eb)];for(const _0xd48bea of _0x275248){if(!_0xd48bea)continue;_0xd48bea[_0x1bbf79(0x39e)]=_0x5ec131;if(_0x11da71['match'](/ATTACK[ ](\d+)/i))_0xd48bea[_0x1bbf79(0xb98)](Number(RegExp['$1']));else _0x11da71==='attack'?_0xd48bea[_0x1bbf79(0x2c3)]():_0xd48bea[_0x1bbf79(0xb90)](_0x11da71);if(!_0x5ec131)_0x1bbf79(0x8b2)!==_0x1bbf79(0x8b2)?(this[_0x1bbf79(0xa71)]=this[_0x1bbf79(0x36e)]['slice'](0x0),this[_0x1bbf79(0x751)]=0x0,this[_0x1bbf79(0xa2b)]=this['_allTargets'][0x0]||null,this['_phase']=_0x1bbf79(0xb3d)):_0xd48bea[_0x1bbf79(0x9fd)](0x0);else{if(_0x5ec131&&[_0x1bbf79(0x49f),_0x1bbf79(0x9e3),'missle'][_0x1bbf79(0x97e)](_0x11da71)){}}_0xd48bea['_showWeapon']=undefined;}}),PluginManager['registerCommand'](pluginData[_0x3823ba(0x450)],_0x3823ba(0xc8b),_0x166d2e=>{const _0x3e405d=_0x3823ba;if(!SceneManager[_0x3e405d(0xbc6)]())return;VisuMZ[_0x3e405d(0xb9f)](_0x166d2e,_0x166d2e);const _0x5e7643=BattleManager[_0x3e405d(0x131)];if(!_0x5e7643)return;if(!_0x5e7643[_0x3e405d(0x733)]())return;const _0x1f09ac=VisuMZ[_0x3e405d(0x140)](_0x166d2e[_0x3e405d(0xad2)]);for(const _0x3f4fee of _0x1f09ac){if('mzdze'!==_0x3e405d(0x243)){if(!_0x3f4fee)continue;_0x3f4fee[_0x3e405d(0xba8)](_0x5e7643);}else{_0x9778ad[_0x3e405d(0x4f3)][_0x3e405d(0xd69)]['call'](this,_0x444704,_0x2fb2d5);if(!_0x1a99aa[_0x3e405d(0x854)]())return;if(_0x27c876[_0x3e405d(0x9fa)]!==_0x2f60ac['deathStateId']())return;let _0x515316=_0xcb713d['value1'];!this[_0x3e405d(0x8ae)]()&&(_0x515316*=_0x4c2c35[_0x3e405d(0x54a)](_0x396e48[_0x3e405d(0x9fa)]),_0x515316*=this[_0x3e405d(0x6a8)](_0x17c367)),_0x5b9692[_0x3e405d(0x30f)]()<_0x515316&&(_0x3010e9[_0x3e405d(0x5d9)]=!![],this[_0x3e405d(0xc40)](_0x183ded));}}}),PluginManager[_0x3823ba(0xa46)](pluginData['name'],'ActSeq_Motion_RefreshMotion',_0x2d9ca8=>{const _0x576519=_0x3823ba;if(!SceneManager[_0x576519(0xbc6)]())return;VisuMZ['ConvertParams'](_0x2d9ca8,_0x2d9ca8);const _0x43c3a9=VisuMZ[_0x576519(0x140)](_0x2d9ca8[_0x576519(0xad2)]);for(const _0x442f63 of _0x43c3a9){if(_0x576519(0x2c5)!==_0x576519(0x267)){if(!_0x442f63)continue;if(!_0x442f63[_0x576519(0x798)]())continue;_0x442f63['battler']()['refreshMotion']();}else{if(!_0x12c4e1[_0x576519(0x4f3)][_0x576519(0x242)][_0x576519(0xb40)][_0x576519(0x952)])return;const _0x23f6c4=_0x1f777b[_0x576519(0x947)],_0x24f5a0=_0x576519(0x947);this[_0x576519(0xac9)](_0x23f6c4,_0x24f5a0);}}}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0x2e9),_0x101cb5=>{const _0x2ed413=_0x3823ba;if(!SceneManager[_0x2ed413(0xbc6)]())return;VisuMZ[_0x2ed413(0xb9f)](_0x101cb5,_0x101cb5);const _0x976471=$gameTemp[_0x2ed413(0xaa7)](),_0x2c7bee=_0x101cb5['MotionFrameWait']*Sprite_Battler['_motionSpeed'];_0x976471[_0x2ed413(0x498)](_0x2c7bee);}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0xae9),_0x177fa2=>{const _0x402df7=_0x3823ba;if(!SceneManager[_0x402df7(0xbc6)]())return;VisuMZ[_0x402df7(0xb9f)](_0x177fa2,_0x177fa2);const _0x55ad13=$gameTemp[_0x402df7(0xaa7)](),_0x299d70=BattleManager['_action'];if(!_0x55ad13||!_0x299d70)return;if(!_0x299d70['item']())return;const _0x3050d4=VisuMZ['CreateActionSequenceTargets'](_0x177fa2[_0x402df7(0xad2)]);for(const _0x12c888 of _0x3050d4){if(!_0x12c888)continue;_0x12c888[_0x402df7(0xa5f)](_0x299d70);}if(_0x177fa2[_0x402df7(0x9c5)])_0x55ad13[_0x402df7(0xab0)](_0x402df7(0x5a9));}),PluginManager[_0x3823ba(0xa46)](pluginData['name'],'ActSeq_Movement_HomeMoveBy',_0xa878a4=>{const _0xda94b5=_0x3823ba;if(!SceneManager[_0xda94b5(0xbc6)]())return;if(!$gameSystem['isSideView']())return;VisuMZ['ConvertParams'](_0xa878a4,_0xa878a4);const _0x44956a=$gameTemp[_0xda94b5(0xaa7)](),_0x382a9b=VisuMZ[_0xda94b5(0x140)](_0xa878a4[_0xda94b5(0xad2)]),_0x58b733=_0xa878a4[_0xda94b5(0x2fc)],_0x476ef2=_0xa878a4[_0xda94b5(0xcb6)],_0x42aca6=_0xa878a4[_0xda94b5(0x6bb)],_0x3d193f=_0xa878a4[_0xda94b5(0x438)],_0x151c24=_0xa878a4['FaceDirection'],_0xc006b6=_0xa878a4[_0xda94b5(0x890)],_0xd5ac=_0xa878a4[_0xda94b5(0x3b4)],_0x169c0d=_0xa878a4[_0xda94b5(0x9c5)];if(!_0x44956a)return;for(const _0x5bc7b8 of _0x382a9b){if(!_0x5bc7b8)continue;let _0x81a60c=_0x476ef2,_0x732204=_0x42aca6;if(_0x58b733['match'](/horz/i))_0x81a60c*=_0x5bc7b8[_0xda94b5(0x4e0)]()?-0x1:0x1;if(_0x58b733[_0xda94b5(0xd57)](/vert/i))_0x732204*=_0x5bc7b8[_0xda94b5(0x4e0)]()?-0x1:0x1;_0x5bc7b8[_0xda94b5(0x27a)](_0x81a60c,_0x732204,_0x3d193f,_0x151c24,_0xc006b6),_0x5bc7b8[_0xda94b5(0xb90)](_0xd5ac);}if(_0x169c0d)_0x44956a[_0xda94b5(0xab0)](_0xda94b5(0x5a9));}),PluginManager[_0x3823ba(0xa46)](pluginData['name'],_0x3823ba(0xad8),_0x377a51=>{const _0x2e325d=_0x3823ba;if(!SceneManager[_0x2e325d(0xbc6)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x2e325d(0xb9f)](_0x377a51,_0x377a51);const _0x1be444=$gameTemp[_0x2e325d(0xaa7)](),_0x440760=VisuMZ[_0x2e325d(0x140)](_0x377a51['Targets']),_0x2b124a=_0x377a51[_0x2e325d(0x226)],_0x3eaad6=_0x377a51['OffsetX'],_0x2a6fbd=_0x377a51[_0x2e325d(0x615)],_0x49126a=_0x377a51[_0x2e325d(0x438)],_0x2e0532=_0x377a51[_0x2e325d(0xa25)],_0x582b4d=_0x377a51['EasingType'],_0x287958=_0x377a51['MotionType'],_0x3a306f=_0x377a51[_0x2e325d(0x9c5)];if(!_0x1be444)return;for(const _0x552d1a of _0x440760){if('INBZy'===_0x2e325d(0x199)){this[_0x2e325d(0x316)]=this[_0x2e325d(0x634)]()[_0x2e325d(0x450)]();const _0x4a79b0=this[_0x2e325d(0x699)](this[_0x2e325d(0x316)])[_0x2e325d(0x204)],_0x43cb46=_0x2bcb37['round']((this[_0x2e325d(0x9ac)]-_0x4a79b0)/0x2);this[_0x2e325d(0x7a4)](this[_0x2e325d(0x316)],_0x43cb46,0x0,_0x4a79b0+0x8);}else{if(!_0x552d1a)continue;const _0x4cb391=_0x377a51['DestinationJS'](_0x552d1a)||{'x':0x0,'y':0x0};let _0x106a91=_0x4cb391['x'],_0x9588ef=_0x4cb391['y'];if(_0x2b124a[_0x2e325d(0xd57)](/none/i)){if(_0x2e325d(0xc9f)!==_0x2e325d(0xc9f)){const _0x248517=this[_0x2e325d(0xa73)]();(_0x248517===_0x2e325d(0x43a)||this[_0x2e325d(0x6bd)]())&&(this[_0x2e325d(0x35c)]['open'](),this['_skillWindow'][_0x2e325d(0xa4e)]&&this[_0x2e325d(0x35c)]['show'](),this[_0x2e325d(0x35b)][_0x2e325d(0x1b5)](),this['_itemWindow'][_0x2e325d(0xa4e)]&&this[_0x2e325d(0x35b)][_0x2e325d(0x39d)]());}else _0x106a91+=_0x3eaad6,_0x9588ef+=_0x2a6fbd;}else{if(_0x2b124a[_0x2e325d(0xd57)](/horz/i)&&_0x2b124a[_0x2e325d(0xd57)](/vert/i))_0x2e325d(0x4ac)===_0x2e325d(0x4ac)?(_0x106a91+=_0x552d1a[_0x2e325d(0x4e0)]()?-_0x3eaad6:_0x3eaad6,_0x9588ef+=_0x552d1a['isActor']()?-_0x2a6fbd:_0x2a6fbd):_0x2761c2[_0x2e325d(0x8d6)][_0x2e325d(0x1e7)][_0x2e325d(0x162)](this);else{if(_0x2b124a[_0x2e325d(0xd57)](/horz/i))_0x106a91+=_0x552d1a[_0x2e325d(0x4e0)]()?-_0x3eaad6:_0x3eaad6,_0x9588ef+=_0x2a6fbd;else{if(_0x2b124a[_0x2e325d(0xd57)](/vert/i)){if(_0x2e325d(0x234)===_0x2e325d(0x234))_0x106a91+=_0x3eaad6,_0x9588ef+=_0x552d1a['isActor']()?-_0x2a6fbd:_0x2a6fbd;else{const _0x3248b3=_0x4f99f9[0x0][_0x2e325d(0xabf)](_0x29a539[0x0],_0xd1a6e0[0x0]),_0x21da01=_0x5735c4[0x1][_0x2e325d(0xabf)](_0x3e2383[0x1],_0x45b582[0x1])[_0x2e325d(0xaf4)](),_0x128f94=new _0x37b8c7(_0x9652a7[_0x2e325d(0xabf)](_0x21da01),'i');_0x35180e[_0x3248b3]=_0x128f94;}}}}}_0x552d1a['moveBattlerHomeToPoint'](_0x106a91,_0x9588ef,_0x49126a,_0x2e0532,_0x582b4d,-0x1),_0x552d1a['requestMotion'](_0x287958);}}if(_0x3a306f)_0x1be444[_0x2e325d(0xab0)](_0x2e325d(0x5a9));}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],'ActSeq_Movement_HomeMoveToPoint',_0x2d1648=>{const _0xffac17=_0x3823ba;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0xffac17(0x839)]())return;VisuMZ[_0xffac17(0xb9f)](_0x2d1648,_0x2d1648);const _0x3c2613=$gameTemp[_0xffac17(0xaa7)](),_0x49c3c8=VisuMZ[_0xffac17(0x140)](_0x2d1648['Targets']),_0x210f02=_0x2d1648[_0xffac17(0x9a5)],_0x169ae5=_0x2d1648[_0xffac17(0x226)],_0x33a939=_0x2d1648[_0xffac17(0x24e)],_0x209130=_0x2d1648[_0xffac17(0x615)],_0x1e68db=_0x2d1648[_0xffac17(0x438)],_0x27e5d5=_0x2d1648['FaceDirection'],_0x5ce07c=_0x2d1648[_0xffac17(0x890)],_0x33543f=_0x2d1648[_0xffac17(0x3b4)],_0x4ca8d3=_0x2d1648[_0xffac17(0x9c5)];if(!_0x3c2613)return;for(const _0x3240d9 of _0x49c3c8){if('HJihi'!==_0xffac17(0x4d5)){if(!_0x3240d9)continue;let _0x208dba=_0x3240d9[_0xffac17(0x798)]()[_0xffac17(0x12d)],_0x2dcaff=_0x3240d9[_0xffac17(0x798)]()[_0xffac17(0xcf6)];if(_0x210f02[_0xffac17(0xd57)](/home/i)){if(_0xffac17(0x697)===_0xffac17(0x697))_0x208dba=_0x3240d9[_0xffac17(0x798)]()[_0xffac17(0x43c)],_0x2dcaff=_0x3240d9[_0xffac17(0x798)]()['_homeY'];else{if(this[_0xffac17(0x7d5)]()){const _0x201045=this[_0xffac17(0x733)]()['scope'];if(_0x201045[_0xffac17(0xd57)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];}return![];}}else{if(_0x210f02[_0xffac17(0xd57)](/center/i))_0x208dba=Graphics[_0xffac17(0xc13)]/0x2,_0x2dcaff=Graphics[_0xffac17(0x53c)]/0x2;else _0x210f02[_0xffac17(0xd57)](/point (\d+), (\d+)/i)&&(_0x208dba=Number(RegExp['$1']),_0x2dcaff=Number(RegExp['$2']));}if(_0x169ae5['match'](/none/i))_0x208dba+=_0x33a939,_0x2dcaff+=_0x209130;else{if(_0x169ae5['match'](/horz/i)&&_0x169ae5[_0xffac17(0xd57)](/vert/i)){if(_0xffac17(0x570)!=='gbWme')_0x208dba+=_0x3240d9[_0xffac17(0x4e0)]()?-_0x33a939:_0x33a939,_0x2dcaff+=_0x3240d9[_0xffac17(0x4e0)]()?-_0x209130:_0x209130;else return this['_distortionSprite']||this[_0xffac17(0x1f8)]||this;}else{if(_0x169ae5[_0xffac17(0xd57)](/horz/i))_0xffac17(0x606)!==_0xffac17(0x606)?_0x56dfc2+=_0x334b50:(_0x208dba+=_0x3240d9[_0xffac17(0x4e0)]()?-_0x33a939:_0x33a939,_0x2dcaff+=_0x209130);else _0x169ae5[_0xffac17(0xd57)](/vert/i)&&(_0x208dba+=_0x33a939,_0x2dcaff+=_0x3240d9['isActor']()?-_0x209130:_0x209130);}}_0x3240d9[_0xffac17(0x392)](_0x208dba,_0x2dcaff,_0x1e68db,_0x27e5d5,_0x5ce07c,-0x1),_0x3240d9[_0xffac17(0xb90)](_0x33543f);}else{const _0x1def03=_0x6b295c['BattleCore'][_0xffac17(0x242)][_0xffac17(0x911)],_0x28596e=_0x1def03[_0xffac17(0x8f7)],_0x517093=_0x589ddc[_0x28596e];if(_0x517093&&_0x1c5465['BattleCore'][_0xffac17(0x13d)](_0x28596e)){const _0x21109f=this[_0xffac17(0x1e2)]()?this[_0xffac17(0xa88)]:0x0,_0x5475d4=_0x517093[_0xffac17(0x934)];this['setupChild'](_0x5475d4,_0x21109f),this[_0xffac17(0xb92)]=_0x364cb2[_0xffac17(0x682)](this[_0xffac17(0xb92)]);const _0x70500b={'code':0xbc3,'indent':this[_0xffac17(0x10d)],'parameters':_0x54582e['makeDeepCopy'](_0x341fd6)};return this[_0xffac17(0xb92)][_0xffac17(0xb7a)](this[_0xffac17(0x73b)]+0x1,0x0,_0x70500b),!![];}else return _0x555099[_0xffac17(0x4f3)][_0xffac17(0xd79)][_0xffac17(0x162)](this,_0x4b62df);}}if(_0x4ca8d3)_0x3c2613[_0xffac17(0xab0)](_0xffac17(0x5a9));}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0xb1b),_0x1062ae=>{const _0x2f41dd=_0x3823ba;if(!SceneManager[_0x2f41dd(0xbc6)]())return;if(!$gameSystem[_0x2f41dd(0x839)]())return;VisuMZ[_0x2f41dd(0xb9f)](_0x1062ae,_0x1062ae);const _0x58b79d=$gameTemp[_0x2f41dd(0xaa7)](),_0x5afc09=VisuMZ[_0x2f41dd(0x140)](_0x1062ae['Targets1']),_0x589e9a=VisuMZ[_0x2f41dd(0x140)](_0x1062ae[_0x2f41dd(0x1e5)]),_0x8aa9c2=_0x1062ae[_0x2f41dd(0x684)];let _0x50b224=_0x1062ae['MeleeDistance'];const _0x1daee8=_0x1062ae['OffsetAdjust'],_0x565388=_0x1062ae[_0x2f41dd(0x24e)],_0x47c302=_0x1062ae[_0x2f41dd(0x615)],_0x1798f4=_0x1062ae[_0x2f41dd(0x438)],_0x33b7f4=_0x1062ae['FaceDirection'],_0x5ce497=_0x1062ae[_0x2f41dd(0x890)],_0x486e4c=_0x1062ae['MotionType'],_0xc799d8=_0x1062ae[_0x2f41dd(0x9c5)],_0x37ef27=Math[_0x2f41dd(0x28a)](..._0x589e9a['map'](_0x28c4f2=>_0x28c4f2['battler']()[_0x2f41dd(0x12d)]-_0x28c4f2[_0x2f41dd(0x798)]()['mainSpriteWidth']()/0x2)),_0x27aa07=Math[_0x2f41dd(0xd19)](..._0x589e9a[_0x2f41dd(0x4d0)](_0x57409f=>_0x57409f[_0x2f41dd(0x798)]()[_0x2f41dd(0x12d)]+_0x57409f[_0x2f41dd(0x798)]()[_0x2f41dd(0xbdb)]()/0x2)),_0x37ba42=Math[_0x2f41dd(0x28a)](..._0x589e9a['map'](_0x5aca6d=>_0x5aca6d['battler']()['_baseY']-_0x5aca6d['battler']()[_0x2f41dd(0x5ba)]())),_0x3893e0=Math[_0x2f41dd(0xd19)](..._0x589e9a[_0x2f41dd(0x4d0)](_0x2b75a8=>_0x2b75a8['battler']()[_0x2f41dd(0xcf6)])),_0x49fc36=_0x589e9a[_0x2f41dd(0x3a2)](_0x3562f1=>_0x3562f1['isActor']())[_0x2f41dd(0xb23)],_0x4f0303=_0x589e9a[_0x2f41dd(0x3a2)](_0x1c491f=>_0x1c491f[_0x2f41dd(0x737)]())[_0x2f41dd(0xb23)];let _0x338c98=0x0,_0x40a8b8=0x0;if(_0x8aa9c2[_0x2f41dd(0xd57)](/front/i))_0x2f41dd(0x8c4)===_0x2f41dd(0x8c4)?_0x338c98=_0x49fc36>=_0x4f0303?_0x37ef27:_0x27aa07:this[_0x2f41dd(0xa4b)]();else{if(_0x8aa9c2[_0x2f41dd(0xd57)](/middle/i))_0x338c98=(_0x37ef27+_0x27aa07)/0x2,_0x50b224=-0x1;else{if(_0x8aa9c2['match'](/back/i)){if(_0x2f41dd(0x44c)!==_0x2f41dd(0x51f))_0x338c98=_0x49fc36>=_0x4f0303?_0x27aa07:_0x37ef27;else return this['hasSvBattler']()&&this['svBattlerName']()[_0x2f41dd(0xd57)](/\$/i);}}}if(_0x8aa9c2[_0x2f41dd(0xd57)](/head/i))_0x40a8b8=_0x37ba42;else{if(_0x8aa9c2['match'](/center/i))_0x40a8b8=(_0x37ba42+_0x3893e0)/0x2;else _0x8aa9c2[_0x2f41dd(0xd57)](/base/i)&&('HouMG'!==_0x2f41dd(0xc81)?_0x10a0ea?(this[_0x2f41dd(0x837)]['x']=(_0x1e9f8a['width']-_0x502a79[_0x2f41dd(0xc13)])/0x2,this['_windowLayer']['y']=(_0x2d0933[_0x2f41dd(0xd6d)]-_0x434e39['boxHeight'])/0x2):(this[_0x2f41dd(0x837)]['x']=_0x43a95c[_0x2f41dd(0x204)]*0xa,this[_0x2f41dd(0x837)]['y']=_0x4effd8[_0x2f41dd(0xd6d)]*0xa):_0x40a8b8=_0x3893e0);}if(!_0x58b79d)return;for(const _0x56f6b2 of _0x5afc09){if(_0x2f41dd(0x8e4)!=='ymNmG'){if(!_0x56f6b2)continue;let _0x18d328=_0x338c98,_0x158943=_0x40a8b8;if(_0x1daee8[_0x2f41dd(0xd57)](/none/i))_0x18d328+=_0x565388,_0x158943+=_0x47c302;else{if(_0x1daee8[_0x2f41dd(0xd57)](/horz/i)&&_0x1daee8[_0x2f41dd(0xd57)](/vert/i)){if(_0x2f41dd(0x496)!==_0x2f41dd(0x496)){const _0x21d95e=_0x20a008['x']+_0x386d40['floor']((_0x284c06[_0x2f41dd(0x204)]-_0x58dacd)/0x2);this[_0x2f41dd(0x7a4)](_0x1ec240,_0x21d95e,_0x539485['y'],_0x4be171);}else _0x18d328+=_0x56f6b2[_0x2f41dd(0x4e0)]()?-_0x565388:_0x565388,_0x158943+=_0x56f6b2[_0x2f41dd(0x4e0)]()?-_0x47c302:_0x47c302;}else{if(_0x1daee8[_0x2f41dd(0xd57)](/horz/i))_0x2f41dd(0xd1f)!==_0x2f41dd(0x3ef)?(_0x18d328+=_0x56f6b2['isActor']()?-_0x565388:_0x565388,_0x158943+=_0x47c302):(_0x2dd63f(_0x4a9a66[_0x2f41dd(0xabf)](_0x2f41dd(0xb49))),_0x3681ae[_0x2f41dd(0x824)]());else{if(_0x1daee8['match'](/vert/i)){if(_0x2f41dd(0x5ee)===_0x2f41dd(0x5ee))_0x18d328+=_0x565388,_0x158943+=_0x56f6b2[_0x2f41dd(0x4e0)]()?-_0x47c302:_0x47c302;else return!![];}}}}_0x56f6b2['moveBattlerHomeToPoint'](_0x18d328,_0x158943,_0x1798f4,_0x33b7f4,_0x5ce497,_0x50b224),_0x56f6b2[_0x2f41dd(0xb90)](_0x486e4c);}else _0x27bafd[_0x2f41dd(0x179)]['SmoothImage']=!![];}if(_0xc799d8)_0x58b79d[_0x2f41dd(0xab0)](_0x2f41dd(0x5a9));}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0x1cc),_0x16740f=>{const _0x356547=_0x3823ba;if(!SceneManager[_0x356547(0xbc6)]())return;if(!$gameSystem[_0x356547(0x839)]())return;VisuMZ[_0x356547(0xb9f)](_0x16740f,_0x16740f);const _0xbb7fa3=VisuMZ[_0x356547(0x140)](_0x16740f[_0x356547(0xad2)]);let _0x3e2f21=_0x16740f['Direction'][_0x356547(0xd57)](/back/i);for(const _0x1b95f6 of _0xbb7fa3){if('PmPbQ'===_0x356547(0x401)){const _0x23440b=new _0x189b9d();_0x23440b[_0x356547(0x850)]=_0x407d43[_0x356547(0x976)](_0x227604[_0x356547(0x1db)]),_0x23440b['x']=_0x56e628[_0x356547(0x666)]||0x0,_0x23440b['y']=_0x54f717[_0x356547(0xb8b)]||0x0,this['addChild'](_0x23440b),this['_frontAttachmentSprite']=_0x23440b;}else{if(!_0x1b95f6)continue;if(_0x16740f[_0x356547(0x802)]['match'](/rand/i))_0x3e2f21=Math[_0x356547(0x407)](0x2);_0x1b95f6['setBattlerFlip'](!!_0x3e2f21);}}}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0x468),_0x32666e=>{const _0x4b1455=_0x3823ba;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x4b1455(0x839)]())return;VisuMZ[_0x4b1455(0xb9f)](_0x32666e,_0x32666e);const _0x41dd58=VisuMZ[_0x4b1455(0x140)](_0x32666e[_0x4b1455(0xad2)]),_0x2cf3d8=_0x32666e[_0x4b1455(0x475)];for(const _0x26aa82 of _0x41dd58){if(!_0x26aa82)continue;const _0x13ed20=_0x32666e[_0x4b1455(0x3a7)](_0x26aa82)||{'x':0x0,'y':0x0};let _0x19eecb=_0x13ed20['x'],_0x3d7aa9=_0x13ed20['y'];_0x26aa82[_0x4b1455(0x916)](Math[_0x4b1455(0x282)](_0x19eecb),Math[_0x4b1455(0x282)](_0x3d7aa9),!!_0x2cf3d8);}}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0xbf2),_0x4420fa=>{const _0x39cd13=_0x3823ba;if(!SceneManager[_0x39cd13(0xbc6)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x39cd13(0xb9f)](_0x4420fa,_0x4420fa);const _0x22e989=VisuMZ[_0x39cd13(0x140)](_0x4420fa[_0x39cd13(0xad2)]);let _0x39c0fb=_0x4420fa['Point'];const _0x251563=_0x4420fa[_0x39cd13(0x475)];for(const _0x7fe5f9 of _0x22e989){if(!_0x7fe5f9)continue;let _0x2d78ad=_0x7fe5f9[_0x39cd13(0x798)]()[_0x39cd13(0x12d)],_0x5eb398=_0x7fe5f9[_0x39cd13(0x798)]()[_0x39cd13(0xcf6)];if(_0x39c0fb[_0x39cd13(0xd57)](/home/i))_0x2d78ad=_0x7fe5f9[_0x39cd13(0x798)]()[_0x39cd13(0x43c)],_0x5eb398=_0x7fe5f9[_0x39cd13(0x798)]()['_homeY'];else{if(_0x39c0fb[_0x39cd13(0xd57)](/center/i))_0x39cd13(0xcae)==='YQVRO'?(_0x2d78ad=Graphics[_0x39cd13(0xc13)]/0x2,_0x5eb398=Graphics[_0x39cd13(0x53c)]/0x2):_0x57cea8[_0x39cd13(0x7ed)](_0x3e2977[_0x28b95f]);else{if(_0x39c0fb[_0x39cd13(0xd57)](/point (\d+), (\d+)/i)){if(_0x39cd13(0x15b)!==_0x39cd13(0x15b))return this['item']()?_0x4a3d03[_0x39cd13(0x4f3)][_0x39cd13(0x2ed)][_0x39cd13(0x162)](this):0x0;else _0x2d78ad=Number(RegExp['$1']),_0x5eb398=Number(RegExp['$2']);}}}_0x7fe5f9[_0x39cd13(0x916)](Math['round'](_0x2d78ad),Math[_0x39cd13(0x282)](_0x5eb398),!!_0x251563);}}),PluginManager['registerCommand'](pluginData[_0x3823ba(0x450)],'ActSeq_Movement_FaceTarget',_0x55f077=>{const _0x15e570=_0x3823ba;if(!SceneManager[_0x15e570(0xbc6)]())return;if(!$gameSystem[_0x15e570(0x839)]())return;VisuMZ[_0x15e570(0xb9f)](_0x55f077,_0x55f077);const _0x290214=VisuMZ['CreateActionSequenceTargets'](_0x55f077[_0x15e570(0xbf6)]),_0x1cae60=VisuMZ[_0x15e570(0x140)](_0x55f077[_0x15e570(0x1e5)]),_0x467c96=_0x1cae60[_0x15e570(0x4d0)](_0x272b75=>_0x272b75&&_0x272b75[_0x15e570(0x798)]()?_0x272b75[_0x15e570(0x798)]()[_0x15e570(0x12d)]:0x0)/(_0x1cae60['length']||0x1),_0x237c6f=_0x1cae60['map'](_0x5794d4=>_0x5794d4&&_0x5794d4[_0x15e570(0x798)]()?_0x5794d4['battler']()[_0x15e570(0xcf6)]:0x0)/(_0x1cae60[_0x15e570(0xb23)]||0x1),_0x317c86=_0x55f077[_0x15e570(0x475)];for(const _0x3a8836 of _0x290214){if(!_0x3a8836)continue;_0x3a8836['setBattlerFacePoint'](Math[_0x15e570(0x282)](_0x467c96),Math[_0x15e570(0x282)](_0x237c6f),!!_0x317c86);}}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0xbd0),_0x1a3814=>{const _0x57d6f3=_0x3823ba;if(!SceneManager[_0x57d6f3(0xbc6)]())return;VisuMZ['ConvertParams'](_0x1a3814,_0x1a3814);const _0x2b7e3e=$gameTemp[_0x57d6f3(0xaa7)](),_0x1e2ed4=VisuMZ['CreateActionSequenceTargets'](_0x1a3814[_0x57d6f3(0xad2)]),_0x3033f8=_0x1a3814[_0x57d6f3(0xb70)],_0x336b47=_0x1a3814['Duration'],_0x68fb3b=_0x1a3814[_0x57d6f3(0x890)],_0x3cfb8e=_0x1a3814['WaitForFloat'];if(!_0x2b7e3e)return;for(const _0x52deb2 of _0x1e2ed4){if(!_0x52deb2)continue;_0x52deb2[_0x57d6f3(0x1e1)](_0x3033f8,_0x336b47,_0x68fb3b);}if(_0x3cfb8e)_0x2b7e3e[_0x57d6f3(0xab0)](_0x57d6f3(0x598));}),PluginManager['registerCommand'](pluginData[_0x3823ba(0x450)],_0x3823ba(0x188),_0x56d9ab=>{const _0x3e119e=_0x3823ba;if(!SceneManager[_0x3e119e(0xbc6)]())return;VisuMZ[_0x3e119e(0xb9f)](_0x56d9ab,_0x56d9ab);const _0x52f25b=$gameTemp[_0x3e119e(0xaa7)]();if(!_0x52f25b)return;const _0x26ebe5=VisuMZ[_0x3e119e(0x140)](_0x56d9ab[_0x3e119e(0xad2)]);for(const _0x421da0 of _0x26ebe5){if(_0x3e119e(0x1df)===_0x3e119e(0x346))return this[_0x3e119e(0x807)]>0x0;else{if(!_0x421da0)continue;_0x421da0[_0x3e119e(0x60f)]();}}BattleManager['_subject']&&BattleManager[_0x3e119e(0x527)][_0x3e119e(0x817)]();if(_0x56d9ab[_0x3e119e(0x9c5)])_0x52f25b['setWaitMode']('battleMove');}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0x43b),_0x361dae=>{const _0x2cc1f7=_0x3823ba;if(!SceneManager[_0x2cc1f7(0xbc6)]())return;VisuMZ[_0x2cc1f7(0xb9f)](_0x361dae,_0x361dae);const _0x13f180=$gameTemp[_0x2cc1f7(0xaa7)](),_0x450bdf=VisuMZ[_0x2cc1f7(0x140)](_0x361dae[_0x2cc1f7(0xad2)]),_0x312ceb=_0x361dae[_0x2cc1f7(0xb70)],_0x5819aa=_0x361dae[_0x2cc1f7(0x438)],_0x38c365=_0x361dae[_0x2cc1f7(0x655)];if(!_0x13f180)return;for(const _0x3ab9e2 of _0x450bdf){if(!_0x3ab9e2)continue;_0x3ab9e2[_0x2cc1f7(0x1ab)](_0x312ceb,_0x5819aa);}if(_0x38c365)_0x13f180[_0x2cc1f7(0xab0)]('battleJump');}),PluginManager['registerCommand'](pluginData['name'],_0x3823ba(0x462),_0x388d43=>{const _0x9f1935=_0x3823ba;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x9f1935(0x839)]())return;VisuMZ['ConvertParams'](_0x388d43,_0x388d43);const _0x322446=$gameTemp[_0x9f1935(0xaa7)](),_0x515ac2=VisuMZ['CreateActionSequenceTargets'](_0x388d43['Targets']),_0x414f39=_0x388d43[_0x9f1935(0x2fc)],_0x51e47b=_0x388d43['DistanceX'],_0xd2448e=_0x388d43['DistanceY'],_0x328c51=_0x388d43['Duration'],_0xf676fb=_0x388d43[_0x9f1935(0xa25)],_0x2eaf80=_0x388d43[_0x9f1935(0x890)],_0x3bb7b5=_0x388d43[_0x9f1935(0x3b4)],_0x5a99ff=_0x388d43[_0x9f1935(0x9c5)];if(!_0x322446)return;for(const _0x18bf3b of _0x515ac2){if(!_0x18bf3b)continue;let _0x38d171=_0x51e47b,_0x329b88=_0xd2448e;if(_0x414f39[_0x9f1935(0xd57)](/horz/i))_0x38d171*=_0x18bf3b[_0x9f1935(0x4e0)]()?-0x1:0x1;if(_0x414f39[_0x9f1935(0xd57)](/vert/i))_0x329b88*=_0x18bf3b[_0x9f1935(0x4e0)]()?-0x1:0x1;_0x18bf3b['moveBattlerDistance'](_0x38d171,_0x329b88,_0x328c51,_0xf676fb,_0x2eaf80),_0x18bf3b['requestMotion'](_0x3bb7b5);}if(_0x5a99ff)_0x322446[_0x9f1935(0xab0)](_0x9f1935(0x5a9));}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0x5b4),_0x2e6bbf=>{const _0x654137=_0x3823ba;if(!SceneManager[_0x654137(0xbc6)]())return;if(!$gameSystem[_0x654137(0x839)]())return;VisuMZ['ConvertParams'](_0x2e6bbf,_0x2e6bbf);const _0x150880=$gameTemp['getLastPluginCommandInterpreter'](),_0x51b69a=VisuMZ[_0x654137(0x140)](_0x2e6bbf[_0x654137(0xad2)]),_0x438333=_0x2e6bbf[_0x654137(0x226)],_0x1af376=_0x2e6bbf[_0x654137(0x24e)],_0x226eb0=_0x2e6bbf[_0x654137(0x615)],_0x474db2=_0x2e6bbf['Duration'],_0x2cbb05=_0x2e6bbf['FaceDirection'],_0x154135=_0x2e6bbf[_0x654137(0x890)],_0x5476ca=_0x2e6bbf[_0x654137(0x3b4)],_0x4b9c0a=_0x2e6bbf[_0x654137(0x9c5)];if(!_0x150880)return;for(const _0x9fda7d of _0x51b69a){if(_0x654137(0x3ce)!==_0x654137(0xa20)){if(!_0x9fda7d)continue;const _0x4b7b2b=_0x2e6bbf['DestinationJS'](_0x9fda7d)||{'x':0x0,'y':0x0};let _0x5c9d0e=_0x4b7b2b['x'],_0x3ab2fe=_0x4b7b2b['y'];if(_0x438333['match'](/none/i))_0x654137(0x1fb)!==_0x654137(0x1fb)?_0x52130c=_0x2be8f9>=_0x3825c3?_0x52dbba:_0x2802e9:(_0x5c9d0e+=_0x1af376,_0x3ab2fe+=_0x226eb0);else{if(_0x438333[_0x654137(0xd57)](/horz/i)&&_0x438333[_0x654137(0xd57)](/vert/i))_0x654137(0xc76)===_0x654137(0xc76)?(_0x5c9d0e+=_0x9fda7d['isActor']()?-_0x1af376:_0x1af376,_0x3ab2fe+=_0x9fda7d[_0x654137(0x4e0)]()?-_0x226eb0:_0x226eb0):(_0x1172b1['x']+=this['x'],_0x5c1730['y']+=this['y']);else{if(_0x438333[_0x654137(0xd57)](/horz/i))_0x5c9d0e+=_0x9fda7d['isActor']()?-_0x1af376:_0x1af376,_0x3ab2fe+=_0x226eb0;else _0x438333[_0x654137(0xd57)](/vert/i)&&(_0x5c9d0e+=_0x1af376,_0x3ab2fe+=_0x9fda7d['isActor']()?-_0x226eb0:_0x226eb0);}}_0x9fda7d[_0x654137(0x350)](_0x5c9d0e,_0x3ab2fe,_0x474db2,_0x2cbb05,_0x154135,-0x1),_0x9fda7d['requestMotion'](_0x5476ca);}else return _0x1c525a['BattleCore'][_0x654137(0xa2a)]['call'](this);}if(_0x4b9c0a)_0x150880[_0x654137(0xab0)](_0x654137(0x5a9));}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0x9a0),_0x2d4bfa=>{const _0x2bfe19=_0x3823ba;if(!SceneManager[_0x2bfe19(0xbc6)]())return;if(!$gameSystem[_0x2bfe19(0x839)]())return;VisuMZ[_0x2bfe19(0xb9f)](_0x2d4bfa,_0x2d4bfa);const _0x4de103=$gameTemp['getLastPluginCommandInterpreter'](),_0x55e7f6=VisuMZ['CreateActionSequenceTargets'](_0x2d4bfa['Targets']),_0x4d0407=_0x2d4bfa[_0x2bfe19(0x9a5)],_0xc399e0=_0x2d4bfa[_0x2bfe19(0x226)],_0x196d03=_0x2d4bfa[_0x2bfe19(0x24e)],_0x43216c=_0x2d4bfa[_0x2bfe19(0x615)],_0x322e95=_0x2d4bfa[_0x2bfe19(0x438)],_0x15281d=_0x2d4bfa[_0x2bfe19(0xa25)],_0x432729=_0x2d4bfa[_0x2bfe19(0x890)],_0x21d3b8=_0x2d4bfa['MotionType'],_0x38ba10=_0x2d4bfa[_0x2bfe19(0x9c5)];if(!_0x4de103)return;for(const _0x400ba4 of _0x55e7f6){if(!_0x400ba4)continue;let _0x3b21b2=_0x400ba4['battler']()[_0x2bfe19(0x12d)],_0x3ab2f0=_0x400ba4['battler']()[_0x2bfe19(0xcf6)];if(_0x4d0407[_0x2bfe19(0xd57)](/home/i))_0x3b21b2=_0x400ba4[_0x2bfe19(0x798)]()[_0x2bfe19(0x43c)],_0x3ab2f0=_0x400ba4[_0x2bfe19(0x798)]()[_0x2bfe19(0x372)];else{if(_0x4d0407['match'](/center/i))_0x3b21b2=Graphics[_0x2bfe19(0xc13)]/0x2,_0x3ab2f0=Graphics[_0x2bfe19(0x53c)]/0x2;else _0x4d0407[_0x2bfe19(0xd57)](/point (\d+), (\d+)/i)&&(_0x3b21b2=Number(RegExp['$1']),_0x3ab2f0=Number(RegExp['$2']));}if(_0xc399e0[_0x2bfe19(0xd57)](/none/i))_0x3b21b2+=_0x196d03,_0x3ab2f0+=_0x43216c;else{if(_0xc399e0['match'](/horz/i)&&_0xc399e0[_0x2bfe19(0xd57)](/vert/i))_0x3b21b2+=_0x400ba4['isActor']()?-_0x196d03:_0x196d03,_0x3ab2f0+=_0x400ba4['isActor']()?-_0x43216c:_0x43216c;else{if(_0xc399e0[_0x2bfe19(0xd57)](/horz/i))_0x2bfe19(0x190)===_0x2bfe19(0x190)?(_0x3b21b2+=_0x400ba4[_0x2bfe19(0x4e0)]()?-_0x196d03:_0x196d03,_0x3ab2f0+=_0x43216c):(this[_0x2bfe19(0x3e8)]++,this[_0x2bfe19(0xa4e)]=!![]);else{if(_0xc399e0['match'](/vert/i)){if(_0x2bfe19(0x9b6)!==_0x2bfe19(0x75d))_0x3b21b2+=_0x196d03,_0x3ab2f0+=_0x400ba4[_0x2bfe19(0x4e0)]()?-_0x43216c:_0x43216c;else{const _0xa9f46=this[_0x2bfe19(0x99c)]['svBattlerData']();this['bitmap']=new _0x2aa818(_0xa9f46[_0x2bfe19(0x204)],_0xa9f46[_0x2bfe19(0xd6d)]),this[_0x2bfe19(0x1f8)][_0x2bfe19(0x850)]=new _0x22a0b8(0x1,0x1);}}}}}_0x400ba4['moveBattlerToPoint'](_0x3b21b2,_0x3ab2f0,_0x322e95,_0x15281d,_0x432729,-0x1),_0x400ba4['requestMotion'](_0x21d3b8);}if(_0x38ba10)_0x4de103[_0x2bfe19(0xab0)](_0x2bfe19(0x5a9));}),PluginManager[_0x3823ba(0xa46)](pluginData['name'],_0x3823ba(0xa00),_0x430b50=>{const _0x56378c=_0x3823ba;if(!SceneManager[_0x56378c(0xbc6)]())return;if(!$gameSystem[_0x56378c(0x839)]())return;VisuMZ['ConvertParams'](_0x430b50,_0x430b50);const _0x19d41d=$gameTemp[_0x56378c(0xaa7)](),_0x200c5c=VisuMZ[_0x56378c(0x140)](_0x430b50['Targets1']),_0x253571=VisuMZ[_0x56378c(0x140)](_0x430b50['Targets2']),_0x1ae55c=_0x430b50['TargetLocation'];let _0x5e6463=_0x430b50[_0x56378c(0xb00)];const _0x44efb1=_0x430b50[_0x56378c(0x226)],_0x2c3e4d=_0x430b50[_0x56378c(0x24e)],_0x596553=_0x430b50[_0x56378c(0x615)],_0x4d6420=_0x430b50[_0x56378c(0x438)],_0x1b218f=_0x430b50[_0x56378c(0xa25)],_0x4e4e73=_0x430b50[_0x56378c(0x890)],_0x19a7f3=_0x430b50['MotionType'],_0x25dfe4=_0x430b50[_0x56378c(0x9c5)],_0x3b0195=Math[_0x56378c(0x28a)](..._0x253571[_0x56378c(0x4d0)](_0x599054=>_0x599054['battler']()['_baseX']-_0x599054['battler']()[_0x56378c(0xbdb)]()/0x2)),_0x5b523a=Math[_0x56378c(0xd19)](..._0x253571[_0x56378c(0x4d0)](_0x428e2a=>_0x428e2a[_0x56378c(0x798)]()[_0x56378c(0x12d)]+_0x428e2a[_0x56378c(0x798)]()[_0x56378c(0xbdb)]()/0x2)),_0xb05bb1=Math[_0x56378c(0x28a)](..._0x253571[_0x56378c(0x4d0)](_0x125dcf=>_0x125dcf[_0x56378c(0x798)]()[_0x56378c(0xcf6)]-_0x125dcf[_0x56378c(0x798)]()[_0x56378c(0x5ba)]())),_0xa45382=Math[_0x56378c(0xd19)](..._0x253571['map'](_0x837c6e=>_0x837c6e[_0x56378c(0x798)]()[_0x56378c(0xcf6)])),_0x2c8265=_0x253571[_0x56378c(0x3a2)](_0x1c76c6=>_0x1c76c6[_0x56378c(0x4e0)]())[_0x56378c(0xb23)],_0x2d4acb=_0x253571[_0x56378c(0x3a2)](_0x48d6cf=>_0x48d6cf[_0x56378c(0x737)]())[_0x56378c(0xb23)];let _0x356685=0x0,_0x43fcfb=0x0;if(_0x1ae55c['match'](/front/i))_0x356685=_0x2c8265>=_0x2d4acb?_0x3b0195:_0x5b523a;else{if(_0x1ae55c[_0x56378c(0xd57)](/middle/i))_0x356685=(_0x3b0195+_0x5b523a)/0x2,_0x5e6463=-0x1;else{if(_0x1ae55c[_0x56378c(0xd57)](/back/i)){if(_0x56378c(0xaf2)===_0x56378c(0x51d)){if(!_0x2707f2)return;if(!this['_hpGaugeSprite'])return;if(_0x313db8[_0x56378c(0x4e0)]()){}else{if(_0x577449['isEnemy']()){if(this[_0x56378c(0x786)]===_0x100b8e&&!_0x1655e7[_0x56378c(0x366)]())return;}}this[_0x56378c(0x33d)][_0x56378c(0xa63)](_0x51fcfa,'hp');}else _0x356685=_0x2c8265>=_0x2d4acb?_0x5b523a:_0x3b0195;}}}if(_0x1ae55c['match'](/head/i))_0x43fcfb=_0xb05bb1;else{if(_0x1ae55c[_0x56378c(0xd57)](/center/i)){if(_0x56378c(0x213)==='oWjNK'){let _0x595bb1=0x0;return _0x595bb1;}else _0x43fcfb=(_0xb05bb1+_0xa45382)/0x2;}else _0x1ae55c['match'](/base/i)&&(_0x43fcfb=_0xa45382);}if(!_0x19d41d)return;for(const _0x294046 of _0x200c5c){if(!_0x294046)continue;let _0x4f4f48=_0x356685,_0x437c24=_0x43fcfb;if(_0x44efb1[_0x56378c(0xd57)](/none/i))_0x4f4f48+=_0x2c3e4d,_0x437c24+=_0x596553;else{if(_0x44efb1['match'](/horz/i)&&_0x44efb1[_0x56378c(0xd57)](/vert/i))'GdIaG'===_0x56378c(0x94a)?(_0x4f4f48+=_0x294046[_0x56378c(0x4e0)]()?-_0x2c3e4d:_0x2c3e4d,_0x437c24+=_0x294046[_0x56378c(0x4e0)]()?-_0x596553:_0x596553):_0x3ce4ac=(_0xd55a79+_0x531737)/0x2;else{if(_0x44efb1[_0x56378c(0xd57)](/horz/i))_0x4f4f48+=_0x294046[_0x56378c(0x4e0)]()?-_0x2c3e4d:_0x2c3e4d,_0x437c24+=_0x596553;else _0x44efb1[_0x56378c(0xd57)](/vert/i)&&(_0x4f4f48+=_0x2c3e4d,_0x437c24+=_0x294046['isActor']()?-_0x596553:_0x596553);}}_0x294046[_0x56378c(0x350)](_0x4f4f48,_0x437c24,_0x4d6420,_0x1b218f,_0x4e4e73,_0x5e6463),_0x294046[_0x56378c(0xb90)](_0x19a7f3);}if(_0x25dfe4)_0x19d41d[_0x56378c(0xab0)]('battleMove');}),PluginManager['registerCommand'](pluginData[_0x3823ba(0x450)],_0x3823ba(0x627),_0x2b5d81=>{const _0x2e6de0=_0x3823ba;if(!SceneManager[_0x2e6de0(0xbc6)]())return;VisuMZ[_0x2e6de0(0xb9f)](_0x2b5d81,_0x2b5d81);const _0x382cf4=$gameTemp[_0x2e6de0(0xaa7)](),_0xc11b07=VisuMZ[_0x2e6de0(0x140)](_0x2b5d81[_0x2e6de0(0xad2)]),_0x31facd=_0x2b5d81[_0x2e6de0(0x906)],_0x1882a5=_0x2b5d81[_0x2e6de0(0x438)],_0x2625c2=_0x2b5d81[_0x2e6de0(0x890)],_0x5c2de3=_0x2b5d81['WaitForOpacity'];if(!_0x382cf4)return;for(const _0x48b37b of _0xc11b07){if(!_0x48b37b)continue;_0x48b37b[_0x2e6de0(0xaf9)](_0x31facd,_0x1882a5,_0x2625c2);}if(_0x5c2de3)_0x382cf4['setWaitMode'](_0x2e6de0(0xc77));}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0x1dc),_0xe4753c=>{const _0x4b4d09=_0x3823ba;if(!SceneManager[_0x4b4d09(0xbc6)]())return;VisuMZ[_0x4b4d09(0xb9f)](_0xe4753c,_0xe4753c);const _0x3bdc86=$gameTemp[_0x4b4d09(0xaa7)](),_0x2cf0bf=VisuMZ[_0x4b4d09(0x140)](_0xe4753c[_0x4b4d09(0xad2)]),_0x5dc510=_0xe4753c['ScaleX'],_0x3bc004=_0xe4753c[_0x4b4d09(0xc79)],_0x1668c4=_0xe4753c['Duration'],_0x20ffd0=_0xe4753c[_0x4b4d09(0x890)],_0x4eb384=_0xe4753c[_0x4b4d09(0x3fa)];if(!_0x3bdc86)return;for(const _0x45c007 of _0x2cf0bf){if(!_0x45c007)continue;_0x45c007['growBattler'](_0x5dc510,_0x3bc004,_0x1668c4,_0x20ffd0);}if(_0x4eb384)_0x3bdc86[_0x4b4d09(0xab0)](_0x4b4d09(0xa62));}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0x2f1),_0x803c05=>{const _0x6206bf=_0x3823ba;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x803c05,_0x803c05);const _0x29e608=$gameTemp[_0x6206bf(0xaa7)](),_0x491997=VisuMZ[_0x6206bf(0x140)](_0x803c05[_0x6206bf(0xad2)]),_0x1045fe=_0x803c05['SkewX'],_0x25832c=_0x803c05['SkewY'],_0x4477d8=_0x803c05[_0x6206bf(0x438)],_0x516860=_0x803c05[_0x6206bf(0x890)],_0xd3a4c7=_0x803c05['WaitForSkew'];if(!_0x29e608)return;for(const _0x22afa0 of _0x491997){if(_0x6206bf(0x476)===_0x6206bf(0xbd5))_0xdf7602[_0x6206bf(0x8d6)]['processTouch'][_0x6206bf(0x162)](this),this[_0x6206bf(0x6b0)]?this[_0x6206bf(0xcf3)]():_0x3a78c4['BattleCore'][_0x6206bf(0x7ce)][_0x6206bf(0x162)](this);else{if(!_0x22afa0)continue;_0x22afa0[_0x6206bf(0x3d8)](_0x1045fe,_0x25832c,_0x4477d8,_0x516860);}}if(_0xd3a4c7)_0x29e608[_0x6206bf(0xab0)](_0x6206bf(0x9de));}),PluginManager['registerCommand'](pluginData[_0x3823ba(0x450)],'ActSeq_Movement_Spin',_0x4b95e6=>{const _0x3cbcf8=_0x3823ba;if(!SceneManager[_0x3cbcf8(0xbc6)]())return;VisuMZ['ConvertParams'](_0x4b95e6,_0x4b95e6);const _0xe48a16=$gameTemp[_0x3cbcf8(0xaa7)](),_0xada4fd=VisuMZ['CreateActionSequenceTargets'](_0x4b95e6[_0x3cbcf8(0xad2)]),_0x598bac=_0x4b95e6[_0x3cbcf8(0x348)],_0x313958=_0x4b95e6[_0x3cbcf8(0x438)],_0x141963=_0x4b95e6['EasingType'],_0x725e84=_0x4b95e6[_0x3cbcf8(0xd8d)],_0x2d712a=_0x4b95e6[_0x3cbcf8(0x81f)];if(!_0xe48a16)return;for(const _0x345579 of _0xada4fd){if(!_0x345579)continue;_0x345579['spinBattler'](_0x598bac,_0x313958,_0x141963,_0x725e84);}if(_0x2d712a)_0xe48a16[_0x3cbcf8(0xab0)](_0x3cbcf8(0x82e));}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0xd7a),_0x23a201=>{const _0x2e937e=_0x3823ba;if(!SceneManager[_0x2e937e(0xbc6)]())return;const _0x1763e7=$gameTemp[_0x2e937e(0xaa7)]();if(!_0x1763e7)return;_0x1763e7[_0x2e937e(0xab0)](_0x2e937e(0x598));}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0x302),_0x490eb6=>{const _0x5b0a7a=_0x3823ba;if(!SceneManager[_0x5b0a7a(0xbc6)]())return;const _0x2c3710=$gameTemp[_0x5b0a7a(0xaa7)]();if(!_0x2c3710)return;_0x2c3710[_0x5b0a7a(0xab0)](_0x5b0a7a(0xd46));}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0xc35),_0x4fc788=>{const _0x332571=_0x3823ba;if(!SceneManager[_0x332571(0xbc6)]())return;const _0x3b840e=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x3b840e)return;_0x3b840e[_0x332571(0xab0)](_0x332571(0x5a9));}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0xc30),_0x3d5631=>{const _0x3e9e31=_0x3823ba;if(!SceneManager[_0x3e9e31(0xbc6)]())return;const _0x3db9cb=$gameTemp[_0x3e9e31(0xaa7)]();if(!_0x3db9cb)return;_0x3db9cb['setWaitMode'](_0x3e9e31(0xc77));}),PluginManager[_0x3823ba(0xa46)](pluginData['name'],_0x3823ba(0xc6b),_0x474c64=>{const _0x1a9444=_0x3823ba;if(!SceneManager['isSceneBattle']())return;const _0x3d6f4f=$gameTemp[_0x1a9444(0xaa7)]();if(!_0x3d6f4f)return;_0x3d6f4f[_0x1a9444(0xab0)](_0x1a9444(0xa62));}),PluginManager[_0x3823ba(0xa46)](pluginData['name'],_0x3823ba(0xb05),_0x92aa2b=>{const _0x587102=_0x3823ba;if(!SceneManager['isSceneBattle']())return;const _0x54a19b=$gameTemp[_0x587102(0xaa7)]();if(!_0x54a19b)return;_0x54a19b[_0x587102(0xab0)](_0x587102(0x9de));}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0x37e),_0x5d129c=>{const _0x13b2d8=_0x3823ba;if(!SceneManager['isSceneBattle']())return;const _0xa642a=$gameTemp[_0x13b2d8(0xaa7)]();if(!_0xa642a)return;_0xa642a[_0x13b2d8(0xab0)](_0x13b2d8(0x82e));}),VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0xac4)]=function(){const _0xa4924c=_0x3823ba;if(!Imported[_0xa4924c(0x154)])return;if(VisuMZ['ActSeqProjectiles'][_0xa4924c(0xd18)]<1.08){if(_0xa4924c(0xd42)!=='zLbRR')return this[_0xa4924c(0x2ba)](_0x4aa6fc[0x0],_0x1b9a34[0x1],_0x1960ae=>{const _0x225382=_0xa4924c;!_0x1960ae[_0x225382(0x71f)]()&&(_0x1960ae[_0x225382(0xd92)](_0xa86e53[0x2],_0x4eb8f2[0x3]),_0xa53e27[_0x225382(0xd92)](_0x1960ae));}),!![];else{let _0x2c95c4='';_0x2c95c4+=_0xa4924c(0x7fa),_0x2c95c4+='in\x20order\x20for\x20VisuMZ_1_BattleCore\x20to\x20work.',alert(_0x2c95c4),SceneManager[_0xa4924c(0x824)]();}}},PluginManager[_0x3823ba(0xa46)](pluginData['name'],'ActSeq_Projectile_Animation',_0x48a276=>{const _0x4be96d=_0x3823ba;if(!SceneManager[_0x4be96d(0xbc6)]())return;if(!Imported[_0x4be96d(0x154)])return;VisuMZ['ConvertParams'](_0x48a276,_0x48a276),VisuMZ[_0x4be96d(0x4f3)][_0x4be96d(0xac4)]();const _0xb523d8=$gameTemp[_0x4be96d(0xaa7)](),_0xd1728a=_0x48a276[_0x4be96d(0xbef)];if(!_0xb523d8)return;const _0x209a67=BattleManager['_spriteset'];if(!_0x209a67)return;_0x209a67['createActionSequenceProjectile'](_0x48a276);if(_0xd1728a)_0xb523d8['setWaitMode']('battleProjectiles');}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0x5c7),_0x34cd43=>{const _0x3d39b7=_0x3823ba;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x3d39b7(0x154)])return;VisuMZ[_0x3d39b7(0xb9f)](_0x34cd43,_0x34cd43),VisuMZ[_0x3d39b7(0x4f3)]['CheckActSeqProjectileVersion']();const _0x324258=$gameTemp[_0x3d39b7(0xaa7)](),_0x27868a=_0x34cd43[_0x3d39b7(0xbef)];if(!_0x324258)return;const _0x5d18a3=BattleManager['_spriteset'];if(!_0x5d18a3)return;_0x5d18a3[_0x3d39b7(0xbe7)](_0x34cd43);if(_0x27868a)_0x324258[_0x3d39b7(0xab0)](_0x3d39b7(0xba3));}),PluginManager['registerCommand'](pluginData['name'],_0x3823ba(0x13c),_0x5a938c=>{const _0x4e435f=_0x3823ba;if(!SceneManager[_0x4e435f(0xbc6)]())return;if(!Imported[_0x4e435f(0x154)])return;VisuMZ[_0x4e435f(0xb9f)](_0x5a938c,_0x5a938c),VisuMZ[_0x4e435f(0x4f3)]['CheckActSeqProjectileVersion']();const _0x1f6232=$gameTemp['getLastPluginCommandInterpreter'](),_0x41aa96=_0x5a938c[_0x4e435f(0xbef)];if(!_0x1f6232)return;const _0x16ae70=BattleManager[_0x4e435f(0x8a5)];if(!_0x16ae70)return;_0x16ae70[_0x4e435f(0xbe7)](_0x5a938c);if(_0x41aa96)_0x1f6232[_0x4e435f(0xab0)]('battleProjectiles');}),PluginManager['registerCommand'](pluginData[_0x3823ba(0x450)],_0x3823ba(0x224),_0x175c37=>{const _0x49ec46=_0x3823ba;if(!SceneManager[_0x49ec46(0xbc6)]())return;if(!Imported[_0x49ec46(0x29c)])return;VisuMZ['ConvertParams'](_0x175c37,_0x175c37);const _0x5644be=$gameTemp[_0x49ec46(0xaa7)](),_0x2f32bc=_0x175c37[_0x49ec46(0x21a)];if(!_0x5644be)return;$gameScreen[_0x49ec46(0x5af)](_0x175c37[_0x49ec46(0xc85)],_0x175c37[_0x49ec46(0xc1f)],_0x175c37[_0x49ec46(0x438)],_0x175c37[_0x49ec46(0x890)]);if(_0x2f32bc)_0x5644be['setWaitMode'](_0x49ec46(0x948));}),PluginManager[_0x3823ba(0xa46)](pluginData['name'],'ActSeq_Skew_Reset',_0x42c74d=>{const _0x5a3e37=_0x3823ba;if(!SceneManager[_0x5a3e37(0xbc6)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x5a3e37(0xb9f)](_0x42c74d,_0x42c74d);const _0x379503=$gameTemp[_0x5a3e37(0xaa7)](),_0x2b36f6=_0x42c74d['WaitForSkew'];if(!_0x379503)return;$gameScreen[_0x5a3e37(0x5af)](0x0,0x0,_0x42c74d['Duration'],_0x42c74d[_0x5a3e37(0x890)]);if(_0x2b36f6)_0x379503[_0x5a3e37(0xab0)](_0x5a3e37(0x948));}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0xab2),_0x1cdffd=>{const _0xd4a7c4=_0x3823ba;if(!SceneManager[_0xd4a7c4(0xbc6)]())return;if(!Imported[_0xd4a7c4(0x29c)])return;const _0x3e8c62=$gameTemp[_0xd4a7c4(0xaa7)]();if(!_0x3e8c62)return;_0x3e8c62[_0xd4a7c4(0xab0)](_0xd4a7c4(0x948));}),PluginManager[_0x3823ba(0xa46)](pluginData['name'],'ActSeq_Target_CurrentIndex',_0x3f768c=>{const _0x4d88f0=_0x3823ba;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x4d88f0(0xb9f)](_0x3f768c,_0x3f768c);const _0x38a864=$gameTemp[_0x4d88f0(0xaa7)](),_0x5cef2b=_0x3f768c[_0x4d88f0(0xa6c)],_0x4bd0dd=_0x3f768c[_0x4d88f0(0x65b)];if(!_0x38a864)return;BattleManager['_targetIndex']=_0x5cef2b,BattleManager[_0x4d88f0(0xa2b)]=BattleManager['_allTargets']?BattleManager[_0x4d88f0(0xa71)][BattleManager[_0x4d88f0(0x751)]]||null:null,BattleManager[_0x4d88f0(0xa2b)]&&_0x4bd0dd[_0x4d88f0(0x2d8)]()[_0x4d88f0(0xaf4)]()!==_0x4d88f0(0x928)&&(_0x4d88f0(0x612)!==_0x4d88f0(0x283)?_0x38a864[_0x4d88f0(0x45e)]([_0x4bd0dd]):_0x4adf1e[_0x4d88f0(0x8d6)][_0x4d88f0(0x49e)][_0x4d88f0(0x162)](this,_0x2e56e7));}),PluginManager['registerCommand'](pluginData['name'],_0x3823ba(0xac1),_0x788dcc=>{const _0xb94afd=_0x3823ba;if(!SceneManager[_0xb94afd(0xbc6)]())return;VisuMZ[_0xb94afd(0xb9f)](_0x788dcc,_0x788dcc);const _0x2f0ea8=$gameTemp[_0xb94afd(0xaa7)](),_0x4a994d=_0x788dcc[_0xb94afd(0x65b)];if(!_0x2f0ea8)return;BattleManager[_0xb94afd(0x751)]++,BattleManager[_0xb94afd(0xa2b)]=BattleManager['_allTargets'][BattleManager[_0xb94afd(0x751)]]||null,BattleManager[_0xb94afd(0xa2b)]&&_0x4a994d['toUpperCase']()[_0xb94afd(0xaf4)]()!=='UNTITLED'&&_0x2f0ea8[_0xb94afd(0x45e)]([_0x4a994d]);}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0x653),_0x226b58=>{const _0x328b60=_0x3823ba;if(!SceneManager[_0x328b60(0xbc6)]())return;VisuMZ[_0x328b60(0xb9f)](_0x226b58,_0x226b58);const _0x1a35c9=$gameTemp[_0x328b60(0xaa7)](),_0x4ea669=_0x226b58[_0x328b60(0x65b)];if(!_0x1a35c9)return;BattleManager['_targetIndex']--,BattleManager[_0x328b60(0xa2b)]=BattleManager['_allTargets'][BattleManager[_0x328b60(0x751)]]||null,BattleManager[_0x328b60(0xa2b)]&&_0x4ea669[_0x328b60(0x2d8)]()[_0x328b60(0xaf4)]()!==_0x328b60(0x928)&&_0x1a35c9[_0x328b60(0x45e)]([_0x4ea669]);}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0xae2),_0x14edda=>{const _0x189c00=_0x3823ba;if(!SceneManager[_0x189c00(0xbc6)]())return;VisuMZ[_0x189c00(0xb9f)](_0x14edda,_0x14edda);const _0x27c62d=$gameTemp[_0x189c00(0xaa7)](),_0x31ac39=_0x14edda[_0x189c00(0x99a)],_0xf8cb41=_0x14edda[_0x189c00(0x65b)];if(!_0x27c62d)return;const _0x1875c3=BattleManager[_0x189c00(0x751)];for(;;){if('VccYi'!=='VccYi')_0x2e4dd3[_0x189c00(0x4f3)][_0x189c00(0x42e)][_0x189c00(0x162)](this),this[_0x189c00(0x67c)][_0x189c00(0x371)](),this[_0x189c00(0x8ee)]();else{BattleManager[_0x189c00(0x751)]=Math[_0x189c00(0x407)](BattleManager['_allTargets'][_0x189c00(0xb23)]);if(!_0x31ac39)break;if(BattleManager[_0x189c00(0x751)]!==_0x1875c3)break;if(BattleManager[_0x189c00(0xa71)][_0x189c00(0xb23)]<=0x1){BattleManager['_targetIndex']=0x0;break;}}}BattleManager['_target']=BattleManager[_0x189c00(0xa71)][BattleManager[_0x189c00(0x751)]]||null;if(BattleManager['_target']&&_0xf8cb41[_0x189c00(0x2d8)]()[_0x189c00(0xaf4)]()!==_0x189c00(0x928)){if('WHjTm'==='kPIYa'){const _0x32952d=this[_0x189c00(0x95d)]()?_0x189c00(0x3e5):_0x189c00(0x1ca);_0x549bad[_0x189c00(0x5b2)](_0x32952d);}else _0x27c62d[_0x189c00(0x45e)]([_0xf8cb41]);}}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],'ActSeq_BattleVoice_PlayCommonLine',_0x3f206d=>{const _0xb1822c=_0x3823ba;if(!SceneManager[_0xb1822c(0xbc6)]())return;if(!Imported[_0xb1822c(0x3be)])return;if(!ConfigManager['battleVoices'])return;VisuMZ[_0xb1822c(0xb9f)](_0x3f206d,_0x3f206d);const _0x1ee7ad=VisuMZ[_0xb1822c(0x140)](_0x3f206d['Targets']);let _0x231a9c=_0x3f206d[_0xb1822c(0x85d)]||'';for(const _0x9cd95d of _0x1ee7ad){if('SoyrI'!==_0xb1822c(0x2bd))this['_onceParallelInterpreters']=this[_0xb1822c(0x845)]||[],this[_0xb1822c(0x845)][_0xb1822c(0xbc4)](_0x59db8c);else{if(!_0x9cd95d)continue;_0x9cd95d['playBattleVoice'](_0x231a9c);}}}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0x7df),_0x5c6af3=>{const _0xbb3d32=_0x3823ba;if(!SceneManager[_0xbb3d32(0xbc6)]())return;if(!Imported[_0xbb3d32(0x3be)])return;if(!ConfigManager[_0xbb3d32(0x408)])return;VisuMZ[_0xbb3d32(0xb9f)](_0x5c6af3,_0x5c6af3);const _0x556aeb=VisuMZ['CreateActionSequenceTargets'](_0x5c6af3[_0xbb3d32(0xad2)]);let _0x58752e=(_0x5c6af3[_0xbb3d32(0x185)]||'')+(_0x5c6af3['Letter']||'');for(const _0x357f4c of _0x556aeb){if(!_0x357f4c)continue;_0x357f4c[_0xbb3d32(0x308)](_0x58752e);}}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0x1be),_0x2454ad=>{const _0xd90004=_0x3823ba;if(!SceneManager[_0xd90004(0xbc6)]())return;VisuMZ[_0xd90004(0xb9f)](_0x2454ad,_0x2454ad);const _0x3ae860=VisuMZ[_0xd90004(0x140)](_0x2454ad[_0xd90004(0xad2)]);for(const _0xbcf799 of _0x3ae860){if(_0xd90004(0x3e7)!==_0xd90004(0x966)){if(!_0xbcf799)continue;if(!_0xbcf799[_0xd90004(0x4e0)]())continue;_0xbcf799[_0xd90004(0xb20)]();}else return this[_0xd90004(0x60e)]();}}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0x859),_0x1cd6f4=>{const _0x3cb5f3=_0x3823ba;if(!SceneManager[_0x3cb5f3(0xbc6)]())return;VisuMZ[_0x3cb5f3(0xb9f)](_0x1cd6f4,_0x1cd6f4);const _0x18cb4d=$gameTemp[_0x3cb5f3(0xaa7)]();let _0x1cabb0=![];const _0x2208d4=_0x1cd6f4[_0x3cb5f3(0x65b)],_0x2202bf=VisuMZ[_0x3cb5f3(0x140)](_0x1cd6f4[_0x3cb5f3(0xad2)]);for(const _0x1e3ee4 of _0x2202bf){if(_0x3cb5f3(0x5a3)===_0x3cb5f3(0x5a3)){if(!_0x1e3ee4)continue;if(!_0x1e3ee4[_0x3cb5f3(0x4e0)]())continue;_0x1e3ee4[_0x3cb5f3(0xb7b)](),_0x1e3ee4[_0x3cb5f3(0xcc0)]()[_0x3cb5f3(0xb23)]>0x0?_0x1cabb0=!![]:_0x1e3ee4[_0x3cb5f3(0xb20)]();}else return _0xac1564[_0x3cb5f3(0x4f3)][_0x3cb5f3(0x242)][_0x3cb5f3(0x9d8)][_0x3cb5f3(0x26e)];}_0x1cabb0&&_0x2208d4[_0x3cb5f3(0x2d8)]()[_0x3cb5f3(0xaf4)]()!==_0x3cb5f3(0x928)&&_0x18cb4d[_0x3cb5f3(0x45e)]([_0x2208d4]);}),PluginManager['registerCommand'](pluginData[_0x3823ba(0x450)],'ActSeq_Weapon_SetActiveWeapon',_0x101a84=>{const _0x316400=_0x3823ba;if(!SceneManager[_0x316400(0xbc6)]())return;VisuMZ[_0x316400(0xb9f)](_0x101a84,_0x101a84);let _0x567dc6=_0x101a84['SlotID'];_0x567dc6--,_0x567dc6=Math[_0x316400(0xd19)](_0x567dc6,0x0);const _0x5251e1=VisuMZ[_0x316400(0x140)](_0x101a84[_0x316400(0xad2)]);for(const _0x211e31 of _0x5251e1){if(!_0x211e31)continue;if(!_0x211e31[_0x316400(0x4e0)]())continue;_0x211e31[_0x316400(0x7e3)](_0x567dc6);}}),PluginManager[_0x3823ba(0xa46)](pluginData['name'],'ActSeq_Zoom_Scale',_0x5eb9e2=>{const _0x22bfc9=_0x3823ba;if(!SceneManager[_0x22bfc9(0xbc6)]())return;if(!Imported[_0x22bfc9(0x29c)])return;VisuMZ[_0x22bfc9(0xb9f)](_0x5eb9e2,_0x5eb9e2);const _0x234415=$gameTemp['getLastPluginCommandInterpreter'](),_0x403812=_0x5eb9e2['WaitForZoom'];if(!_0x234415)return;$gameScreen['setBattleZoom'](_0x5eb9e2['Scale'],_0x5eb9e2['Duration'],_0x5eb9e2[_0x22bfc9(0x890)]);if(_0x403812)_0x234415[_0x22bfc9(0xab0)]('battleZoom');}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0x261),_0x37b3d5=>{const _0x5387f8=_0x3823ba;if(!SceneManager[_0x5387f8(0xbc6)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ['ConvertParams'](_0x37b3d5,_0x37b3d5);const _0x36c368=$gameTemp['getLastPluginCommandInterpreter'](),_0x233efc=_0x37b3d5['WaitForZoom'];if(!_0x36c368)return;$gameScreen[_0x5387f8(0xcb7)](0x1,_0x37b3d5[_0x5387f8(0x438)],_0x37b3d5[_0x5387f8(0x890)]);if(_0x233efc)_0x36c368[_0x5387f8(0xab0)](_0x5387f8(0x2b4));}),PluginManager[_0x3823ba(0xa46)](pluginData[_0x3823ba(0x450)],_0x3823ba(0x690),_0x397c07=>{const _0x375015=_0x3823ba;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x375015(0x29c)])return;const _0x57b200=$gameTemp[_0x375015(0xaa7)]();if(!_0x57b200)return;_0x57b200[_0x375015(0xab0)]('battleZoom');}),VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x245)]=Scene_Boot[_0x3823ba(0x8d6)]['onDatabaseLoaded'],Scene_Boot[_0x3823ba(0x8d6)][_0x3823ba(0xbcd)]=function(){const _0x347331=_0x3823ba;this['process_VisuMZ_BattleCore_Failsafes'](),this[_0x347331(0xaff)](),this['process_VisuMZ_BattleCore_DamageStyles'](),this['process_VisuMZ_BattleCore_CreateRegExp'](),VisuMZ[_0x347331(0x4f3)][_0x347331(0x245)][_0x347331(0x162)](this),this[_0x347331(0x567)](),this[_0x347331(0xd34)](),this['process_VisuMZ_BattleCore_PreBattleCommonEvent'](),this[_0x347331(0x3ba)]();},Scene_Boot[_0x3823ba(0x8d6)][_0x3823ba(0x567)]=function(){const _0x49848d=_0x3823ba;if(VisuMZ[_0x49848d(0x93e)])return;this['process_VisuMZ_BattleCore_Action_Notetags'](),this[_0x49848d(0xc93)](),this[_0x49848d(0x3a9)]();},Scene_Boot[_0x3823ba(0x8d6)]['process_VisuMZ_BattleCore_Failsafes']=function(){const _0x13fe5d=_0x3823ba,_0x5dca7f=$dataSystem[_0x13fe5d(0xaf6)]['length'];for(let _0x312cef=0x0;_0x312cef<_0x5dca7f;_0x312cef++){if(_0x13fe5d(0x359)!==_0x13fe5d(0x124)){const _0x45c55d=$dataSystem[_0x13fe5d(0x776)][_0x312cef];if(_0x45c55d)continue;$dataSystem[_0x13fe5d(0x776)][_0x312cef]={'type':0x1,'weaponImageId':0x1};}else return this[_0x13fe5d(0x44e)]();}},Scene_Boot[_0x3823ba(0x8d6)][_0x3823ba(0xaff)]=function(){const _0x1d4e51=_0x3823ba,_0x103c45=VisuMZ[_0x1d4e51(0x4f3)]['Settings'];_0x103c45[_0x1d4e51(0x630)][_0x1d4e51(0xd72)]===undefined&&(_0x103c45[_0x1d4e51(0x630)][_0x1d4e51(0xd72)]='base');_0x103c45['Actor']['SmoothImage']===undefined&&(_0x103c45[_0x1d4e51(0x9fc)][_0x1d4e51(0xc62)]=![]);_0x103c45[_0x1d4e51(0x179)][_0x1d4e51(0xc62)]===undefined&&(_0x103c45['Enemy'][_0x1d4e51(0xc62)]=!![]);_0x103c45[_0x1d4e51(0x9fc)]['PrioritySortActive']===undefined&&(_0x103c45[_0x1d4e51(0x9fc)][_0x1d4e51(0x48d)]=![]);if(_0x103c45[_0x1d4e51(0x9fc)][_0x1d4e51(0x50b)]===undefined){if('NdHnN'===_0x1d4e51(0xc5d)){_0x431e58=_0x3b6ac6[_0x4b6302][_0x1d4e51(0x162)](this,_0x3f7a6d,_0x491e2e);if(_0x344e09)_0xa8c1d9=_0x403702;}else _0x103c45[_0x1d4e51(0x9fc)]['PrioritySortActors']=!![];}},VisuMZ[_0x3823ba(0xc1d)]={},Scene_Boot[_0x3823ba(0x8d6)][_0x3823ba(0x9f3)]=function(){const _0xcf2ab3=_0x3823ba;for(const _0xc64abd of VisuMZ[_0xcf2ab3(0x4f3)]['Settings']['Damage'][_0xcf2ab3(0xd1b)]){if(!_0xc64abd)continue;const _0x2f3628=_0xc64abd[_0xcf2ab3(0x301)][_0xcf2ab3(0x2d8)]()['trim']();VisuMZ[_0xcf2ab3(0xc1d)][_0x2f3628]=_0xc64abd;}},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x123)]={},Scene_Boot[_0x3823ba(0x8d6)][_0x3823ba(0x47e)]=function(){const _0x1924bd=_0x3823ba,_0x2a60dd=VisuMZ[_0x1924bd(0x4f3)][_0x1924bd(0x123)],_0x35a70e=_0x1924bd(0x58c),_0x1ca8b0=[[_0x1924bd(0xca7),_0x1924bd(0x355)],[_0x1924bd(0x1f5),_0x1924bd(0x95c)]],_0x2f38be=[['%1Apply%2JS','JS\x20%1APPLY\x20%2'],[_0x1924bd(0x460),_0x1924bd(0x9f4)]],_0x29307f=[['',''],[_0x1924bd(0xcfb),_0x1924bd(0x907)],[_0x1924bd(0x781),_0x1924bd(0x391)]];for(const _0x4fbd19 of _0x2f38be){if('HnQJM'!=='HnQJM')_0x47aec8[_0x1924bd(0x8d6)][_0x1924bd(0x6e3)][_0x1924bd(0x162)](this,_0x11fb8e,_0x568578,_0x12ba1f,_0x37befb);else for(const _0x1b89ab of _0x29307f){for(const _0x4beadc of _0x1ca8b0){const _0x1c8fea=_0x4fbd19[0x0][_0x1924bd(0xabf)](_0x4beadc[0x0],_0x1b89ab[0x0]),_0x5c8160=_0x4fbd19[0x1][_0x1924bd(0xabf)](_0x4beadc[0x1],_0x1b89ab[0x1])[_0x1924bd(0xaf4)](),_0x4ae531=new RegExp(_0x35a70e[_0x1924bd(0xabf)](_0x5c8160),'i');_0x2a60dd[_0x1c8fea]=_0x4ae531;}}}const _0x14b7cf=[[_0x1924bd(0x22e),_0x1924bd(0x2b8)],[_0x1924bd(0x736),_0x1924bd(0xcfe)]];for(const _0x203ba5 of _0x14b7cf){for(const _0x2a5c76 of _0x1ca8b0){const _0x5f1622=_0x203ba5[0x0][_0x1924bd(0xabf)](_0x2a5c76[0x0]),_0x4e52bc=_0x203ba5[0x1][_0x1924bd(0xabf)](_0x2a5c76[0x1]),_0x438029=new RegExp(_0x35a70e[_0x1924bd(0xabf)](_0x4e52bc),'i');_0x2a60dd[_0x5f1622]=_0x438029;}}const _0x284865=[[_0x1924bd(0x9d9),_0x1924bd(0xd7e)],['%1EndBattleJS',_0x1924bd(0x1ea)],[_0x1924bd(0x5c6),'JS\x20BATTLE\x20VICTORY'],['BattleDefeatJS',_0x1924bd(0xd1a)],[_0x1924bd(0x9c1),_0x1924bd(0x42f)],[_0x1924bd(0x642),_0x1924bd(0x1f7)],[_0x1924bd(0x4c2),_0x1924bd(0x22c)],[_0x1924bd(0x583),_0x1924bd(0x791)],[_0x1924bd(0x68d),_0x1924bd(0x335)]];for(const _0x8325c of _0x284865){for(const _0x3da4ed of _0x1ca8b0){const _0x5051da=_0x8325c[0x0][_0x1924bd(0xabf)](_0x3da4ed[0x0]),_0x121f6b=_0x8325c[0x1]['format'](_0x3da4ed[0x1]),_0x28b54f=new RegExp(_0x35a70e['format'](_0x121f6b),'i');_0x2a60dd[_0x5051da]=_0x28b54f;}}},Scene_Boot[_0x3823ba(0x8d6)][_0x3823ba(0xb5b)]=function(){const _0x44aac6=_0x3823ba,_0x499abd=$dataSkills[_0x44aac6(0x145)]($dataItems);for(const _0x1f892b of _0x499abd){if(_0x44aac6(0x400)!==_0x44aac6(0x400))this[_0x44aac6(0x2e8)](_0x44aac6(0x5bf));else{if(!_0x1f892b)continue;VisuMZ[_0x44aac6(0x4f3)]['Parse_Notetags_Action'](_0x1f892b);}}},Scene_Boot[_0x3823ba(0x8d6)]['process_VisuMZ_BattleCore_TraitObject_Notetags']=function(){const _0x2ea703=_0x3823ba,_0x33bec2=$dataActors[_0x2ea703(0x145)]($dataClasses,$dataWeapons,$dataArmors,$dataEnemies,$dataStates);for(const _0x2e30b7 of _0x33bec2){if(_0x2ea703(0x69c)===_0x2ea703(0x48c)){const _0x4b6232=_0x1a80e5[_0x2ea703(0x131)];if(_0x4b6232&&_0x4b6232[_0x2ea703(0x6f9)]())_0x350a4b=_0x4b6232[_0x2ea703(0x733)]()['id'];else return;}else{if(!_0x2e30b7)continue;VisuMZ['BattleCore'][_0x2ea703(0x52a)](_0x2e30b7);}}},Scene_Boot[_0x3823ba(0x8d6)]['process_VisuMZ_BattleCore_BaseTroops']=function(){const _0x205e83=_0x3823ba,_0xc26494=VisuMZ[_0x205e83(0x4f3)][_0x205e83(0x242)][_0x205e83(0x911)]['BaseTroopIDs'],_0x3b4733=[];for(const _0x59f132 of _0xc26494){if(_0x205e83(0xcc1)===_0x205e83(0x22a))_0x5b43b5[_0x205e83(0x734)][_0x205e83(0x4f8)](_0x3f2163);else{const _0x18efa3=$dataTroops[_0x59f132];if(_0x18efa3)_0x3b4733[_0x205e83(0x3d9)](JsonEx[_0x205e83(0x682)](_0x18efa3));}}for(const _0x241838 of $dataTroops){if(!_0x241838)continue;for(const _0x4fd845 of _0x3b4733){if(_0x205e83(0xc52)===_0x205e83(0xc52)){if(_0x4fd845['id']===_0x241838['id'])continue;_0x241838[_0x205e83(0x748)]=_0x241838[_0x205e83(0x748)][_0x205e83(0x145)](_0x4fd845[_0x205e83(0x748)]);}else this[_0x205e83(0xa2c)]-=0x10;}}},Scene_Boot[_0x3823ba(0x8d6)][_0x3823ba(0x793)]=function(){const _0x3ec705=_0x3823ba,_0x2b8831=VisuMZ[_0x3ec705(0x4f3)][_0x3ec705(0x242)][_0x3ec705(0x911)];if(_0x2b8831[_0x3ec705(0x8f7)]>0x0&&$dataCommonEvents[_0x2b8831[_0x3ec705(0x8f7)]]){const _0xfadad2=$dataCommonEvents[_0x2b8831[_0x3ec705(0x8f7)]],_0x4c316d=_0xfadad2[_0x3ec705(0x934)][_0x3ec705(0xb23)]-0x2,_0x41fb7f=_0xfadad2['list'][_0x4c316d];if(_0x41fb7f&&_0x41fb7f[_0x3ec705(0xcad)]!==0xe6){const _0x2ab7ba={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x59295d=_0xfadad2[_0x3ec705(0x934)][_0x3ec705(0xbd2)]();_0xfadad2['list'][_0x3ec705(0xaa5)](_0x2ab7ba),_0xfadad2['list'][_0x3ec705(0xaa5)](_0x59295d);}}},Scene_Boot[_0x3823ba(0x8d6)][_0x3823ba(0x3ba)]=function(){const _0x48f089=_0x3823ba;VisuMZ[_0x48f089(0x4f3)][_0x48f089(0x1a8)](),VisuMZ[_0x48f089(0x4f3)][_0x48f089(0x3a1)]($dataSkills),VisuMZ[_0x48f089(0x4f3)]['BindCommonEventKeysForGroup']($dataItems);},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x1a8)]=function(){const _0x1d2fe5=_0x3823ba;VisuMZ[_0x1d2fe5(0x4f3)]['_commonEventKey']={};for(const _0x18f7f4 of $dataCommonEvents){if(_0x1d2fe5(0xd51)!==_0x1d2fe5(0x272)){if(!_0x18f7f4)continue;if(_0x18f7f4[_0x1d2fe5(0x450)]['match'](/\[(.*)\]/i)){let _0x3ce077=String(RegExp['$1'])['replace'](/,/g,'')['toUpperCase']()['trim']();VisuMZ['BattleCore'][_0x1d2fe5(0xbb8)][_0x3ce077]=_0x18f7f4['id'];}}else return _0x1588f4['_baseY']-_0x5d1cd7[_0x1d2fe5(0xcf6)];}},VisuMZ['BattleCore'][_0x3823ba(0x3a1)]=function(_0x2321bd){const _0x57b83a=_0x3823ba;for(const _0x30bba1 of _0x2321bd){if(_0x57b83a(0x499)===_0x57b83a(0x5e9))for(const _0x3ef428 of _0x11be17[_0x57b83a(0x292)]){if(_0x16cd7a[_0x3ef428['enemyId']]){const _0x84e01d=_0x3ef428[_0x57b83a(0xce6)],_0x3dec7c=_0x3ef428['x'],_0x482065=_0x3ef428['y'],_0x356adf=new _0xdef896(_0x84e01d,_0x3dec7c,_0x482065);_0x3ef428['hidden']&&_0x356adf[_0x57b83a(0x423)](),this[_0x57b83a(0xda0)][_0x57b83a(0x3d9)](_0x356adf);}}else{if(!_0x30bba1)continue;VisuMZ['BattleCore'][_0x57b83a(0xc7f)](_0x30bba1);}}},VisuMZ['BattleCore']['BindCommonEventKeysForObj']=function(_0x4c0c25){const _0x169a23=_0x3823ba;if(!_0x4c0c25)return;if(!_0x4c0c25[_0x169a23(0x3e6)])return;VisuMZ['BattleCore'][_0x169a23(0xbb8)]=VisuMZ[_0x169a23(0x4f3)][_0x169a23(0xbb8)]||{};const _0x250076=/<COMMON EVENT (?:KEY|KEYS):[ ](.*)>/gi,_0x531617=/<COMMON EVENT (?:KEY|KEYS)>\s*([\s\S]*)\s*<\/COMMON EVENT (?:KEY|KEYS)>/i;let _0x3245eb=[];const _0x5e1af5=_0x4c0c25['note'][_0x169a23(0xd57)](_0x250076);if(_0x5e1af5){if(_0x169a23(0x9b5)===_0x169a23(0x884))return _0x70d3cc[_0x169a23(0x115)]();else{for(const _0x3441d0 of _0x5e1af5){_0x3441d0[_0x169a23(0xd57)](_0x250076);const _0x107c6e=String(RegExp['$1'])[_0x169a23(0x22f)](',')[_0x169a23(0x4d0)](_0x445820=>String(_0x445820)[_0x169a23(0x2d8)]()['trim']());_0x3245eb=_0x3245eb[_0x169a23(0x145)](_0x107c6e);}if(!_0x4c0c25['note'][_0x169a23(0xd57)](/<CUSTOM ACTION SEQUENCE>/i)){if(_0x169a23(0x150)!==_0x169a23(0x848))_0x4c0c25[_0x169a23(0x920)]+='<CUSTOM\x20ACTION\x20SEQUENCE>';else{const _0x5f8cd2=_0x3c7ed1[_0x169a23(0x8d6)]['extraHeight'](),_0x4630e5=_0x3971a7[_0x169a23(0xc13)],_0x32c048=this[_0x169a23(0x21d)]()+_0x5f8cd2,_0x39215c=0x0,_0x2678dc=_0x95832c[_0x169a23(0x53c)]-_0x32c048+_0x5f8cd2;return new _0x3d9d44(_0x39215c,_0x2678dc,_0x4630e5,_0x32c048);}};}}if(_0x4c0c25[_0x169a23(0x920)][_0x169a23(0xd57)](_0x531617)){const _0x202b0f=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x169a23(0x4d0)](_0x5174d8=>String(_0x5174d8)[_0x169a23(0x2d8)]()['trim']());_0x3245eb=_0x3245eb[_0x169a23(0x145)](_0x202b0f);!_0x4c0c25[_0x169a23(0x920)]['match'](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x4c0c25['note']+=_0x169a23(0x7e9));;}for(const _0x55270a of _0x3245eb){if(VisuMZ[_0x169a23(0x4f3)][_0x169a23(0xbb8)][_0x55270a]){const _0x6988f2=VisuMZ['BattleCore'][_0x169a23(0xbb8)][_0x55270a],_0x460fc6={'code':0x2c,'dataId':_0x6988f2,'value1':0x1,'value2':0x0};_0x4c0c25[_0x169a23(0x3e6)][_0x169a23(0x3d9)](_0x460fc6);}}},Scene_Boot[_0x3823ba(0x8d6)][_0x3823ba(0x3a9)]=function(){const _0x13aa49=_0x3823ba,_0x3cff40=$dataSkills[_0x13aa49(0x145)]($dataItems);for(const _0x3fa3dd of _0x3cff40){if('jgczF'!==_0x13aa49(0xbd1)){if(!_0x3fa3dd)continue;VisuMZ['BattleCore'][_0x13aa49(0x40c)](_0x3fa3dd);}else this[_0x13aa49(0x9f6)](_0x13aa49(0x3e5),this[_0x13aa49(0xb80)]['bind'](this));}},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x18c)]=VisuMZ[_0x3823ba(0x18c)],VisuMZ[_0x3823ba(0x18c)]=function(_0x2ba443){const _0x30244b=_0x3823ba;if(VisuMZ[_0x30244b(0x4f3)][_0x30244b(0x18c)]){if(_0x30244b(0x4a0)!==_0x30244b(0x4a0)){_0x312859['canSingleOrMultipleSelect']()&&_0x579e1d[_0x30244b(0xb23)]>0x1&&this[_0x30244b(0x9f6)](_0x30244b(0x1ca),this[_0x30244b(0xc53)]['bind'](this));if(_0x5ee6cd[_0x30244b(0x7d5)]()){const _0x7a91e9=_0x26550a[_0x30244b(0xd31)]();_0x37ec76=_0x5d5688[_0x30244b(0x145)](_0x7a91e9),_0x485060[_0x30244b(0xb0a)]()&&_0x7a91e9[_0x30244b(0xb23)]>0x1&&this[_0x30244b(0x9f6)]('pagedown',this[_0x30244b(0xb80)][_0x30244b(0x343)](this));}}else VisuMZ[_0x30244b(0x4f3)][_0x30244b(0x18c)][_0x30244b(0x162)](this,_0x2ba443);}VisuMZ['BattleCore'][_0x30244b(0x52a)](_0x2ba443);},VisuMZ[_0x3823ba(0x4f3)]['ParseClassNotetags']=VisuMZ['ParseClassNotetags'],VisuMZ[_0x3823ba(0x85b)]=function(_0x659928){const _0x478754=_0x3823ba;VisuMZ[_0x478754(0x4f3)][_0x478754(0x85b)]&&VisuMZ[_0x478754(0x4f3)]['ParseClassNotetags'][_0x478754(0x162)](this,_0x659928),VisuMZ[_0x478754(0x4f3)]['Parse_Notetags_TraitObjects'](_0x659928);},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0xa2f)]=VisuMZ[_0x3823ba(0xa2f)],VisuMZ[_0x3823ba(0xa2f)]=function(_0x15e819){const _0x57e747=_0x3823ba;VisuMZ['BattleCore'][_0x57e747(0xa2f)]&&(_0x57e747(0x32a)===_0x57e747(0x32a)?VisuMZ[_0x57e747(0x4f3)]['ParseSkillNotetags'][_0x57e747(0x162)](this,_0x15e819):(_0x2b306c(_0x2746bd[_0x57e747(0xabf)](_0x57e747(0x5b5))),_0x41073a[_0x57e747(0x824)]())),VisuMZ[_0x57e747(0x4f3)]['Parse_Notetags_Action'](_0x15e819),VisuMZ[_0x57e747(0x4f3)][_0x57e747(0x40c)](_0x15e819);},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0xa07)]=VisuMZ['ParseItemNotetags'],VisuMZ[_0x3823ba(0xa07)]=function(_0xe1a4bd){const _0x28a4e9=_0x3823ba;VisuMZ[_0x28a4e9(0x4f3)][_0x28a4e9(0xa07)]&&VisuMZ[_0x28a4e9(0x4f3)][_0x28a4e9(0xa07)][_0x28a4e9(0x162)](this,_0xe1a4bd),VisuMZ['BattleCore'][_0x28a4e9(0xb2f)](_0xe1a4bd),VisuMZ[_0x28a4e9(0x4f3)][_0x28a4e9(0x40c)](_0xe1a4bd);},VisuMZ['BattleCore'][_0x3823ba(0x651)]=VisuMZ[_0x3823ba(0x651)],VisuMZ[_0x3823ba(0x651)]=function(_0x11829d){const _0x2104ac=_0x3823ba;VisuMZ[_0x2104ac(0x4f3)][_0x2104ac(0x651)]&&VisuMZ[_0x2104ac(0x4f3)][_0x2104ac(0x651)]['call'](this,_0x11829d),VisuMZ[_0x2104ac(0x4f3)][_0x2104ac(0x52a)](_0x11829d);},VisuMZ[_0x3823ba(0x4f3)]['ParseArmorNotetags']=VisuMZ[_0x3823ba(0xacf)],VisuMZ[_0x3823ba(0xacf)]=function(_0x302fee){const _0x25868f=_0x3823ba;VisuMZ[_0x25868f(0x4f3)][_0x25868f(0xacf)]&&('tjQtF'!==_0x25868f(0x218)?VisuMZ[_0x25868f(0x4f3)]['ParseArmorNotetags'][_0x25868f(0x162)](this,_0x302fee):_0x6fbc2b[_0x4b34ae]=null),VisuMZ[_0x25868f(0x4f3)][_0x25868f(0x52a)](_0x302fee);},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x8d7)]=VisuMZ[_0x3823ba(0x8d7)],VisuMZ[_0x3823ba(0x8d7)]=function(_0x9ddfc5){const _0x2863a5=_0x3823ba;VisuMZ['BattleCore'][_0x2863a5(0x8d7)]&&VisuMZ['BattleCore'][_0x2863a5(0x8d7)]['call'](this,_0x9ddfc5),VisuMZ['BattleCore']['Parse_Notetags_TraitObjects'](_0x9ddfc5);},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x374)]=VisuMZ[_0x3823ba(0x374)],VisuMZ[_0x3823ba(0x374)]=function(_0x3ffe83){const _0x482efe=_0x3823ba;if(VisuMZ[_0x482efe(0x4f3)]['ParseStateNotetags']){if('tyBob'!==_0x482efe(0x76d))VisuMZ['BattleCore'][_0x482efe(0x374)][_0x482efe(0x162)](this,_0x3ffe83);else{if(!_0x591323['isSceneBattle']())return;if(_0x19cdd2[_0x482efe(0xc1e)]())return;if(!this[_0x482efe(0x798)]())return;if(_0x12eb29[_0x482efe(0xb23)]<=0x0)return;_0x956852=_0xbd6f95||{},_0x4ce540['textColor']=_0xbaa6da[_0x482efe(0xb76)]||_0x482efe(0xadc),_0xca9552['flashColor']=_0x563617[_0x482efe(0x5cc)]||[0x0,0x0,0x0,0x0],_0x2e5980[_0x482efe(0x55a)]=_0x1ff5ef[_0x482efe(0x55a)]||0x0,this[_0x482efe(0x798)]()[_0x482efe(0x65f)](_0x7d7be4,_0x703af3,_0x150c36);}}VisuMZ[_0x482efe(0x4f3)][_0x482efe(0x52a)](_0x3ffe83);},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0xb2f)]=function(_0x23c103){const _0x2367b3=_0x3823ba,_0x3313a2=['PreApplyJS',_0x2367b3(0xbdf),_0x2367b3(0x388),_0x2367b3(0x2be),_0x2367b3(0x54f),'PostStartActionJS',_0x2367b3(0xd52),_0x2367b3(0xae8)];for(const _0x3a2037 of _0x3313a2){VisuMZ[_0x2367b3(0x4f3)]['createJS'](_0x23c103,_0x3a2037);}const _0x42f85a=_0x23c103[_0x2367b3(0x920)];if(_0x42f85a[_0x2367b3(0xd57)](/<ALWAYS CRITICAL/i)){if('KHLsC'!==_0x2367b3(0x410)){const _0x41080f=_0x52d586['aliveMembers']();_0x4bf74a=_0x24e458['concat'](_0x41080f),_0x5514c0[_0x2367b3(0xb0a)]()&&_0x41080f[_0x2367b3(0xb23)]>0x1&&this[_0x2367b3(0x9f6)]('pagedown',this[_0x2367b3(0xb80)][_0x2367b3(0x343)](this));}else _0x23c103[_0x2367b3(0x806)]['critical']=!![];}_0x42f85a[_0x2367b3(0xd57)](/<(?:REPEAT|REPEATS|REPEAT HITS):[ ](\d+)/i)&&(_0x23c103[_0x2367b3(0x7fd)]=Math[_0x2367b3(0xd19)](0x1,Number(RegExp['$1']))),_0x42f85a[_0x2367b3(0xd57)](/<TARGET:[ ](.*)>/i)&&(_0x23c103[_0x2367b3(0x58f)]=String(RegExp['$1'])[_0x2367b3(0x2d8)]()[_0x2367b3(0xaf4)]());},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x52a)]=function(_0x3ff412){const _0x11ce26=_0x3823ba,_0xecbc38=[_0x11ce26(0x77a),_0x11ce26(0x92d),'PreDamageAsUserJS',_0x11ce26(0xabd),_0x11ce26(0x4df),_0x11ce26(0xcf9),'PreDamageAsTargetJS',_0x11ce26(0x4cf),'PreStartActionJS',_0x11ce26(0x24d),_0x11ce26(0xd52),_0x11ce26(0xae8),_0x11ce26(0x926),'PostStartBattleJS',_0x11ce26(0x864),_0x11ce26(0x1a5),_0x11ce26(0x5c6),_0x11ce26(0xd5f),_0x11ce26(0x9c1),_0x11ce26(0x642),_0x11ce26(0xaf0),'PostStartTurnJS',_0x11ce26(0xb2d),_0x11ce26(0x5a2),_0x11ce26(0x9fb),'PostRegenerateJS'];for(const _0x4eea0b of _0xecbc38){if(_0x11ce26(0xadf)===_0x11ce26(0x738)){const _0x1d2e82=this[_0x11ce26(0xcc0)](),_0x5965ec=_0x1d2e82[0x0]?_0x1d2e82[0x0][_0x11ce26(0x1af)]:0x0,_0x1bfdcf=_0xf18190['attackMotions'][_0x5965ec];_0x1bfdcf&&this['startWeaponAnimation'](_0x1bfdcf[_0x11ce26(0x360)]);}else VisuMZ[_0x11ce26(0x4f3)][_0x11ce26(0x459)](_0x3ff412,_0x4eea0b);}},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x40c)]=function(_0x41905e){const _0x28acea=_0x3823ba,_0x45064e=_0x41905e[_0x28acea(0x920)];if(_0x45064e[_0x28acea(0xd57)](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){if('lQtgB'===_0x28acea(0x621))return _0x152b40[_0x28acea(0xd31)]()[_0x28acea(0x3a2)](_0x212098=>_0x212098!==_0x4b624e);else{const _0x714273=String(RegExp['$1']),_0x5ddce9=VisuMZ['BattleCore'][_0x28acea(0x4e9)](_0x41905e,_0x28acea(0xad2));VisuMZ[_0x28acea(0x4f3)]['createTargetsJS'](_0x714273,_0x5ddce9);}}if(_0x45064e['match'](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){const _0x1ba2d6=String(RegExp['$1']),_0x45dba9=VisuMZ[_0x28acea(0x4f3)][_0x28acea(0x4e9)](_0x41905e,'CommandVisible');VisuMZ['BattleCore'][_0x28acea(0x2b1)](_0x1ba2d6,_0x45dba9);}},VisuMZ['BattleCore']['JS']={},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x459)]=function(_0x90297e,_0x1b6e19){const _0x2edde1=_0x3823ba,_0x5ada50=_0x90297e[_0x2edde1(0x920)];if(_0x5ada50[_0x2edde1(0xd57)](VisuMZ['BattleCore']['RegExp'][_0x1b6e19])){if('SqaNB'==='MRhPM')return _0x4a69c6['canEscape']();else{const _0x1bd552=RegExp['$1'],_0x23ba6a='\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20value\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalValue\x20=\x20value;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(value)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20value\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20value\x20to\x20%2\x27.format(\x27\x27,originalValue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20'[_0x2edde1(0xabf)](_0x1bd552),_0x1e628a=VisuMZ['BattleCore'][_0x2edde1(0x4e9)](_0x90297e,_0x1b6e19);VisuMZ[_0x2edde1(0x4f3)]['JS'][_0x1e628a]=new Function(_0x23ba6a);}}},VisuMZ['BattleCore'][_0x3823ba(0x4e9)]=function(_0xfe5f38,_0x24bc43){const _0x4dee90=_0x3823ba;if(VisuMZ['createKeyJS'])return VisuMZ[_0x4dee90(0x4e9)](_0xfe5f38,_0x24bc43);let _0x59f9d4='';if($dataActors['includes'](_0xfe5f38))_0x59f9d4='Actor-%1-%2'[_0x4dee90(0xabf)](_0xfe5f38['id'],_0x24bc43);if($dataClasses[_0x4dee90(0x97e)](_0xfe5f38))_0x59f9d4=_0x4dee90(0x3c3)[_0x4dee90(0xabf)](_0xfe5f38['id'],_0x24bc43);if($dataSkills[_0x4dee90(0x97e)](_0xfe5f38))_0x59f9d4=_0x4dee90(0x33a)[_0x4dee90(0xabf)](_0xfe5f38['id'],_0x24bc43);if($dataItems[_0x4dee90(0x97e)](_0xfe5f38))_0x59f9d4='Item-%1-%2'[_0x4dee90(0xabf)](_0xfe5f38['id'],_0x24bc43);if($dataWeapons[_0x4dee90(0x97e)](_0xfe5f38))_0x59f9d4=_0x4dee90(0x660)[_0x4dee90(0xabf)](_0xfe5f38['id'],_0x24bc43);if($dataArmors[_0x4dee90(0x97e)](_0xfe5f38))_0x59f9d4=_0x4dee90(0xd86)[_0x4dee90(0xabf)](_0xfe5f38['id'],_0x24bc43);if($dataEnemies[_0x4dee90(0x97e)](_0xfe5f38))_0x59f9d4='Enemy-%1-%2'[_0x4dee90(0xabf)](_0xfe5f38['id'],_0x24bc43);if($dataStates[_0x4dee90(0x97e)](_0xfe5f38))_0x59f9d4=_0x4dee90(0xb5d)[_0x4dee90(0xabf)](_0xfe5f38['id'],_0x24bc43);return _0x59f9d4;},VisuMZ[_0x3823ba(0x4f3)]['createTargetsJS']=function(_0x296af6,_0x4386e2){const _0x29165f=_0x3823ba,_0x8eeec3='\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20targets\x20=\x20arguments[1];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20targets\x20||\x20[];\x0a\x20\x20\x20\x20'[_0x29165f(0xabf)](_0x296af6);VisuMZ[_0x29165f(0x4f3)]['JS'][_0x4386e2]=new Function(_0x8eeec3);},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x2b1)]=function(_0x3bed53,_0x2310f1){const _0x40a1e9=_0x3823ba,_0x4d221a=_0x40a1e9(0x943)['format'](_0x3bed53);VisuMZ[_0x40a1e9(0x4f3)]['JS'][_0x2310f1]=new Function(_0x4d221a);},TextManager[_0x3823ba(0xbf5)]=VisuMZ['BattleCore']['Settings'][_0x3823ba(0x4e2)][_0x3823ba(0x78f)],TextManager[_0x3823ba(0xd4b)]=VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x242)][_0x3823ba(0x9d8)][_0x3823ba(0x44b)],TextManager[_0x3823ba(0x47f)]=VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x242)][_0x3823ba(0x9d8)][_0x3823ba(0xd6e)],TextManager['visualHpGauge']=VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x242)][_0x3823ba(0xb40)][_0x3823ba(0x301)],ColorManager['getColor']=function(_0x1ab0b3){const _0x344fe7=_0x3823ba;_0x1ab0b3=String(_0x1ab0b3);if(_0x1ab0b3[_0x344fe7(0xd57)](/#(.*)/i)){if(_0x344fe7(0x9ff)==='LpXdB')_0x482403[_0x344fe7(0x953)]=![];else return _0x344fe7(0x26b)['format'](String(RegExp['$1']));}else return this['textColor'](Number(_0x1ab0b3));},DataManager[_0x3823ba(0x341)]=function(_0x1a1bda){const _0x5b0d9d=_0x3823ba;if(_0x1a1bda[_0x5b0d9d(0x920)][_0x5b0d9d(0xd57)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x34f384=String(RegExp['$1'])['toUpperCase']()[_0x5b0d9d(0xaf4)]();if(_0x34f384===_0x5b0d9d(0x754))return _0x5b0d9d(0x754);if(VisuMZ['DamageStyles'][_0x34f384])return _0x34f384;}const _0x3943f2=VisuMZ[_0x5b0d9d(0x4f3)]['Settings'][_0x5b0d9d(0x630)][_0x5b0d9d(0x40e)][_0x5b0d9d(0x2d8)]()[_0x5b0d9d(0xaf4)]();if(VisuMZ['DamageStyles'][_0x3943f2])return _0x3943f2;return _0x5b0d9d(0x754);},DataManager[_0x3823ba(0x680)]=function(_0x2eb179){const _0x3d5a5f=_0x3823ba;_0x2eb179=_0x2eb179[_0x3d5a5f(0x2d8)]()[_0x3d5a5f(0xaf4)](),this['_stypeIDs']=this[_0x3d5a5f(0x1b1)]||{};if(this[_0x3d5a5f(0x1b1)][_0x2eb179])return this[_0x3d5a5f(0x1b1)][_0x2eb179];for(let _0x3de2c2=0x1;_0x3de2c2<0x64;_0x3de2c2++){if(!$dataSystem[_0x3d5a5f(0xad0)][_0x3de2c2])continue;let _0x58536a=$dataSystem[_0x3d5a5f(0xad0)][_0x3de2c2][_0x3d5a5f(0x2d8)]()[_0x3d5a5f(0xaf4)]();_0x58536a=_0x58536a['replace'](/\x1I\[(\d+)\]/gi,''),_0x58536a=_0x58536a[_0x3d5a5f(0x7fc)](/\\I\[(\d+)\]/gi,''),this[_0x3d5a5f(0x1b1)][_0x58536a]=_0x3de2c2;}return this[_0x3d5a5f(0x1b1)][_0x2eb179]||0x0;},DataManager[_0x3823ba(0x588)]=function(_0xfc0644){const _0x2dc979=_0x3823ba;_0xfc0644=_0xfc0644['toUpperCase']()[_0x2dc979(0xaf4)](),this[_0x2dc979(0x5d4)]=this[_0x2dc979(0x5d4)]||{};if(this[_0x2dc979(0x5d4)][_0xfc0644])return this[_0x2dc979(0x5d4)][_0xfc0644];for(const _0xa4d578 of $dataSkills){if(_0x2dc979(0xa49)===_0x2dc979(0x9b3))this['drawTextEx'](_0x3083ef,_0x205f19['x']+_0x5a57a5[_0x2dc979(0x204)]-_0x5386b8,_0x5d7c03['y'],_0x11e9a8);else{if(!_0xa4d578)continue;this[_0x2dc979(0x5d4)][_0xa4d578['name'][_0x2dc979(0x2d8)]()[_0x2dc979(0xaf4)]()]=_0xa4d578['id'];}}return this[_0x2dc979(0x5d4)][_0xfc0644]||0x0;},DataManager[_0x3823ba(0xd5a)]=function(_0xc757ea){const _0x1e16b1=_0x3823ba;_0xc757ea=_0xc757ea['toUpperCase']()[_0x1e16b1(0xaf4)](),this[_0x1e16b1(0x5e6)]=this[_0x1e16b1(0x5e6)]||{};if(this[_0x1e16b1(0x5e6)][_0xc757ea])return this[_0x1e16b1(0x5e6)][_0xc757ea];for(const _0xe7de45 of $dataEnemies){if(!_0xe7de45)continue;this[_0x1e16b1(0x5e6)][_0xe7de45[_0x1e16b1(0x450)][_0x1e16b1(0x2d8)]()[_0x1e16b1(0xaf4)]()]=_0xe7de45['id'];}return this['_enemyIDs'][_0xc757ea]||0x0;},DataManager[_0x3823ba(0x644)]=function(_0x577fdf){const _0x2fc5cc=_0x3823ba;_0x577fdf=_0x577fdf[_0x2fc5cc(0x2d8)]()['trim'](),this[_0x2fc5cc(0x656)]=this['_wtypeIDs']||{};if(this[_0x2fc5cc(0x656)][_0x577fdf])return this[_0x2fc5cc(0x656)][_0x577fdf];for(let _0x3259ca=0x1;_0x3259ca<0x64;_0x3259ca++){if(_0x2fc5cc(0xc72)!==_0x2fc5cc(0xc72)){let _0x334054=0x0;if(this['_distortionSprite']&&this['constructor']!==_0xf93175){const _0x4c45f7=this[_0x2fc5cc(0xc5c)]['scale']['y'];_0x334054-=(_0x4c45f7-0x1)*this['height'];}return _0x334054;}else{if(!$dataSystem[_0x2fc5cc(0xaf6)][_0x3259ca])continue;let _0x3a3f45=$dataSystem[_0x2fc5cc(0xaf6)][_0x3259ca][_0x2fc5cc(0x2d8)]()[_0x2fc5cc(0xaf4)]();_0x3a3f45=_0x3a3f45['replace'](/\x1I\[(\d+)\]/gi,''),_0x3a3f45=_0x3a3f45[_0x2fc5cc(0x7fc)](/\\I\[(\d+)\]/gi,''),this[_0x2fc5cc(0x656)][_0x3a3f45]=_0x3259ca;}}return this[_0x2fc5cc(0x656)][_0x2fc5cc(0x24a)]=0x0,this[_0x2fc5cc(0x656)][_0x577fdf]||0x0;},DataManager['battleDisplayText']=function(_0xac7522){const _0x91fa3d=_0x3823ba,_0x2ac7a3=_0x91fa3d(0xaa2);let _0x6b392e=_0xac7522[_0x91fa3d(0x565)],_0x427e81=_0xac7522[_0x91fa3d(0x450)];const _0x449ede=_0xac7522[_0x91fa3d(0x920)];return _0x449ede[_0x91fa3d(0xd57)](/<DISPLAY ICON: (\d+)>/i)&&(_0x91fa3d(0x2b3)===_0x91fa3d(0x92a)?_0x1b7ff0=_0x5dec0e[_0x91fa3d(0x4f3)]['Game_Action_makeTargets'][_0x91fa3d(0x162)](this):_0x6b392e=Number(RegExp['$1'])),_0x449ede[_0x91fa3d(0xd57)](/<DISPLAY TEXT: (.*)>/i)&&(_0x427e81=String(RegExp['$1'])),_0x2ac7a3[_0x91fa3d(0xabf)](_0x6b392e,_0x427e81);},DataManager[_0x3823ba(0x2e3)]=function(_0x860974){const _0x39a258=_0x3823ba;if(_0x860974['note'][_0x39a258(0xd57)](/<COMMAND TEXT: (.*)>/i))return String(RegExp['$1']);else{if(_0x39a258(0x2db)===_0x39a258(0x918))this[_0x39a258(0xcbc)](_0x4440e3,_0x1e41fd,_0x127132);else return _0x860974[_0x39a258(0x450)];}},DataManager[_0x3823ba(0xbbe)]=function(_0x343fdb){const _0x55d128=_0x3823ba;return _0x343fdb['note'][_0x55d128(0xd57)](/<COMMAND ICON: (\d+)>/i)?Number(RegExp['$1']):_0x343fdb[_0x55d128(0x565)];},DataManager[_0x3823ba(0x2fd)]=function(_0x4357f3){const _0x11d18a=_0x3823ba,_0x46233d=$dataEnemies[_0x4357f3];if(_0x46233d){if(_0x46233d['note']['match'](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){if(_0x11d18a(0x792)===_0x11d18a(0x98d))return _0x93b771[_0x11d18a(0xba1)]('ok');else{const _0x338a03=String(RegExp['$1'])[_0x11d18a(0x22f)](/[\r\n]+/)[_0x11d18a(0xbc4)](''),_0x204680=this[_0x11d18a(0xb8f)](_0x338a03);_0x4357f3=this[_0x11d18a(0xd5a)](_0x204680)||_0x4357f3,_0x4357f3=DataManager[_0x11d18a(0x2fd)](_0x4357f3);}}}return _0x4357f3;},DataManager[_0x3823ba(0xb8f)]=function(_0x16eb83){const _0x2c0af0=_0x3823ba;let _0x28f517=0x0;const _0x403c04={};for(const _0x366434 of _0x16eb83){if(_0x366434[_0x2c0af0(0xd57)](/(.*):[ ](\d+)/i)){if('tNFGZ'===_0x2c0af0(0x323))this['requestMotion'](_0x2c0af0(0x687));else{const _0x3b71fd=String(RegExp['$1'])[_0x2c0af0(0xaf4)](),_0x31ad0c=Number(RegExp['$2']);_0x403c04[_0x3b71fd]=_0x31ad0c,_0x28f517+=_0x31ad0c;}}else{if(_0x366434[_0x2c0af0(0xd57)](/(.*):[ ](\d+\.?\d+)/i)){if(_0x2c0af0(0xd05)!==_0x2c0af0(0x856)){const _0x16dd44=String(RegExp['$1'])[_0x2c0af0(0xaf4)](),_0x33c33b=Number(RegExp['$2']);_0x403c04[_0x16dd44]=_0x33c33b,_0x28f517+=_0x33c33b;}else return _0x51392e[_0x2c0af0(0x3a2)](_0x147b7f=>_0x147b7f[_0x2c0af0(0x8ed)]()&&_0x147b7f!==_0x3650ed);}else _0x366434!==''&&(_0x2c0af0(0x40d)!=='NIWww'?_0x1a311d=_0x1f92af(_0x2f2524['$1']):(_0x403c04[_0x366434]=0x1,_0x28f517++));}}if(_0x28f517<=0x0)return'';let _0x54b2eb=Math[_0x2c0af0(0x30f)]()*_0x28f517;for(const _0x244424 in _0x403c04){if('PKaCO'!==_0x2c0af0(0x69f)){_0x54b2eb-=_0x403c04[_0x244424];if(_0x54b2eb<=0x0)return _0x244424;}else{if(!_0x3b8ce8['VisuMZ_3_ActSeqImpact'])return;const _0x244687=_0x2b73e2[_0x2c0af0(0xaa3)][_0x2c0af0(0x8a5)];if(!_0x244687)return;if(_0x1ac174[_0x2c0af0(0x79b)]['version']<=1.04){_0x4f3c73(_0x2c0af0(0x25b)),_0x1ecbe4['exit']();return;}_0x352409['ConvertParams'](_0x83722b,_0x273bb9);const _0x5ae294=_0x99fad6['Enable'];_0x244687['setupBlueRedInvertImpactFilter'](_0x5ae294);}}return'';},DataManager['checkAutoCustomActionSequenceNotetagEffect']=function(_0x4e490f){const _0x326e84=_0x3823ba;if(!_0x4e490f)return![];if(!VisuMZ[_0x326e84(0x4f3)][_0x326e84(0x242)][_0x326e84(0x871)]['AutoNotetag'])return![];if(_0x4e490f[_0x326e84(0x920)][_0x326e84(0xd57)](/<AUTO ACTION SEQUENCE>/i))return![];if(_0x4e490f['note']['match'](/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi))return!![];for(const _0x7948a0 of _0x4e490f[_0x326e84(0x3e6)]){if(!_0x7948a0)continue;if(_0x7948a0[_0x326e84(0xcad)]===Game_Action['EFFECT_COMMON_EVENT'])return!![];}return![];},DataManager[_0x3823ba(0x6fe)]=function(_0x54ea57){const _0x2d6f03=_0x3823ba,_0x5bf24a=$dataTroops[_0x54ea57];if(!_0x5bf24a)return'';let _0x35c01f='';_0x35c01f+=_0x5bf24a[_0x2d6f03(0x450)];for(const _0x5c21c3 of _0x5bf24a[_0x2d6f03(0x748)]){for(const _0xdd741a of _0x5c21c3[_0x2d6f03(0x934)]){if('arSII'!==_0x2d6f03(0x709))return this[_0x2d6f03(0xa9a)]()?this[_0x2d6f03(0xd0f)]()&&this[_0x2d6f03(0xd0f)]()[_0x2d6f03(0x733)]()&&!this[_0x2d6f03(0xd0f)]()[_0x2d6f03(0xcd0)]():this[_0x2d6f03(0xd0f)]()&&this[_0x2d6f03(0xd0f)]()[_0x2d6f03(0x733)]()&&!this[_0x2d6f03(0xd0f)]()[_0x2d6f03(0x6bf)]();else[0x6c,0x198][_0x2d6f03(0x97e)](_0xdd741a['code'])&&(_0x35c01f+='\x0a',_0x35c01f+=_0xdd741a['parameters'][0x0]);}}return _0x35c01f;},ConfigManager[_0x3823ba(0x217)]=ConfigManager['autoBattleAtStart']??![],ConfigManager[_0x3823ba(0x698)]=ConfigManager[_0x3823ba(0x698)]??![],ConfigManager[_0x3823ba(0x947)]=ConfigManager[_0x3823ba(0x947)]??!![],VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x265)]=ConfigManager[_0x3823ba(0x9ab)],ConfigManager['makeData']=function(){const _0x1be737=_0x3823ba,_0x2a5a95=VisuMZ[_0x1be737(0x4f3)][_0x1be737(0x265)][_0x1be737(0x162)](this);return _0x2a5a95[_0x1be737(0x217)]=this[_0x1be737(0x217)],_0x2a5a95['autoBattleUseSkills']=this[_0x1be737(0x698)],_0x2a5a95['visualHpGauge']=this[_0x1be737(0x947)],_0x2a5a95;},VisuMZ['BattleCore']['ConfigManager_applyData']=ConfigManager[_0x3823ba(0x1a2)],ConfigManager[_0x3823ba(0x1a2)]=function(_0x46944d){const _0x483de7=_0x3823ba;VisuMZ[_0x483de7(0x4f3)][_0x483de7(0x478)][_0x483de7(0x162)](this,_0x46944d),_0x483de7(0x217)in _0x46944d?_0x483de7(0x61c)==='BrgAz'?this['autoBattleAtStart']=_0x46944d[_0x483de7(0x217)]:_0x2f6fca=_0x483de7(0x4e6):_0x483de7(0x54c)===_0x483de7(0x900)?this[_0x483de7(0x9ba)]=_0x5452fd[_0x483de7(0x8cf)]()[_0x483de7(0xaf4)]():this['autoBattleAtStart']=![],_0x483de7(0x698)in _0x46944d?this[_0x483de7(0x698)]=_0x46944d[_0x483de7(0x698)]:_0x483de7(0xcf1)==='GHhDP'?this[_0x483de7(0x698)]=![]:(_0x987b47[_0x483de7(0xd92)](_0x516c23[0x2],_0x1b4c35[0x3]),_0x27538a[_0x483de7(0xd92)](_0x25ce6a)),_0x483de7(0x947)in _0x46944d?this[_0x483de7(0x947)]=_0x46944d['visualHpGauge']:_0x483de7(0xbd3)!==_0x483de7(0x345)?this[_0x483de7(0x947)]=!![]:_0x5d572d[_0x483de7(0xccb)](_0x149d0['SwitchCritical'],![]);},ImageManager['svActorHorzCells']=ImageManager[_0x3823ba(0x95f)]||0x9,ImageManager[_0x3823ba(0x214)]=ImageManager['svActorVertCells']||0x6,VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x585)]=BattleManager[_0x3823ba(0xa63)],BattleManager[_0x3823ba(0xa63)]=function(_0x1a5b19,_0x1669eb,_0x2a4a25){const _0x273a77=_0x3823ba;VisuMZ[_0x273a77(0x4f3)][_0x273a77(0x585)][_0x273a77(0x162)](this,_0x1a5b19,_0x1669eb,_0x2a4a25),this[_0x273a77(0xafe)]={};},VisuMZ['BattleCore'][_0x3823ba(0xcba)]=BattleManager[_0x3823ba(0x6f2)],BattleManager[_0x3823ba(0x6f2)]=function(){const _0x1da7ef=_0x3823ba;VisuMZ[_0x1da7ef(0x4f3)][_0x1da7ef(0xcba)][_0x1da7ef(0x162)](this),this['_forcedBattlers']=[];},BattleManager[_0x3823ba(0x805)]=function(){const _0x22d9ff=_0x3823ba;if(!SceneManager[_0x22d9ff(0xbc6)]())return;const _0xa63518=SceneManager[_0x22d9ff(0xaa3)]['_statusWindow'];if(_0xa63518)_0xa63518[_0x22d9ff(0x779)]();},BattleManager[_0x3823ba(0x93b)]=function(){const _0x11dd2f=_0x3823ba;if(BattleManager['isTpb']())return _0x11dd2f(0xbcc);return _0x11dd2f(0xa33);},BattleManager[_0x3823ba(0xa6d)]=function(_0xa0ca1b){const _0x5b3651=_0x3823ba;return _0xa0ca1b=_0xa0ca1b[_0x5b3651(0x2d8)]()[_0x5b3651(0xaf4)](),this[_0x5b3651(0x93b)]()===_0xa0ca1b;},BattleManager['isDTB']=function(){const _0x335821=_0x3823ba;return this[_0x335821(0xa6d)](_0x335821(0xa33));},BattleManager[_0x3823ba(0xc78)]=function(){const _0x2dcfe9=_0x3823ba;return this[_0x2dcfe9(0x5d6)]();},BattleManager['isTickBased']=function(){const _0x1f8adc=_0x3823ba;return!this[_0x1f8adc(0xc78)]();},BattleManager['isTeamBased']=function(){const _0x49c45f=_0x3823ba;return!this[_0x49c45f(0xc78)]()&&!this['isTickBased']();},BattleManager[_0x3823ba(0x87f)]=function(_0x47461c){const _0x4d724e=_0x3823ba;this['_battlerKeyCache']=this[_0x4d724e(0xafe)]||{};if(this[_0x4d724e(0xafe)][_0x47461c]!==undefined)return this['_battlerKeyCache'][_0x47461c];this[_0x4d724e(0xafe)][_0x47461c]=null;const _0x56db6e=this[_0x4d724e(0xbee)](),_0x485b61=_0x56db6e[_0x4d724e(0x1b8)](_0x531d87=>_0x531d87[_0x4d724e(0xc8a)]()===_0x47461c);if(_0x485b61)this[_0x4d724e(0xafe)][_0x47461c]=_0x485b61;return this[_0x4d724e(0xafe)][_0x47461c];},Game_BattlerBase[_0x3823ba(0x8d6)][_0x3823ba(0xc8a)]=function(){const _0x181899=_0x3823ba;return _0x181899(0xd58)['format'](this[_0x181899(0x4e0)]()?_0x181899(0x846):_0x181899(0x634),this['name']());},Game_Action[_0x3823ba(0x8d6)][_0x3823ba(0x7f2)]=function(_0x5348f6){const _0x4cf917=_0x3823ba;if(this[_0x4cf917(0x9ba)]!=='')return;typeof _0x5348f6===_0x4cf917(0x1ec)?_0x4cf917(0xb48)==='sriJl'?_0x3c9f74[_0x4cf917(0xc87)]()[_0x4cf917(0x293)]?this[_0x4cf917(0x3d9)](_0x4cf917(0x1fd),_0x2fd48e):this['push']('performMagicEvasion',_0x22d189):this[_0x4cf917(0x9ba)]=_0x5348f6[_0x4cf917(0x8cf)]()[_0x4cf917(0xaf4)]():this[_0x4cf917(0x9ba)]=_0x5348f6[_0x4cf917(0xc8a)]();},Game_Action[_0x3823ba(0x8d6)][_0x3823ba(0xb2a)]=function(){const _0x28b30d=_0x3823ba;return[this[_0x28b30d(0xd56)]()];},Game_Action[_0x3823ba(0x8d6)]['getSpecificBattlerKeyTarget']=function(){const _0x27abd7=_0x3823ba,_0x53a294=this['_targetBattlerKey']||'',_0x4a2715=BattleManager[_0x27abd7(0x87f)](_0x53a294);if(!_0x4a2715)return this[_0x27abd7(0x84f)]();if(!_0x4a2715[_0x27abd7(0x8ed)]())return this[_0x27abd7(0x84f)]();return _0x4a2715;},Game_Action[_0x3823ba(0x8d6)][_0x3823ba(0x84f)]=function(){const _0x436873=_0x3823ba,_0x35a464=this['_targetBattlerKey'];return _0x35a464[_0x436873(0xd57)](/ACTOR/i)?this[_0x436873(0x691)]()[_0x436873(0x663)]():this[_0x436873(0x686)]()['trueRandomTarget']();},BattleManager[_0x3823ba(0x658)]=function(){const _0x5aa30e=_0x3823ba;return this['allBattleMembers']()[_0x5aa30e(0x3a2)](_0x565b8d=>_0x565b8d['isSelected']());},BattleManager[_0x3823ba(0x64f)]=function(_0x5130c0){const _0x52a51e=_0x3823ba;if(_0x5130c0===_0x52a51e(0x5c6)){if(_0x52a51e(0x2ac)!==_0x52a51e(0x284))this[_0x52a51e(0x8d2)]=!![];else{if(!_0x464b3c['prototype'][_0x52a51e(0xceb)][_0x52a51e(0x162)](this,_0x8f1467))return!![];if(!_0x4691c8[_0x52a51e(0x8d6)]['checkShowHideSwitchNotetags'][_0x52a51e(0x162)](this,_0x1bac3c))return!![];if(!_0x2dab2d['prototype']['checkShowHideSkillNotetags'][_0x52a51e(0x162)](this,_0x22071d))return!![];}}$gameParty[_0x52a51e(0x64f)](_0x5130c0),$gameTroop[_0x52a51e(0x64f)](_0x5130c0);},VisuMZ[_0x3823ba(0x4f3)]['BattleManager_startBattle']=BattleManager[_0x3823ba(0xbf7)],BattleManager[_0x3823ba(0xbf7)]=function(){const _0x1b7d6e=_0x3823ba;this['_endBattle']=![],this[_0x1b7d6e(0x670)]=ConfigManager['autoBattleAtStart'],this['_endingBattle']=![],this[_0x1b7d6e(0x64f)](_0x1b7d6e(0x926)),VisuMZ[_0x1b7d6e(0x4f3)]['BattleManager_startBattle']['call'](this),this['processBattleCoreJS'](_0x1b7d6e(0x433));},BattleManager[_0x3823ba(0x9bb)]=function(_0x4aead3){const _0x385e45=_0x3823ba,_0x511d16=VisuMZ[_0x385e45(0x4f3)]['Settings']['Mechanics'];_0x4aead3!==_0x385e45(0x6d4)&&_0x511d16[_0x385e45(0xc84)]&&VisuMZ[_0x385e45(0x4f3)]['CheckMapBattleEventValid'](_0x511d16['BattleEndEvent'])&&$gameTemp['reserveCommonEvent'](_0x511d16[_0x385e45(0xc84)]);const _0x260623=_0x385e45(0x891)[_0x385e45(0xabf)](_0x4aead3);if(_0x511d16[_0x260623]&&VisuMZ[_0x385e45(0x4f3)][_0x385e45(0x13d)](_0x511d16[_0x260623])){if(_0x385e45(0x4ec)!=='YhmUw')$gameTemp[_0x385e45(0x7ed)](_0x511d16[_0x260623]);else{this[_0x385e45(0x6ef)]=this[_0x385e45(0x6ef)]||{};const _0x21e8c1=_0x823484['battlerKey']();this[_0x385e45(0x6ef)][_0x21e8c1]=_0xd13870;}}},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x5a5)]=BattleManager['checkBattleEnd'],BattleManager[_0x3823ba(0x742)]=function(){const _0xef6547=_0x3823ba;if(this[_0xef6547(0xa28)]===_0xef6547(0x693)){if($gameTemp[_0xef6547(0x7d8)]())return![];}return VisuMZ['BattleCore'][_0xef6547(0x5a5)][_0xef6547(0x162)](this);},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x579)]=BattleManager['processVictory'],BattleManager[_0x3823ba(0x406)]=function(){const _0x5a99ab=_0x3823ba;this[_0x5a99ab(0x8d2)]=!![],this[_0x5a99ab(0x64f)]('BattleVictoryJS'),VisuMZ[_0x5a99ab(0x4f3)][_0x5a99ab(0x579)][_0x5a99ab(0x162)](this),this[_0x5a99ab(0x9bb)](_0x5a99ab(0x370));},VisuMZ[_0x3823ba(0x4f3)]['BattleManager_processAbort']=BattleManager['processAbort'],BattleManager['processAbort']=function(){const _0x48c1e5=_0x3823ba;this[_0x48c1e5(0x8d2)]=!![],VisuMZ[_0x48c1e5(0x4f3)]['BattleManager_processAbort']['call'](this);},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x1c7)]=BattleManager[_0x3823ba(0x490)],BattleManager[_0x3823ba(0x490)]=function(){const _0x406eee=_0x3823ba;this['_endingBattle']=!![],this[_0x406eee(0x64f)](_0x406eee(0xd5f)),VisuMZ[_0x406eee(0x4f3)][_0x406eee(0x1c7)][_0x406eee(0x162)](this),this[_0x406eee(0x9bb)](_0x406eee(0x399));},VisuMZ[_0x3823ba(0x4f3)]['BattleManager_endBattle']=BattleManager['endBattle'],BattleManager[_0x3823ba(0x487)]=function(_0x2c9a0d){const _0x11c8ef=_0x3823ba;this[_0x11c8ef(0x1d1)]=!![],this['_autoBattle']=![],this[_0x11c8ef(0x64f)]('PreEndBattleJS'),VisuMZ[_0x11c8ef(0x4f3)][_0x11c8ef(0xaef)][_0x11c8ef(0x162)](this,_0x2c9a0d),this[_0x11c8ef(0x64f)](_0x11c8ef(0x1a5));},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x3ad)]=BattleManager['startTurn'],BattleManager['startTurn']=function(){const _0x5affa3=_0x3823ba;if(this[_0x5affa3(0xc78)]())this[_0x5affa3(0x64f)](_0x5affa3(0xaf0));VisuMZ[_0x5affa3(0x4f3)][_0x5affa3(0x3ad)][_0x5affa3(0x162)](this);if(this[_0x5affa3(0xc78)]())this[_0x5affa3(0x64f)](_0x5affa3(0x7bf));},BattleManager[_0x3823ba(0x46d)]=function(){const _0x180810=_0x3823ba,_0x3373c8=this[_0x180810(0x527)],_0x1f3f9b=_0x3373c8[_0x180810(0xd0f)]();if(_0x1f3f9b)_0x1f3f9b[_0x180810(0x875)](),_0x1f3f9b['isValid']()?_0x180810(0x469)==='EpmEp'?(this[_0x180810(0xd3e)](),_0x3373c8[_0x180810(0x3b7)]()):(this[_0x180810(0x64f)](_0x180810(0x9c1)),_0x541714[_0x180810(0x8a5)]['processEscape'](),_0x475313[_0x180810(0x4f3)]['BattleManager_onEscapeSuccess'][_0x180810(0x162)](this),this['processPostBattleCommonEvents'](_0x180810(0x235))):(_0x3373c8['removeCurrentAction'](),this[_0x180810(0x48f)]());else{if('vSCTn'==='vSCTn')this[_0x180810(0x48f)](),this[_0x180810(0x527)]=null;else{const _0xc2c483=this[_0x180810(0x9c0)][_0x180810(0xad0)](),_0xf2af36=_0xc2c483[_0x180810(0x3a2)](_0x3cca1b=>_0x28bca0[_0x180810(0x201)](_0x5b725c)['includes'](_0x3cca1b));return _0xf2af36['length']<=0x0;}}},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x4b6)]=BattleManager['startAction'],BattleManager[_0x3823ba(0xd3e)]=function(){const _0x28e4c2=_0x3823ba,_0x2d19bf=this[_0x28e4c2(0x527)][_0x28e4c2(0xd0f)](),_0x53669f=this[_0x28e4c2(0x527)];_0x2d19bf&&_0x2d19bf[_0x28e4c2(0x29d)]()===_0x53669f&&_0x2d19bf[_0x28e4c2(0x21e)](_0x28e4c2(0x54f));VisuMZ[_0x28e4c2(0x4f3)][_0x28e4c2(0x4b6)]['call'](this);if(_0x2d19bf&&_0x2d19bf[_0x28e4c2(0x29d)]()===_0x53669f){if(_0x28e4c2(0x2bf)===_0x28e4c2(0x2bf))_0x2d19bf[_0x28e4c2(0x21e)]('PostStartActionJS');else{_0x338dce+=_0x508391['x']-this['damageOffsetX']();const _0x141659=_0x2fb571['lineHeight']()*0x3/0x4;_0x3c0d9d=_0x18de5d['y']+_0x141659,_0x2ee1a7=_0x3d786a[_0x28e4c2(0x28a)](_0x51ea09,_0x1ad7bb['y']+this['y']-this[_0x28e4c2(0xd6d)]+_0x141659);}}},VisuMZ['BattleCore'][_0x3823ba(0x8c7)]=BattleManager[_0x3823ba(0x48f)],BattleManager[_0x3823ba(0x48f)]=function(){const _0x59c9af=_0x3823ba,_0x95e40c=this[_0x59c9af(0x131)],_0x4b06a8=this[_0x59c9af(0x527)];if(_0x95e40c&&_0x95e40c!==this[_0x59c9af(0xaa9)]&&_0x95e40c[_0x59c9af(0x29d)]()===_0x4b06a8){if(_0x59c9af(0x380)!==_0x59c9af(0xc19))_0x95e40c[_0x59c9af(0x21e)]('PreEndActionJS');else{const _0x465a04=_0x16a658['BattleCore'][_0x59c9af(0x242)][_0x59c9af(0x911)];if(_0x465a04[_0x59c9af(0x8f7)]>0x0&&_0x2e1870[_0x465a04[_0x59c9af(0x8f7)]]){const _0x526767=_0x3e7f41[_0x465a04['BattleStartEvent']],_0x5bcc07=_0x526767[_0x59c9af(0x934)][_0x59c9af(0xb23)]-0x2,_0xeadfd5=_0x526767[_0x59c9af(0x934)][_0x5bcc07];if(_0xeadfd5&&_0xeadfd5[_0x59c9af(0xcad)]!==0xe6){const _0xa5a7b3={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x141644=_0x526767[_0x59c9af(0x934)]['pop']();_0x526767['list'][_0x59c9af(0xaa5)](_0xa5a7b3),_0x526767[_0x59c9af(0x934)][_0x59c9af(0xaa5)](_0x141644);}}}}this[_0x59c9af(0x527)]?VisuMZ[_0x59c9af(0x4f3)]['BattleManager_endAction']['call'](this):this[_0x59c9af(0xa28)]='turn',_0x95e40c&&_0x95e40c!==this[_0x59c9af(0xaa9)]&&_0x95e40c[_0x59c9af(0x29d)]()===_0x4b06a8&&(_0x59c9af(0x20d)===_0x59c9af(0x5f1)?(this['_cursorArea']=new _0x5797f7(),this[_0x59c9af(0x717)][_0x59c9af(0x771)]=[new _0x362f57[(_0x59c9af(0x771))][(_0x59c9af(0x88e))]()],this[_0x59c9af(0x717)]['filterArea']=new _0x79e2a3(),this[_0x59c9af(0x717)][_0x59c9af(0x239)](this[_0x59c9af(0x5ca)],this[_0x59c9af(0x5ca)]),this[_0x59c9af(0x538)](this[_0x59c9af(0x717)])):_0x95e40c[_0x59c9af(0x21e)]('PostEndActionJS')),this[_0x59c9af(0xd3c)](this[_0x59c9af(0xbee)]()),this[_0x59c9af(0xaa9)]=this[_0x59c9af(0x131)];},BattleManager[_0x3823ba(0xd3c)]=function(_0x5e0958){const _0x1dabca=_0x3823ba;for(const _0x1ebad0 of _0x5e0958){if(_0x1dabca(0x2c0)!==_0x1dabca(0x2c0)){this[_0x1dabca(0x8ff)](0x0,0x0,0x0,0x0);return;}else{if(!_0x1ebad0)continue;if(!_0x1ebad0[_0x1dabca(0x798)]())continue;_0x1ebad0['battler']()['refreshMotion']();}}},BattleManager['updateAction']=function(){const _0x8aee8c=_0x3823ba;!this[_0x8aee8c(0xd61)][_0x8aee8c(0xd83)]()&&(_0x8aee8c(0x896)!=='XoyEh'?this['endAction']():(this[_0x8aee8c(0x820)]=new _0x290db1(),this[_0x8aee8c(0x538)](this['_damageContainer'])));},Game_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x647)]=function(){const _0x1f3f1e=_0x3823ba;this[_0x1f3f1e(0x3f6)]();if(Imported[_0x1f3f1e(0xa3c)]){const _0x34f272=VisuMZ['SkillsStatesCore']['Settings'][_0x1f3f1e(0x327)];_0x34f272&&_0x34f272[_0x1f3f1e(0x46c)]===![]&&(_0x1f3f1e(0x8b3)!==_0x1f3f1e(0xd75)?this[_0x1f3f1e(0xd13)](0x1):(_0x461e31=_0x58eba3[_0x1f3f1e(0x7fc)](/\x1I\[(\d+)\]/gi,''),_0x64961f=_0x20bb86[_0x1f3f1e(0x7fc)](/\\I\[(\d+)\]/gi,'')));}else this[_0x1f3f1e(0xd13)](0x1);this[_0x1f3f1e(0xa70)]();},BattleManager[_0x3823ba(0x6f0)]=function(){const _0x1e1e35=_0x3823ba;this['_escapeRatio']=VisuMZ[_0x1e1e35(0x4f3)][_0x1e1e35(0x242)][_0x1e1e35(0x911)][_0x1e1e35(0xadd)][_0x1e1e35(0x162)](this);},VisuMZ['BattleCore'][_0x3823ba(0xd90)]=BattleManager[_0x3823ba(0x52f)],BattleManager['onEscapeSuccess']=function(){const _0x37d359=_0x3823ba;this[_0x37d359(0x64f)]('EscapeSuccessJS'),BattleManager[_0x37d359(0x8a5)][_0x37d359(0x9ee)](),VisuMZ['BattleCore']['BattleManager_onEscapeSuccess'][_0x37d359(0x162)](this),this[_0x37d359(0x9bb)](_0x37d359(0x235));},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0xbbb)]=BattleManager[_0x3823ba(0x294)],BattleManager['onEscapeFailure']=function(){const _0x727a0f=_0x3823ba;this['processBattleCoreJS']('EscapeFailureJS');const _0x522ce3=this[_0x727a0f(0x182)];VisuMZ[_0x727a0f(0x4f3)][_0x727a0f(0xbbb)][_0x727a0f(0x162)](this),this[_0x727a0f(0x182)]=_0x522ce3+VisuMZ['BattleCore'][_0x727a0f(0x242)][_0x727a0f(0x911)][_0x727a0f(0x356)]['call'](this),this[_0x727a0f(0x339)]=![],this[_0x727a0f(0x9bb)](_0x727a0f(0x6d4));},BattleManager[_0x3823ba(0x764)]=function(){const _0x193810=_0x3823ba;let _0x138ccc=![];if(this['isDisplayEmergedEnemies']())for(const _0x12867b of $gameTroop[_0x193810(0x5b9)]()){this[_0x193810(0xd61)][_0x193810(0x3d9)](_0x193810(0xc47),TextManager['emerge']['format'](_0x12867b)),this[_0x193810(0xd61)]['push'](_0x193810(0x498)),_0x138ccc=!![];}if(this[_0x193810(0x731)])this[_0x193810(0xd61)][_0x193810(0x3d9)](_0x193810(0xc47),TextManager[_0x193810(0xbe3)][_0x193810(0xabf)]($gameParty[_0x193810(0x450)]())),this[_0x193810(0xd61)][_0x193810(0x3d9)]('wait');else this[_0x193810(0x840)]&&('WheuM'==='gTltZ'?(this[_0x193810(0xb54)]=!this[_0x193810(0xb27)](),_0x58fb1f['registerDefeatedEnemy'](this[_0x193810(0xce6)]())):(this[_0x193810(0xd61)][_0x193810(0x3d9)]('addText',TextManager[_0x193810(0xc61)][_0x193810(0xabf)]($gameParty['name']())),this[_0x193810(0xd61)][_0x193810(0x3d9)](_0x193810(0x498))));if(_0x138ccc){if(_0x193810(0x506)!==_0x193810(0x506)){if(this[_0x193810(0x9ba)]==='all\x20actors')return!![];return this[_0x193810(0x110)]()&&!this[_0x193810(0x8e2)]()?this[_0x193810(0xc15)]():_0x1877f9['BattleCore'][_0x193810(0x3cb)][_0x193810(0x162)](this);}else this['_logWindow'][_0x193810(0x3d9)](_0x193810(0x498)),this['_logWindow'][_0x193810(0x3d9)](_0x193810(0xcd2));}this[_0x193810(0xac0)]()&&this[_0x193810(0x334)]()&&(this['_tpbNeedsPartyCommand']=![]);},BattleManager[_0x3823ba(0x5b6)]=function(){const _0x3cc6cf=_0x3823ba;if(BattleManager[_0x3cc6cf(0x670)])return![];return VisuMZ['BattleCore']['Settings'][_0x3cc6cf(0x179)][_0x3cc6cf(0x40f)];},VisuMZ['BattleCore']['BattleManager_startInput']=BattleManager['startInput'],BattleManager['startInput']=function(){const _0x4c0ce0=_0x3823ba;VisuMZ[_0x4c0ce0(0x4f3)][_0x4c0ce0(0x59b)][_0x4c0ce0(0x162)](this);if(this[_0x4c0ce0(0x5d6)]()&&this['isSkipPartyCommandWindow']()&&!this[_0x4c0ce0(0x840)]&&$gameParty[_0x4c0ce0(0x9c3)]()){if('TbKNt'===_0x4c0ce0(0x50d))this[_0x4c0ce0(0x2d5)]();else{const _0x10e1d4=_0x52afa4(_0x126d22['$1']),_0x4112b9=_0x109ec1['BattleCore'][_0x4c0ce0(0x4e9)](_0x5162d4,'Targets');_0x35c870[_0x4c0ce0(0x4f3)][_0x4c0ce0(0xb6c)](_0x10e1d4,_0x4112b9);}}},BattleManager['isSkipPartyCommandWindow']=function(){const _0x3a2629=_0x3823ba;return VisuMZ[_0x3a2629(0x4f3)][_0x3a2629(0x242)][_0x3a2629(0x4e2)][_0x3a2629(0x90d)];},BattleManager[_0x3823ba(0x8dd)]=function(){const _0x2ffa1c=_0x3823ba;this[_0x2ffa1c(0xb53)]()&&this[_0x2ffa1c(0x2d5)]();},VisuMZ[_0x3823ba(0x4f3)]['Scene_Battle_startActorCommandSelection']=Scene_Battle['prototype'][_0x3823ba(0x4ad)],Scene_Battle[_0x3823ba(0x8d6)][_0x3823ba(0x4ad)]=function(){const _0x599fb4=_0x3823ba;VisuMZ[_0x599fb4(0x4f3)][_0x599fb4(0x9ea)][_0x599fb4(0x162)](this),BattleManager[_0x599fb4(0xac0)]()&&BattleManager[_0x599fb4(0xaaf)]&&(_0x599fb4(0x1c4)==='nfPFl'?_0x49ee11[_0x599fb4(0xab0)]('battleAnimation'):(BattleManager[_0x599fb4(0xaaf)]=![],this['actorCommandCancelTPB']()));},BattleManager[_0x3823ba(0x117)]=function(_0x3f8302,_0x1be44c,_0x8cfd4c){const _0x5173e2=_0x3823ba;if(!_0x8cfd4c)return;if(!_0x3f8302)return;if(!_0x1be44c)return;const _0x3a7c2b=this[_0x5173e2(0x131)];this[_0x5173e2(0x131)]=new Game_Action(_0x3f8302);if(DataManager['isItem'](_0x8cfd4c))this[_0x5173e2(0x131)][_0x5173e2(0xd37)](_0x8cfd4c['id']);if(DataManager['isSkill'](_0x8cfd4c))this[_0x5173e2(0x131)]['setSkill'](_0x8cfd4c['id']);if(this[_0x5173e2(0x131)][_0x5173e2(0x733)]())BattleManager['invokeAction'](_0x3f8302,_0x1be44c);this[_0x5173e2(0x131)]=_0x3a7c2b;},BattleManager[_0x3823ba(0x28e)]=function(_0x21b826,_0x338273){const _0x1ffdac=_0x3823ba;this[_0x1ffdac(0x131)][_0x1ffdac(0x112)]=_0x338273,this[_0x1ffdac(0xd61)][_0x1ffdac(0x6d7)](_0x338273),this[_0x1ffdac(0xd61)]['displayReflectionPlayBack'](_0x21b826,this[_0x1ffdac(0x131)]),this[_0x1ffdac(0x131)][_0x1ffdac(0x5b1)](_0x21b826),this[_0x1ffdac(0xd61)][_0x1ffdac(0x1c1)](_0x21b826,_0x21b826);},VisuMZ['BattleCore'][_0x3823ba(0xa12)]=BattleManager[_0x3823ba(0xc5b)],BattleManager[_0x3823ba(0xc5b)]=function(){const _0x37e2ce=_0x3823ba;VisuMZ[_0x37e2ce(0x4f3)][_0x37e2ce(0xa12)]['call'](this),this[_0x37e2ce(0xad6)]=this[_0x37e2ce(0xad6)][_0x37e2ce(0x3a2)](_0x329450=>_0x329450&&_0x329450[_0x37e2ce(0xb7d)]());},VisuMZ[_0x3823ba(0x4f3)]['BattleManager_updatePhase']=BattleManager[_0x3823ba(0x5f0)],BattleManager[_0x3823ba(0x5f0)]=function(_0x2ab320){const _0x3452d1=_0x3823ba;if(this[_0x3452d1(0xa28)]===_0x3452d1(0xb3d))this['updateCustomActionSequence']();else this[_0x3452d1(0xa28)]===_0x3452d1(0xd92)?this[_0x3452d1(0x796)]():VisuMZ[_0x3452d1(0x4f3)][_0x3452d1(0x531)][_0x3452d1(0x162)](this,_0x2ab320);},BattleManager['prepareCustomActionSequence']=function(){const _0x3f91b2=_0x3823ba;this[_0x3f91b2(0xa71)]=this[_0x3f91b2(0x36e)][_0x3f91b2(0xc36)](0x0),this[_0x3f91b2(0x751)]=0x0,this['_target']=this[_0x3f91b2(0xa71)][0x0]||null,this[_0x3f91b2(0xa28)]='custom';},BattleManager[_0x3823ba(0x1b0)]=function(){const _0x822115=_0x3823ba;!this['updateEventMain']()&&!this[_0x822115(0xd61)][_0x822115(0xd83)]()&&(this['_phase']=_0x822115(0x616));},BattleManager[_0x3823ba(0xd92)]=function(_0x21f271){const _0x2fef4b=_0x3823ba;this['_actionBattlers'][_0x2fef4b(0xbc4)](_0x21f271);if(_0x21f271===this[_0x2fef4b(0x527)])return;const _0x37a48f=JsonEx[_0x2fef4b(0x682)](_0x21f271['currentAction']());this['_forcedBattlers'][_0x2fef4b(0x3d9)]([_0x21f271,_0x37a48f]);},BattleManager[_0x3823ba(0x6c0)]=function(){},BattleManager[_0x3823ba(0x8c6)]=function(){const _0x43c829=_0x3823ba;if(this[_0x43c829(0xac0)]())this[_0x43c829(0xa28)]=_0x43c829(0x693);else{if(this[_0x43c829(0x611)][_0x43c829(0xb23)]>0x0){if(_0x43c829(0x63f)!=='nVwbE'){const _0x29f94e=_0x1d6879(_0x13dafa['$1']);return[_0x165087[_0x43c829(0x691)]()['members']()[_0x29f94e]];}else this[_0x43c829(0xa28)]=_0x43c829(0x693);}else this[_0x43c829(0xc37)]();}},BattleManager[_0x3823ba(0x3a3)]=function(){const _0x4cdd57=_0x3823ba,_0x58a0f2=this[_0x4cdd57(0x527)];_0x58a0f2&&this[_0x4cdd57(0xac0)]()&&(_0x4cdd57(0x80b)===_0x4cdd57(0x3f2)?this[_0x4cdd57(0x458)](_0x4bdf3f,_0x32f188,_0x3b42cc):_0x58a0f2[_0x4cdd57(0xcca)](_0x4cdd57(0xd27)));for(;;){const _0x20b9f3=this[_0x4cdd57(0x5ac)]();if(!_0x20b9f3)return null;if(_0x20b9f3['isBattleMember']()&&_0x20b9f3[_0x4cdd57(0x8ed)]())return _0x20b9f3;}},BattleManager[_0x3823ba(0x5ac)]=function(){const _0x15f939=_0x3823ba;if(this[_0x15f939(0x611)][_0x15f939(0xb23)]>0x0){const _0x1bcab4=this[_0x15f939(0x611)][_0x15f939(0x32c)](),_0x2605f6=_0x1bcab4[0x0];return _0x2605f6[_0x15f939(0xd4c)]=_0x2605f6['_actions']||[],_0x2605f6[_0x15f939(0xd4c)][0x0]=_0x1bcab4[0x1],_0x2605f6;}else return this[_0x15f939(0xad6)][_0x15f939(0x32c)]();},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x6a7)]=Game_Battler[_0x3823ba(0x8d6)][_0x3823ba(0xd92)],Game_Battler[_0x3823ba(0x8d6)]['forceAction']=function(_0x3de656,_0x49afc0){const _0x10b12f=_0x3823ba;VisuMZ[_0x10b12f(0x4f3)][_0x10b12f(0x6a7)][_0x10b12f(0x162)](this,_0x3de656,_0x49afc0),this['_actions'][this[_0x10b12f(0xd4c)][_0x10b12f(0xb23)]-0x1][_0x10b12f(0x1bf)]=!![];},Game_Interpreter[_0x3823ba(0x8d6)][_0x3823ba(0x273)]=function(_0x2b2d56){return this['iterateBattler'](_0x2b2d56[0x0],_0x2b2d56[0x1],_0x56a597=>{const _0x1419d8=_0xf8bb;!_0x56a597[_0x1419d8(0x71f)]()&&(_0x56a597[_0x1419d8(0xd92)](_0x2b2d56[0x2],_0x2b2d56[0x3]),BattleManager[_0x1419d8(0xd92)](_0x56a597));}),!![];},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x8ce)]=Game_Battler['prototype']['makeSpeed'],Game_Battler['prototype'][_0x3823ba(0x998)]=function(){const _0x1d4ecf=_0x3823ba;VisuMZ[_0x1d4ecf(0x4f3)][_0x1d4ecf(0x8ce)][_0x1d4ecf(0x162)](this),this['_actions']['length']<=0x0&&(this[_0x1d4ecf(0x4bb)]=Number[_0x1d4ecf(0x568)]);},BattleManager['shouldHideBattleEndPopups']=function(){const _0x10d6d1=_0x3823ba;if(VisuMZ['BattleCore'][_0x10d6d1(0x242)]['Damage'][_0x10d6d1(0x41c)]??!![])return![];return SceneManager[_0x10d6d1(0xbc6)]()&&this[_0x10d6d1(0x8d2)];},VisuMZ['BattleCore'][_0x3823ba(0x481)]=BattleManager['selectNextCommand'],BattleManager[_0x3823ba(0x2d5)]=function(){const _0x222a35=_0x3823ba;this[_0x222a35(0xac0)]()?_0x222a35(0xb7e)===_0x222a35(0xb7e)?this['selectNextCommandTpb']():_0x3ec017=!![]:_0x222a35(0xbf0)==='CQrAQ'?this[_0x222a35(0x325)]():VisuMZ[_0x222a35(0x4f3)][_0x222a35(0x481)][_0x222a35(0x162)](this);},BattleManager[_0x3823ba(0x752)]=function(){const _0x43ddb2=_0x3823ba;if(this[_0x43ddb2(0x1ae)]){if(this['_currentActor'][_0x43ddb2(0x2d5)]())return;this['finishActorInput'](),this[_0x43ddb2(0xc05)](),!this[_0x43ddb2(0x527)]&&!this[_0x43ddb2(0x1ae)]&&SceneManager['_scene'][_0x43ddb2(0x1f4)]();}else{if(!this['_subject']){if(_0x43ddb2(0x1c9)===_0x43ddb2(0x1c9))this[_0x43ddb2(0x869)]();else return!![];}}},BattleManager[_0x3823ba(0xc05)]=function(){const _0x4f1ab3=_0x3823ba;if(!this[_0x4f1ab3(0xb53)]()||this[_0x4f1ab3(0x20e)]()){if('FcdLU'==='FcdLU')this[_0x4f1ab3(0x5d5)]&&(!$gameParty[_0x4f1ab3(0x930)]()[_0x4f1ab3(0x97e)](this[_0x4f1ab3(0x5d5)])&&(this['_tpbSceneChangeCacheActor']=null)),!this[_0x4f1ab3(0x5d5)]?(this[_0x4f1ab3(0x55e)](),this[_0x4f1ab3(0x1ae)]=null,this[_0x4f1ab3(0x339)]=![]):this['revertTpbCachedActor']();else{if(!_0x4f3fff[_0x4f1ab3(0xaa3)][_0x4f1ab3(0x672)])return;_0x2e86f1[_0x4f1ab3(0xaa3)][_0x4f1ab3(0x672)][_0x4f1ab3(0x538)](_0x2da096);}}},BattleManager[_0x3823ba(0x596)]=function(){const _0x301e4d=_0x3823ba;!$gameParty[_0x301e4d(0x930)]()[_0x301e4d(0x97e)](this[_0x301e4d(0x5d5)])&&(this['_tpbSceneChangeCacheActor']=null),this['_tpbSceneChangeCacheActor']?(this['_currentActor']=this[_0x301e4d(0x5d5)],this[_0x301e4d(0x1ae)][_0x301e4d(0xcd5)]=_0x301e4d(0x8ad),this['_inputting']=!![],this[_0x301e4d(0x5d5)]=null):(this['cancelActorInput'](),this[_0x301e4d(0x1ae)]=null,this[_0x301e4d(0x339)]=![]);},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0xb1c)]=BattleManager[_0x3823ba(0x2f3)],BattleManager[_0x3823ba(0x2f3)]=function(){const _0x275e2f=_0x3823ba;return this['_phase']===_0x275e2f(0xb3d)?_0x275e2f(0x56f)===_0x275e2f(0x56f)?this[_0x275e2f(0xa0e)]():this[_0x275e2f(0xaf1)]()[_0x275e2f(0x58a)](_0x5b3703=>_0x5b3703[_0x275e2f(0x3b0)]()):VisuMZ[_0x275e2f(0x4f3)][_0x275e2f(0xb1c)]['call'](this);},BattleManager['battleCoreTpbMainPhase']=function(){const _0x5e2a69=_0x3823ba;return this[_0x5e2a69(0x973)]();},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0xc02)]=BattleManager['cancelActorInput'],BattleManager['cancelActorInput']=function(){const _0x19895b=_0x3823ba;if(this[_0x19895b(0xac0)]()&&this[_0x19895b(0xa28)]===_0x19895b(0x50e)){if(_0x19895b(0x228)===_0x19895b(0x228))this[_0x19895b(0x1ae)]=null;else{if(this[_0x19895b(0x3b8)]())return;this[_0x19895b(0x8b6)]=!![],this['_deathStateApplied']=![];}}VisuMZ[_0x19895b(0x4f3)][_0x19895b(0xc02)][_0x19895b(0x162)](this);},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x389)]=BattleManager[_0x3823ba(0x841)],BattleManager[_0x3823ba(0x841)]=function(){const _0x57ead0=_0x3823ba,_0x175de7=this[_0x57ead0(0x1ae)];if(_0x175de7&&!_0x175de7[_0x57ead0(0x841)]()){const _0x303a21=_0x175de7[_0x57ead0(0x4bc)];_0x175de7[_0x57ead0(0xd4c)][_0x303a21]=new Game_Action(_0x175de7);}return VisuMZ['BattleCore']['BattleManager_inputtingAction']['call'](this);},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0xbad)]=BattleManager[_0x3823ba(0xb65)],BattleManager[_0x3823ba(0xb65)]=function(_0x2c9404){const _0x709242=_0x3823ba;if(this[_0x709242(0x131)]['isForFriend']())return![];return VisuMZ['BattleCore'][_0x709242(0xbad)][_0x709242(0x162)](this,_0x2c9404);},SceneManager[_0x3823ba(0xbc6)]=function(){const _0x24c294=_0x3823ba;return this[_0x24c294(0xaa3)]&&this[_0x24c294(0xaa3)][_0x24c294(0x786)]===Scene_Battle;},SceneManager[_0x3823ba(0x441)]=function(){const _0x31244e=_0x3823ba;return Spriteset_Battle[_0x31244e(0x8d6)]['isFlipped']();},SceneManager[_0x3823ba(0x641)]=function(){if(SceneManager['isPreviousScene'](Scene_Options))return!![];return![];},SceneManager[_0x3823ba(0x5c2)]=function(){const _0xe56c85=_0x3823ba;if(SceneManager[_0xe56c85(0x6fc)](Scene_Options))return!![];return![];},SceneManager[_0x3823ba(0x74b)]=function(_0x5c973e){const _0x2cb465=_0x3823ba;if(!SceneManager[_0x2cb465(0xbc6)]())return!![];const _0x4dedb2=[_0x2cb465(0xc1b),_0x2cb465(0x75e)];return _0x4dedb2['includes'](_0x5c973e[_0x2cb465(0x450)]);},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x8b1)]=SceneManager['push'],SceneManager[_0x3823ba(0x3d9)]=function(_0x5da60a){const _0x48bc44=_0x3823ba;if(!SceneManager['checkSceneBattleTransitionable'](_0x5da60a)){if(_0x48bc44(0x133)===_0x48bc44(0x133))return this[_0x48bc44(0x6f5)](_0x5da60a);else{if(!_0x3549b0['isSceneBattle']())return;_0x4bc45f[_0x48bc44(0xb9f)](_0x35918d,_0x4e0717);const _0x3351b5=_0xea62d0[_0x48bc44(0xaa7)](),_0x37d26d=_0x31f452[_0x48bc44(0x91d)]*_0x43365a['_motionSpeed'];_0x3351b5[_0x48bc44(0x498)](_0x37d26d);}}VisuMZ['BattleCore'][_0x48bc44(0x8b1)][_0x48bc44(0x162)](this,_0x5da60a);},SceneManager[_0x3823ba(0x6f5)]=function(_0x2b4932){const _0x3d434c=_0x3823ba;if(!$gameTemp[_0x3d434c(0x1d4)]())return;if(this[_0x3d434c(0xaa6)])return;this[_0x3d434c(0xaa6)]=!![];let _0x536886='';_0x536886+=_0x3d434c(0x22b),_0x536886+=_0x3d434c(0x247)[_0x3d434c(0xabf)](_0x2b4932['name']),alert(_0x536886);},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x135)]=Game_Temp[_0x3823ba(0x8d6)][_0x3823ba(0xc06)],Game_Temp['prototype'][_0x3823ba(0xc06)]=function(){const _0x19abcb=_0x3823ba;VisuMZ[_0x19abcb(0x4f3)][_0x19abcb(0x135)][_0x19abcb(0x162)](this),this[_0x19abcb(0xbe6)]=[];},VisuMZ['BattleCore'][_0x3823ba(0xc9b)]=Game_Temp['prototype']['requestAnimation'],Game_Temp['prototype']['requestAnimation']=function(_0x734880,_0x2a24f9,_0x1d4c91){const _0x24b5ec=_0x3823ba;_0x734880=_0x734880[_0x24b5ec(0x3a2)]((_0x1441ee,_0x566407,_0x5ad582)=>_0x5ad582[_0x24b5ec(0x122)](_0x1441ee)===_0x566407);if(SceneManager[_0x24b5ec(0xbc6)]()&&SceneManager[_0x24b5ec(0x441)]()){if(_0x24b5ec(0xac5)!=='pSZVo')return _0x3b6f8a[_0x24b5ec(0xaa3)][_0x24b5ec(0x67c)]&&_0x29427c[_0x24b5ec(0xaa3)][_0x24b5ec(0x67c)][_0x24b5ec(0xa4e)]&&_0x145357['_scene'][_0x24b5ec(0x67c)][_0x24b5ec(0xda0)][_0x24b5ec(0x97e)](this[_0x24b5ec(0x6b7)]);else _0x1d4c91=!_0x1d4c91;}VisuMZ[_0x24b5ec(0x4f3)]['Game_Temp_requestAnimation'][_0x24b5ec(0x162)](this,_0x734880,_0x2a24f9,_0x1d4c91),SceneManager[_0x24b5ec(0xbc6)]()&&BattleManager[_0x24b5ec(0x8a5)]['processAnimationRequests']();},Game_Temp[_0x3823ba(0x8d6)][_0x3823ba(0x696)]=function(_0x586e04){const _0x17ae15=_0x3823ba;this[_0x17ae15(0xd0e)]=_0x586e04;},Game_Temp[_0x3823ba(0x8d6)]['getLastPluginCommandInterpreter']=function(){const _0x3aa938=_0x3823ba;return this[_0x3aa938(0xd0e)];},Game_Temp[_0x3823ba(0x8d6)]['clearForcedGameTroopSettingsBattleCore']=function(){const _0x3073d2=_0x3823ba;this[_0x3073d2(0xb78)]=undefined;},Game_Temp[_0x3823ba(0x8d6)]['applyForcedGameTroopSettingsBattleCore']=function(_0x18268b){const _0x5cfd7a=_0x3823ba;if($gameMap&&$dataMap&&$dataMap[_0x5cfd7a(0x920)]){if(_0x5cfd7a(0x7ff)===_0x5cfd7a(0x557))return _0x1b563e[_0x5cfd7a(0x691)]()[_0x5cfd7a(0xd31)]();else this[_0x5cfd7a(0x94b)]($dataMap[_0x5cfd7a(0x920)]);}const _0x3bb8d4=$dataTroops[_0x18268b];if(_0x3bb8d4){let _0x8206e9=DataManager[_0x5cfd7a(0x6fe)](_0x3bb8d4['id']);this['parseForcedGameTroopSettingsBattleCore'](_0x8206e9);}},Game_Temp[_0x3823ba(0x8d6)][_0x3823ba(0x94b)]=function(_0x46b890){const _0x43a7f5=_0x3823ba;if(!_0x46b890)return;if(_0x46b890['match'](/<(?:BATTLELAYOUT|BATTLE LAYOUT|LAYOUT):[ ](.*?)>/i)){const _0xcd170f=String(RegExp['$1']);if(_0xcd170f[_0x43a7f5(0xd57)](/DEFAULT/i))this['_forcedBattleLayout']='default';else{if(_0xcd170f[_0x43a7f5(0xd57)](/LIST/i)){if(_0x43a7f5(0xb22)===_0x43a7f5(0xb22))this[_0x43a7f5(0xb78)]=_0x43a7f5(0x934);else{const _0xd5990c=_0x59fbf9(_0x2b385e['$1'])[_0x43a7f5(0x22f)](/[\r\n]+/)['remove']('');_0x27018b[_0x43a7f5(0x450)]=_0x37dc09['processRandomizedData'](_0xd5990c);}}else{if(_0xcd170f[_0x43a7f5(0xd57)](/XP/i))this['_forcedBattleLayout']='xp';else{if(_0xcd170f['match'](/PORTRAIT/i)){if(_0x43a7f5(0x6ae)!==_0x43a7f5(0x6ae)){const _0x2d0cd5=_0xd450d9[_0x43a7f5(0x588)](_0xa416c4['$1']);this['addSingleSkillCommand'](_0x551e8e[_0x2d0cd5]);}else this['_forcedBattleLayout']=_0x43a7f5(0x9e6);}else{if(_0xcd170f[_0x43a7f5(0xd57)](/BORDER/i))'TtGMe'==='TtGMe'?this['_forcedBattleLayout']=_0x43a7f5(0x43a):_0x32c2e8['endAnimation']&&_0x15b798['endAnimation']();else{if(_0xcd170f['match'](/(?:SIDEVIEW UI|SIDEVIEW)/i))Imported[_0x43a7f5(0x318)]?this[_0x43a7f5(0xb78)]='sideview_ui':this[_0x43a7f5(0xb78)]=_0x43a7f5(0x4d8);else{if(_0xcd170f['match'](/(?:FRONTVIEW UI|FRONTVIEW)/i)){if(Imported['VisuMZ_3_FrontviewBattleUI'])this[_0x43a7f5(0xb78)]='frontview_ui';else{if(_0x43a7f5(0x2c9)!==_0x43a7f5(0x844))this[_0x43a7f5(0xb78)]=_0x43a7f5(0x4d8);else{if(!_0x1adc1b[_0x43a7f5(0xbc6)]())return;_0xe463d9[_0x43a7f5(0xb9f)](_0x33e73a,_0x513278);const _0x55844e=_0x53e4f3[_0x43a7f5(0xaa7)](),_0x57fe09=_0x33cbc6[_0x43a7f5(0x140)](_0x36d470[_0x43a7f5(0xad2)]),_0x49d2e2=_0x5cae8b(_0x3a1f4d['AnimationID'])||0x1,_0x59adf2=_0x54719b[_0x43a7f5(0x723)];if(!_0x55844e)return;_0x29c19d[_0x43a7f5(0x8e9)](_0x57fe09,_0x49d2e2,_0x59adf2);if(_0xc35e['WaitForAnimation'])_0x55844e['setWaitMode']('battleAnimation');}}}}}}}}}}},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0xba2)]=Game_Temp[_0x3823ba(0x8d6)][_0x3823ba(0x81d)],Game_Temp[_0x3823ba(0x8d6)][_0x3823ba(0x81d)]=function(_0x387d62,_0x4f2959){const _0x11fa55=_0x3823ba;SceneManager[_0x11fa55(0xbc6)]()?this[_0x11fa55(0x48e)](_0x387d62,_0x4f2959):VisuMZ[_0x11fa55(0x4f3)][_0x11fa55(0xba2)][_0x11fa55(0x162)](this,_0x387d62,_0x4f2959);},Game_Temp[_0x3823ba(0x8d6)][_0x3823ba(0x48e)]=function(_0x1e3500,_0x3a66ce){const _0x471694=_0x3823ba,_0xd3c5bc={'target':_0x1e3500,'balloonId':_0x3a66ce};this[_0x471694(0xbe6)]=this[_0x471694(0xbe6)]||[],this[_0x471694(0xbe6)][_0x471694(0x3d9)](_0xd3c5bc);},Game_Temp[_0x3823ba(0x8d6)][_0x3823ba(0x262)]=function(){const _0x5b58de=_0x3823ba;return this[_0x5b58de(0xbe6)]=this[_0x5b58de(0xbe6)]||[],this[_0x5b58de(0xbe6)][_0x5b58de(0x32c)]();},Game_Temp[_0x3823ba(0x8d6)][_0x3823ba(0x977)]=function(){const _0x348142=_0x3823ba;this[_0x348142(0xbe6)]=[];},Spriteset_Battle[_0x3823ba(0x8d6)][_0x3823ba(0xcb9)]=function(){const _0x704726=_0x3823ba;this[_0x704726(0x595)]===undefined&&(this[_0x704726(0x595)]=[]);for(const _0x144672 of this[_0x704726(0x595)]){if(_0x704726(0x474)===_0x704726(0x474))!_0x144672[_0x704726(0x1cf)]()&&(_0x704726(0x121)===_0x704726(0x121)?this[_0x704726(0xb88)](_0x144672):this['tpbActorSwitchConditionsMet']()?this[_0x704726(0x325)]():this[_0x704726(0x311)]());else{if(_0x53a4ab[_0x704726(0x57f)]&&_0x317667[_0x704726(0x7ab)]!==_0x2caf49)return _0x2a2cc6[_0x704726(0x7ab)];else{if(this[_0x704726(0xa73)]()==='border')return![];else{return _0x471bb7[_0x704726(0x8d6)][_0x704726(0x361)][_0x704726(0x162)](this);;}}}}this[_0x704726(0x8bc)]();},Spriteset_Battle[_0x3823ba(0x8d6)][_0x3823ba(0x8bc)]=function(){const _0x432f5b=_0x3823ba;for(;;){const _0x5d9355=$gameTemp[_0x432f5b(0x262)]();if(_0x5d9355){if(_0x432f5b(0x91e)==='OICFC'){if(!_0x47916c['isSceneBattle']())return;_0x3cfabc['_scene'][_0x432f5b(0x2f6)](this),_0x3b8d9b[_0x432f5b(0x8d6)][_0x432f5b(0x127)][_0x432f5b(0x162)](this);}else this[_0x432f5b(0x268)](_0x5d9355);}else{if(_0x432f5b(0x9e9)!==_0x432f5b(0x9e9)){this['_enemyWindowMode']&&(this[_0x432f5b(0x3e8)]++,this['active']=!![]);const _0x2e2684=_0x173781[_0x432f5b(0x8d6)][_0x432f5b(0x375)]['call'](this);return this[_0x432f5b(0x6b0)]&&(this[_0x432f5b(0xa4e)]=![]),_0x2e2684;}else break;}}},Spriteset_Battle[_0x3823ba(0x8d6)][_0x3823ba(0x268)]=function(_0x2c169c){const _0xa8ac26=_0x3823ba,_0x509425=this[_0xa8ac26(0xb0c)](_0x2c169c['target']);if(_0x509425){if(_0xa8ac26(0xac8)!==_0xa8ac26(0xd08)){let _0x2ffd8f=null;Imported['VisuMZ_4_IconBalloons']&&Array[_0xa8ac26(0xbff)](_0x2c169c['balloonId'])?_0x2ffd8f=new Sprite_IconBalloon():_0x2ffd8f=new Sprite_Balloon(),_0x2ffd8f[_0xa8ac26(0x75c)]=_0x2c169c[_0xa8ac26(0xb95)],_0x2ffd8f[_0xa8ac26(0xa2b)]=_0x509425,_0x2ffd8f[_0xa8ac26(0xa2b)][_0xa8ac26(0x8ec)]=_0x509425,_0x2ffd8f['setup'](_0x509425,_0x2c169c['balloonId']),BattleManager['addChildToUiContainer'](_0x2ffd8f),this[_0xa8ac26(0x595)][_0xa8ac26(0x3d9)](_0x2ffd8f);}else return _0xb69efe[_0xa8ac26(0x4f3)][_0xa8ac26(0x242)][_0xa8ac26(0xa26)][_0xa8ac26(0x685)][_0xa8ac26(0x162)](this);}},Spriteset_Battle[_0x3823ba(0x8d6)][_0x3823ba(0xb88)]=function(_0xd9582b){const _0x5378be=_0x3823ba;this['_battleBalloonSprites']['remove'](_0xd9582b),BattleManager[_0x5378be(0x12a)](_0xd9582b),_0xd9582b['destroy']();},Sprite_Battler['prototype']['setBalloonPose']=function(_0x383a8e,_0x470abf){},Sprite_Battler[_0x3823ba(0x8d6)]['isSpriteVS8dir']=function(){return![];},Spriteset_Battle[_0x3823ba(0x8d6)][_0x3823ba(0x7ca)]=function(){const _0x20d18b=_0x3823ba;return this[_0x20d18b(0x595)]=this[_0x20d18b(0x595)]||[],this[_0x20d18b(0x595)]['length']>0x0;},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x74a)]=Game_System[_0x3823ba(0x8d6)]['initialize'],Game_System[_0x3823ba(0x8d6)][_0x3823ba(0xc06)]=function(){const _0x464c64=_0x3823ba;VisuMZ[_0x464c64(0x4f3)][_0x464c64(0x74a)][_0x464c64(0x162)](this),this[_0x464c64(0x95b)]();},Game_System[_0x3823ba(0x8d6)]['initBattleCore']=function(){const _0x2b06c1=_0x3823ba;this[_0x2b06c1(0x755)]=this['_defeatedEnemies']||[];},Game_System[_0x3823ba(0x8d6)][_0x3823ba(0x322)]=function(){const _0x10ba3b=_0x3823ba;if(this[_0x10ba3b(0x755)]===undefined)this['initBattleCore']();return this[_0x10ba3b(0x755)];},Game_System[_0x3823ba(0x8d6)][_0x3823ba(0x50c)]=function(_0x535618){const _0x5f45c6=_0x3823ba;if(this[_0x5f45c6(0x755)]===undefined)this['initBattleCore']();if(!_0x535618)return;if(this[_0x5f45c6(0x755)][_0x5f45c6(0x97e)](_0x535618))return;this[_0x5f45c6(0x755)][_0x5f45c6(0x3d9)](_0x535618),this['_defeatedEnemies'][_0x5f45c6(0x403)]((_0xbd85dc,_0xdb9cb2)=>_0xbd85dc-_0xdb9cb2);},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x230)]=Game_BattlerBase[_0x3823ba(0x8d6)][_0x3823ba(0x14a)],Game_BattlerBase[_0x3823ba(0x8d6)][_0x3823ba(0x14a)]=function(_0x24278c){const _0x241508=_0x3823ba,_0x38dfab=this[_0x241508(0x8ed)](),_0x15c795=this['stateMotionIndex']();VisuMZ['BattleCore'][_0x241508(0x230)][_0x241508(0x162)](this,_0x24278c);this['isEnemy']()&&_0x38dfab&&this[_0x241508(0x3b8)]()&&(this[_0x241508(0xb54)]=!this[_0x241508(0xb27)](),$gameSystem['registerDefeatedEnemy'](this[_0x241508(0xce6)]()));if(SceneManager[_0x241508(0xbc6)]()&&_0x15c795!==this['stateMotionIndex']()){if(this[_0x241508(0x798)]()){if(_0x241508(0x4dd)!==_0x241508(0x398))this['battler']()[_0x241508(0x34f)]();else{if(_0x1250e9){const _0x447bdc=_0x250970['indexOf'](_0x5df090);return _0x447bdc>=0x0?[_0x317775[_0x447bdc-0x1]||_0x3d97d8]:[_0x49441e];}}}}},Game_Enemy[_0x3823ba(0x8d6)][_0x3823ba(0xb27)]=function(){const _0x31e67f=_0x3823ba;return $gameSystem[_0x31e67f(0x322)]()['includes'](this[_0x31e67f(0xcdf)]);},VisuMZ[_0x3823ba(0x4f3)]['Game_BattlerBase_eraseState']=Game_BattlerBase[_0x3823ba(0x8d6)][_0x3823ba(0x83e)],Game_BattlerBase[_0x3823ba(0x8d6)]['eraseState']=function(_0x3aedb5){const _0x29983e=_0x3823ba;VisuMZ['BattleCore']['Game_BattlerBase_eraseState'][_0x29983e(0x162)](this,_0x3aedb5),this[_0x29983e(0x737)]()&&_0x3aedb5===this[_0x29983e(0xa68)]()&&this[_0x29983e(0x8ed)]()&&(this[_0x29983e(0xb54)]=![]),!this[_0x29983e(0x695)]&&!this['_tempBattler']&&SceneManager[_0x29983e(0xbc6)]()&&this['requestMotionRefresh']();},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x528)]=Game_Action[_0x3823ba(0x8d6)]['clear'],Game_Action[_0x3823ba(0x8d6)][_0x3823ba(0xcd2)]=function(){const _0x3afe57=_0x3823ba;VisuMZ[_0x3afe57(0x4f3)][_0x3afe57(0x528)][_0x3afe57(0x162)](this),this[_0x3afe57(0x37a)]={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0},this[_0x3afe57(0x7ec)]={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0},this[_0x3afe57(0x7a7)]='default',this['clearTargetBattlerKey']();},Game_Action[_0x3823ba(0x8d6)][_0x3823ba(0x97a)]=function(){const _0xb9660f=_0x3823ba;this[_0xb9660f(0x9ba)]='';},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x17b)]=Game_Action[_0x3823ba(0x8d6)][_0x3823ba(0x5f9)],Game_Action['prototype'][_0x3823ba(0x5f9)]=function(_0x1d9dff){const _0x4a5620=_0x3823ba;VisuMZ['BattleCore'][_0x4a5620(0x17b)][_0x4a5620(0x162)](this,_0x1d9dff),this['clearTargetBattlerKey']();},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x7b7)]=Game_Action[_0x3823ba(0x8d6)]['setSkill'],Game_Action[_0x3823ba(0x8d6)][_0x3823ba(0x2c8)]=function(_0x1194fa){const _0x4d16fa=_0x3823ba;VisuMZ[_0x4d16fa(0x4f3)][_0x4d16fa(0x7b7)]['call'](this,_0x1194fa),this[_0x4d16fa(0x97a)]();},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x74c)]=Game_Action['prototype'][_0x3823ba(0xd37)],Game_Action[_0x3823ba(0x8d6)][_0x3823ba(0xd37)]=function(_0x50af01){const _0x1421f4=_0x3823ba;VisuMZ[_0x1421f4(0x4f3)][_0x1421f4(0x74c)][_0x1421f4(0x162)](this,_0x50af01),this[_0x1421f4(0x97a)]();},Game_Action['prototype'][_0x3823ba(0xb69)]=function(_0x991c27,_0x13acb0){const _0x68ace9=_0x3823ba;return VisuMZ['BattleCore'][_0x68ace9(0x242)]['Damage'][_0x68ace9(0x2ce)][_0x68ace9(0x162)](this,_0x991c27,_0x13acb0);},Game_Action['prototype'][_0x3823ba(0x277)]=function(_0x66a1f3,_0x4449a9){const _0x11d277=_0x3823ba;return VisuMZ[_0x11d277(0x4f3)]['Settings'][_0x11d277(0x630)][_0x11d277(0x2e2)][_0x11d277(0x162)](this,_0x66a1f3,_0x4449a9);},Game_Action[_0x3823ba(0x8d6)][_0x3823ba(0x21f)]=function(_0x1e1e47,_0x4077e1){const _0x5dd208=_0x3823ba;return VisuMZ[_0x5dd208(0x4f3)]['Settings'][_0x5dd208(0x630)][_0x5dd208(0xab6)]['call'](this,_0x1e1e47,_0x4077e1);},VisuMZ[_0x3823ba(0x4f3)]['Game_Action_itemHit']=Game_Action[_0x3823ba(0x8d6)][_0x3823ba(0xa58)],Game_Action[_0x3823ba(0x8d6)][_0x3823ba(0xa58)]=function(_0x1bbeed){const _0x3c0420=_0x3823ba,_0x115792=this['item']()[_0x3c0420(0x920)];if(_0x115792[_0x3c0420(0xd57)](/<ALWAYS HIT>/i))return 0x1;else{if(_0x115792[_0x3c0420(0xd57)](/<ALWAYS HIT RATE: (\d+)([%％])>/i))return Number(RegExp['$1'])/0x64;else{if(_0x3c0420(0x9b8)!==_0x3c0420(0x7e5)){let _0x289d3e=VisuMZ[_0x3c0420(0x4f3)][_0x3c0420(0x788)][_0x3c0420(0x162)](this,_0x1bbeed);return _0x289d3e=this[_0x3c0420(0x7ec)][_0x3c0420(0x31f)]*_0x289d3e+this[_0x3c0420(0x7ec)][_0x3c0420(0xa47)],_0x289d3e;}else _0x5b47dd=![];}}},Game_Action[_0x3823ba(0x8d6)][_0x3823ba(0xb84)]=function(_0x4c1369){const _0x58ec0e=_0x3823ba;if(!this[_0x58ec0e(0x733)]()[_0x58ec0e(0x806)]['critical'])return 0x0;let _0x3a3a3b=VisuMZ['BattleCore']['Settings'][_0x58ec0e(0x630)][_0x58ec0e(0xcf2)][_0x58ec0e(0x162)](this,_0x4c1369);return _0x3a3a3b=this[_0x58ec0e(0x7ec)][_0x58ec0e(0x2ff)]*_0x3a3a3b+this[_0x58ec0e(0x7ec)][_0x58ec0e(0x138)],_0x3a3a3b;},Game_Action[_0x3823ba(0x8d6)][_0x3823ba(0x514)]=function(_0x41de4b){const _0x17c017=_0x3823ba;return _0x41de4b=VisuMZ[_0x17c017(0x4f3)][_0x17c017(0x242)]['Damage'][_0x17c017(0x5f3)]['call'](this,_0x41de4b),_0x41de4b=this['_multipliers']['criticalDmgRate']*_0x41de4b+this[_0x17c017(0x7ec)][_0x17c017(0xcfd)],_0x41de4b;},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x330)]=Game_Action[_0x3823ba(0x8d6)][_0x3823ba(0x8ac)],Game_Action[_0x3823ba(0x8d6)][_0x3823ba(0x8ac)]=function(_0x55db09){const _0x47589b=_0x3823ba;if(this[_0x47589b(0x7a7)]!=='default')return this[_0x47589b(0xaba)](_0x55db09);else return DataManager['getDamageStyle'](this[_0x47589b(0x733)]())===_0x47589b(0x754)?VisuMZ[_0x47589b(0x4f3)][_0x47589b(0x330)][_0x47589b(0x162)](this,_0x55db09):this[_0x47589b(0x482)](_0x55db09);},Game_Action[_0x3823ba(0x8d6)]['setCustomDamageFormula']=function(_0x2c8b43){const _0x4a1d0c=_0x3823ba;this[_0x4a1d0c(0x7a7)]=_0x2c8b43;},Game_Action[_0x3823ba(0x8d6)][_0x3823ba(0xaba)]=function(_0x314765){const _0x3ac8d7=_0x3823ba,_0x1cd824=this[_0x3ac8d7(0x733)](),_0x59adf6=_0x1cd824[_0x3ac8d7(0x806)][_0x3ac8d7(0x1d6)];_0x1cd824[_0x3ac8d7(0x806)][_0x3ac8d7(0x1d6)]=this[_0x3ac8d7(0x7a7)];let _0x3d7bf1=VisuMZ[_0x3ac8d7(0x4f3)][_0x3ac8d7(0x330)][_0x3ac8d7(0x162)](this,_0x314765);return _0x1cd824[_0x3ac8d7(0x806)][_0x3ac8d7(0x1d6)]=_0x59adf6,_0x3d7bf1;},Game_Action[_0x3823ba(0x8d6)][_0x3823ba(0x75f)]=function(){const _0x62d188=_0x3823ba;if(this[_0x62d188(0x733)]()[_0x62d188(0x920)][_0x62d188(0xd57)](/<DAMAGE STYLE:[ ](.*)>/i)){if(_0x62d188(0xd16)==='XgxHk'){const _0x2963f1=String(RegExp['$1'])[_0x62d188(0x2d8)]()[_0x62d188(0xaf4)]();return _0x2963f1;}else _0x206b97=_0x62d188(0xc21);}return _0x62d188(0x754);},Game_Action[_0x3823ba(0x8d6)][_0x3823ba(0x482)]=function(_0x5502d3){const _0x251f44=_0x3823ba,_0x1ba839=DataManager[_0x251f44(0x341)](this['item']()),_0x18b5ea=VisuMZ[_0x251f44(0xc1d)][_0x1ba839];try{if(_0x251f44(0x4ed)!=='fNqSa'){if(_0xc4b13d['isEnemy']())return-0x1;if(_0x36dc81[_0x251f44(0x737)]())return 0x1;}else return _0x18b5ea[_0x251f44(0x801)][_0x251f44(0x162)](this,_0x5502d3);}catch(_0x2c9100){if(_0x251f44(0x2bc)==='Mbipq'){if($gameTemp['isPlaytest']())console[_0x251f44(0xc5e)](_0x2c9100);return VisuMZ[_0x251f44(0x4f3)][_0x251f44(0x330)]['call'](this);}else{if(this[_0x251f44(0xac0)]())this[_0x251f44(0xa28)]=_0x251f44(0x693);else this[_0x251f44(0x611)][_0x251f44(0xb23)]>0x0?this[_0x251f44(0xa28)]=_0x251f44(0x693):this[_0x251f44(0xc37)]();}}},Game_Action[_0x3823ba(0x8d6)][_0x3823ba(0x535)]=function(_0x175ce8,_0x263fc8){const _0x47d47e=_0x3823ba;if(this[_0x47d47e(0x8ae)]())return _0x263fc8;const _0x191dc3=this[_0x47d47e(0x29d)](),_0x44c0dc=_0x175ce8;let _0x19b20c=[],_0x22a30a=[];_0x19b20c['push'](this[_0x47d47e(0x37a)][_0x47d47e(0x4d4)],this['_armorPenetration'][_0x47d47e(0x6e6)]),_0x22a30a[_0x47d47e(0x3d9)](this['_armorPenetration'][_0x47d47e(0xbdc)],this[_0x47d47e(0x37a)]['arRedRate']);const _0x4d47a5=this['isPhysical']()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x4a21a9=this['isPhysical']()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0x4c6d50=this[_0x47d47e(0xc9d)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x29a541=this[_0x47d47e(0xc9d)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;_0x19b20c=_0x19b20c[_0x47d47e(0x145)](_0x44c0dc[_0x47d47e(0x4f7)]()[_0x47d47e(0x4d0)](_0xd5661c=>_0xd5661c&&_0xd5661c['note'][_0x47d47e(0xd57)](_0x4d47a5)?Number(RegExp['$1']):0x0)),_0x22a30a=_0x22a30a[_0x47d47e(0x145)](_0x44c0dc[_0x47d47e(0x4f7)]()[_0x47d47e(0x4d0)](_0xc4ec16=>_0xc4ec16&&_0xc4ec16[_0x47d47e(0x920)][_0x47d47e(0xd57)](_0x4a21a9)?Number(RegExp['$1'])/0x64:0x0)),_0x19b20c=_0x19b20c[_0x47d47e(0x145)](_0x191dc3[_0x47d47e(0x4f7)]()[_0x47d47e(0x4d0)](_0x5082e6=>_0x5082e6&&_0x5082e6[_0x47d47e(0x920)][_0x47d47e(0xd57)](_0x4c6d50)?Number(RegExp['$1']):0x0)),_0x22a30a=_0x22a30a[_0x47d47e(0x145)](_0x191dc3[_0x47d47e(0x4f7)]()[_0x47d47e(0x4d0)](_0x48d578=>_0x48d578&&_0x48d578[_0x47d47e(0x920)][_0x47d47e(0xd57)](_0x29a541)?Number(RegExp['$1'])/0x64:0x0));if(this[_0x47d47e(0x733)]()['note']['match'](_0x4c6d50)){if(_0x47d47e(0x266)==='LeLDe')_0x19b20c[_0x47d47e(0x3d9)](Number(RegExp['$1']));else return!![];}this['item']()[_0x47d47e(0x920)][_0x47d47e(0xd57)](_0x29a541)&&_0x22a30a[_0x47d47e(0x3d9)](Number(RegExp['$1']));_0x263fc8=_0x19b20c[_0x47d47e(0x19f)]((_0x494173,_0x4ebaa3)=>_0x494173-_0x4ebaa3,_0x263fc8);if(_0x263fc8>0x0){if(_0x47d47e(0xc11)!=='xytyy')return _0x14d935[_0x47d47e(0x4f3)][_0x47d47e(0x242)][_0x47d47e(0x179)][_0x47d47e(0xa8c)];else _0x263fc8=_0x22a30a[_0x47d47e(0x19f)]((_0x50a96b,_0x49dd6e)=>_0x50a96b*(0x1-_0x49dd6e),_0x263fc8);}return _0x263fc8;},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x9f7)]=Game_Action[_0x3823ba(0x8d6)][_0x3823ba(0x52e)],Game_Action[_0x3823ba(0x8d6)]['executeDamage']=function(_0x1dcffc,_0x44b98f){const _0x3fe9a2=_0x3823ba;_0x44b98f=_0x44b98f*this[_0x3fe9a2(0x7ec)][_0x3fe9a2(0xd78)],_0x44b98f+=this['_multipliers'][_0x3fe9a2(0x1d8)]*(_0x44b98f>=0x0?0x1:-0x1),_0x44b98f=this[_0x3fe9a2(0x8fc)](_0x3fe9a2(0xa5e),_0x1dcffc,_0x44b98f,![]),_0x44b98f=this[_0x3fe9a2(0x986)](_0x44b98f),_0x44b98f=Math[_0x3fe9a2(0x282)](_0x44b98f),this[_0x3fe9a2(0x3c6)]=_0x44b98f,this[_0x3fe9a2(0x4bf)]=this[_0x3fe9a2(0x4bf)]||0x0,this['_totalValue']+=_0x44b98f,VisuMZ[_0x3fe9a2(0x4f3)][_0x3fe9a2(0x9f7)][_0x3fe9a2(0x162)](this,_0x1dcffc,_0x44b98f),this['applyBattleCoreJS'](_0x3fe9a2(0x8cc),_0x1dcffc,_0x44b98f,!![]);},Game_Action[_0x3823ba(0x8d6)]['applyDamageCaps']=function(_0x4d1d03){const _0x1c2f96=_0x3823ba;if(this[_0x1c2f96(0xaec)]())return _0x4d1d03;return _0x4d1d03=this[_0x1c2f96(0xb32)](_0x4d1d03),_0x4d1d03=this[_0x1c2f96(0x67e)](_0x4d1d03),_0x4d1d03;},Game_Action[_0x3823ba(0x8d6)]['isBypassDamageCap']=function(){const _0x386a34=_0x3823ba,_0x4a47a6=/<BYPASS DAMAGE CAP>/i;if(this[_0x386a34(0x733)]()['note'][_0x386a34(0xd57)](_0x4a47a6))return!![];if(this[_0x386a34(0x29d)]()[_0x386a34(0x4f7)]()[_0x386a34(0x58a)](_0x37c693=>_0x37c693&&_0x37c693[_0x386a34(0x920)]['match'](_0x4a47a6)))return!![];return!VisuMZ[_0x386a34(0x4f3)]['Settings']['Damage']['EnableDamageCap'];},Game_Action[_0x3823ba(0x8d6)]['applySoftDamageCap']=function(_0x3cbf52){const _0x2ac3e2=_0x3823ba;if(!VisuMZ[_0x2ac3e2(0x4f3)]['Settings'][_0x2ac3e2(0x630)][_0x2ac3e2(0xa32)])return _0x3cbf52;const _0xc4dcd5=/<BYPASS SOFT DAMAGE CAP>/i;if(this[_0x2ac3e2(0x733)]()[_0x2ac3e2(0x920)]['match'](_0xc4dcd5))return _0x3cbf52;if(this[_0x2ac3e2(0x29d)]()[_0x2ac3e2(0x4f7)]()[_0x2ac3e2(0x58a)](_0x4e376e=>_0x4e376e&&_0x4e376e[_0x2ac3e2(0x920)][_0x2ac3e2(0xd57)](_0xc4dcd5)))return _0x3cbf52;const _0xfa6215=_0x3cbf52<0x0?-0x1:0x1;_0x3cbf52=Math[_0x2ac3e2(0x6ee)](_0x3cbf52);let _0x37c6e5=this['subject']()[_0x2ac3e2(0xa27)]();this[_0x2ac3e2(0x733)]()[_0x2ac3e2(0x920)][_0x2ac3e2(0xd57)](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)&&(_0x37c6e5+=Number(RegExp['$1'])/0x64);_0x37c6e5=_0x37c6e5[_0x2ac3e2(0x6a0)](0.01,0x1);const _0x3f190f=this['getHardDamageCap'](),_0x525d2e=_0x37c6e5*_0x3f190f;if(_0x3cbf52>_0x525d2e&&_0x3f190f>_0x525d2e){_0x3cbf52-=_0x525d2e;const _0x5d725e=VisuMZ[_0x2ac3e2(0x4f3)][_0x2ac3e2(0x242)][_0x2ac3e2(0x630)][_0x2ac3e2(0x84a)],_0x1801d1=Math[_0x2ac3e2(0xd19)](0x1-_0x3cbf52/((_0x3f190f-_0x525d2e)*_0x5d725e+_0x3cbf52),0.01);_0x3cbf52*=_0x1801d1,_0x3cbf52+=_0x525d2e;}return _0x3cbf52*_0xfa6215;},Game_Action['prototype'][_0x3823ba(0x9cf)]=function(){const _0x9a473b=_0x3823ba;if(this['item']()[_0x9a473b(0x920)][_0x9a473b(0xd57)](/<DAMAGE CAP:[ ](\d+)>/i))return Number(RegExp['$1']);else{if(_0x9a473b(0x954)===_0x9a473b(0x4c8))_0x57f85b[_0x9a473b(0x734)][_0x9a473b(0x79e)](_0x43d60f);else return this['subject']()[_0x9a473b(0x3bb)]();}},Game_Action[_0x3823ba(0x8d6)]['applyHardDamageCap']=function(_0x469ad9){const _0x549946=_0x3823ba;let _0x215871=this['getHardDamageCap']();return _0x469ad9[_0x549946(0x6a0)](-_0x215871,_0x215871);},Game_Action[_0x3823ba(0x8d6)][_0x3823ba(0x563)]=function(){const _0xc9f458=_0x3823ba;if(!this['item']())return![];if(!$gameParty[_0xc9f458(0xcea)]())return![];return(this[_0xc9f458(0x733)]()['note']||'')[_0xc9f458(0xd57)](/<DISPERSE DAMAGE>/i);},Game_Action[_0x3823ba(0x8d6)][_0x3823ba(0xc66)]=function(_0x15fb91){const _0x515637=_0x3823ba;if(this[_0x515637(0x563)]()){let _0x376654=BattleManager['_targets'];_0x15fb91/=_0x376654[_0x515637(0xb23)],this[_0x515637(0x4ba)]()&&(_0x15fb91*=this[_0x515637(0x29d)]()['attackTimesAdd']()+0x1),_0x15fb91=_0x15fb91>0x0?Math['ceil'](_0x15fb91):Math[_0x515637(0x975)](_0x15fb91);}return _0x15fb91;},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x963)]=Game_Action[_0x3823ba(0x8d6)][_0x3823ba(0xb69)],Game_Action[_0x3823ba(0x8d6)]['makeDamageValue']=function(_0x4db920,_0x5edaa1){const _0x2a661e=_0x3823ba;let _0x2133d6=VisuMZ['BattleCore'][_0x2a661e(0x963)][_0x2a661e(0x162)](this,_0x4db920,_0x5edaa1);return this['disperseDamage'](_0x2133d6);},Game_Action[_0x3823ba(0x8d6)][_0x3823ba(0xc3c)]=function(_0x48212d,_0x233009){const _0x4e4be6=_0x3823ba;let _0x25e698=(_0x48212d['mhp']*_0x233009[_0x4e4be6(0xa36)]+_0x233009[_0x4e4be6(0x921)])*_0x48212d[_0x4e4be6(0x8f0)];_0x25e698=this['disperseDamage'](_0x25e698);if(this[_0x4e4be6(0x624)]()){if(_0x4e4be6(0xc94)===_0x4e4be6(0xc94))_0x25e698*=this[_0x4e4be6(0x29d)]()[_0x4e4be6(0xca9)];else{const _0x5bdd8a=this['svBattlerData']()[_0x4e4be6(0x1af)]||0x0;return _0x156a78[_0x4e4be6(0x776)][_0x5bdd8a];}}_0x25e698=Math[_0x4e4be6(0x975)](_0x25e698);if(_0x25e698!==0x0){if(_0x4e4be6(0xa1c)===_0x4e4be6(0x6f3))return _0x38bf9b['getInputButtonString'](_0x4e4be6(0x5d2));else _0x48212d[_0x4e4be6(0x219)](_0x25e698),this[_0x4e4be6(0xc40)](_0x48212d);}},Game_Action[_0x3823ba(0x8d6)]['itemEffectRecoverMp']=function(_0x135d4f,_0xc85f58){const _0x54b80f=_0x3823ba;let _0x3b4552=(_0x135d4f['mmp']*_0xc85f58[_0x54b80f(0xa36)]+_0xc85f58[_0x54b80f(0x921)])*_0x135d4f['rec'];_0x3b4552=this[_0x54b80f(0xc66)](_0x3b4552);if(this['isItem']()){if(_0x54b80f(0xc69)!==_0x54b80f(0x4cb))_0x3b4552*=this[_0x54b80f(0x29d)]()['pha'];else{const _0x545839=_0x20be33(_0x23ec80['$1'])[_0x54b80f(0x22f)](/[\r\n]+/)[_0x54b80f(0xbc4)](''),_0xc1dddb=_0x1e96c6[_0x54b80f(0xb8f)](_0x545839);_0x10f4b4[_0x54b80f(0x1af)]=_0x6b2b5f[_0x54b80f(0x644)](_0xc1dddb);}}_0x3b4552=Math[_0x54b80f(0x975)](_0x3b4552),_0x3b4552!==0x0&&(_0x135d4f['gainMp'](_0x3b4552),this[_0x54b80f(0xc40)](_0x135d4f));},Game_Action[_0x3823ba(0x8d6)][_0x3823ba(0x5df)]=function(_0x17d55b,_0x10c383){const _0x98f727=_0x3823ba;let _0x12eee8=Math['floor'](_0x10c383['value1']);_0x12eee8=this['disperseDamage'](_0x12eee8),_0x12eee8!==0x0&&(_0x17d55b[_0x98f727(0x931)](_0x12eee8),this[_0x98f727(0xc40)](_0x17d55b));},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x347)]=Game_Action[_0x3823ba(0x8d6)][_0x3823ba(0x5b1)],Game_Action['prototype'][_0x3823ba(0x5b1)]=function(_0x993eb){const _0x51a5bc=_0x3823ba;this['applyBattleCoreJS'](_0x51a5bc(0x8da),_0x993eb,0x0,!![]),VisuMZ['BattleCore'][_0x51a5bc(0x347)]['call'](this,_0x993eb),this[_0x51a5bc(0x8fc)](_0x51a5bc(0xa04),_0x993eb,this[_0x51a5bc(0x3c6)]||0x0,!![]),this['applyResultSwitches'](_0x993eb);},Game_Action['prototype'][_0x3823ba(0x8fc)]=function(_0xf5a27d,_0x258b62,_0x2181a4,_0x229430){const _0x577309=_0x3823ba;if(this[_0x577309(0xd70)]||this[_0x577309(0x695)])return;_0x2181a4=_0x2181a4||0x0;const _0x4a3c27=_0x2181a4,_0x4e53d2=VisuMZ['BattleCore'][_0x577309(0x242)][_0x577309(0x911)],_0x1d0005=_0xf5a27d[_0x577309(0xabf)]('');if(_0x4e53d2[_0x1d0005]){_0x2181a4=_0x4e53d2[_0x1d0005][_0x577309(0x162)](this,_0x2181a4,_0x258b62);if(_0x229430)_0x2181a4=_0x4a3c27;}let _0x36376c=VisuMZ[_0x577309(0x4f3)][_0x577309(0x4e9)](this[_0x577309(0x733)](),_0xf5a27d[_0x577309(0xabf)](''));if(VisuMZ['BattleCore']['JS'][_0x36376c]){_0x2181a4=VisuMZ[_0x577309(0x4f3)]['JS'][_0x36376c]['call'](this,this['subject'](),_0x258b62,this[_0x577309(0x733)](),_0x2181a4);if(_0x229430)_0x2181a4=_0x4a3c27;}for(const _0x438163 of this[_0x577309(0x29d)]()['traitObjects']()){if(_0x577309(0x69e)!==_0x577309(0x7ae)){if(!_0x438163)continue;_0x36376c=VisuMZ[_0x577309(0x4f3)][_0x577309(0x4e9)](_0x438163,_0xf5a27d['format'](_0x577309(0xcfb)));if(VisuMZ[_0x577309(0x4f3)]['JS'][_0x36376c]){if('CFTWe'!==_0x577309(0x9da))return _0x17baa9[_0x577309(0x696)](this),_0x331ee5[_0x577309(0x4f3)][_0x577309(0x5c8)][_0x577309(0x162)](this,_0x1e87c5);else{_0x2181a4=VisuMZ[_0x577309(0x4f3)]['JS'][_0x36376c][_0x577309(0x162)](this,this['subject'](),_0x258b62,_0x438163,_0x2181a4);if(_0x229430)_0x2181a4=_0x4a3c27;}}}else _0x946eea(_0x577309(0x4a5)[_0x577309(0xabf)](_0xeedb76,_0x3dda18)),_0x447f09[_0x577309(0x824)]();}for(const _0x1423ec of _0x258b62['traitObjects']()){if(_0x577309(0xd0d)===_0x577309(0xd0d)){if(!_0x1423ec)continue;_0x36376c=VisuMZ['BattleCore']['createKeyJS'](_0x1423ec,_0xf5a27d[_0x577309(0xabf)]('AsTarget'));if(VisuMZ[_0x577309(0x4f3)]['JS'][_0x36376c]){_0x2181a4=VisuMZ[_0x577309(0x4f3)]['JS'][_0x36376c][_0x577309(0x162)](this,this['subject'](),_0x258b62,_0x1423ec,_0x2181a4);if(_0x229430)_0x2181a4=_0x4a3c27;}}else return _0x586010[_0x577309(0x4f3)]['Game_Action_isForAliveFriend'][_0x577309(0x162)](this);}return _0x2181a4;},Game_Action[_0x3823ba(0x8d6)][_0x3823ba(0x21e)]=function(_0x21a867){const _0x3cb91a=_0x3823ba,_0x4dbc1a=this[_0x3cb91a(0x4bf)]||0x0,_0x379f0c=VisuMZ[_0x3cb91a(0x4f3)]['Settings'][_0x3cb91a(0x911)],_0xe5d6a7=_0x21a867[_0x3cb91a(0xabf)]('');_0x379f0c[_0xe5d6a7]&&_0x379f0c[_0xe5d6a7][_0x3cb91a(0x162)](this,_0x4dbc1a);let _0x11dc24=VisuMZ['BattleCore']['createKeyJS'](this['item'](),_0x21a867);VisuMZ['BattleCore']['JS'][_0x11dc24]&&VisuMZ['BattleCore']['JS'][_0x11dc24][_0x3cb91a(0x162)](this,this[_0x3cb91a(0x29d)](),this[_0x3cb91a(0x29d)](),this[_0x3cb91a(0x733)](),_0x4dbc1a);for(const _0x4a2e2b of this[_0x3cb91a(0x29d)]()[_0x3cb91a(0x4f7)]()){if(_0x3cb91a(0xcc7)!==_0x3cb91a(0x4c9)){if(!_0x4a2e2b)continue;_0x11dc24=VisuMZ[_0x3cb91a(0x4f3)]['createKeyJS'](_0x4a2e2b,_0x21a867),VisuMZ[_0x3cb91a(0x4f3)]['JS'][_0x11dc24]&&(_0x3cb91a(0x2ab)!==_0x3cb91a(0xc23)?VisuMZ[_0x3cb91a(0x4f3)]['JS'][_0x11dc24][_0x3cb91a(0x162)](this,this['subject'](),this[_0x3cb91a(0x29d)](),_0x4a2e2b,_0x4dbc1a):(_0x3dc05f=(_0x430372+_0x572ec1)/0x2,_0x380b52=-0x1));}else{if(_0x494bf4[_0x3cb91a(0x88f)][_0x3cb91a(0xd18)]>=1.24){if(this[_0x3cb91a(0x9c0)]){if(!_0x959fe5[_0x3cb91a(0x88f)][_0x3cb91a(0x72a)](this[_0x3cb91a(0x9c0)],_0x2371fb))return!![];if(!_0x4b2339['SkillsStatesCore'][_0x3cb91a(0x829)](this['_actor'],_0x246276))return!![];if(!_0x2147d5[_0x3cb91a(0x88f)][_0x3cb91a(0x41a)](this[_0x3cb91a(0x9c0)],_0x106483))return!![];}}else{if(!_0x1ddf0b[_0x3cb91a(0x8d6)][_0x3cb91a(0xceb)][_0x3cb91a(0x162)](this,_0x4a5917))return!![];if(!_0x4be1f4['prototype']['checkShowHideSwitchNotetags'][_0x3cb91a(0x162)](this,_0x413fc2))return!![];if(!_0x211f81[_0x3cb91a(0x8d6)][_0x3cb91a(0xb9c)][_0x3cb91a(0x162)](this,_0x417a0c))return!![];}}}},Game_Action[_0x3823ba(0x8d6)][_0x3823ba(0x44a)]=function(){const _0x94c6a1=_0x3823ba;return VisuMZ['BattleCore']['Settings'][_0x94c6a1(0x911)][_0x94c6a1(0xc7a)][_0x94c6a1(0x162)](this);},Game_Action[_0x3823ba(0x8d6)]['allowRandomSpeed']=function(){const _0x175d6f=_0x3823ba;return VisuMZ[_0x175d6f(0x4f3)][_0x175d6f(0x242)]['Mechanics'][_0x175d6f(0x2f7)];},Game_Action['prototype']['isCustomBattleScope']=function(){const _0x205c1b=_0x3823ba;if(this[_0x205c1b(0x9ba)]===_0x205c1b(0x4ab))return![];if(this[_0x205c1b(0x9ba)]==='all\x20enemies')return![];if(!this[_0x205c1b(0x733)]())return![];return this[_0x205c1b(0x733)]()[_0x205c1b(0x920)][_0x205c1b(0xd57)](/<JS TARGETS>/i);},Game_Action[_0x3823ba(0x8d6)][_0x3823ba(0x110)]=function(){const _0x356b90=_0x3823ba;if(this[_0x356b90(0x9ba)]==='all\x20actors')return![];if(this[_0x356b90(0x9ba)]==='all\x20enemies')return![];if(!this[_0x356b90(0x114)]&&this['subject']()[_0x356b90(0x600)]())return![];if(this[_0x356b90(0x8e2)]())return!![];if(!this[_0x356b90(0x733)]())return![];return typeof this[_0x356b90(0x733)]()['scope']===_0x356b90(0x1ec);},VisuMZ[_0x3823ba(0x4f3)]['Game_Action_isForOpponent']=Game_Action[_0x3823ba(0x8d6)]['isForOpponent'],Game_Action[_0x3823ba(0x8d6)]['isForOpponent']=function(){const _0x1d0746=_0x3823ba;if(this[_0x1d0746(0x9ba)]===_0x1d0746(0x4ab))return![];if(this[_0x1d0746(0x9ba)]===_0x1d0746(0x2b9))return!![];if(this['isBattleCoreTargetScope']()&&!this[_0x1d0746(0x8e2)]()){if(_0x1d0746(0xac7)===_0x1d0746(0xcdb)){if(!_0xa8fdc9[_0x1d0746(0x839)]())return![];return![];}else return this['isForOpponentBattleCore']();}else return VisuMZ['BattleCore'][_0x1d0746(0xc44)][_0x1d0746(0x162)](this);},Game_Action[_0x3823ba(0x8d6)]['isForOpponentBattleCore']=function(){const _0x57f3cc=_0x3823ba,_0x521565=this['item']()[_0x57f3cc(0x58f)];if(_0x521565['match'](/ANY/i))return!![];return _0x521565[_0x57f3cc(0xd57)](/(?:ENEMY|ENEMIES|FOE|FOES)/i);},VisuMZ[_0x3823ba(0x4f3)]['Game_Action_isForFriend']=Game_Action[_0x3823ba(0x8d6)][_0x3823ba(0x221)],Game_Action[_0x3823ba(0x8d6)]['isForFriend']=function(){const _0x3385ad=_0x3823ba;if(this['_targetBattlerKey']===_0x3385ad(0x4ab))return!![];if(this[_0x3385ad(0x9ba)]===_0x3385ad(0x2b9))return![];if(this[_0x3385ad(0x110)]()&&!this[_0x3385ad(0x8e2)]())return this[_0x3385ad(0x39a)]();else{if(_0x3385ad(0x2fb)==='ZxcQE')return VisuMZ['BattleCore']['Game_Action_isForFriend'][_0x3385ad(0x162)](this);else{_0x384fe1=_0x3b26b7[_0x3385ad(0x4f3)]['JS'][_0x4730e7][_0x3385ad(0x162)](this,this[_0x3385ad(0x29d)](),_0x3817f9,_0x7648d7,_0x5d9b0c);if(_0x4c4480)_0x16648c=_0x4abfcd;}}},Game_Action['prototype'][_0x3823ba(0x39a)]=function(){const _0x510252=_0x3823ba,_0xd45405=this['item']()[_0x510252(0x58f)];return _0xd45405[_0x510252(0xd57)](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);},Game_Action[_0x3823ba(0x8d6)]['isForAnyone']=function(){const _0x416ac3=_0x3823ba;if(this[_0x416ac3(0x110)]()&&!this[_0x416ac3(0x8e2)]()){if(_0x416ac3(0x8a9)!==_0x416ac3(0x8a9))_0x355f09=_0x396e1a>=_0x195174?_0x596029:_0x42700e;else{const _0x153663=this[_0x416ac3(0x733)]()[_0x416ac3(0x58f)];return _0x153663[_0x416ac3(0xd57)](/(?:ENEMY|FOE)/i)&&_0x153663[_0x416ac3(0xd57)](/OR/i)&&_0x153663[_0x416ac3(0xd57)](/(?:ALLY|FRIEND)/i);}}else return![];},Game_Action['prototype'][_0x3823ba(0x249)]=function(){const _0x3a1b57=_0x3823ba;if(this[_0x3a1b57(0x7d5)]()){const _0x2ab6e3=this[_0x3a1b57(0x733)]()[_0x3a1b57(0x58f)];if(_0x2ab6e3['match'](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];}return![];},Game_Action[_0x3823ba(0x8d6)][_0x3823ba(0x6d0)]=function(){const _0xc3b4af=_0x3823ba;if(this[_0xc3b4af(0x7d5)]()){if('kBJcB'!=='aKwzs'){const _0x197c96=this[_0xc3b4af(0x733)]()['scope'];if(_0x197c96[_0xc3b4af(0xd57)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];}else this[_0xc3b4af(0xa7c)]();}return![];},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x3cb)]=Game_Action[_0x3823ba(0x8d6)][_0x3823ba(0x7e4)],Game_Action['prototype'][_0x3823ba(0x7e4)]=function(){const _0x18597f=_0x3823ba;if(this[_0x18597f(0x9ba)]===_0x18597f(0x4ab)){if(_0x18597f(0xa50)===_0x18597f(0x19b)){if(_0x460895===_0x1cb279[_0x18597f(0xa68)]()){let _0x58a03d=_0x1727b1[_0x18597f(0xa36)];_0x58a03d*=_0x4e506c[_0x18597f(0x54a)](_0x2be163),_0x58a03d*=this[_0x18597f(0x29d)]()[_0x18597f(0x614)](_0x59f9eb),_0x58a03d*=this[_0x18597f(0x6a8)](_0x2d1949),_0x2d32d9['random']()<_0x58a03d&&(_0x1289aa[_0x18597f(0x5d9)]=!![],this[_0x18597f(0xc40)](_0x42f916));}}else return!![];}if(this[_0x18597f(0x110)]()&&!this['isCustomBattleScope']()){if(_0x18597f(0xb21)!=='Wwzpi')_0x11ca12[_0x18597f(0x4f3)][_0x18597f(0x985)][_0x18597f(0x162)](this),!this[_0x18597f(0x6b7)]&&this['_hpGaugeSprite']&&(this[_0x18597f(0x33d)][_0x18597f(0x425)]=![]);else return this['isForAliveFriendBattleCore']();}else{if(_0x18597f(0x4f1)===_0x18597f(0x4f1))return VisuMZ[_0x18597f(0x4f3)][_0x18597f(0x3cb)][_0x18597f(0x162)](this);else _0x1bc345[_0x18597f(0x8d6)][_0x18597f(0xce2)][_0x18597f(0x162)](this),this[_0x18597f(0xb2c)]();}},VisuMZ['BattleCore'][_0x3823ba(0xbe8)]=Game_Action['prototype']['isForDeadFriend'],Game_Action[_0x3823ba(0x8d6)][_0x3823ba(0x766)]=function(){const _0x229e9c=_0x3823ba;if(this[_0x229e9c(0x9ba)]===_0x229e9c(0x4ab))return VisuMZ[_0x229e9c(0x4f3)]['Game_Action_isForDeadFriend']['call'](this);return VisuMZ[_0x229e9c(0x4f3)]['Game_Action_isForDeadFriend'][_0x229e9c(0x162)](this);},Game_Action[_0x3823ba(0x8d6)][_0x3823ba(0xc15)]=function(){const _0x2d28da=_0x3823ba;if(this[_0x2d28da(0x7d5)]())return!![];return![];},Game_Action[_0x3823ba(0x8d6)][_0x3823ba(0x2a0)]=function(){const _0x4d198f=_0x3823ba;return this[_0x4d198f(0x733)]()&&this[_0x4d198f(0x733)]()['note'][_0x4d198f(0xd57)](/<CANNOT TARGET (?:USER|SELF)>/i);},VisuMZ['BattleCore'][_0x3823ba(0x688)]=Game_Action[_0x3823ba(0x8d6)][_0x3823ba(0x957)],Game_Action['prototype'][_0x3823ba(0x957)]=function(){const _0x78cd3e=_0x3823ba;if(this[_0x78cd3e(0x9ba)]===_0x78cd3e(0x4ab))return![];if(this['_targetBattlerKey']===_0x78cd3e(0x2b9))return![];return this[_0x78cd3e(0x110)]()&&!this[_0x78cd3e(0x8e2)]()?this['isForOneBattleCore']():VisuMZ[_0x78cd3e(0x4f3)][_0x78cd3e(0x688)]['call'](this);},Game_Action[_0x3823ba(0x8d6)]['isForOneBattleCore']=function(){const _0x2c8c33=_0x3823ba;if(this[_0x2c8c33(0x7d5)]())return!![];return![];},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0xa2a)]=Game_Action[_0x3823ba(0x8d6)][_0x3823ba(0x2b5)],Game_Action[_0x3823ba(0x8d6)]['isForRandom']=function(){const _0x4b73e3=_0x3823ba;if(this[_0x4b73e3(0x9ba)]===_0x4b73e3(0x4ab))return![];if(this[_0x4b73e3(0x9ba)]==='all\x20enemies')return![];if(this['isBattleCoreTargetScope']()&&!this[_0x4b73e3(0x8e2)]())return this[_0x4b73e3(0xb11)]();else{if(_0x4b73e3(0x7d7)!==_0x4b73e3(0x7f1))return VisuMZ['BattleCore'][_0x4b73e3(0xa2a)][_0x4b73e3(0x162)](this);else{if(!this[_0x4b73e3(0x8ca)]())return;const _0x124fbc=this[_0x4b73e3(0xb1e)](),_0x28594b=_0x5df8d7[_0x4b73e3(0x4f3)]['Settings']['PartyCmd'][_0x4b73e3(0x536)],_0xbe19e4=_0x124fbc===_0x4b73e3(0x3e1)?_0x53877b[_0x4b73e3(0xb16)]:'\x5cI[%1]%2'[_0x4b73e3(0xabf)](_0x28594b,_0x40abb4[_0x4b73e3(0xb16)]),_0x179449=this[_0x4b73e3(0x186)]();this[_0x4b73e3(0xac9)](_0xbe19e4,'options',_0x179449);}}},Game_Action[_0x3823ba(0x8d6)]['isForRandomBattleCore']=function(){const _0x5f4dd1=_0x3823ba,_0x136eb6=this[_0x5f4dd1(0x733)]()['scope'];return _0x136eb6['match'](/(?:RAND|RANDOM)/i);},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0xa38)]=Game_Action['prototype'][_0x3823ba(0xa11)],Game_Action[_0x3823ba(0x8d6)][_0x3823ba(0xa11)]=function(){const _0x5e8017=_0x3823ba;if(this['_targetBattlerKey']===_0x5e8017(0x4ab))return!![];if(this[_0x5e8017(0x9ba)]===_0x5e8017(0x2b9))return!![];return VisuMZ['BattleCore'][_0x5e8017(0xa38)]['call'](this);},Game_Action[_0x3823ba(0x8d6)]['canSingleOrMultipleSelect']=function(){const _0x1dbbbb=_0x3823ba;if(!this[_0x1dbbbb(0x733)]())return![];if(this[_0x1dbbbb(0x766)]())return![];return(this[_0x1dbbbb(0x733)]()[_0x1dbbbb(0x920)]||'')[_0x1dbbbb(0xd57)](/<SINGLE OR MULTIPLE SELECT>/i);},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0xd6c)]=Game_Action[_0x3823ba(0x8d6)][_0x3823ba(0xd24)],Game_Action[_0x3823ba(0x8d6)]['testApply']=function(_0x4f62b4){const _0x3c8416=_0x3823ba;if(this[_0x3c8416(0x2a0)]()&&_0x4f62b4===this[_0x3c8416(0x29d)]())return![];return VisuMZ[_0x3c8416(0x4f3)][_0x3c8416(0xd6c)][_0x3c8416(0x162)](this,_0x4f62b4);},VisuMZ['BattleCore'][_0x3823ba(0x6e8)]=Game_Action[_0x3823ba(0x8d6)][_0x3823ba(0x711)],Game_Action['prototype'][_0x3823ba(0x711)]=function(){const _0x1f8ade=_0x3823ba,_0x1a4a33=VisuMZ[_0x1f8ade(0x4f3)][_0x1f8ade(0x6e8)]['call'](this);if(this[_0x1f8ade(0x2a0)]())_0x1a4a33[_0x1f8ade(0xbc4)](this[_0x1f8ade(0x29d)]());return _0x1a4a33;},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x5c1)]=Game_Action[_0x3823ba(0x8d6)]['needsSelection'],Game_Action[_0x3823ba(0x8d6)][_0x3823ba(0xd9d)]=function(){const _0x57ff8e=_0x3823ba;if(this['isBattleCoreTargetScope']()&&!this['isCustomBattleScope']())return this[_0x57ff8e(0x7c1)]();else{if(_0x57ff8e(0x4f9)!=='rjaSQ')this[_0x57ff8e(0xc99)]();else return VisuMZ['BattleCore'][_0x57ff8e(0x5c1)][_0x57ff8e(0x162)](this);}},Game_Action[_0x3823ba(0x8d6)][_0x3823ba(0x7c1)]=function(){const _0x28b6b3=_0x3823ba,_0x3ddc75=this['item']()[_0x28b6b3(0x58f)];if(_0x3ddc75[_0x28b6b3(0xd57)](/RANDOM/i))return![];if(_0x3ddc75[_0x28b6b3(0xd57)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0x3ddc75[_0x28b6b3(0xd57)](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];if(_0x3ddc75[_0x28b6b3(0xd57)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];if(_0x3ddc75[_0x28b6b3(0xd57)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];return VisuMZ['BattleCore'][_0x28b6b3(0x5c1)][_0x28b6b3(0x162)](this);},VisuMZ[_0x3823ba(0x4f3)]['Game_Action_makeTargets']=Game_Action[_0x3823ba(0x8d6)]['makeTargets'],Game_Action['prototype'][_0x3823ba(0x544)]=function(){const _0x56ce06=_0x3823ba;let _0x129923=[];return this[_0x56ce06(0x110)]()?this[_0x56ce06(0x8e2)]()?_0x129923=this[_0x56ce06(0x1d0)]():_0x129923=this[_0x56ce06(0xd91)]():_0x129923=VisuMZ[_0x56ce06(0x4f3)][_0x56ce06(0x556)][_0x56ce06(0x162)](this),_0x129923=this[_0x56ce06(0x38c)](_0x129923),_0x129923;},Game_Action['prototype'][_0x3823ba(0x4a6)]=function(){const _0x196ac0=_0x3823ba;return this['subject']()['isActor']()&&!this[_0x196ac0(0x29d)]()[_0x196ac0(0x85c)]();},Game_Action[_0x3823ba(0x8d6)][_0x3823ba(0x1d0)]=function(){const _0x161151=_0x3823ba,_0xfb957=VisuMZ[_0x161151(0x4f3)]['createKeyJS'](this[_0x161151(0x733)](),_0x161151(0xad2));if(VisuMZ[_0x161151(0x4f3)]['JS'][_0xfb957]){if(_0x161151(0xa76)===_0x161151(0xa09))this[_0x161151(0xa72)]=_0x39e402(_0x237d7d['$1']);else{targets=VisuMZ[_0x161151(0x4f3)][_0x161151(0x556)][_0x161151(0x162)](this);const _0x36c147=VisuMZ['BattleCore'][_0x161151(0x4e9)](this[_0x161151(0x733)](),_0x161151(0xad2));return targets=VisuMZ[_0x161151(0x4f3)]['JS'][_0x36c147][_0x161151(0x162)](this,this[_0x161151(0x29d)](),targets),this[_0x161151(0xaed)](targets);}}return this[_0x161151(0xd91)]();},Game_Action[_0x3823ba(0x8d6)][_0x3823ba(0xd91)]=function(){const _0x4cb482=_0x3823ba;let _0x2f6386=[];const _0x46cb8a=String(this[_0x4cb482(0x733)]()['scope']);if(this[_0x4cb482(0x6d0)]()){if(this[_0x4cb482(0x4a6)]())return _0x2f6386=this['getBattlerKeyTargets'](),this[_0x4cb482(0xaed)](_0x2f6386);else{if(_0x4cb482(0x3c2)===_0x4cb482(0x1f3)){if(_0x268bca['type']===0x0)this[_0x4cb482(0xb90)]('thrust');else{if(_0x3077ab[_0x4cb482(0x98a)]===0x1)this[_0x4cb482(0xb90)]('swing');else _0x527ee6['type']===0x2&&this[_0x4cb482(0xb90)](_0x4cb482(0x687));}}else return this[_0x4cb482(0x751)]=-0x1,_0x2f6386[_0x4cb482(0x3d9)](...this[_0x4cb482(0xa54)]()),this[_0x4cb482(0xaed)](_0x2f6386);}}if(this['isForAnyoneFocusFriends']()){if(this[_0x4cb482(0x4a6)]())return _0x2f6386=this['getBattlerKeyTargets'](),this[_0x4cb482(0xaed)](_0x2f6386);else{if(Imported[_0x4cb482(0x9db)]){if(VisuMZ[_0x4cb482(0x446)][_0x4cb482(0xd18)]<1.19){if(_0x4cb482(0x8a3)!==_0x4cb482(0xd74)){let _0x150335='';_0x150335+=_0x4cb482(0x7af),_0x150335+=_0x4cb482(0x80f),_0x150335+='with\x20latest\x20version\x20of\x20VisuMZ_1_BattleCore!',alert(_0x150335),SceneManager[_0x4cb482(0x824)]();}else{let _0x26200c=_0x548dfa['BattleCore'][_0x4cb482(0x246)][_0x4cb482(0x162)](this);return this[_0x4cb482(0x280)]&&(_0x26200c*=this[_0x4cb482(0x280)]()),_0x296218['ceil'](_0x26200c);}}}return this['_targetIndex']=-0x1,_0x2f6386[_0x4cb482(0x3d9)](...this[_0x4cb482(0xaad)]()),this[_0x4cb482(0xaed)](_0x2f6386);}}if(_0x46cb8a[_0x4cb482(0xd57)](/(\d+) RANDOM ANY/i)){let _0x25cf91=Number(RegExp['$1']);while(_0x25cf91--){const _0x165279=Math['randomInt'](0x2)===0x0?this[_0x4cb482(0x686)]():this[_0x4cb482(0x691)]();_0x2f6386[_0x4cb482(0x3d9)](_0x165279[_0x4cb482(0x663)]());}return this[_0x4cb482(0xaed)](_0x2f6386);}if(_0x46cb8a[_0x4cb482(0xd57)](/(\d+) RANDOM (?:ENEMY|ENEMIES|FOE|FOES)/i)){let _0x1bf137=Number(RegExp['$1']);while(_0x1bf137--){_0x4cb482(0x160)!==_0x4cb482(0x3bf)?_0x2f6386[_0x4cb482(0x3d9)](this[_0x4cb482(0x686)]()[_0x4cb482(0x663)]()):this[_0x4cb482(0x8e2)]()?_0x39d546=this[_0x4cb482(0x1d0)]():_0x3f3b0a=this['makeTargetsBattleCore']();}return this['repeatTargets'](_0x2f6386);}if(_0x46cb8a[_0x4cb482(0xd57)](/(\d+) RANDOM (?:ALLY|ALLIES|FRIEND|FRIENDS)/i)){if(_0x4cb482(0x1fa)!=='FmCQb'){let _0x2bea3b=Number(RegExp['$1']);while(_0x2bea3b--){_0x2f6386[_0x4cb482(0x3d9)](this[_0x4cb482(0x691)]()[_0x4cb482(0x663)]());}return this['repeatTargets'](_0x2f6386);}else{const _0x1118c2=this[_0x4cb482(0xa73)]();if(_0x13e821&&['xp',_0x4cb482(0x9e6)][_0x4cb482(0x97e)](_0x1118c2))this[_0x4cb482(0xc43)](_0x1360fb);else _0xf59f78&&[_0x4cb482(0x43a)]['includes'](_0x1118c2)&&(this['resizeWindowBorderStyle'](_0x4df8a0),this[_0x4cb482(0x790)]());_0x1efc96[_0x4cb482(0x4f3)][_0x4cb482(0x971)][_0x4cb482(0x162)](this,_0x533db5),_0x40bc23&&_0x39dc2d[_0x4cb482(0xd31)]()[_0x4cb482(0xb23)]>0x0&&_0xce9bc6[_0x4cb482(0x798)]()&&_0x321580[_0x4cb482(0x798)]()[_0x4cb482(0x8f8)]();}}if(_0x46cb8a[_0x4cb482(0xd57)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS) (?:BUT|EXCEPT) (?:USER|SELF)/i))return _0x2f6386['push'](...this[_0x4cb482(0x691)]()[_0x4cb482(0xd31)]()[_0x4cb482(0x3a2)](_0x50a667=>_0x50a667!==this[_0x4cb482(0x29d)]())),this[_0x4cb482(0xaed)](_0x2f6386);return VisuMZ[_0x4cb482(0x4f3)][_0x4cb482(0x556)]['call'](this);},Game_Action[_0x3823ba(0x8d6)][_0x3823ba(0xd73)]=function(_0x2cc654){const _0x179cb1=_0x3823ba,_0x42778e=[];for(let _0x3ee2d8=0x0;_0x3ee2d8<this[_0x179cb1(0x558)]();_0x3ee2d8++){_0x42778e[_0x179cb1(0x3d9)](_0x2cc654[_0x179cb1(0x663)]());}return _0x42778e;},Game_Action[_0x3823ba(0x8d6)][_0x3823ba(0x38c)]=function(_0x47daed){const _0x5871a4=_0x3823ba;if(!this[_0x5871a4(0x733)]())return _0x47daed;const _0xac0eb9=this[_0x5871a4(0x733)]()[_0x5871a4(0x920)];if(this[_0x5871a4(0x2a0)]()){this[_0x5871a4(0xa11)]()&&('VJbdE'===_0x5871a4(0x353)?_0x29e798[_0x5871a4(0x734)][_0x5871a4(0x237)](_0x50805a):_0x47daed['remove'](this[_0x5871a4(0x29d)]()));if(_0x47daed['includes'](this[_0x5871a4(0x29d)]())){const _0x1f500a=this[_0x5871a4(0x691)]()[_0x5871a4(0xd31)]()['remove'](this[_0x5871a4(0x29d)]());if(_0x1f500a[_0x5871a4(0xb23)]>0x0){_0x1f500a[_0x5871a4(0x403)]((_0x53c275,_0x5da438)=>_0x53c275[_0x5871a4(0x530)]()-_0x5da438[_0x5871a4(0x530)]());while(_0x47daed[_0x5871a4(0x97e)](this[_0x5871a4(0x29d)]())){const _0x2e5a43=_0x47daed[_0x5871a4(0x122)](this[_0x5871a4(0x29d)]());_0x47daed[_0x2e5a43]=_0x1f500a[Math[_0x5871a4(0x407)](_0x1f500a['length'])];}}else{if('gfdfG'==='gfdfG')_0x47daed[_0x5871a4(0xbc4)](this[_0x5871a4(0x29d)]());else{if(_0x20a45b['_battleCoreBattleStartEvent'])return;_0x440443[_0x5871a4(0x4f3)]['Scene_Map_updateCallMenu'][_0x5871a4(0x162)](this);}}}}return _0x47daed;},VisuMZ['BattleCore']['Game_Action_itemEffectAddAttackState']=Game_Action['prototype'][_0x3823ba(0xb74)],Game_Action['prototype']['itemEffectAddAttackState']=function(_0x5777d6,_0x3c0e7a){const _0x5462db=_0x3823ba;VisuMZ[_0x5462db(0x4f3)][_0x5462db(0xbbf)][_0x5462db(0x162)](this,_0x5777d6,_0x3c0e7a);if(!_0x5777d6[_0x5462db(0x854)]())return;for(const _0x52711a of this[_0x5462db(0x29d)]()[_0x5462db(0xaca)]()){if(_0x52711a===_0x5777d6[_0x5462db(0xa68)]()){let _0x1a6d48=_0x3c0e7a[_0x5462db(0xa36)];_0x1a6d48*=_0x5777d6['stateRate'](_0x52711a),_0x1a6d48*=this[_0x5462db(0x29d)]()[_0x5462db(0x614)](_0x52711a),_0x1a6d48*=this['lukEffectRate'](_0x5777d6),Math[_0x5462db(0x30f)]()<_0x1a6d48&&(_0x5777d6['_deathStateApplied']=!![],this[_0x5462db(0xc40)](_0x5777d6));}}},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0xd69)]=Game_Action[_0x3823ba(0x8d6)]['itemEffectAddNormalState'],Game_Action[_0x3823ba(0x8d6)]['itemEffectAddNormalState']=function(_0x35cd66,_0x5add63){const _0x1ee0ca=_0x3823ba;VisuMZ[_0x1ee0ca(0x4f3)]['Game_Action_itemEffectAddNormalState'][_0x1ee0ca(0x162)](this,_0x35cd66,_0x5add63);if(!_0x35cd66[_0x1ee0ca(0x854)]())return;if(_0x5add63[_0x1ee0ca(0x9fa)]!==_0x35cd66[_0x1ee0ca(0xa68)]())return;let _0x466b73=_0x5add63[_0x1ee0ca(0xa36)];!this['isCertainHit']()&&(_0x466b73*=_0x35cd66[_0x1ee0ca(0x54a)](_0x5add63[_0x1ee0ca(0x9fa)]),_0x466b73*=this[_0x1ee0ca(0x6a8)](_0x35cd66));if(Math[_0x1ee0ca(0x30f)]()<_0x466b73){if(_0x1ee0ca(0x4fb)===_0x1ee0ca(0x4fb))_0x35cd66['_deathStateApplied']=!![],this[_0x1ee0ca(0xc40)](_0x35cd66);else{if(!_0x449989['isBattleTest']()){const _0x96a61=_0x35fe87[_0x1ee0ca(0x286)](_0x36a5e2['x'],_0x17f7a1['y']);if(this['_regionBattleback1']&&this[_0x1ee0ca(0x231)][_0x96a61])return this[_0x1ee0ca(0x231)][_0x96a61];}return _0x3a77d5[_0x1ee0ca(0x4f3)][_0x1ee0ca(0x44d)][_0x1ee0ca(0x162)](this);}}},VisuMZ[_0x3823ba(0x4f3)]['Game_Action_applyGlobal']=Game_Action[_0x3823ba(0x8d6)][_0x3823ba(0x5e2)],Game_Action[_0x3823ba(0x8d6)][_0x3823ba(0x5e2)]=function(){const _0x4678c0=_0x3823ba;VisuMZ['BattleCore'][_0x4678c0(0xb1f)][_0x4678c0(0x162)](this),this['applyGlobalCommonEventNotetags'](),this['resetResultSwitches']();},Game_Action[_0x3823ba(0x8d6)][_0x3823ba(0x5c0)]=function(){const _0x41687a=_0x3823ba;if(!SceneManager['isSceneBattle']())return;const _0x5e4847=/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi,_0x35474c=this[_0x41687a(0x733)]()['note']['match'](_0x5e4847);if(_0x35474c)for(const _0x46417c of _0x35474c){if(!_0x46417c)continue;_0x46417c[_0x41687a(0xd57)](_0x5e4847);const _0x26782f=String(RegExp['$1'])[_0x41687a(0x22f)](',')[_0x41687a(0x4d0)](_0x7bed96=>String(_0x7bed96)['trim']()),_0x2d0dbf=_0x26782f[_0x41687a(0x4d0)](_0x3fc7ae=>DataManager[_0x41687a(0xbb0)](_0x3fc7ae));for(const _0x3adb3d of _0x2d0dbf){if(_0x41687a(0x35f)===_0x41687a(0x35f)){const _0xac9622=$dataCommonEvents[_0x3adb3d];if(_0xac9622){if('TyUJW'!==_0x41687a(0x173))$gameTemp['reserveCommonEvent'](_0x3adb3d);else return _0x273f7a[_0x41687a(0x208)][_0x41687a(0x162)](this);}}else{if(!this[_0x41687a(0x9c0)][_0x41687a(0x3db)](_0x3d934e['id']))return![];}}}},DataManager[_0x3823ba(0xbb0)]=function(_0x32fc04){const _0x1636d7=_0x3823ba;_0x32fc04=_0x32fc04[_0x1636d7(0x2d8)]()[_0x1636d7(0xaf4)](),this[_0x1636d7(0xc0e)]=this[_0x1636d7(0xc0e)]||{};if(this[_0x1636d7(0xc0e)][_0x32fc04])return this[_0x1636d7(0xc0e)][_0x32fc04];for(const _0x562877 of $dataCommonEvents){if(!_0x562877)continue;let _0x1bd33f=_0x562877['name'];_0x1bd33f=_0x1bd33f[_0x1636d7(0x7fc)](/\x1I\[(\d+)\]/gi,''),_0x1bd33f=_0x1bd33f[_0x1636d7(0x7fc)](/\\I\[(\d+)\]/gi,''),this[_0x1636d7(0xc0e)][_0x1bd33f[_0x1636d7(0x2d8)]()[_0x1636d7(0xaf4)]()]=_0x562877['id'];}return this[_0x1636d7(0xc0e)][_0x32fc04]||0x0;},Game_Action['prototype'][_0x3823ba(0xa51)]=function(){const _0xc99698=_0x3823ba;if(!SceneManager['isSceneBattle']())return;const _0x324c62=VisuMZ['BattleCore'][_0xc99698(0x242)][_0xc99698(0x911)];_0x324c62[_0xc99698(0x6da)]&&$gameSwitches['setValue'](_0x324c62[_0xc99698(0x6da)],![]),_0x324c62[_0xc99698(0xba6)]&&$gameSwitches[_0xc99698(0xccb)](_0x324c62['SwitchMissEvade'],![]),_0x324c62['VariableDmg']&&(_0xc99698(0x393)!==_0xc99698(0x3fc)?$gameVariables['setValue'](_0x324c62['VariableDmg'],0x0):this[_0xc99698(0x959)](this[_0xc99698(0xad4)])),_0x324c62['VariableHeal']&&$gameVariables[_0xc99698(0xccb)](_0x324c62['VariableHeal'],0x0);},Game_Action[_0x3823ba(0x8d6)][_0x3823ba(0x96f)]=function(_0x2b1a25){const _0x2db2e7=_0x3823ba;if(!SceneManager[_0x2db2e7(0xbc6)]())return;if(!_0x2b1a25)return;const _0x415da9=_0x2b1a25[_0x2db2e7(0xc87)](),_0x562cf5=VisuMZ[_0x2db2e7(0x4f3)]['Settings'][_0x2db2e7(0x911)];_0x562cf5[_0x2db2e7(0x6da)]&&_0x415da9[_0x2db2e7(0x9f2)]&&$gameSwitches[_0x2db2e7(0xccb)](_0x562cf5[_0x2db2e7(0x6da)],!![]);_0x562cf5['SwitchMissEvade']&&(_0x415da9['missed']||_0x415da9[_0x2db2e7(0xaea)])&&$gameSwitches[_0x2db2e7(0xccb)](_0x562cf5['SwitchMissEvade'],!![]);if(_0x562cf5[_0x2db2e7(0x41f)]){let _0x23d726=$gameVariables[_0x2db2e7(0x16d)](_0x562cf5[_0x2db2e7(0x41f)]);_0x415da9[_0x2db2e7(0xd6f)]>0x0&&(_0x23d726+=Math[_0x2db2e7(0x6ee)](_0x415da9[_0x2db2e7(0xd6f)])),$gameVariables[_0x2db2e7(0xccb)](_0x562cf5[_0x2db2e7(0x41f)],_0x23d726);}if(_0x562cf5[_0x2db2e7(0x816)]){if(_0x2db2e7(0xbe1)===_0x2db2e7(0xbe1)){let _0x4a7628=$gameVariables[_0x2db2e7(0x16d)](_0x562cf5[_0x2db2e7(0x816)]);_0x415da9[_0x2db2e7(0xd6f)]<0x0&&(_0x4a7628+=Math['abs'](_0x415da9[_0x2db2e7(0xd6f)])),$gameVariables[_0x2db2e7(0xccb)](_0x562cf5['VariableHeal'],_0x4a7628);}else return![];}},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x516)]={'lifeSteaItem':/<(.*?) (?:LIFE|MANA) STEAL:[ ](\d+)([%％])>/gi,'lifeStealTrait':/<(.*?) (?:LIFE|MANA) STEAL (.*?):[ ]([\+\-]\d+)([%％])>/gi,'cancelLifeSteal':/<CANCEL LIFE STEAL>/i,'cancelHpLifeSteal':/<CANCEL HP LIFE STEAL>/i,'cancelMpLifeSteal':/<CANCEL MP LIFE STEAL>/i,'guardLifeSteal':/<GUARD LIFE STEAL>/i,'guardHpLifeSteal':/<GUARD HP LIFE STEAL>/i,'guardMpLifeSteal':/<GUARD MP LIFE STEAL>/i,'disarmLifeSteal':/<DISARM LIFE STEAL>/i,'disarmHpLifeSteal':/<DISARM HP LIFE STEAL>/i,'disarmMpLifeSteal':/<DISARM MP LIFE STEAL>/i,'negativeLifeSteal':/<REVERSE LIFE STEAL>/i,'negativeHpLifeSteal':/<REVERSE HP LIFE STEAL>/i,'negativeMpLifeSteal':/<REVERSE MP LIFE STEAL>/i},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0xb4a)]=Game_Action[_0x3823ba(0x8d6)][_0x3823ba(0x92c)],Game_Action[_0x3823ba(0x8d6)][_0x3823ba(0x92c)]=function(_0x477696,_0x354aa6){const _0x264e41=_0x3823ba;VisuMZ[_0x264e41(0x4f3)][_0x264e41(0xb4a)][_0x264e41(0x162)](this,_0x477696,_0x354aa6);!this['isDrain']()&&_0x477696&&_0x477696[_0x264e41(0xc87)]()[_0x264e41(0xd6f)]>0x0&&(_0x264e41(0x33c)==='TlKYf'?_0x3b2552[_0x264e41(0xab0)]('battleAnimation'):this[_0x264e41(0xbdd)]('HP',_0x477696,_0x477696['result']()[_0x264e41(0xd6f)]));if(_0x477696){if(_0x264e41(0x56c)!==_0x264e41(0x6f4)){this[_0x264e41(0x6ef)]=this['_executeHpDamage']||{};const _0x3a5a64=_0x477696['battlerKey']();this['_executeHpDamage'][_0x3a5a64]=_0x354aa6;}else _0x564486['gainHp'](_0x2915e7),this[_0x264e41(0xc40)](_0x4f1f91);}},Game_Action[_0x3823ba(0x8d6)][_0x3823ba(0x852)]=function(_0x12892c){const _0x37b7e8=_0x3823ba;this[_0x37b7e8(0x6ef)]=this[_0x37b7e8(0x6ef)]||{};const _0x59df21=_0x12892c['battlerKey']();return this['_executeHpDamage'][_0x59df21]||0x0;},VisuMZ[_0x3823ba(0x4f3)]['Game_Action_executeMpDamage']=Game_Action['prototype'][_0x3823ba(0x299)],Game_Action[_0x3823ba(0x8d6)][_0x3823ba(0x299)]=function(_0x28c6f1,_0x406b84){const _0x2949be=_0x3823ba;VisuMZ[_0x2949be(0x4f3)]['Game_Action_executeMpDamage'][_0x2949be(0x162)](this,_0x28c6f1,_0x406b84),!this[_0x2949be(0xbfe)]()&&_0x28c6f1&&_0x28c6f1['result']()['mpDamage']>0x0&&this[_0x2949be(0xbdd)]('MP',_0x28c6f1,_0x28c6f1['result']()[_0x2949be(0x313)]);},Game_Action[_0x3823ba(0x8d6)]['performLifeSteal']=function(_0x4409e5,_0xf818a5,_0x520ce8){const _0x3285e2=_0x3823ba;_0x4409e5=_0x4409e5['toUpperCase']()[_0x3285e2(0xaf4)]();const _0x2bccba=this[_0x3285e2(0x885)](_0x4409e5,_0xf818a5);if(_0x2bccba<=0x0)return;const _0x1c74f4=Math['round'](_0x520ce8*_0x2bccba);if(_0x1c74f4<=0x0)return;let _0x4f062d=this[_0x3285e2(0x29d)]();if(this[_0x3285e2(0x112)])_0x4f062d=this[_0x3285e2(0x112)];const _0x80eb36=_0xf818a5[_0x3285e2(0xd39)](_0x4409e5)?-0x1:0x1;if(_0x4409e5==='HP')_0x4f062d[_0x3285e2(0x219)](_0x80eb36*_0x1c74f4);if(_0x4409e5==='MP')_0x4f062d[_0x3285e2(0x929)](_0x80eb36*_0x1c74f4);},Game_Action[_0x3823ba(0x8d6)][_0x3823ba(0x885)]=function(_0x1507c4,_0x1db96f){const _0x16e050=_0x3823ba;if(this['isCancelLifeSteal'](_0x1507c4))return 0x0;if(this[_0x16e050(0x29d)]()[_0x16e050(0xaee)](_0x1507c4))return 0x0;if(_0x1db96f[_0x16e050(0x174)](_0x1507c4))return 0x0;let _0x2223df=0x0;return _0x2223df+=this[_0x16e050(0xb02)](_0x1507c4),_0x2223df+=this[_0x16e050(0x29d)]()[_0x16e050(0x885)](_0x1507c4,this[_0x16e050(0x733)]()[_0x16e050(0x324)]),_0x2223df['clamp'](0x0,0x1);},Game_Action[_0x3823ba(0x8d6)]['isCancelLifeSteal']=function(_0x4dcc86){const _0x888394=_0x3823ba;_0x4dcc86=_0x4dcc86[_0x888394(0x2d8)]()['trim']();const _0x2ad2a0=VisuMZ[_0x888394(0x4f3)][_0x888394(0x516)],_0x36061=this[_0x888394(0x733)]()[_0x888394(0x920)]||'';if(_0x36061[_0x888394(0xd57)](_0x2ad2a0[_0x888394(0x53f)]))return!![];if(_0x4dcc86==='HP'&&_0x36061[_0x888394(0xd57)](_0x2ad2a0['cancelHpLifeSteal']))return _0x888394(0x2df)!=='uFUhT'?!![]:this[_0x888394(0xbee)]()[_0x888394(0x3a2)](_0x1c50d7=>_0x1c50d7[_0x888394(0xd5c)]());if(_0x4dcc86==='MP'&&_0x36061[_0x888394(0xd57)](_0x2ad2a0[_0x888394(0x2af)]))return!![];return![];},Game_Action['prototype'][_0x3823ba(0xb02)]=function(_0x39b06c){const _0x2619f3=_0x3823ba,_0x40894e=VisuMZ[_0x2619f3(0x4f3)][_0x2619f3(0x516)],_0x278dab=this[_0x2619f3(0x733)]()['note']||'';_0x39b06c=_0x39b06c[_0x2619f3(0x2d8)]()[_0x2619f3(0xaf4)]();const _0x44f53b=_0x278dab[_0x2619f3(0xd57)](_0x40894e['lifeSteaItem']);if(_0x44f53b){if('QIhOH'===_0x2619f3(0x55d))_0x42fe47[_0x2619f3(0x350)](_0x388e77,_0x50ee66,_0xd2ad90,_0x279f18,_0x3f2059,-0x1),this[_0x2619f3(0x15f)]();else for(const _0xe033c3 of _0x44f53b){_0xe033c3[_0x2619f3(0xd57)](_0x40894e[_0x2619f3(0x19c)]);const _0x121043=String(RegExp['$1'])[_0x2619f3(0x2d8)]()[_0x2619f3(0xaf4)](),_0x5e4d51=Number(RegExp['$2'])*0.01;if(_0x121043!==_0x39b06c)continue;return _0x5e4d51;}}return 0x0;},Game_BattlerBase['prototype'][_0x3823ba(0x885)]=function(_0x2ca0c6,_0x242d38){const _0x1f3780=_0x3823ba,_0x2c711d=VisuMZ['BattleCore'][_0x1f3780(0x516)];let _0x55b3f6=0x0;_0x2ca0c6=_0x2ca0c6[_0x1f3780(0x2d8)]()[_0x1f3780(0xaf4)]();for(const _0x2ac103 of this[_0x1f3780(0x4f7)]()){if('Bfeek'==='Bfeek'){if(!_0x2ac103)continue;const _0xf5049f=_0x2ac103['note']||'',_0x5557f9=_0xf5049f[_0x1f3780(0xd57)](_0x2c711d[_0x1f3780(0x9b4)]);if(_0x5557f9)for(const _0x20c129 of _0x5557f9){if(_0x1f3780(0xa75)!==_0x1f3780(0xb7c)){_0x20c129[_0x1f3780(0xd57)](_0x2c711d[_0x1f3780(0x9b4)]);const _0x45bc96=String(RegExp['$1'])[_0x1f3780(0x2d8)]()['trim'](),_0x2ab37f=String(RegExp['$2']),_0x459a5c=Number(RegExp['$3'])*0.01;if(_0x45bc96!==_0x2ca0c6)continue;if(_0x242d38===Game_Action[_0x1f3780(0xa97)]&&_0x2ab37f[_0x1f3780(0xd57)](/CERTAIN/i))_0x55b3f6+=_0x459a5c;else{if(_0x242d38===Game_Action[_0x1f3780(0x601)]&&_0x2ab37f['match'](/PHYS/i)){if(_0x1f3780(0x718)==='LewQC'){if(!_0x4ba180[_0x1f3780(0xbc6)]())return;const _0x451a3e=_0x32564e[_0x1f3780(0xd61)];_0x451a3e[_0x1f3780(0xb4d)]();}else _0x55b3f6+=_0x459a5c;}else _0x242d38===Game_Action[_0x1f3780(0xa19)]&&_0x2ab37f['match'](/MAGIC/i)&&(_0x55b3f6+=_0x459a5c);}}else{_0x129869(_0x1f3780(0x25b)),_0x37e69b[_0x1f3780(0x824)]();return;}}}else{const _0x1c8fc3=[],_0x4a86f8=new _0x49f904(this);return _0x4a86f8[_0x1f3780(0x623)](),_0x1c8fc3[_0x1f3780(0x3d9)](_0x4a86f8),_0x1c8fc3;}}return _0x55b3f6;},Game_BattlerBase['prototype']['isDisarmLifeSteal']=function(_0x48e546){const _0x544346=_0x3823ba;_0x48e546=_0x48e546[_0x544346(0x2d8)]()[_0x544346(0xaf4)]();const _0x52881e=VisuMZ[_0x544346(0x4f3)][_0x544346(0x516)];for(const _0x5beb3e of this[_0x544346(0x4f7)]()){if(!_0x5beb3e)continue;const _0x4937df=_0x5beb3e[_0x544346(0x920)]||'';if(_0x4937df[_0x544346(0xd57)](_0x52881e[_0x544346(0x125)]))return!![];if(_0x48e546==='HP'&&_0x4937df['match'](_0x52881e[_0x544346(0xcbb)]))return!![];if(_0x48e546==='MP'&&_0x4937df[_0x544346(0xd57)](_0x52881e[_0x544346(0x67f)])){if(_0x544346(0x49d)!==_0x544346(0x49d)){if(_0x41e45e[_0x544346(0x920)][_0x544346(0xd57)](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){const _0x2f0247=_0x228662(_0x3a20aa['$1'])[_0x544346(0x22f)](/[\r\n]+/)[_0x544346(0xbc4)](''),_0x272150=this[_0x544346(0xb8f)](_0x2f0247);_0x409a0b=this[_0x544346(0xd5a)](_0x272150)||_0x2c4262,_0x3e6654=_0x263110['swapEnemyIDs'](_0x2968c9);}}else return!![];}}return![];},Game_BattlerBase[_0x3823ba(0x8d6)]['isNegativeLifeSteal']=function(_0x24c8b9){const _0x3bf12a=_0x3823ba;_0x24c8b9=_0x24c8b9[_0x3bf12a(0x2d8)]()['trim']();const _0x517e9a=VisuMZ[_0x3bf12a(0x4f3)]['LifeStealRegExp'];for(const _0x43039b of this[_0x3bf12a(0x4f7)]()){if(!_0x43039b)continue;const _0x2c0434=_0x43039b[_0x3bf12a(0x920)]||'';if(_0x2c0434[_0x3bf12a(0xd57)](_0x517e9a[_0x3bf12a(0x2cd)]))return!![];if(_0x24c8b9==='HP'&&_0x2c0434[_0x3bf12a(0xd57)](_0x517e9a[_0x3bf12a(0x1ed)])){if(_0x3bf12a(0x38f)===_0x3bf12a(0x38f))return!![];else this['repositionEnemiesByResolution']();}if(_0x24c8b9==='MP'&&_0x2c0434[_0x3bf12a(0xd57)](_0x517e9a[_0x3bf12a(0x38a)]))return!![];}return![];},Game_BattlerBase['prototype'][_0x3823ba(0x174)]=function(_0x1db6e9){const _0x2bc841=_0x3823ba;_0x1db6e9=_0x1db6e9[_0x2bc841(0x2d8)]()[_0x2bc841(0xaf4)]();const _0x8e86fe=VisuMZ[_0x2bc841(0x4f3)][_0x2bc841(0x516)];for(const _0x1d7fb2 of this[_0x2bc841(0x4f7)]()){if(_0x2bc841(0xafa)!==_0x2bc841(0xafa))_0x2cd1b8[_0x2bc841(0x4f3)][_0x2bc841(0x1c3)][_0x2bc841(0x162)](this);else{if(!_0x1d7fb2)continue;const _0x4b3398=_0x1d7fb2[_0x2bc841(0x920)]||'';if(_0x4b3398['match'](_0x8e86fe[_0x2bc841(0x305)]))return!![];if(_0x1db6e9==='HP'&&_0x4b3398[_0x2bc841(0xd57)](_0x8e86fe[_0x2bc841(0x34a)]))return!![];if(_0x1db6e9==='MP'&&_0x4b3398[_0x2bc841(0xd57)](_0x8e86fe[_0x2bc841(0x68e)])){if(_0x2bc841(0x94c)!==_0x2bc841(0x35a))return!![];else _0x725fa7['_subject'][_0x2bc841(0x817)]();}}}return![];},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x336)]=Game_BattlerBase[_0x3823ba(0x8d6)]['initMembers'],Game_BattlerBase[_0x3823ba(0x8d6)][_0x3823ba(0x6f2)]=function(){const _0xa1ab1f=_0x3823ba;VisuMZ['BattleCore'][_0xa1ab1f(0x336)][_0xa1ab1f(0x162)](this),this[_0xa1ab1f(0x2a2)]();},Game_BattlerBase['prototype']['initMembersBattleCore']=function(){const _0x13cb4a=_0x3823ba;this[_0x13cb4a(0x8b6)]=![];},VisuMZ['BattleCore'][_0x3823ba(0x59c)]=Game_BattlerBase[_0x3823ba(0x8d6)][_0x3823ba(0x912)],Game_BattlerBase[_0x3823ba(0x8d6)]['refresh']=function(){const _0x4791c3=_0x3823ba;this[_0x4791c3(0xbf1)]={},VisuMZ[_0x4791c3(0x4f3)][_0x4791c3(0x59c)]['call'](this);},Game_BattlerBase[_0x3823ba(0x8d6)][_0x3823ba(0x4dc)]=function(_0xae32df){const _0x2e8c1c=_0x3823ba;return this['_cache']=this[_0x2e8c1c(0xbf1)]||{},this['_cache'][_0xae32df]!==undefined;},Game_BattlerBase[_0x3823ba(0x8d6)]['hardDamageCap']=function(){const _0x244303=_0x3823ba;if(this[_0x244303(0xbf1)][_0x244303(0x3bb)]!==undefined)return this[_0x244303(0xbf1)][_0x244303(0x3bb)];const _0x46a113=/<DAMAGE CAP:[ ](\d+)>/i,_0x1d6be6=this['traitObjects']()[_0x244303(0x4d0)](_0x10a993=>_0x10a993&&_0x10a993[_0x244303(0x920)]['match'](_0x46a113)?Number(RegExp['$1']):0x0);let _0x76c90f=_0x1d6be6[_0x244303(0xb23)]>0x0?Math['max'](..._0x1d6be6):0x0;if(_0x76c90f<=0x0)_0x76c90f=VisuMZ['BattleCore'][_0x244303(0x242)][_0x244303(0x630)][_0x244303(0xb5a)];return this[_0x244303(0xbf1)][_0x244303(0x3bb)]=_0x76c90f,this['_cache']['hardDamageCap'];},Game_BattlerBase[_0x3823ba(0x8d6)][_0x3823ba(0xa27)]=function(){const _0x598c4c=_0x3823ba;if(this[_0x598c4c(0xbf1)][_0x598c4c(0x494)]!==undefined)return this[_0x598c4c(0xbf1)][_0x598c4c(0x494)];let _0xced8ed=VisuMZ[_0x598c4c(0x4f3)][_0x598c4c(0x242)][_0x598c4c(0x630)][_0x598c4c(0xc16)];const _0x522174=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0x47464f=this['traitObjects']()['map'](_0x2a507a=>_0x2a507a&&_0x2a507a[_0x598c4c(0x920)][_0x598c4c(0xd57)](_0x522174)?Number(RegExp['$1'])/0x64:0x0);return _0xced8ed=_0x47464f[_0x598c4c(0x19f)]((_0xafd956,_0x11f2c9)=>_0xafd956+_0x11f2c9,_0xced8ed),this['_cache'][_0x598c4c(0x494)]=_0xced8ed,this[_0x598c4c(0xbf1)][_0x598c4c(0x494)][_0x598c4c(0x6a0)](0.01,0x1);},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x358)]=Game_BattlerBase[_0x3823ba(0x8d6)][_0x3823ba(0x584)],Game_BattlerBase[_0x3823ba(0x8d6)][_0x3823ba(0x584)]=function(){const _0x412b69=_0x3823ba;VisuMZ[_0x412b69(0x4f3)][_0x412b69(0x358)]['call'](this),SceneManager[_0x412b69(0xbc6)]()&&this[_0x412b69(0xb90)]('dead');},Game_BattlerBase[_0x3823ba(0x8d6)][_0x3823ba(0x798)]=function(){const _0x4ffea6=_0x3823ba;if(!SceneManager[_0x4ffea6(0xbc6)]())return null;if(!SceneManager[_0x4ffea6(0xaa3)][_0x4ffea6(0x8a5)])return null;return SceneManager[_0x4ffea6(0xaa3)][_0x4ffea6(0x8a5)][_0x4ffea6(0xb0c)](this);},Game_BattlerBase[_0x3823ba(0x8d6)]['svBattlerAnchorX']=function(){const _0x1cfe45=_0x3823ba;return VisuMZ[_0x1cfe45(0x4f3)][_0x1cfe45(0x242)][_0x1cfe45(0x9fc)][_0x1cfe45(0xa2e)];},Game_BattlerBase['prototype']['svBattlerAnchorY']=function(){const _0x5df3c4=_0x3823ba;return VisuMZ['BattleCore'][_0x5df3c4(0x242)]['Actor'][_0x5df3c4(0x5b7)];},Game_BattlerBase[_0x3823ba(0x8d6)]['svBattlerShadowVisible']=function(){const _0x1b01b0=_0x3823ba;if(this[_0x1b01b0(0x4e0)]&&this[_0x1b01b0(0x4e0)]())return VisuMZ[_0x1b01b0(0x4f3)][_0x1b01b0(0x242)][_0x1b01b0(0x9fc)][_0x1b01b0(0xa8c)];else{if(_0x1b01b0(0xc58)!==_0x1b01b0(0xc58)){const _0x116c85=this[_0x1b01b0(0x281)];_0x116c85[_0x1b01b0(0x19d)][_0x1b01b0(0xcd2)]();const _0x2d077d=this[_0x1b01b0(0x98b)](this[_0x1b01b0(0xb0f)]());if(_0x2d077d===_0x1b01b0(0x8c2)&&this[_0x1b01b0(0x6db)]()>0x0){const _0x102aee=this[_0x1b01b0(0x5c9)](this[_0x1b01b0(0xb0f)]());let _0x29b35a=this['commandName'](this['index']());_0x29b35a=_0x29b35a[_0x1b01b0(0x7fc)](/\\I\[(\d+)\]/gi,''),_0x116c85[_0x1b01b0(0x54d)](),this[_0x1b01b0(0x7c9)](_0x29b35a,_0x102aee),this[_0x1b01b0(0xb36)](_0x29b35a,_0x102aee),this[_0x1b01b0(0x426)](_0x29b35a,_0x102aee);}}else return VisuMZ['BattleCore']['Settings'][_0x1b01b0(0x179)]['Shadow'];}},Game_BattlerBase[_0x3823ba(0x8d6)][_0x3823ba(0x8e6)]=function(){return!![];},Game_BattlerBase['prototype'][_0x3823ba(0x89d)]=function(){return 0x0;},Game_BattlerBase[_0x3823ba(0x8d6)][_0x3823ba(0x44f)]=function(){return 0x0;},Game_BattlerBase[_0x3823ba(0x8d6)][_0x3823ba(0xa80)]=function(_0x3343d7){const _0x20da16=_0x3823ba;if(!_0x3343d7)return 0x0;let _0x1a6bcc=0x0;const _0x337f9f=_0x3343d7[_0x20da16(0x920)];if(_0x337f9f[_0x20da16(0xd57)](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)){if(_0x20da16(0x14f)!=='zgVaR')_0x1a6bcc+=Number(RegExp['$1']);else{const _0xa582f0=_0x51d97d[_0x20da16(0x4f3)][_0x20da16(0x242)]['Damage'];this[_0x20da16(0xd53)]=_0xa582f0[_0x20da16(0xd60)]['slice'](0x0),this['_flashDuration']=_0xa582f0[_0x20da16(0x379)];}}return _0x337f9f[_0x20da16(0xd57)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x1a6bcc+=Number(RegExp['$1'])),_0x1a6bcc;},Game_BattlerBase[_0x3823ba(0x8d6)][_0x3823ba(0xa52)]=function(_0x4ee7f2){const _0x1b042f=_0x3823ba;if(!_0x4ee7f2)return 0x0;let _0x350c68=0x0;const _0x178c47=_0x4ee7f2[_0x1b042f(0x920)];return _0x178c47['match'](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)&&(_0x350c68+=Number(RegExp['$1'])),_0x178c47[_0x1b042f(0xd57)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x350c68+=Number(RegExp['$2'])),_0x350c68;},VisuMZ['BattleCore']['Game_BattlerBase_isStateResist']=Game_BattlerBase['prototype']['isStateResist'],Game_BattlerBase['prototype']['isStateResist']=function(_0x4b263b){const _0x5b58fe=_0x3823ba;if(_0x4b263b===this['deathStateId']()&&this['isImmortal']())return!![];return VisuMZ[_0x5b58fe(0x4f3)][_0x5b58fe(0xccc)][_0x5b58fe(0x162)](this,_0x4b263b);},Game_BattlerBase[_0x3823ba(0x8d6)][_0x3823ba(0x854)]=function(){const _0x230e2f=_0x3823ba;return this[_0x230e2f(0x8b6)];},Game_BattlerBase[_0x3823ba(0x8d6)][_0x3823ba(0x2fa)]=function(_0x526071){const _0x5b88b5=_0x3823ba;_0x526071?this['addImmortal']():this[_0x5b88b5(0x473)]();},Game_BattlerBase[_0x3823ba(0x8d6)][_0x3823ba(0x290)]=function(){const _0x48d104=_0x3823ba;if(this['isDead']())return;this[_0x48d104(0x8b6)]=!![],this[_0x48d104(0x5d9)]=![];},Game_BattlerBase[_0x3823ba(0x8d6)][_0x3823ba(0x473)]=function(){const _0x21534b=_0x3823ba,_0x3c2dc5=this[_0x21534b(0x8ed)]();this[_0x21534b(0x8b6)]=![],_0x3c2dc5&&this[_0x21534b(0x5d9)]&&this[_0x21534b(0x584)](),this[_0x21534b(0x5d9)]=![],this[_0x21534b(0x912)](),this['isDead']()&&_0x3c2dc5&&(this['performCollapse'](),this[_0x21534b(0x7e2)]());},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x2ed)]=Game_Action[_0x3823ba(0x8d6)][_0x3823ba(0x6ed)],Game_Action[_0x3823ba(0x8d6)][_0x3823ba(0x6ed)]=function(){const _0x57dec6=_0x3823ba;if(this[_0x57dec6(0x733)]()){if(_0x57dec6(0xb6f)===_0x57dec6(0xb6f))return VisuMZ[_0x57dec6(0x4f3)][_0x57dec6(0x2ed)][_0x57dec6(0x162)](this);else{const _0x4b5a02=this['item']()[_0x57dec6(0x920)];if(_0x4b5a02['match'](/<ALWAYS HIT>/i))return 0x1;else{if(_0x4b5a02[_0x57dec6(0xd57)](/<ALWAYS HIT RATE: (\d+)([%％])>/i))return _0x27e895(_0x3994e8['$1'])/0x64;else{let _0x55f34d=_0x3226ee['BattleCore'][_0x57dec6(0x788)]['call'](this,_0xb4d657);return _0x55f34d=this[_0x57dec6(0x7ec)][_0x57dec6(0x31f)]*_0x55f34d+this[_0x57dec6(0x7ec)][_0x57dec6(0xa47)],_0x55f34d;}}}}else{if(_0x57dec6(0xacd)==='kCFaE'){if(!_0x5313b4[_0x57dec6(0xbc6)]())return;if(!_0x31e640['VisuMZ_1_ElementStatusCore'])return;const _0x924dd=_0x5eabc5[_0x57dec6(0x131)];if(!_0x924dd)return;_0x924dd[_0x57dec6(0xa59)]();}else return 0x0;}},VisuMZ['BattleCore'][_0x3823ba(0x87e)]=Game_Action[_0x3823ba(0x8d6)][_0x3823ba(0x623)],Game_Action[_0x3823ba(0x8d6)][_0x3823ba(0x623)]=function(){const _0x1795e3=_0x3823ba;if(this[_0x1795e3(0x29d)]()&&this[_0x1795e3(0x29d)]()[_0x1795e3(0x32e)]()){if(_0x1795e3(0xb45)===_0x1795e3(0xb45))VisuMZ[_0x1795e3(0x4f3)]['Game_Action_setAttack'][_0x1795e3(0x162)](this);else{let _0x3aafaf='';_0x3aafaf+=_0x1795e3(0x7fa),_0x3aafaf+=_0x1795e3(0x30d),_0x454e50(_0x3aafaf),_0x9a770a[_0x1795e3(0x824)]();}}else{if(_0x1795e3(0x5fa)==='hsLdU')return _0x4dc8cb[_0x1795e3(0xc13)];else this[_0x1795e3(0xcd2)]();}},VisuMZ[_0x3823ba(0x4f3)]['Game_BattlerBase_canAttack']=Game_BattlerBase[_0x3823ba(0x8d6)][_0x3823ba(0x32e)],Game_BattlerBase[_0x3823ba(0x8d6)][_0x3823ba(0x32e)]=function(){const _0xcad821=_0x3823ba;if(!this[_0xcad821(0x512)]())return![];return VisuMZ[_0xcad821(0x4f3)][_0xcad821(0xcb1)][_0xcad821(0x162)](this);},Game_BattlerBase[_0x3823ba(0x8d6)][_0x3823ba(0x512)]=function(){const _0x61dd9b=_0x3823ba;for(const _0x558501 of this[_0x61dd9b(0x4f7)]()){if(!_0x558501)continue;if(_0x558501[_0x61dd9b(0x920)][_0x61dd9b(0xd57)](/<(?:ATTACK SEAL|SEAL ATTACK)>/i))return![];}return!![];},VisuMZ['BattleCore'][_0x3823ba(0x5f7)]=Game_Action[_0x3823ba(0x8d6)]['setGuard'],Game_Action[_0x3823ba(0x8d6)][_0x3823ba(0x53b)]=function(){const _0x1fa9f5=_0x3823ba;this[_0x1fa9f5(0x29d)]()[_0x1fa9f5(0x28b)]()&&(_0x1fa9f5(0x1e8)==='RACcc'?VisuMZ[_0x1fa9f5(0x4f3)][_0x1fa9f5(0x5f7)][_0x1fa9f5(0x162)](this):_0x2ab402['setValue'](_0x28ad97[_0x1fa9f5(0x6da)],!![]));},VisuMZ[_0x3823ba(0x4f3)]['Game_BattlerBase_canGuard']=Game_BattlerBase['prototype'][_0x3823ba(0x28b)],Game_BattlerBase[_0x3823ba(0x8d6)][_0x3823ba(0x28b)]=function(){const _0x15c716=_0x3823ba;if(!this[_0x15c716(0xb1a)]())return![];return VisuMZ['BattleCore'][_0x15c716(0x770)][_0x15c716(0x162)](this);},Game_BattlerBase[_0x3823ba(0x8d6)]['canGuardBattleCore']=function(){const _0x544a8c=_0x3823ba;for(const _0x3cefc5 of this['traitObjects']()){if(_0x544a8c(0x495)!==_0x544a8c(0x495))this[_0x544a8c(0xb90)](_0x544a8c(0x9e3));else{if(!_0x3cefc5)continue;if(_0x3cefc5[_0x544a8c(0x920)][_0x544a8c(0xd57)](/<(?:GUARD SEAL|SEAL GUARD)>/i))return![];}}return!![];},Game_BattlerBase[_0x3823ba(0x8d6)]['canUseItemCommand']=function(){const _0x52bcb5=_0x3823ba;for(const _0x19a0f1 of this[_0x52bcb5(0x4f7)]()){if(!_0x19a0f1)continue;if(_0x19a0f1[_0x52bcb5(0x920)][_0x52bcb5(0xd57)](/<(?:ITEM SEAL|SEAL ITEM|SEAL ITEMS)>/i))return![];}return!![];},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0xc5a)]=Game_BattlerBase['prototype'][_0x3823ba(0xc89)],Game_BattlerBase[_0x3823ba(0x8d6)]['meetsUsableItemConditions']=function(_0x2b0a18){const _0x4ee075=_0x3823ba;if(_0x2b0a18&&_0x2b0a18[_0x4ee075(0x920)][_0x4ee075(0xd57)](/<CANNOT TARGET (?:USER|SELF)>/i)){const _0x444a84=this[_0x4ee075(0x691)]()[_0x4ee075(0xd31)]();if(_0x444a84[_0x4ee075(0xb23)]===0x1&&_0x444a84[0x0]===this)return![];}return VisuMZ[_0x4ee075(0x4f3)][_0x4ee075(0xc5a)]['call'](this,_0x2b0a18);},Game_Battler['prototype'][_0x3823ba(0x415)]=function(){const _0x274b80=_0x3823ba;return VisuMZ['BattleCore'][_0x274b80(0x242)][_0x274b80(0x911)][_0x274b80(0x2f7)];},VisuMZ[_0x3823ba(0x4f3)]['Game_Battler_regenerateAll']=Game_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x6d3)],Game_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x6d3)]=function(){const _0xcde62e=_0x3823ba;if(SceneManager[_0xcde62e(0xbc6)]()){if(BattleManager[_0xcde62e(0xac0)]()){if(this[_0xcde62e(0x529)]()<=0x0)return;}else{if($gameTroop[_0xcde62e(0x529)]()<=0x0)return;}}if(SceneManager[_0xcde62e(0xbc6)]()&&BattleManager[_0xcde62e(0xac0)]()&&this[_0xcde62e(0xc33)]===Graphics[_0xcde62e(0xa8f)]){if(_0xcde62e(0x195)!==_0xcde62e(0x822))return;else return this[_0xcde62e(0x888)]()['shadow'];}this[_0xcde62e(0xc33)]=Graphics['frameCount'],SceneManager['isSceneBattle']()&&this[_0xcde62e(0x64f)]('PreRegenerateJS'),VisuMZ[_0xcde62e(0x4f3)][_0xcde62e(0x134)]['call'](this),SceneManager[_0xcde62e(0xbc6)]()&&(this['regenerateAllBattleCore'](),this[_0xcde62e(0x64f)](_0xcde62e(0x33f)));},Game_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x6a9)]=function(){const _0x5dea90=_0x3823ba;if(SceneManager['isSceneBattle']())for(const _0x2edba2 of this['traitObjects']()){if(!_0x2edba2)continue;this[_0x5dea90(0xd6a)](_0x2edba2);}},Game_Battler[_0x3823ba(0x8d6)]['onRegeneratePlayStateAnimation']=function(_0x5a8dbd){const _0x58ca9a=_0x3823ba;if(!Imported[_0x58ca9a(0x32f)])return;if(!SceneManager[_0x58ca9a(0xbc6)]())return;if(this['isDead']())return;if(this['isHidden']())return;if(_0x5a8dbd[_0x58ca9a(0x920)][_0x58ca9a(0xd57)](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){const _0x166952=Number(RegExp['$1']);$gameTemp[_0x58ca9a(0x2e6)]([this],_0x166952,![],![]);}},VisuMZ['BattleCore']['Game_Battler_startTpbTurn']=Game_Battler['prototype'][_0x3823ba(0x209)],Game_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x209)]=function(){const _0x563332=_0x3823ba;this[_0x563332(0x64f)]('PreStartTurnJS'),VisuMZ['BattleCore'][_0x563332(0x939)]['call'](this),this[_0x563332(0x64f)](_0x563332(0x7bf));},VisuMZ['BattleCore'][_0x3823ba(0xbf4)]=Game_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x29b)],Game_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x29b)]=function(){const _0x567356=_0x3823ba;this[_0x567356(0x64f)](_0x567356(0xb2d)),VisuMZ[_0x567356(0x4f3)]['Game_Battler_onTurnEnd'][_0x567356(0x162)](this);if(VisuMZ[_0x567356(0x4f3)][_0x567356(0x242)][_0x567356(0x911)][_0x567356(0x908)]){if(_0x567356(0xd9f)===_0x567356(0xb4c)){const _0x396b2e=this[_0x567356(0x4e0)]()?this[_0x567356(0x846)]():this['enemy']();if(_0x396b2e){const _0x33cb48=_0x396b2e[_0x567356(0x920)];if(_0x33cb48[_0x567356(0xd57)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return _0x4e6381(_0x18a756['$1'])*0.01;else{if(_0x33cb48[_0x567356(0xd57)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return _0x2f7b04(_0x29f037['$1'])||0x0;}}return 0x1;}else this[_0x567356(0xa70)]();}this[_0x567356(0x64f)]('PostEndTurnJS');},Game_Battler[_0x3823ba(0x8d6)]['processBattleCoreJS']=function(_0x218e25){const _0xb03b2a=_0x3823ba;if(this[_0xb03b2a(0xd70)]||this['_tempActor'])return;const _0x38be7f=VisuMZ['BattleCore'][_0xb03b2a(0x242)]['Mechanics'];if(_0x38be7f[_0x218e25])_0x38be7f[_0x218e25][_0xb03b2a(0x162)](this);for(const _0x1892e6 of this[_0xb03b2a(0x4f7)]()){if(!_0x1892e6)continue;key=VisuMZ[_0xb03b2a(0x4f3)][_0xb03b2a(0x4e9)](_0x1892e6,_0x218e25),VisuMZ[_0xb03b2a(0x4f3)]['JS'][key]&&VisuMZ[_0xb03b2a(0x4f3)]['JS'][key][_0xb03b2a(0x162)](this,this,this,_0x1892e6,0x0);}},Game_Battler[_0x3823ba(0x8d6)][_0x3823ba(0xa9a)]=function(){const _0x1f2988=_0x3823ba;return VisuMZ[_0x1f2988(0x4f3)][_0x1f2988(0x242)][_0x1f2988(0x9fc)][_0x1f2988(0x9c6)]||![];},Game_Battler[_0x3823ba(0x8d6)][_0x3823ba(0xb62)]=function(){const _0x571d71=_0x3823ba;if(this[_0x571d71(0x39f)]()){if(_0x571d71(0x16c)!==_0x571d71(0xc45)){if(this['chantStyle']()){if(_0x571d71(0xc1c)!==_0x571d71(0x668)){if(this[_0x571d71(0xd4c)]['some'](_0x3ce863=>_0x3ce863[_0x571d71(0x733)]()&&_0x3ce863[_0x571d71(0xcd0)]()))return!![];}else{_0x34e841[_0x571d71(0x1ae)][_0x571d71(0xcca)]('undecided');const _0xf546bb=_0x46377d[_0x571d71(0x1ae)][_0x571d71(0x798)]();if(_0xf546bb)_0xf546bb['stepBack']();}}else{if('yQesd'!==_0x571d71(0xa53))_0x4a3541[_0x571d71(0x4f3)][_0x571d71(0x8fd)]['call'](this,_0x125a4f),this[_0x571d71(0xd29)](_0xe45a23);else{if(this[_0x571d71(0xd4c)][_0x571d71(0x58a)](_0x2dd346=>_0x2dd346['item']()&&_0x2dd346[_0x571d71(0x6bf)]()))return!![];}}}else{if(_0x12e657[_0x571d71(0x8a5)][_0x571d71(0xab1)]())return!![];this['_waitMode']='';}}if(BattleManager[_0x571d71(0xac0)]()&&this['_tpbState']===_0x571d71(0x95a)){if(this[_0x571d71(0xa9a)]()){if(_0x571d71(0xcc5)!==_0x571d71(0xcc5))_0x5e2f89=_0x15bbab(_0x45887b['$1']),_0x3e238e=_0x54475b(_0x5b2425['$2']);else return this['currentAction']()&&this[_0x571d71(0xd0f)]()['item']()&&this[_0x571d71(0xd0f)]()[_0x571d71(0xcd0)]();}else{if(_0x571d71(0x365)==='GnNfE')return this[_0x571d71(0xd0f)]()&&this['currentAction']()[_0x571d71(0x733)]()&&this[_0x571d71(0xd0f)]()[_0x571d71(0x6bf)]();else this[_0x571d71(0x820)]=new _0x3fa627(),this[_0x571d71(0x820)]['x']=this[_0x571d71(0xd77)]['x'],this[_0x571d71(0x820)]['y']=this['_battleField']['y'],this[_0x571d71(0x538)](this[_0x571d71(0x820)]);}}return![];},Game_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x8d1)]=function(){const _0x21b0d6=_0x3823ba;if(BattleManager[_0x21b0d6(0xac0)]()&&this[_0x21b0d6(0xcd5)]===_0x21b0d6(0x95a))return this['chantStyle']()?this[_0x21b0d6(0xd0f)]()&&this[_0x21b0d6(0xd0f)]()['item']()&&!this['currentAction']()[_0x21b0d6(0xcd0)]():this['currentAction']()&&this['currentAction']()['item']()&&!this[_0x21b0d6(0xd0f)]()[_0x21b0d6(0x6bf)]();return![];},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x7e0)]=Game_Battler['prototype'][_0x3823ba(0x880)],Game_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x880)]=function(){const _0x4d8d70=_0x3823ba;VisuMZ['BattleCore'][_0x4d8d70(0x7e0)]['call'](this),this[_0x4d8d70(0x2e4)]=[];},Game_Battler[_0x3823ba(0x8d6)][_0x3823ba(0xd50)]=function(){const _0x58c76d=_0x3823ba;if(!this[_0x58c76d(0x2e4)])this[_0x58c76d(0x880)]();return this['_damagePopupArray'][_0x58c76d(0xb23)]>0x0;},Game_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x3a6)]=function(){const _0x594d51=_0x3823ba;if(!SceneManager[_0x594d51(0xbc6)]())return;if(BattleManager[_0x594d51(0xc1e)]())return;if(!this[_0x594d51(0x2e4)])this['clearDamagePopup']();this[_0x594d51(0x4e8)]();const _0x1249b5=this[_0x594d51(0x798)]();if(_0x1249b5)_0x1249b5[_0x594d51(0x5ad)]();},Game_Battler[_0x3823ba(0x8d6)]['createSeparateDamagePopups']=function(){const _0x385fa5=_0x3823ba,_0x5bd57d=this[_0x385fa5(0xc87)]();if(_0x5bd57d[_0x385fa5(0x922)]||_0x5bd57d[_0x385fa5(0xaea)]){if(_0x385fa5(0xacb)!=='gPXHl'){const _0x45dd03=this[_0x385fa5(0x5c9)](_0x8fbe37);this[_0x385fa5(0xba0)](),this['changePaintOpacity'](this[_0x385fa5(0x172)](_0x37f4f3));const _0x1f7ecf=this[_0x385fa5(0xbca)](_0x20fa52),_0x52de75=this[_0x385fa5(0x699)](_0x1f7ecf)[_0x385fa5(0x204)],_0x58a60c=_0x45dd03['x']+_0x10a7f0[_0x385fa5(0x975)]((_0x45dd03[_0x385fa5(0x204)]-_0x52de75)/0x2);this[_0x385fa5(0x7a4)](_0x1f7ecf,_0x58a60c,_0x45dd03['y'],_0x45dd03['width']);}else{const _0x22ec66=JsonEx[_0x385fa5(0x682)](_0x5bd57d);_0x22ec66[_0x385fa5(0x560)]=![],_0x22ec66['mpDamage']=0x0,this['_damagePopupArray'][_0x385fa5(0x3d9)](_0x22ec66);}}if(_0x5bd57d[_0x385fa5(0x560)]){if(_0x385fa5(0x936)==='UbrRF')return _0x4db96e[_0x385fa5(0x4f3)][_0x385fa5(0x242)][_0x385fa5(0x4e2)][_0x385fa5(0x707)];else{const _0x811ca0=JsonEx[_0x385fa5(0x682)](_0x5bd57d);_0x811ca0[_0x385fa5(0x922)]=![],_0x811ca0[_0x385fa5(0xaea)]=![],_0x811ca0[_0x385fa5(0x313)]=0x0,this[_0x385fa5(0x2e4)][_0x385fa5(0x3d9)](_0x811ca0);}}if(_0x5bd57d[_0x385fa5(0x313)]!==0x0){const _0x13722d=JsonEx[_0x385fa5(0x682)](_0x5bd57d);_0x13722d[_0x385fa5(0x922)]=![],_0x13722d[_0x385fa5(0xaea)]=![],_0x13722d['hpAffected']=![],this['_damagePopupArray'][_0x385fa5(0x3d9)](_0x13722d);}},Game_Battler[_0x3823ba(0x8d6)]['getNextDamagePopup']=function(){const _0x334174=_0x3823ba;if(!this[_0x334174(0x2e4)])this[_0x334174(0x880)]();return VisuMZ[_0x334174(0x4f3)][_0x334174(0x242)][_0x334174(0x630)]['NewPopupBottom']?this[_0x334174(0x2e4)][_0x334174(0x32c)]():this[_0x334174(0x2e4)]['pop']();},Game_Battler['prototype']['setupTextPopup']=function(_0x4a27f8,_0x158cab){const _0x5431bc=_0x3823ba;if(!SceneManager[_0x5431bc(0xbc6)]())return;if(BattleManager[_0x5431bc(0xc1e)]())return;if(!this[_0x5431bc(0x798)]())return;if(_0x4a27f8[_0x5431bc(0xb23)]<=0x0)return;_0x158cab=_0x158cab||{},_0x158cab[_0x5431bc(0xb76)]=_0x158cab[_0x5431bc(0xb76)]||_0x5431bc(0xadc),_0x158cab['flashColor']=_0x158cab[_0x5431bc(0x5cc)]||[0x0,0x0,0x0,0x0],_0x158cab[_0x5431bc(0x55a)]=_0x158cab[_0x5431bc(0x55a)]||0x0,this['battler']()[_0x5431bc(0x193)](_0x4a27f8,_0x158cab);},Game_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x65f)]=function(_0x13b89e,_0x29dd68,_0x28f648){const _0x50cdcb=_0x3823ba;if(!SceneManager[_0x50cdcb(0xbc6)]())return;if(BattleManager[_0x50cdcb(0xc1e)]())return;if(!this['battler']())return;if(_0x29dd68['length']<=0x0)return;_0x28f648=_0x28f648||{},_0x28f648[_0x50cdcb(0xb76)]=_0x28f648[_0x50cdcb(0xb76)]||'#ffffff',_0x28f648['flashColor']=_0x28f648[_0x50cdcb(0x5cc)]||[0x0,0x0,0x0,0x0],_0x28f648['flashDuration']=_0x28f648[_0x50cdcb(0x55a)]||0x0,this['battler']()[_0x50cdcb(0x65f)](_0x13b89e,_0x29dd68,_0x28f648);},Game_Battler['prototype'][_0x3823ba(0xb73)]=function(){const _0x20756c=_0x3823ba;if(this[_0x20756c(0x763)]())return![];if(this[_0x20756c(0x8ed)]()&&this[_0x20756c(0xb7d)]())return!![];if(this['isEnemy']()&&this[_0x20756c(0x366)]()){if(_0x20756c(0xd2a)===_0x20756c(0x7a6)){if(!_0x449daa[_0x20756c(0x16d)](_0x7ee26e))return![];}else{if(this[_0x20756c(0x3b8)]()&&this[_0x20756c(0xa56)]())return![];}}else{if(this[_0x20756c(0x3b8)]())return![];}return!![];},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x26c)]=Game_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x741)],Game_Battler['prototype'][_0x3823ba(0x741)]=function(){const _0x1fc46d=_0x3823ba;VisuMZ[_0x1fc46d(0x4f3)][_0x1fc46d(0x26c)][_0x1fc46d(0x162)](this),this[_0x1fc46d(0x27b)]();},Game_Battler['prototype'][_0x3823ba(0xba4)]=function(){return!![];},Game_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x547)]=function(){return![];},VisuMZ['BattleCore'][_0x3823ba(0x84e)]=Game_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x113)],Game_Battler['prototype']['onBattleStart']=function(_0x47838a){const _0x5b0e53=_0x3823ba;VisuMZ[_0x5b0e53(0x4f3)][_0x5b0e53(0x84e)][_0x5b0e53(0x162)](this,_0x47838a),this[_0x5b0e53(0xcff)](_0x47838a),this[_0x5b0e53(0x880)]();},Game_Battler['prototype'][_0x3823ba(0xcff)]=function(_0x56acba){const _0x1739ac=_0x3823ba;this[_0x1739ac(0xb57)](![]),this['_forcedHomeX']=undefined,this['_forcedHomeY']=undefined;},VisuMZ[_0x3823ba(0x4f3)]['Game_Battler_onBattleEnd']=Game_Battler[_0x3823ba(0x8d6)]['onBattleEnd'],Game_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x664)]=function(){const _0x26de37=_0x3823ba;VisuMZ['BattleCore']['Game_Battler_onBattleEnd'][_0x26de37(0x162)](this),this['onBattleEndBattleCore']();},Game_Battler[_0x3823ba(0x8d6)]['onBattleEndBattleCore']=function(){const _0x30940a=_0x3823ba;this[_0x30940a(0xa67)]=undefined,this[_0x30940a(0x710)]=undefined;},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0xc17)]=Game_Battler[_0x3823ba(0x8d6)][_0x3823ba(0xa5f)],Game_Battler[_0x3823ba(0x8d6)][_0x3823ba(0xa5f)]=function(_0xcdfd8f){const _0x19dd47=_0x3823ba;VisuMZ['BattleCore']['Game_Battler_performActionStart'][_0x19dd47(0x162)](this,_0xcdfd8f);if(!_0xcdfd8f[_0x19dd47(0x378)]()){if(_0x19dd47(0xd4d)===_0x19dd47(0xd4d)){const _0x5c12eb=this[_0x19dd47(0x798)]();_0x5c12eb&&_0x5c12eb[_0x19dd47(0x8f8)]();}else{const _0x4f5490=_0x2af47b(_0x47ec7f['$1'])[_0x19dd47(0x22f)](',')[_0x19dd47(0x4d0)](_0x1a1a3f=>_0x1a1a3f[_0x19dd47(0xaf4)]());return[_0x2efcf2[_0x19dd47(0x248)](_0x4f5490)];}}this[_0x19dd47(0xb57)](![]);},Game_Battler['prototype']['performActionEndMembers']=function(){const _0x323b69=_0x3823ba,_0x25360a=this[_0x323b69(0xbbd)];this[_0x323b69(0xbbd)]=![];if(BattleManager[_0x323b69(0x973)]()&&this[_0x323b69(0xd96)]()){const _0x549134=this[_0x323b69(0x798)]();if(_0x549134&&_0x25360a)_0x549134['stepForward']();return;}const _0xf19a64=this[_0x323b69(0x798)]();if(_0xf19a64)_0xf19a64['stepBack']();this[_0x323b69(0xb57)](![]),this[_0x323b69(0x7e2)]();},Game_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x88a)]=function(_0x2a565a){const _0x42a99e=_0x3823ba;if(_0x2a565a[_0x42a99e(0x4ba)]())this[_0x42a99e(0x2c3)]();else{if(_0x2a565a[_0x42a99e(0x378)]())this[_0x42a99e(0xb90)](_0x42a99e(0xb56));else{if(_0x2a565a[_0x42a99e(0xcd0)]())'IffhQ'!==_0x42a99e(0x7c3)?this[_0x42a99e(0xb90)]('spell'):this['_svBattlerSprite'][_0x42a99e(0x34f)]();else{if(_0x2a565a['isSkill']())'JrNqP'!=='KXwpf'?[0x1,0x2,0x5,0x6][_0x42a99e(0x97e)](_0x2a565a[_0x42a99e(0x733)]()[_0x42a99e(0x806)][_0x42a99e(0x98a)])?this['performAttack']():_0x42a99e(0x3bd)!=='hkbBY'?(_0x4dd4d8+=_0x206667,_0x442958+=_0x564b28):this[_0x42a99e(0xb90)]('skill'):_0x236178+=_0x436f68;else _0x2a565a['isItem']()&&this['requestMotion'](_0x42a99e(0x733));}}}},Game_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x60e)]=function(){return $dataSystem['attackMotions'][0x0];},Game_Battler[_0x3823ba(0x8d6)][_0x3823ba(0xc42)]=function(){const _0x5780bf=_0x3823ba,_0x219408=this[_0x5780bf(0x60e)]();return _0x219408?_0x219408[_0x5780bf(0x360)]:0x0;},Game_Battler[_0x3823ba(0x8d6)][_0x3823ba(0xc4f)]=function(_0x59f5a1){const _0xd27693=_0x3823ba;if(!$gameSystem['isSideView']())return;const _0x22a6fb=this['battler'](),_0x59651c=_0x59f5a1[_0xd27693(0x798)]();if(!_0x22a6fb||!_0x59651c)return;const _0x3d3ef8=_0x59651c[_0xd27693(0x12d)],_0xa922b5=_0x59651c['_baseY'];this[_0xd27693(0x350)](_0x3d3ef8,_0xa922b5,0x0,![],_0xd27693(0x12f),-0x1),_0x22a6fb[_0xd27693(0x1b7)]();const _0x2ad455=VisuMZ[_0xd27693(0x4f3)][_0xd27693(0x242)][_0xd27693(0x871)];let _0x1fda77=(_0x59651c[_0xd27693(0x204)]+_0x22a6fb[_0xd27693(0x204)])/0x2;_0x1fda77*=this['isActor']()?0x1:-0x1;let _0x5a0cf4=_0x2ad455['StepDistanceY']*(this[_0xd27693(0x4e0)]()?0x1:-0x1);_0x59f5a1['moveBattlerDistance'](_0x1fda77,_0x5a0cf4,0x0,![],_0xd27693(0x12f)),_0x59651c[_0xd27693(0x1b7)]();},Game_Battler['prototype'][_0x3823ba(0xb90)]=function(_0xfffe66){const _0x26dbe6=_0x3823ba;if(SceneManager[_0x26dbe6(0xbc6)]()){const _0x1ca1c9=this[_0x26dbe6(0x798)]();if(_0x1ca1c9){_0x1ca1c9[_0x26dbe6(0x701)](_0xfffe66);if([_0x26dbe6(0x9e3),_0x26dbe6(0x49f),_0x26dbe6(0x687)][_0x26dbe6(0x97e)](_0xfffe66)){if(_0x26dbe6(0xb64)===_0x26dbe6(0x3de)){this[_0x26dbe6(0x6ef)]=this[_0x26dbe6(0x6ef)]||{};const _0x5db946=_0x325f8e[_0x26dbe6(0xc8a)]();return this[_0x26dbe6(0x6ef)][_0x5db946]||0x0;}else this[_0x26dbe6(0x7a2)]();}}}this[_0x26dbe6(0x27b)]();},Game_Battler['prototype'][_0x3823ba(0x7a2)]=function(){},Game_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x9fd)]=function(_0x1784dd){const _0xdd889=_0x3823ba;if(SceneManager[_0xdd889(0xbc6)]()){if(_0xdd889(0xb13)===_0xdd889(0xb13)){const _0x5f4ea8=this[_0xdd889(0x798)]();if(_0x5f4ea8)_0x5f4ea8[_0xdd889(0x7c0)](_0x1784dd);}else _0x104907+=_0xa07f1b;}},Game_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x303)]=function(){const _0x188120=_0x3823ba;if(SceneManager[_0x188120(0xbc6)]()){const _0x5c0411=this[_0x188120(0xc42)]();this[_0x188120(0x9fd)](_0x5c0411);}},Game_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x987)]=function(_0x556a1c,_0x15587f){const _0x2e9657=_0x3823ba;if(!_0x556a1c)return;if(!_0x556a1c[_0x2e9657(0x733)]())return;if(_0x556a1c[_0x2e9657(0x4ba)]())return;if(_0x556a1c[_0x2e9657(0x378)]())return;if(_0x556a1c['isItem']())return;if($gameTemp[_0x2e9657(0xd7b)])return;let _0x11c52c=0x0;const _0x36ee31=VisuMZ[_0x2e9657(0x4f3)]['Settings']['ActionSequence'],_0xf551da=_0x556a1c['item']()[_0x2e9657(0x920)];if(_0xf551da[_0x2e9657(0xd57)](/<CAST ANIMATION: (\d+)>/i))_0x11c52c=Number(RegExp['$1']);else{if(_0xf551da[_0x2e9657(0xd57)](/<NO CAST ANIMATION>/i))return;else{if(_0x556a1c[_0x2e9657(0x8ae)]())_0x11c52c=_0x36ee31['CastCertain'];else{if(_0x556a1c['isPhysical']())_0x2e9657(0xc48)!==_0x2e9657(0xbb4)?_0x11c52c=_0x36ee31['CastPhysical']:(this[_0x2e9657(0x212)](),this[_0x2e9657(0xce9)](),this[_0x2e9657(0x75a)](),this['addOptionsCommand'](),this[_0x2e9657(0x716)]());else _0x556a1c[_0x2e9657(0xcd0)]()&&(_0x2e9657(0x442)==='uNlrX'?_0x11c52c=_0x36ee31[_0x2e9657(0x427)]:this[_0x2e9657(0xc37)]());}}}_0x11c52c>0x0&&$gameTemp[_0x2e9657(0x8e9)]([this],_0x11c52c,!!_0x15587f);},Game_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x416)]=function(){const _0x38dd14=_0x3823ba;SoundManager['playReflection']();let _0x18e0df=VisuMZ[_0x38dd14(0x4f3)][_0x38dd14(0x242)][_0x38dd14(0x871)]['ReflectAnimation'];_0x18e0df>0x0&&(_0x38dd14(0x6c9)===_0x38dd14(0x6c9)?Imported[_0x38dd14(0x32f)]?$gameTemp[_0x38dd14(0x2e6)]([this],_0x18e0df):$gameTemp[_0x38dd14(0x8e9)]([this],_0x18e0df):_0x1688de=_0x3caae6[_0x38dd14(0x574)]);},Game_Battler[_0x3823ba(0x8d6)][_0x3823ba(0xcc4)]=function(){const _0x17c4eb=_0x3823ba;if(!$gameSystem[_0x17c4eb(0x839)]())return![];if(!BattleManager[_0x17c4eb(0x973)]())return![];if(this['isInputting']())return!![];if(this[_0x17c4eb(0x428)]())return!![];if(this[_0x17c4eb(0x6ea)]>=0x1)return!![];return![];},VisuMZ['BattleCore'][_0x3823ba(0xd63)]=Game_Battler['prototype'][_0x3823ba(0x657)],Game_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x657)]=function(){const _0x287b65=_0x3823ba;this['isActiveTpbReady']()&&(this[_0x287b65(0xd07)]=!![]),VisuMZ['BattleCore'][_0x287b65(0xd63)]['call'](this),this[_0x287b65(0x62c)](),this[_0x287b65(0x93a)]();},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x244)]=Game_Battler[_0x3823ba(0x8d6)]['performMiss'],Game_Battler[_0x3823ba(0x8d6)]['performMiss']=function(){const _0x43a543=_0x3823ba;this['isActiveTpbReady']()&&(this[_0x43a543(0xd07)]=!![]),VisuMZ[_0x43a543(0x4f3)][_0x43a543(0x244)][_0x43a543(0x162)](this),this[_0x43a543(0x62c)]();},VisuMZ['BattleCore'][_0x3823ba(0xa84)]=Game_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x1fd)],Game_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x1fd)]=function(){const _0x57fe9a=_0x3823ba;this[_0x57fe9a(0xcc4)]()&&(_0x57fe9a(0x2f9)===_0x57fe9a(0x2f9)?this[_0x57fe9a(0xd07)]=!![]:_0xad142c[_0x57fe9a(0x4f3)]['createJS'](_0x4dc7ca,_0x546881)),VisuMZ[_0x57fe9a(0x4f3)]['Game_Battler_performEvasion']['call'](this),this[_0x57fe9a(0x62c)]();},Game_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x62c)]=function(){const _0x422dc8=_0x3823ba;if(!$gameSystem['isSideView']())return;if(this['_flinched'])return;this[_0x422dc8(0xbbd)]=!![];const _0x189990=this[_0x422dc8(0x798)]();if(_0x189990)_0x189990['stepFlinch']();},Game_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x93a)]=function(){const _0x201a7f=_0x3823ba;if(!this[_0x201a7f(0xba4)]())return;const _0x3f6bf5=VisuMZ[_0x201a7f(0x4f3)][_0x201a7f(0x242)][_0x201a7f(0x9fc)];if(!(_0x3f6bf5[_0x201a7f(0x259)]??![]))return;if(this[_0x201a7f(0xb26)]<=0x0)return;const _0x2455bb=this[_0x201a7f(0x798)]();if(_0x2455bb){if('BpLpe'==='pQGyc')this[_0x201a7f(0xc5c)][_0x201a7f(0xd1c)]['x']=this[_0x201a7f(0x608)],this[_0x201a7f(0xc5c)][_0x201a7f(0xd1c)]['y']=this[_0x201a7f(0x865)];else{const _0x44a020=this[_0x201a7f(0xb26)],_0x5d69d3=(_0x44a020/this['mhp'])['clamp'](0.8,0x1),_0x4e22f4=_0x3f6bf5['ShakeFlinchPower']??0x30,_0x49d4a8=_0x5d69d3*_0x4e22f4;_0x2455bb[_0x201a7f(0x6e5)](_0x49d4a8,_0x5d69d3);}}},Game_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x7e2)]=function(){const _0x21d484=_0x3823ba;if(this['isDead']()&&this[_0x21d484(0x995)]!==_0x21d484(0x455)){this[_0x21d484(0xb90)]('dead');return;}if(this[_0x21d484(0x3b8)]()&&this[_0x21d484(0x995)]==='dead')return;if(!!this['_freezeMotionData'])return;if(this[_0x21d484(0x737)]()){if(_0x21d484(0x774)===_0x21d484(0x903))this[_0x21d484(0xd61)][_0x21d484(0x3d9)](_0x21d484(0xc47),_0x13cd84['surprise'][_0x21d484(0xabf)](_0x556f5e[_0x21d484(0x450)]())),this['_logWindow']['push'](_0x21d484(0x498));else{if(!this['isDuringNonLoopingMotion']()&&this!==BattleManager[_0x21d484(0x527)]){if(_0x21d484(0x354)===_0x21d484(0x988))_0x5ce9ed['push'](_0x21d484(0x70a),_0x35bbcb);else{if(this['battler']())this[_0x21d484(0x798)]()[_0x21d484(0x34f)]();}}this[_0x21d484(0x27b)]();return;}}if(this[_0x21d484(0x995)]===_0x21d484(0x94d))return;if(this[_0x21d484(0x995)]===_0x21d484(0xb42)&&!BattleManager[_0x21d484(0xd96)]())return;if(this[_0x21d484(0x995)]===_0x21d484(0xb56)&&!BattleManager[_0x21d484(0xd96)]())return;this[_0x21d484(0x741)]();if(BattleManager[_0x21d484(0x973)]()&&this===BattleManager[_0x21d484(0x527)])return;if(this[_0x21d484(0x798)]()&&BattleManager[_0x21d484(0xd96)]()){this[_0x21d484(0x798)]()[_0x21d484(0x34f)](),this['clearFreezeMotion']();return;}},Game_Enemy[_0x3823ba(0x8d6)]['isDuringNonLoopingMotion']=function(){const _0x4c2988=_0x3823ba;if(!this[_0x4c2988(0x366)]())return![];const _0x899379=this[_0x4c2988(0x798)]();if(!_0x899379)return![];const _0xcd900b=_0x899379[_0x4c2988(0x396)];if(!_0xcd900b)return![];const _0x42bbf7=_0xcd900b['_motion'];return _0x42bbf7&&!_0x42bbf7[_0x4c2988(0x90b)];},Game_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x74e)]=function(){const _0x219dfe=_0x3823ba;return this[_0x219dfe(0x488)];},Game_Battler[_0x3823ba(0x8d6)][_0x3823ba(0xb57)]=function(_0x42e3e1){const _0x399ea9=_0x3823ba;if(!$gameSystem[_0x399ea9(0x839)]())return;this['_isBattlerFlipped']=_0x42e3e1;const _0x3c4616=this['battler']();if(_0x3c4616)_0x3c4616[_0x399ea9(0x9df)]();},Game_Battler[_0x3823ba(0x8d6)]['setBattlerFacePoint']=function(_0x4a1990,_0x106892,_0x15e4b3){const _0x1a3529=_0x3823ba;if(!$gameSystem[_0x1a3529(0x839)]())return;const _0x3a2be7=this['battler']();if(!_0x3a2be7)return;if(_0x4a1990===_0x3a2be7['_baseX'])return;let _0x165c38=![];if(this[_0x1a3529(0x4e0)]()){if(_0x1a3529(0x467)===_0x1a3529(0x7ad))this[_0x1a3529(0xa2c)]=(this[_0x1a3529(0xa2c)]*(_0x3bd3cb-0x1)+this[_0x1a3529(0x314)])/_0xd890a3;else{if(_0x4a1990>_0x3a2be7[_0x1a3529(0x12d)])_0x165c38=!![];if(_0x4a1990<_0x3a2be7['_baseX'])_0x165c38=![];}}else{if(this[_0x1a3529(0x737)]()){if(_0x1a3529(0xc8c)!==_0x1a3529(0xc8c))_0x329571+=_0x5e0416[_0x1a3529(0x4e0)]()?-_0x22a5dc:_0x183dd4,_0x27295d+=_0x33a00d['isActor']()?-_0x3c6448:_0x31bc10;else{if(_0x4a1990>_0x3a2be7[_0x1a3529(0x12d)])_0x165c38=![];if(_0x4a1990<_0x3a2be7[_0x1a3529(0x12d)])_0x165c38=!![];}}};this[_0x1a3529(0xb57)](_0x15e4b3?!_0x165c38:_0x165c38),_0x3a2be7[_0x1a3529(0x9df)]();},Game_Battler[_0x3823ba(0x8d6)][_0x3823ba(0xc41)]=function(_0x8386e7,_0x1e656a,_0x6b8a90,_0x5ded51,_0x37fea1){const _0x15c132=_0x3823ba;if(!$gameSystem[_0x15c132(0x839)]())return;const _0x3421b8=this[_0x15c132(0x798)]();if(!_0x3421b8)return;if(_0x5ded51)this[_0x15c132(0x916)](_0x8386e7+_0x3421b8[_0x15c132(0x12d)],_0x1e656a+_0x3421b8['_baseY'],![]);_0x8386e7+=_0x3421b8['_baseX']-_0x3421b8[_0x15c132(0x43c)],_0x1e656a+=_0x3421b8['_baseY']-_0x3421b8[_0x15c132(0x372)],_0x3421b8[_0x15c132(0x67d)](_0x8386e7,_0x1e656a,_0x6b8a90);if(Imported[_0x15c132(0x32f)])_0x3421b8['setMoveEasingType'](_0x37fea1||_0x15c132(0x12f));},Game_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x350)]=function(_0x14e5b1,_0x32c7f7,_0x57c09a,_0x1cd83f,_0x3c96c0,_0x1f9491){const _0x34a9a4=_0x3823ba;if(!$gameSystem[_0x34a9a4(0x839)]())return;const _0x82b25d=this[_0x34a9a4(0x798)]();if(!_0x82b25d)return;if(_0x14e5b1===Infinity||_0x32c7f7===Infinity)return;if(isNaN(_0x14e5b1)||isNaN(_0x32c7f7))return;_0x1f9491=_0x1f9491||0x0;if(_0x1f9491>0x0){if(_0x34a9a4(0xa74)==='LbfgA'){if(_0x82b25d['_baseX']>_0x14e5b1)_0x14e5b1+=_0x82b25d[_0x34a9a4(0x204)]/0x2+_0x1f9491;if(_0x82b25d[_0x34a9a4(0x12d)]<_0x14e5b1)_0x14e5b1-=_0x82b25d['width']/0x2+_0x1f9491;}else{const _0x1652fc=_0x21cca3['BattleCore'][_0x34a9a4(0x242)][_0x34a9a4(0x6ad)];if(_0x1652fc&&_0x1652fc[_0x34a9a4(0xb3a)])return _0x1652fc[_0x34a9a4(0xb3a)][_0x34a9a4(0x162)](this);this[_0x34a9a4(0x204)]=_0x39bc79['width'],this['height']=_0x1b328f[_0x34a9a4(0xd6d)];const _0x2c1b9=0x1;this['scale']['x']=_0x2c1b9,this[_0x34a9a4(0x6cc)]['y']=_0x2c1b9,this['x']=0x0,this['y']=0x0;}}if(_0x1cd83f)this['setBattlerFacePoint'](_0x14e5b1,_0x32c7f7,![]);_0x14e5b1-=_0x82b25d[_0x34a9a4(0x43c)],_0x32c7f7-=_0x82b25d[_0x34a9a4(0x372)],_0x82b25d[_0x34a9a4(0x67d)](_0x14e5b1,_0x32c7f7,_0x57c09a);if(Imported[_0x34a9a4(0x32f)])_0x82b25d[_0x34a9a4(0x93f)](_0x3c96c0||_0x34a9a4(0x12f));},Game_Battler['prototype']['moveBattlerHomeDistance']=function(_0x49f4c1,_0x3ba964,_0x16955e,_0x950778,_0x3b5366){const _0x3642cc=_0x3823ba;if(!$gameSystem[_0x3642cc(0x839)]())return;const _0x587bff=this[_0x3642cc(0x798)]();if(!_0x587bff)return;if(_0x950778)this[_0x3642cc(0x916)](_0x49f4c1+_0x587bff['_baseX'],_0x3ba964+_0x587bff[_0x3642cc(0xcf6)],![]);_0x49f4c1+=_0x587bff[_0x3642cc(0x43c)],_0x3ba964+=_0x587bff[_0x3642cc(0x372)],_0x587bff['startHomeMove'](_0x49f4c1,_0x3ba964,_0x16955e,_0x3b5366),this['_forcedHomeX']=_0x49f4c1,this[_0x3642cc(0x710)]=_0x3ba964;},Game_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x392)]=function(_0x1d381,_0x2c93f7,_0x3e9845,_0x194ac5,_0x44ee50,_0x420265){const _0x8aed07=_0x3823ba;if(!$gameSystem[_0x8aed07(0x839)]())return;const _0x1c3441=this[_0x8aed07(0x798)]();if(!_0x1c3441)return;_0x420265=_0x420265||0x0;if(_0x420265>0x0){if(_0x1c3441[_0x8aed07(0x12d)]>_0x1d381)_0x1d381+=_0x1c3441[_0x8aed07(0x204)]/0x2+_0x420265;if(_0x1c3441[_0x8aed07(0x12d)]<_0x1d381)_0x1d381-=_0x1c3441[_0x8aed07(0x204)]/0x2+_0x420265;}if(_0x194ac5)this[_0x8aed07(0x916)](_0x1d381,_0x2c93f7,![]);_0x1c3441[_0x8aed07(0xd2f)](_0x1d381,_0x2c93f7,_0x3e9845,_0x44ee50),this['_forcedHomeX']=_0x1d381,this[_0x8aed07(0x710)]=_0x2c93f7;},Game_Battler[_0x3823ba(0x8d6)]['floatBattler']=function(_0x3d80e9,_0x1eca7f,_0x5e061c){const _0x807598=_0x3823ba;if(!$gameSystem['isSideView']())return;const _0x52579c=this[_0x807598(0x798)]();if(!_0x52579c)return;_0x52579c['startFloat'](_0x3d80e9,_0x1eca7f,_0x5e061c);},Game_Battler['prototype'][_0x3823ba(0x1ab)]=function(_0x49866b,_0x2c81c4){const _0x23a9a1=_0x3823ba;if(!$gameSystem[_0x23a9a1(0x839)]())return;const _0x2e05d7=this['battler']();if(!_0x2e05d7)return;_0x2e05d7[_0x23a9a1(0x9f1)](_0x49866b,_0x2c81c4);},Game_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x3d7)]=function(_0x48666a,_0x24e580,_0x1d7e56,_0x12fc8b){const _0x23a5a6=_0x3823ba;if(!$gameSystem[_0x23a5a6(0x839)]())return;const _0x35771f=this[_0x23a5a6(0x798)]();if(!_0x35771f)return;_0x35771f[_0x23a5a6(0xb04)](_0x48666a,_0x24e580,_0x1d7e56,_0x12fc8b);},Game_Battler['prototype'][_0x3823ba(0x3d8)]=function(_0x363a4c,_0x58d58b,_0x242d34,_0x4e31fc){const _0x249016=_0x3823ba;if(!$gameSystem[_0x249016(0x839)]())return;const _0x5821b1=this['battler']();if(!_0x5821b1)return;this[_0x249016(0x4e0)]()&&(_0x363a4c*=-0x1,_0x58d58b*=-0x1),_0x5821b1[_0x249016(0x821)](_0x363a4c,_0x58d58b,_0x242d34,_0x4e31fc);},Game_Battler[_0x3823ba(0x8d6)][_0x3823ba(0xce5)]=function(_0xae215c,_0x278a2a,_0x2faf66,_0x221c7a){const _0x3e8526=_0x3823ba;if(!$gameSystem[_0x3e8526(0x839)]())return;const _0x3796f5=this['battler']();if(!_0x3796f5)return;_0x3796f5[_0x3e8526(0x3d1)](_0xae215c,_0x278a2a,_0x2faf66,_0x221c7a);},Game_Battler[_0x3823ba(0x8d6)][_0x3823ba(0xaf9)]=function(_0x85964c,_0x4520e3,_0x49b14f){const _0x644d1e=_0x3823ba;if(!$gameSystem['isSideView']())return;const _0x163f69=this[_0x644d1e(0x798)]();if(!_0x163f69)return;_0x163f69[_0x644d1e(0x2f5)](_0x85964c,_0x4520e3,_0x49b14f);},Game_Battler[_0x3823ba(0x8d6)]['clearFreezeMotion']=function(){const _0x19f2a5=_0x3823ba,_0x54f357=!!this['_freezeMotionData'];this['_freezeMotionData']=undefined;if(_0x54f357){if(_0x19f2a5(0x566)===_0x19f2a5(0xb38)){this['_cursorSprite']=new _0x5e8c6a();for(let _0x31628b=0x0;_0x31628b<0x9;_0x31628b++){this[_0x19f2a5(0xc7d)][_0x19f2a5(0x538)](new _0x1027fe());}this[_0x19f2a5(0x717)][_0x19f2a5(0x538)](this[_0x19f2a5(0xc7d)]);}else this[_0x19f2a5(0x7e2)](),this[_0x19f2a5(0x38b)]();}},Game_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x38b)]=function(){const _0x1a0c5b=_0x3823ba;if(!SceneManager['isSceneBattle']())return;const _0x342fe3=this[_0x1a0c5b(0x798)]();if(!_0x342fe3)return;let _0xa0d724=this['isActor']()?_0x342fe3[_0x1a0c5b(0x873)]:_0x342fe3[_0x1a0c5b(0x396)][_0x1a0c5b(0x873)];_0xa0d724&&_0xa0d724['setup'](0x0);},Game_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x3a4)]=function(_0x2d117e,_0x2048e1,_0x2f903c){const _0x3c333d=_0x3823ba;if(this[_0x3c333d(0x737)]()&&!this['hasSvBattler']())return;let _0x3ac9b9=0x0,_0x4aaa77=0x0;_0x2d117e[_0x3c333d(0xd57)](/ATTACK[ ](\d+)/i)&&(_0x4aaa77=Number(RegExp['$1']),_0x4aaa77--);if(this[_0x3c333d(0x4e0)]()){const _0x4404ab=this['weapons']();_0x3ac9b9=_0x4404ab[_0x4aaa77]?_0x4404ab[_0x4aaa77]['wtypeId']:0x0;}else this['isEnemy']()&&(_0x3c333d(0x68b)===_0x3c333d(0x68b)?_0x3ac9b9=this[_0x3c333d(0x888)]()[_0x3c333d(0x1af)]||0x0:this[_0x3c333d(0x2f4)](_0x4c9d87,'tp',_0x1706b3+(_0x3c6bdd[_0x3c333d(0x3c1)]||0x0),_0x20e6f4+this[_0x3c333d(0x164)]()*0x2+(_0x4c37ee['TpGaugeOffsetY']||0x0)));const _0x3e6de7=$dataSystem[_0x3c333d(0x776)][_0x3ac9b9];_0x2d117e[_0x3c333d(0xd57)](/attack/i)&&(_0x2d117e=['thrust',_0x3c333d(0x9e3),'missile'][_0x3e6de7[_0x3c333d(0x98a)]]||_0x3c333d(0x9e3)),this['_freezeMotionData']={'motionType':_0x2d117e,'weaponImageId':_0x2048e1?_0x3e6de7[_0x3c333d(0x360)]:0x0,'pattern':_0x2f903c};},Game_Battler[_0x3823ba(0x8d6)][_0x3823ba(0xaf3)]=function(_0x2465c4){const _0x3cbb05=_0x3823ba;if(!_0x2465c4)return![];return _0x2465c4[_0x3cbb05(0x691)]()===this[_0x3cbb05(0x691)]();},Game_Battler[_0x3823ba(0x8d6)][_0x3823ba(0xd06)]=function(_0x7d0743){const _0xe58de3=_0x3823ba;if(!_0x7d0743)return![];return _0x7d0743['opponentsUnit']()===this[_0xe58de3(0x691)]();},Game_Battler['prototype'][_0x3823ba(0x8a7)]=function(){return![];},Game_Actor[_0x3823ba(0x8d6)][_0x3823ba(0x8a7)]=function(){const _0x1b6749=_0x3823ba;return this['battlerName']()[_0x1b6749(0xd57)](/\$/i);},Game_Enemy[_0x3823ba(0x8d6)]['hasStaticSvBattler']=function(){const _0x297ba8=_0x3823ba;return this[_0x297ba8(0x366)]()&&this[_0x297ba8(0x35d)]()['match'](/\$/i);},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x513)]=Game_Actor[_0x3823ba(0x8d6)][_0x3823ba(0xa63)],Game_Actor[_0x3823ba(0x8d6)][_0x3823ba(0xa63)]=function(_0x5c8ef7){const _0x304c40=_0x3823ba;VisuMZ[_0x304c40(0x4f3)]['Game_Actor_setup'][_0x304c40(0x162)](this,_0x5c8ef7),this[_0x304c40(0x6b2)]();},Game_Actor[_0x3823ba(0x8d6)][_0x3823ba(0x6b2)]=function(){const _0x30a279=_0x3823ba;this[_0x30a279(0xa72)]='';if(this['actor']()&&this[_0x30a279(0x846)]()[_0x30a279(0x920)]['match'](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)){if(_0x30a279(0x7eb)==='ZJSXi')this['_battlePortrait']=String(RegExp['$1']);else{_0x28794d-=_0x4ea63d;const _0x131d77=_0x390b5a['BattleCore'][_0x30a279(0x242)][_0x30a279(0x630)][_0x30a279(0x84a)],_0x282c99=_0x2b467b[_0x30a279(0xd19)](0x1-_0x41632b/((_0x148cb7-_0x51ee00)*_0x131d77+_0x4631b3),0.01);_0x36b255*=_0x282c99,_0xc933af+=_0x34a4c6;}}},Game_Actor[_0x3823ba(0x8d6)]['getBattlePortraitFilename']=function(){const _0x1037ef=_0x3823ba;if(this[_0x1037ef(0xce8)]()!==''){if(_0x1037ef(0x77b)===_0x1037ef(0x77b))return this[_0x1037ef(0xce8)]();else this[_0x1037ef(0xd0b)][_0x1037ef(0x491)](_0x4d0261);}else{if(Imported[_0x1037ef(0x72e)]&&this[_0x1037ef(0x3da)]()!==''){if(_0x1037ef(0xc28)!==_0x1037ef(0xb77))return this['getMenuImage']();else{const _0x45d273=this['autoBattleWindowRect']();this[_0x1037ef(0xc63)]=new _0x3079d7(_0x45d273),this[_0x1037ef(0xc63)][_0x1037ef(0x423)](),this[_0x1037ef(0x538)](this[_0x1037ef(0xc63)]);}}}return'';},Game_Actor[_0x3823ba(0x8d6)][_0x3823ba(0xce8)]=function(){const _0x10ec23=_0x3823ba;if(this[_0x10ec23(0xa72)]===undefined)this[_0x10ec23(0x6b2)]();return this[_0x10ec23(0xa72)];},Game_Actor[_0x3823ba(0x8d6)][_0x3823ba(0x1e9)]=function(_0x4468cb){const _0x2ef7d0=_0x3823ba;if(this[_0x2ef7d0(0xa72)]===undefined)this[_0x2ef7d0(0x6b2)]();this[_0x2ef7d0(0xa72)]=_0x4468cb;if(SceneManager[_0x2ef7d0(0xbc6)]()&&$gameParty['battleMembers']()['includes'](this)){const _0x48f6bc=SceneManager[_0x2ef7d0(0xaa3)][_0x2ef7d0(0x264)];_0x48f6bc&&(_0x2ef7d0(0xd64)!=='fkmoX'?_0x48f6bc[_0x2ef7d0(0x761)](this):_0x52594b['BattleCore'][_0x2ef7d0(0xa40)][_0x2ef7d0(0x162)](this));}},Game_Actor[_0x3823ba(0x8d6)][_0x3823ba(0x5ec)]=function(){return!![];},Game_Actor[_0x3823ba(0x8d6)][_0x3823ba(0x85c)]=function(){const _0x48d6cb=_0x3823ba;if(!this[_0x48d6cb(0x600)]()&&BattleManager['_autoBattle'])return!![];return Game_Battler[_0x48d6cb(0x8d6)][_0x48d6cb(0x85c)][_0x48d6cb(0x162)](this);},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x582)]=Game_Actor[_0x3823ba(0x8d6)][_0x3823ba(0x3d0)],Game_Actor[_0x3823ba(0x8d6)][_0x3823ba(0x3d0)]=function(){const _0x55fe76=_0x3823ba;if(BattleManager['_autoBattle']&&!ConfigManager[_0x55fe76(0x698)])return this[_0x55fe76(0x7e7)]();else{return VisuMZ[_0x55fe76(0x4f3)][_0x55fe76(0x582)][_0x55fe76(0x162)](this);;}},Game_Actor[_0x3823ba(0x8d6)][_0x3823ba(0x7e7)]=function(){const _0x48ad43=_0x3823ba,_0x4027e1=[],_0x4505d6=new Game_Action(this);return _0x4505d6[_0x48ad43(0x623)](),_0x4027e1[_0x48ad43(0x3d9)](_0x4505d6),_0x4027e1;},Game_Actor['prototype']['battleCommands']=function(){const _0xf27433=_0x3823ba;return this[_0xf27433(0x70e)]()[_0xf27433(0x920)][_0xf27433(0xd57)](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i)?String(RegExp['$1'])[_0xf27433(0x22f)](/[\r\n]+/):VisuMZ['BattleCore'][_0xf27433(0x242)][_0xf27433(0x758)]['BattleCmdList'];},Game_Actor[_0x3823ba(0x8d6)][_0x3823ba(0x40a)]=function(){const _0x3c5c1d=_0x3823ba;if(this[_0x3c5c1d(0xbf1)][_0x3c5c1d(0x8d8)]!==undefined)return this[_0x3c5c1d(0xbf1)]['svAnchorX'];return this[_0x3c5c1d(0x846)]()[_0x3c5c1d(0x920)][_0x3c5c1d(0xd57)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this['_cache'][_0x3c5c1d(0x8d8)]=eval(RegExp['$1']),this[_0x3c5c1d(0xbf1)][_0x3c5c1d(0x71c)]=eval(RegExp['$2'])):_0x3c5c1d(0x20b)!==_0x3c5c1d(0x20b)?(_0x1b2dd6[_0x3c5c1d(0x4f3)][_0x3c5c1d(0x183)]['call'](this),this[_0x3c5c1d(0x2da)]()):this[_0x3c5c1d(0xbf1)][_0x3c5c1d(0x8d8)]=Game_Battler[_0x3c5c1d(0x8d6)][_0x3c5c1d(0x40a)][_0x3c5c1d(0x162)](this),this[_0x3c5c1d(0xbf1)][_0x3c5c1d(0x8d8)];},Game_Actor['prototype']['svBattlerAnchorY']=function(){const _0x328582=_0x3823ba;if(this['_cache'][_0x328582(0x71c)]!==undefined)return this[_0x328582(0xbf1)][_0x328582(0x71c)];return this[_0x328582(0x846)]()[_0x328582(0x920)]['match'](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?_0x328582(0xb07)===_0x328582(0xb07)?(this['_cache'][_0x328582(0x8d8)]=eval(RegExp['$1']),this[_0x328582(0xbf1)][_0x328582(0x71c)]=eval(RegExp['$2'])):this['removeImmortal']():this[_0x328582(0xbf1)]['svAnchorY']=Game_Battler['prototype'][_0x328582(0x636)][_0x328582(0x162)](this),this[_0x328582(0xbf1)][_0x328582(0x71c)];},Game_Actor[_0x3823ba(0x8d6)]['svBattlerShadowVisible']=function(){const _0x14d10a=_0x3823ba;if(this[_0x14d10a(0xbf1)]['svShadow']!==undefined)return this[_0x14d10a(0xbf1)][_0x14d10a(0xc03)];if(this[_0x14d10a(0x846)]()[_0x14d10a(0x920)][_0x14d10a(0xd57)](/<SIDEVIEW SHOW SHADOW>/i))_0x14d10a(0x3f0)===_0x14d10a(0x825)?this['startMove'](0x0,0x0,0xc):this['_cache']['svShadow']=!![];else this[_0x14d10a(0x846)]()[_0x14d10a(0x920)][_0x14d10a(0xd57)](/<SIDEVIEW HIDE SHADOW>/i)?this[_0x14d10a(0xbf1)]['svShadow']=![]:this[_0x14d10a(0xbf1)][_0x14d10a(0xc03)]=Game_Battler[_0x14d10a(0x8d6)][_0x14d10a(0x586)][_0x14d10a(0x162)](this);return this[_0x14d10a(0xbf1)][_0x14d10a(0xc03)];},Game_Actor['prototype'][_0x3823ba(0x8e6)]=function(){const _0x39383b=_0x3823ba;return VisuMZ[_0x39383b(0x4f3)][_0x39383b(0x242)][_0x39383b(0x9fc)][_0x39383b(0xc62)];},Game_Actor['prototype'][_0x3823ba(0x7a2)]=function(){const _0x46ba3c=_0x3823ba,_0x357d0f=this[_0x46ba3c(0xcc0)](),_0x810498=_0x357d0f[0x0]?_0x357d0f[0x0][_0x46ba3c(0x1af)]:0x0,_0xb251e2=$dataSystem[_0x46ba3c(0x776)][_0x810498];_0xb251e2&&this[_0x46ba3c(0x9fd)](_0xb251e2[_0x46ba3c(0x360)]);},Game_Actor[_0x3823ba(0x8d6)][_0x3823ba(0xba8)]=function(_0x3fb51d){const _0x1dbab7=_0x3823ba;Game_Battler[_0x1dbab7(0x8d6)][_0x1dbab7(0xba8)][_0x1dbab7(0x162)](this,_0x3fb51d),this[_0x1dbab7(0x88a)](_0x3fb51d);},Game_Actor[_0x3823ba(0x8d6)]['getAttackMotion']=function(){const _0x46786b=_0x3823ba,_0x20c58b=this[_0x46786b(0xcc0)](),_0x1bc514=_0x20c58b[0x0]?_0x20c58b[0x0][_0x46786b(0x1af)]:0x0;return $dataSystem[_0x46786b(0x776)][_0x1bc514];},Game_Actor[_0x3823ba(0x8d6)][_0x3823ba(0x367)]=function(_0x1e598a){const _0x538233=_0x3823ba;_0x1e598a=_0x1e598a||0x1,_0x1e598a--;const _0x483906=this[_0x538233(0xcc0)]();return _0x483906[_0x1e598a]?_0x483906[_0x1e598a][_0x538233(0x161)]:0x0;},Game_Actor['prototype'][_0x3823ba(0x28f)]=function(_0x11dc7d){const _0x552fd2=_0x3823ba;_0x11dc7d=_0x11dc7d||0x1,_0x11dc7d--;const _0xcff5a1=this[_0x552fd2(0xcc0)](),_0x269e60=_0xcff5a1[_0x11dc7d]?_0xcff5a1[_0x11dc7d][_0x552fd2(0x1af)]:0x0;return $dataSystem[_0x552fd2(0x776)][_0x269e60];},Game_Actor[_0x3823ba(0x8d6)]['performAttackSlot']=function(_0x26450d){const _0x3f53b9=_0x3823ba;_0x26450d=_0x26450d||0x1,_0x26450d--;const _0x578c44=this[_0x3f53b9(0xcc0)](),_0xfce598=_0x578c44[_0x26450d]?_0x578c44[_0x26450d][_0x3f53b9(0x1af)]:0x0,_0x201e1e=$dataSystem[_0x3f53b9(0x776)][_0xfce598];if(_0x201e1e){if(_0x201e1e[_0x3f53b9(0x98a)]===0x0)this[_0x3f53b9(0xb90)](_0x3f53b9(0x49f));else{if(_0x201e1e[_0x3f53b9(0x98a)]===0x1)this[_0x3f53b9(0xb90)]('swing');else _0x201e1e[_0x3f53b9(0x98a)]===0x2&&this[_0x3f53b9(0xb90)]('missile');}this[_0x3f53b9(0x9fd)](_0x201e1e[_0x3f53b9(0x360)]);}},Game_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x7e3)]=function(_0x410b77){const _0x99ead3=_0x3823ba;if(this['isActor']()){const _0x2d9190=this['weapons']();if(_0x2d9190[_0x99ead3(0xb23)]>0x0){const _0x5acaae=_0x2d9190[_0x410b77];if(_0x5acaae)_0x410b77=this[_0x99ead3(0x4f6)]()[_0x99ead3(0x122)](_0x5acaae);}}this['_activeWeaponSlot']=_0x410b77||0x0,this[_0x99ead3(0xbf1)]={};},Game_Battler[_0x3823ba(0x8d6)][_0x3823ba(0xb7b)]=function(){const _0x61f547=_0x3823ba;this['_activeWeaponSlot']=this[_0x61f547(0x9e4)]||0x0,this[_0x61f547(0x9e4)]++,this[_0x61f547(0xbf1)]={};},Game_Battler[_0x3823ba(0x8d6)][_0x3823ba(0xb20)]=function(){const _0x557f4b=_0x3823ba;this[_0x557f4b(0x9e4)]=undefined,this['_cache']={};},VisuMZ[_0x3823ba(0x4f3)]['Game_Actor_equips']=Game_Actor['prototype'][_0x3823ba(0x4f6)],Game_Actor[_0x3823ba(0x8d6)][_0x3823ba(0x4f6)]=function(){const _0x5942b9=_0x3823ba;let _0x2115b2=VisuMZ[_0x5942b9(0x4f3)][_0x5942b9(0xc0d)]['call'](this);if(this[_0x5942b9(0x847)])return _0x2115b2;if(this[_0x5942b9(0x9e4)]!==undefined){this[_0x5942b9(0x847)]=!![];const _0x475a92=this[_0x5942b9(0x561)]();for(let _0x4457f5=0x0;_0x4457f5<_0x475a92['length'];_0x4457f5++){if('LceNy'===_0x5942b9(0x9d2)){if(this[_0x5942b9(0x9ba)]!=='')return;typeof _0x5e2130===_0x5942b9(0x1ec)?this[_0x5942b9(0x9ba)]=_0x3346b6[_0x5942b9(0x8cf)]()[_0x5942b9(0xaf4)]():this[_0x5942b9(0x9ba)]=_0x20cecf['battlerKey']();}else _0x475a92[_0x4457f5]===0x1&&this[_0x5942b9(0x9e4)]!==_0x4457f5&&(_0x5942b9(0x9e1)!=='SJKim'?_0x2115b2[_0x4457f5]=null:(_0x2e9a92[_0x5942b9(0x473)](),_0x565910['addState'](_0x3f2a4a['deathStateId']())));}this['_tempEquipCheck']=undefined;}return _0x2115b2;},Window_BattleLog['prototype'][_0x3823ba(0xd5d)]=function(_0x2627f2){const _0x2e1aea=_0x3823ba;return _0x2627f2[_0x2e1aea(0x4e0)]()?_0x2627f2['weapons']()[_0x2e1aea(0xb23)]||0x1:0x1;},Window_BattleLog[_0x3823ba(0x8d6)][_0x3823ba(0x3a5)]=function(_0x5227c4,_0x1b691b){const _0x3e6d01=_0x3823ba;if(_0x5227c4&&_0x5227c4[_0x3e6d01(0x4e0)]()){if(_0x3e6d01(0x3a8)===_0x3e6d01(0x744))return this[_0x3e6d01(0xbf1)]=this['_cache']||{},this[_0x3e6d01(0xbf1)][_0x1896d4]!==_0x18a7f0;else _0x5227c4[_0x3e6d01(0x7e3)](_0x1b691b);}this[_0x3e6d01(0x15f)]();},Window_BattleLog['prototype']['clearActiveWeaponSet']=function(_0xc3df27){const _0x12b260=_0x3823ba;_0xc3df27&&_0xc3df27[_0x12b260(0x4e0)]()&&_0xc3df27[_0x12b260(0xb20)](),this[_0x12b260(0x15f)]();},Game_Actor[_0x3823ba(0x8d6)]['battleUIOffsetX']=function(){const _0x57c3e9=_0x3823ba;let _0x4cc11b=_0x57c3e9(0x89d);if(this[_0x57c3e9(0x4dc)](_0x4cc11b))return this[_0x57c3e9(0xbf1)][_0x4cc11b];return this[_0x57c3e9(0xbf1)][_0x4cc11b]=this[_0x57c3e9(0xa80)](this[_0x57c3e9(0x846)]()),this['_cache'][_0x4cc11b];},Game_Actor[_0x3823ba(0x8d6)][_0x3823ba(0x44f)]=function(){const _0x32a884=_0x3823ba;let _0x57d593='battleUIOffsetY';if(this[_0x32a884(0x4dc)](_0x57d593))return this[_0x32a884(0xbf1)][_0x57d593];return this[_0x32a884(0xbf1)][_0x57d593]=this[_0x32a884(0xa52)](this[_0x32a884(0x846)]()),this['_cache'][_0x57d593];},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x960)]=Game_Enemy[_0x3823ba(0x8d6)][_0x3823ba(0xa63)],Game_Enemy[_0x3823ba(0x8d6)]['setup']=function(_0x37d186,_0x248cd3,_0x1cddfd){const _0x3a28bf=_0x3823ba;_0x37d186=DataManager[_0x3a28bf(0x2fd)](_0x37d186),VisuMZ['BattleCore'][_0x3a28bf(0x960)][_0x3a28bf(0x162)](this,_0x37d186,_0x248cd3,_0x1cddfd);if(Imported[_0x3a28bf(0x9d7)]){if(_0x3a28bf(0x8a1)===_0x3a28bf(0xc97))return _0x31dbbd(_0x1b29dd['$1'])/0x64;else this['initElementStatusCore']();}this[_0x3a28bf(0x72d)](),this[_0x3a28bf(0xcdd)](),Imported[_0x3a28bf(0x9d7)]&&('tpycg'===_0x3a28bf(0xc24)?_0x59dcf6[_0x3a28bf(0x8e9)]([this],_0x2ecf7c):this[_0x3a28bf(0xd09)]());},Game_Enemy[_0x3823ba(0x8d6)][_0x3823ba(0x72d)]=function(){const _0x3dab69=_0x3823ba,_0x1d35bb=VisuMZ['BattleCore'][_0x3dab69(0x242)][_0x3dab69(0x179)];this[_0x3dab69(0x2b6)]=_0x1d35bb[_0x3dab69(0x4d1)],this[_0x3dab69(0xa45)]={};},Game_Enemy['prototype'][_0x3823ba(0xcdd)]=function(){const _0x1e1b5a=_0x3823ba,_0x1dc16d=VisuMZ['BattleCore'][_0x1e1b5a(0x242)][_0x1e1b5a(0x179)],_0x49b9d5=this['enemy']()[_0x1e1b5a(0x920)];this[_0x1e1b5a(0xa45)]={'name':'','wtypeId':_0x1dc16d[_0x1e1b5a(0x893)],'collapse':_0x1dc16d['AllowCollapse'],'motionIdle':_0x1dc16d[_0x1e1b5a(0xc39)],'width':_0x1dc16d['Width']||0x40,'height':_0x1dc16d[_0x1e1b5a(0xb70)]||0x40,'anchorX':_0x1dc16d[_0x1e1b5a(0xa2e)]||0x0,'anchorY':_0x1dc16d[_0x1e1b5a(0x5b7)]||0x0,'shadow':_0x1dc16d[_0x1e1b5a(0xa8c)]};_0x49b9d5[_0x1e1b5a(0xd57)](/<ATTACK ANIMATION:[ ](\d+)>/i)&&(this[_0x1e1b5a(0x2b6)]=Number(RegExp['$1']));const _0x574581=this[_0x1e1b5a(0xa45)];if(_0x49b9d5['match'](/<SIDEVIEW BATTLER: (.*)>/i)){if('qAZSW'===_0x1e1b5a(0xd15))_0x574581[_0x1e1b5a(0x450)]=String(RegExp['$1']);else return _0x8614b6[_0x1e1b5a(0x4f3)][_0x1e1b5a(0xbce)][_0x1e1b5a(0x162)](this);}else{if(_0x49b9d5[_0x1e1b5a(0xd57)](/<SIDEVIEW BATTLERS>\s*([\s\S]*)\s*<\/SIDEVIEW BATTLERS>/i)){if('mmaGK'===_0x1e1b5a(0x3c5)){const _0x261545=String(RegExp['$1'])[_0x1e1b5a(0x22f)](/[\r\n]+/)[_0x1e1b5a(0xbc4)]('');_0x574581[_0x1e1b5a(0x450)]=DataManager[_0x1e1b5a(0xb8f)](_0x261545);}else return _0x4e5fc8(_0x234ad2['$1']);}}if(_0x49b9d5[_0x1e1b5a(0xd57)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)){if('RXask'==='WyjQD'){const _0x26453e=_0x37fe7f[_0x1e1b5a(0x4f3)][_0x1e1b5a(0x242)]['BattlebackScale'];if(_0x26453e&&_0x26453e['jsScaleDown'])return _0x26453e[_0x1e1b5a(0x2d2)][_0x1e1b5a(0x162)](this);this[_0x1e1b5a(0x204)]=_0x1fba6f[_0x1e1b5a(0x204)],this['height']=_0x486131['height'];const _0x261c68=_0x4a6cfb[_0x1e1b5a(0x28a)](0x1,this[_0x1e1b5a(0x204)]/this[_0x1e1b5a(0x850)][_0x1e1b5a(0x204)]),_0x271583=_0x366875[_0x1e1b5a(0x28a)](0x1,this['height']/this[_0x1e1b5a(0x850)][_0x1e1b5a(0xd6d)]),_0x2d3e3e=_0x347c19[_0x1e1b5a(0xd19)](_0x261c68,_0x271583);this[_0x1e1b5a(0x6cc)]['x']=_0x2d3e3e,this[_0x1e1b5a(0x6cc)]['y']=_0x2d3e3e,this['x']=(_0x52000b[_0x1e1b5a(0x204)]-this[_0x1e1b5a(0x204)])/0x2,this['y']=_0x12e4b2[_0x1e1b5a(0xd6d)]-this[_0x1e1b5a(0xd6d)];}else _0x574581['anchorX']=eval(RegExp['$1']),_0x574581[_0x1e1b5a(0x8f1)]=eval(RegExp['$2']);}if(_0x49b9d5['match'](/<SIDEVIEW COLLAPSE>/i))_0x574581['collapse']=!![];else _0x49b9d5[_0x1e1b5a(0xd57)](/<SIDEVIEW NO COLLAPSE>/i)&&(_0x574581['collapse']=![]);if(_0x49b9d5[_0x1e1b5a(0xd57)](/<SIDEVIEW SHOW SHADOW>/i)){if(_0x1e1b5a(0x2a8)!==_0x1e1b5a(0xb89))_0x574581['shadow']=!![];else{const _0x33abc4=this[_0x1e1b5a(0x9c0)]['lastBattleSkill']();if(_0x33abc4){const _0x38a2ce=this['findSymbolExt'](_0x1e1b5a(0x609),_0x33abc4['id']);this[_0x1e1b5a(0x97d)](_0x38a2ce||0x0);}}}else{if(_0x49b9d5[_0x1e1b5a(0xd57)](/<SIDEVIEW HIDE SHADOW>/i)){if(_0x1e1b5a(0x8bb)!==_0x1e1b5a(0x159))_0x574581[_0x1e1b5a(0xc59)]=![];else{const _0x1134be=this[_0x1e1b5a(0xa73)]();['xp',_0x1e1b5a(0x9e6),_0x1e1b5a(0x43a)][_0x1e1b5a(0x97e)](_0x1134be)&&this[_0x1e1b5a(0x55b)][_0x1e1b5a(0x1b5)](),this[_0x1e1b5a(0x2e7)]();}}}if(_0x49b9d5[_0x1e1b5a(0xd57)](/<SIDEVIEW IDLE MOTION: (.*)>/i))_0x1e1b5a(0xc6e)!==_0x1e1b5a(0xc6e)?(_0x40ceec['_autoBattle']=!![],_0x1b834a[_0x1e1b5a(0x8f2)](),this[_0x1e1b5a(0x2d5)](),_0xab6c57[_0x1e1b5a(0xac0)]()&&(_0xb0020[_0x1e1b5a(0x339)]=![])):_0x574581[_0x1e1b5a(0x2a3)]=String(RegExp['$1'])[_0x1e1b5a(0x8cf)]()[_0x1e1b5a(0xaf4)]();else{if(_0x49b9d5[_0x1e1b5a(0xd57)](/<SIDEVIEW IDLE MOTIONS>\s*([\s\S]*)\s*<\/SIDEVIEW IDLE MOTIONS>/i)){const _0x5c7310=String(RegExp['$1'])[_0x1e1b5a(0x22f)](/[\r\n]+/)[_0x1e1b5a(0xbc4)]('');_0x574581[_0x1e1b5a(0x2a3)]=DataManager[_0x1e1b5a(0xb8f)](_0x5c7310);}}if(_0x49b9d5[_0x1e1b5a(0xd57)](/<SIDEVIEW SIZE: (\d+), (\d+)>/i)){if(_0x1e1b5a(0x9d3)!==_0x1e1b5a(0x73e))_0x574581['width']=Number(RegExp['$1']),_0x574581['height']=Number(RegExp['$2']);else return this[_0x1e1b5a(0x691)]()[_0x1e1b5a(0x663)]();}if(_0x49b9d5[_0x1e1b5a(0xd57)](/<SIDEVIEW WEAPON: (.*)>/i))_0x574581[_0x1e1b5a(0x1af)]=DataManager[_0x1e1b5a(0x644)](RegExp['$1']);else{if(_0x49b9d5[_0x1e1b5a(0xd57)](/<SIDEVIEW WEAPONS>\s*([\s\S]*)\s*<\/SIDEVIEW WEAPONS>/i)){const _0x78084e=String(RegExp['$1'])[_0x1e1b5a(0x22f)](/[\r\n]+/)['remove'](''),_0x7bed78=DataManager[_0x1e1b5a(0xb8f)](_0x78084e);_0x574581[_0x1e1b5a(0x1af)]=DataManager[_0x1e1b5a(0x644)](_0x7bed78);}}if(Imported[_0x1e1b5a(0x9d7)]){if(_0x1e1b5a(0x646)!==_0x1e1b5a(0x646))return _0x28596f[_0x1e1b5a(0x4f3)][_0x1e1b5a(0x242)][_0x1e1b5a(0x911)]['AllowRandomSpeed'];else{const _0x11fd9a=this[_0x1e1b5a(0x90f)]();for(const _0x531400 of _0x11fd9a){const _0x5c63e5=this[_0x1e1b5a(0x961)](_0x531400)['Name'][_0x1e1b5a(0x2d8)]()[_0x1e1b5a(0xaf4)](),_0x4902b9=_0x531400[_0x1e1b5a(0x2d8)]()[_0x1e1b5a(0xaf4)]();if(_0x49b9d5[_0x1e1b5a(0xd57)](VisuMZ[_0x1e1b5a(0x255)][_0x1e1b5a(0x123)][_0x1e1b5a(0xd36)[_0x1e1b5a(0xabf)](_0x4902b9,_0x5c63e5)]))_0x574581['name']=String(RegExp['$1']);else{if(_0x49b9d5['match'](VisuMZ[_0x1e1b5a(0x255)][_0x1e1b5a(0x123)][_0x1e1b5a(0x28c)[_0x1e1b5a(0xabf)](_0x4902b9,_0x5c63e5)])){if(_0x1e1b5a(0x59f)===_0x1e1b5a(0x59f)){const _0x700065=String(RegExp['$1'])[_0x1e1b5a(0x22f)](/[\r\n]+/)[_0x1e1b5a(0xbc4)]('');_0x574581[_0x1e1b5a(0x450)]=DataManager[_0x1e1b5a(0xb8f)](_0x700065);}else _0x21748b[_0x1e1b5a(0x5c2)]()?_0x13d8b6[_0x1e1b5a(0x8d6)][_0x1e1b5a(0x127)]['call'](this):_0x3cb451[_0x1e1b5a(0x4f3)]['Scene_Battle_terminate'][_0x1e1b5a(0x162)](this),_0x29e175['clearBattleBalloons'](),this['clearOnceParallelInterpreters']();}}if(_0x49b9d5[_0x1e1b5a(0xd57)](VisuMZ['ElementStatusCore']['RegExp'][_0x1e1b5a(0x593)[_0x1e1b5a(0xabf)](_0x4902b9,_0x5c63e5)]))_0x574581[_0x1e1b5a(0x1af)]=DataManager[_0x1e1b5a(0x644)](RegExp['$1']);else{if(_0x49b9d5['match'](VisuMZ[_0x1e1b5a(0x255)][_0x1e1b5a(0x123)][_0x1e1b5a(0x6e1)[_0x1e1b5a(0xabf)](_0x4902b9,_0x5c63e5)])){const _0x306213=String(RegExp['$1'])[_0x1e1b5a(0x22f)](/[\r\n]+/)[_0x1e1b5a(0xbc4)](''),_0x5bafa6=DataManager[_0x1e1b5a(0xb8f)](_0x306213);_0x574581[_0x1e1b5a(0x1af)]=DataManager[_0x1e1b5a(0x644)](_0x5bafa6);}}if(_0x49b9d5[_0x1e1b5a(0xd57)](VisuMZ[_0x1e1b5a(0x255)][_0x1e1b5a(0x123)][_0x1e1b5a(0x12e)['format'](_0x4902b9,_0x5c63e5)])){if(_0x1e1b5a(0x4d9)===_0x1e1b5a(0xae0))return this[_0x1e1b5a(0xaa3)]&&this[_0x1e1b5a(0xaa3)]['constructor']===_0x527994;else _0x574581[_0x1e1b5a(0x2a3)]=String(RegExp['$1'])[_0x1e1b5a(0x8cf)]()[_0x1e1b5a(0xaf4)]();}else{if(_0x49b9d5[_0x1e1b5a(0xd57)](VisuMZ['ElementStatusCore']['RegExp'][_0x1e1b5a(0x4b8)[_0x1e1b5a(0xabf)](_0x4902b9,_0x5c63e5)])){if(_0x1e1b5a(0x363)!==_0x1e1b5a(0x2cc)){const _0x3643b0=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x1e1b5a(0xbc4)]('');_0x574581[_0x1e1b5a(0x2a3)]=DataManager[_0x1e1b5a(0xb8f)](_0x3643b0);}else _0x5b6fa2+=_0x4a0908[_0x1e1b5a(0x4e0)]()?-_0x28a496:_0x2b0e50,_0x2a320f+=_0x3cff04[_0x1e1b5a(0x4e0)]()?-_0xe3550e:_0x23ab89;}}}}}},Game_Enemy['prototype']['attackAnimationId1']=function(){return this['_attackAnimationId']||0x0;},Game_Enemy['prototype'][_0x3823ba(0xb6b)]=function(){const _0x4a244e=_0x3823ba;return this[_0x4a244e(0x6c3)]();},Game_Enemy[_0x3823ba(0x8d6)][_0x3823ba(0x367)]=function(_0x394bfb){const _0x5168d5=_0x3823ba;return this[_0x5168d5(0x6c3)]();},Game_Enemy['prototype'][_0x3823ba(0xba4)]=function(){const _0x3b5bc3=_0x3823ba;if(this['enemy']()[_0x3b5bc3(0x920)][_0x3b5bc3(0xd57)](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return Game_Battler['prototype']['canBattlerMove'][_0x3b5bc3(0x162)](this);},Game_Enemy[_0x3823ba(0x8d6)][_0x3823ba(0x547)]=function(){const _0x35cdf6=_0x3823ba;if(this[_0x35cdf6(0x634)]()['note'][_0x35cdf6(0xd57)](/<BATTLER SPRITE GROUNDED>/i))return!![];return![];},Game_Enemy[_0x3823ba(0x8d6)][_0x3823ba(0xcf8)]=function(){const _0x1fd551=_0x3823ba,_0x38913f=[];for(const _0x53647d of this['enemy']()['actions']){if(_0x1fd551(0x171)===_0x1fd551(0x932)){if(this['_battlePortrait']===_0x4683d4)this['initBattlePortrait']();this['_battlePortrait']=_0x46386c;if(_0x4c90e9[_0x1fd551(0xbc6)]()&&_0x3bdeb8[_0x1fd551(0x930)]()['includes'](this)){const _0x1a2094=_0x4ac7b4[_0x1fd551(0xaa3)][_0x1fd551(0x264)];_0x1a2094&&_0x1a2094[_0x1fd551(0x761)](this);}}else{const _0x526669=$dataSkills[_0x53647d[_0x1fd551(0x50a)]];if(_0x526669&&!_0x38913f[_0x1fd551(0x97e)](_0x526669))_0x38913f[_0x1fd551(0x3d9)](_0x526669);}}return _0x38913f;},Game_Enemy[_0x3823ba(0x8d6)][_0x3823ba(0x89d)]=function(){const _0x2cdd1a=_0x3823ba;let _0x1c21d4=_0x2cdd1a(0x89d);if(this['checkCacheKey'](_0x1c21d4))return this[_0x2cdd1a(0xbf1)][_0x1c21d4];return this[_0x2cdd1a(0xbf1)][_0x1c21d4]=this[_0x2cdd1a(0xa80)](this[_0x2cdd1a(0x634)]()),this['_cache'][_0x1c21d4];},Game_Enemy[_0x3823ba(0x8d6)][_0x3823ba(0x44f)]=function(){const _0xb40f30=_0x3823ba;let _0x1428ea=_0xb40f30(0x44f);if(this[_0xb40f30(0x4dc)](_0x1428ea))return this[_0xb40f30(0xbf1)][_0x1428ea];return this[_0xb40f30(0xbf1)][_0x1428ea]=this[_0xb40f30(0xa52)](this['enemy']()),this[_0xb40f30(0xbf1)][_0x1428ea];},Game_Enemy['prototype'][_0x3823ba(0x888)]=function(){const _0x3f21a3=_0x3823ba;if(this[_0x3f21a3(0xa45)]!==undefined)return this[_0x3f21a3(0xa45)];return this[_0x3f21a3(0xcdd)](),this['_svBattlerData'];},Game_Enemy[_0x3823ba(0x8d6)][_0x3823ba(0x366)]=function(){const _0x5f122a=_0x3823ba;return this[_0x5f122a(0x888)]()['name']!=='';},Game_Enemy[_0x3823ba(0x8d6)]['svBattlerName']=function(){const _0x2b648c=_0x3823ba;return this[_0x2b648c(0x888)]()[_0x2b648c(0x450)];},Game_Enemy[_0x3823ba(0x8d6)][_0x3823ba(0x8e6)]=function(){const _0x7ef43c=_0x3823ba;return this[_0x7ef43c(0x366)]()?VisuMZ[_0x7ef43c(0x4f3)][_0x7ef43c(0x242)][_0x7ef43c(0x9fc)]['SmoothImage']:VisuMZ['BattleCore'][_0x7ef43c(0x242)][_0x7ef43c(0x179)][_0x7ef43c(0xc62)];},Game_Enemy[_0x3823ba(0x8d6)][_0x3823ba(0xba8)]=function(_0x1c8ecc){const _0x347ba5=_0x3823ba;Game_Battler[_0x347ba5(0x8d6)][_0x347ba5(0xba8)][_0x347ba5(0x162)](this,_0x1c8ecc);if(this[_0x347ba5(0x366)]())this[_0x347ba5(0x88a)](_0x1c8ecc);},Game_Enemy['prototype'][_0x3823ba(0x2c3)]=function(){const _0x2173c8=_0x3823ba,_0x2d8493=this['svBattlerData']()['wtypeId']||0x0,_0x311995=$dataSystem[_0x2173c8(0x776)][_0x2d8493];if(_0x311995){if(_0x311995[_0x2173c8(0x98a)]===0x0)this['requestMotion']('thrust');else{if(_0x311995[_0x2173c8(0x98a)]===0x1)this[_0x2173c8(0xb90)](_0x2173c8(0x9e3));else _0x311995['type']===0x2&&this[_0x2173c8(0xb90)](_0x2173c8(0x687));}}},Game_Enemy['prototype'][_0x3823ba(0x7a2)]=function(){const _0x2ec7cd=_0x3823ba,_0x4b84ba=this[_0x2ec7cd(0x888)]()[_0x2ec7cd(0x1af)]||0x0,_0x3030e4=$dataSystem[_0x2ec7cd(0x776)][_0x4b84ba];_0x3030e4&&this['startWeaponAnimation'](_0x3030e4['weaponImageId']);},Game_Enemy[_0x3823ba(0x8d6)][_0x3823ba(0x60e)]=function(){const _0x152fce=_0x3823ba,_0x2e2998=this[_0x152fce(0x888)]()[_0x152fce(0x1af)]||0x0;return $dataSystem['attackMotions'][_0x2e2998];},Game_Enemy[_0x3823ba(0x8d6)][_0x3823ba(0x28f)]=function(_0x51fce4){const _0x1e03e6=_0x3823ba;return this[_0x1e03e6(0x60e)]();},Game_Enemy[_0x3823ba(0x8d6)]['performDamage']=function(){const _0x2594ec=_0x3823ba;Game_Battler[_0x2594ec(0x8d6)][_0x2594ec(0x657)]['call'](this),this['isSpriteVisible']()&&this[_0x2594ec(0x366)]()&&this['requestMotion'](_0x2594ec(0x806)),SoundManager[_0x2594ec(0xa35)]();},Game_Enemy['prototype'][_0x3823ba(0x1fd)]=function(){const _0x28822d=_0x3823ba;Game_Battler[_0x28822d(0x8d6)][_0x28822d(0x1fd)][_0x28822d(0x162)](this),this[_0x28822d(0xb90)](_0x28822d(0x576));},Game_Enemy[_0x3823ba(0x8d6)]['performMagicEvasion']=function(){const _0x4ba580=_0x3823ba;Game_Battler[_0x4ba580(0x8d6)]['performMagicEvasion']['call'](this),this[_0x4ba580(0xb90)](_0x4ba580(0x576));},Game_Enemy[_0x3823ba(0x8d6)][_0x3823ba(0x874)]=function(){const _0x2d2fa4=_0x3823ba;Game_Battler[_0x2d2fa4(0x8d6)][_0x2d2fa4(0x874)][_0x2d2fa4(0x162)](this),this[_0x2d2fa4(0x2c3)]();},Game_Enemy[_0x3823ba(0x8d6)][_0x3823ba(0xa56)]=function(){const _0x41f274=_0x3823ba;if(this[_0x41f274(0x366)]()){if(this[_0x41f274(0x32b)]()>=0x1)return!![];return this[_0x41f274(0x888)]()[_0x41f274(0x953)];}else return!![];},Game_Enemy[_0x3823ba(0x8d6)][_0x3823ba(0x40a)]=function(){const _0x347903=_0x3823ba;return this[_0x347903(0x888)]()[_0x347903(0xc22)];},Game_Enemy[_0x3823ba(0x8d6)][_0x3823ba(0x636)]=function(){const _0x53118a=_0x3823ba;return this[_0x53118a(0x888)]()[_0x53118a(0x8f1)];},Game_Enemy[_0x3823ba(0x8d6)][_0x3823ba(0x586)]=function(){const _0x2c4f7e=_0x3823ba;return this[_0x2c4f7e(0x888)]()[_0x2c4f7e(0xc59)];},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x23a)]=Game_Enemy['prototype'][_0x3823ba(0x483)],Game_Enemy[_0x3823ba(0x8d6)][_0x3823ba(0x483)]=function(_0x2a603e){const _0x3702cf=_0x3823ba;VisuMZ[_0x3702cf(0x4f3)]['Game_Enemy_transform'][_0x3702cf(0x162)](this,_0x2a603e),this[_0x3702cf(0x72d)](),this[_0x3702cf(0xcdd)]();const _0x28041c=this['battler']();_0x28041c&&(_0x3702cf(0xae6)!==_0x3702cf(0xae6)?_0x5c5858[_0x3702cf(0x318)]?this[_0x3702cf(0xb78)]='sideview_ui':this[_0x3702cf(0xb78)]=_0x3702cf(0x4d8):(_0x28041c['_battlerName']=undefined,_0x28041c[_0x3702cf(0x120)](this)));},Game_Unit[_0x3823ba(0x8d6)]['processBattleCoreJS']=function(_0x43e682){const _0x1b766d=_0x3823ba;for(const _0x345758 of this[_0x1b766d(0x292)]()){if(_0x345758)_0x345758[_0x1b766d(0x64f)](_0x43e682);}},Game_Unit[_0x3823ba(0x8d6)][_0x3823ba(0x663)]=function(){const _0x12284c=_0x3823ba,_0x22902c=this[_0x12284c(0xd31)]();return _0x22902c[Math[_0x12284c(0x407)](_0x22902c[_0x12284c(0xb23)])];},VisuMZ['BattleCore']['Game_Party_addActor']=Game_Party[_0x3823ba(0x8d6)][_0x3823ba(0x835)],Game_Party[_0x3823ba(0x8d6)][_0x3823ba(0x835)]=function(_0x4403ca){const _0x47af1f=_0x3823ba;VisuMZ['BattleCore'][_0x47af1f(0x5a6)]['call'](this,_0x4403ca),BattleManager[_0x47af1f(0x805)]();},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0xc7e)]=Game_Party[_0x3823ba(0x8d6)][_0x3823ba(0xcee)],Game_Party[_0x3823ba(0x8d6)][_0x3823ba(0xcee)]=function(_0x2afc85){const _0x30b9b8=_0x3823ba;VisuMZ[_0x30b9b8(0x4f3)][_0x30b9b8(0xc7e)][_0x30b9b8(0x162)](this,_0x2afc85),BattleManager[_0x30b9b8(0x805)]();},VisuMZ[_0x3823ba(0x4f3)]['Game_Troop_setup']=Game_Troop['prototype']['setup'],Game_Troop[_0x3823ba(0x8d6)]['setup']=function(_0x2dd18d){const _0x23fc13=_0x3823ba;$gameTemp[_0x23fc13(0x7d4)](),$gameTemp[_0x23fc13(0x2f0)](_0x2dd18d),VisuMZ[_0x23fc13(0x4f3)][_0x23fc13(0xb66)]['call'](this,_0x2dd18d),this[_0x23fc13(0xabc)]();},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x246)]=Game_Troop[_0x3823ba(0x8d6)][_0x3823ba(0x297)],Game_Troop['prototype'][_0x3823ba(0x297)]=function(){const _0x285c8a=_0x3823ba;let _0xd6b4d0=VisuMZ['BattleCore']['Game_Troop_expTotal'][_0x285c8a(0x162)](this);return this[_0x285c8a(0x280)]&&(_0xd6b4d0*=this[_0x285c8a(0x280)]()),Math[_0x285c8a(0xacc)](_0xd6b4d0);},Game_Troop[_0x3823ba(0x8d6)][_0x3823ba(0x280)]=function(){return 0x1;},Game_Troop[_0x3823ba(0x8d6)]['extendTroopMembers']=function(){const _0x6d221=_0x3823ba,_0x846e5f=DataManager[_0x6d221(0x6fe)](this['troop']()['id']);if(_0x846e5f[_0x6d221(0xd57)](/<(?:EXTEND|ADD):[ ](.*?)>/i)){const _0x1a00e0=RegExp['$1'][_0x6d221(0x22f)](',')[_0x6d221(0x4d0)](_0x54b103=>Number(_0x54b103));this['checkExtendTroopCompatibility'](),this[_0x6d221(0x46f)](_0x1a00e0);}},Game_Troop[_0x3823ba(0x8d6)][_0x3823ba(0x55c)]=function(){const _0x548806=_0x3823ba;let _0x4276cc=_0x548806(0x750)+'\x0a';_0x4276cc+=_0x548806(0xd68);Imported[_0x548806(0x1bc)]&&(VisuMZ[_0x548806(0xb31)][_0x548806(0xd18)]<1.11&&(alert(_0x4276cc[_0x548806(0xabf)]('BTB')),SceneManager[_0x548806(0x824)]()));if(Imported[_0x548806(0x594)]){if(VisuMZ[_0x548806(0xa1b)]['version']<1.19){if('MFWaz'===_0x548806(0x8c1)){if(!_0x25c697[_0x548806(0x16d)](_0x9cbf34))return![];}else alert(_0x4276cc[_0x548806(0xabf)](_0x548806(0x937))),SceneManager[_0x548806(0x824)]();}}if(Imported[_0x548806(0xaf5)]){if(VisuMZ['BattleSystemSTB'][_0x548806(0xd18)]<1.15){if(_0x548806(0x315)===_0x548806(0x315))alert(_0x4276cc[_0x548806(0xabf)](_0x548806(0x5b5))),SceneManager['exit']();else return _0x201d9f[_0x548806(0x798)]()['_baseX']-_0x26e76e['battler']()[_0x548806(0x12d)];}}},Game_Troop[_0x3823ba(0x8d6)]['processExtendTroopMembers']=function(_0x2fa620){const _0x546c4d=_0x3823ba;this[_0x546c4d(0xd97)]={};for(const _0x5e09e6 of this[_0x546c4d(0x292)]()){if(!_0x5e09e6)continue;_0x5e09e6[_0x546c4d(0x36b)]('');}for(const _0x4eee89 of _0x2fa620){const _0xef9332=$dataTroops[_0x4eee89];if(_0xef9332)this[_0x546c4d(0x728)](_0xef9332);}this[_0x546c4d(0xcb2)]();},Game_Troop[_0x3823ba(0x8d6)][_0x3823ba(0x728)]=function(_0x2f9994){const _0x559692=_0x3823ba;for(const _0x25ba24 of _0x2f9994[_0x559692(0x292)]){if($dataEnemies[_0x25ba24['enemyId']]){const _0x97ece4=_0x25ba24[_0x559692(0xce6)],_0x19a774=_0x25ba24['x'],_0xb721d1=_0x25ba24['y'],_0x9f75c6=new Game_Enemy(_0x97ece4,_0x19a774,_0xb721d1);_0x25ba24[_0x559692(0x15d)]&&(_0x559692(0xd26)!==_0x559692(0xd26)?(_0x23b974[_0x559692(0x8d6)][_0x559692(0xc06)][_0x559692(0x162)](this,_0x577e2f),this['scale']['x']=-0x1,this[_0x559692(0x317)][_0x559692(0x6cc)]['x']=-0x1):_0x9f75c6[_0x559692(0x423)]()),this['_enemies'][_0x559692(0x3d9)](_0x9f75c6);}}},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x11c)]=Game_Map[_0x3823ba(0x8d6)][_0x3823ba(0xbec)],Game_Map[_0x3823ba(0x8d6)][_0x3823ba(0xbec)]=function(){const _0x266509=_0x3823ba;VisuMZ['BattleCore'][_0x266509(0x11c)][_0x266509(0x162)](this),this[_0x266509(0x126)]();},Game_Map[_0x3823ba(0x8d6)]['setupBattlebackBattleCore']=function(){const _0x3f6d08=_0x3823ba;this[_0x3f6d08(0x231)]={},this['_regionBattleback2']={};if(!$dataMap)return;const _0x282bde=$dataMap['note'];if(!_0x282bde)return;const _0x19f52d=_0x282bde[_0x3f6d08(0xd57)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0x19f52d)for(const _0x55af22 of _0x19f52d){if(_0x3f6d08(0xa10)==='oOeqB'){_0x55af22['match'](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x22e988=Number(RegExp['$1']),_0x255fc1=Number(RegExp['$2']),_0x1097e4=_0x255fc1===0x1?this['_regionBattleback1']:this[_0x3f6d08(0x368)],_0x316688=String(RegExp['$3']);_0x1097e4[_0x22e988]=_0x316688;}else{const _0x9aa890=_0x9d8e6[_0x3f6d08(0x204)],_0xa36171=_0x160cb4[_0x3f6d08(0x282)]((_0x1c7ca6['boxWidth']-_0x9aa890)/0x2),_0x33b348=this[_0x3f6d08(0x720)](0x4,!![]),_0x5b4b83=_0x5d7170[_0x3f6d08(0x53c)]-_0x33b348+(_0x39bd2f[_0x3f6d08(0xd6d)]-_0x5810f9['boxHeight'])/0x2;return new _0x4419f1(_0xa36171,_0x5b4b83,_0x9aa890,_0x33b348);}}},VisuMZ['BattleCore'][_0x3823ba(0x44d)]=Game_Map[_0x3823ba(0x8d6)][_0x3823ba(0x997)],Game_Map[_0x3823ba(0x8d6)][_0x3823ba(0x997)]=function(){const _0x11ddf3=_0x3823ba;if(!BattleManager[_0x11ddf3(0x3e2)]()){const _0x5c5dab=$gamePlayer[_0x11ddf3(0x286)]($gamePlayer['x'],$gamePlayer['y']);if(this['_regionBattleback1']&&this[_0x11ddf3(0x231)][_0x5c5dab]){if('zBixJ'!==_0x11ddf3(0xa6a))return this[_0x11ddf3(0x231)][_0x5c5dab];else _0x342bdd=_0x1d611e;}}return VisuMZ[_0x11ddf3(0x4f3)][_0x11ddf3(0x44d)]['call'](this);},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x992)]=Game_Map[_0x3823ba(0x8d6)][_0x3823ba(0x866)],Game_Map[_0x3823ba(0x8d6)]['battleback2Name']=function(){const _0x22e2f2=_0x3823ba;if(!BattleManager['isBattleTest']()){const _0x31248a=$gamePlayer['regionId']($gamePlayer['x'],$gamePlayer['y']);if(this['_regionBattleback1']&&this[_0x22e2f2(0x368)][_0x31248a])return this[_0x22e2f2(0x368)][_0x31248a];}return VisuMZ[_0x22e2f2(0x4f3)][_0x22e2f2(0x992)]['call'](this);},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x275)]=Game_Map[_0x3823ba(0x8d6)][_0x3823ba(0x979)],Game_Map[_0x3823ba(0x8d6)][_0x3823ba(0x979)]=function(){const _0x1266ae=_0x3823ba;let _0x287678=JsonEx[_0x1266ae(0x682)](VisuMZ['BattleCore'][_0x1266ae(0x275)][_0x1266ae(0x162)](this));return VisuMZ[_0x1266ae(0x4f3)][_0x1266ae(0x402)](_0x287678);},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x402)]=function(_0x367b76){const _0x1b2b45=_0x3823ba;var _0x2a5886,_0x2cb502,_0xc7c0b2;for(_0xc7c0b2=_0x367b76['length']-0x1;_0xc7c0b2>0x0;_0xc7c0b2--){if(_0x1b2b45(0x559)===_0x1b2b45(0xbc1)){const _0x29e318=_0x39846e['battleMembers']()[_0x2ab01f],_0x97ccca=new _0x1af65f();_0x97ccca[_0x1b2b45(0xa86)](_0x29e318),_0x97ccca[_0x1b2b45(0x120)](_0x29e318),_0x97ccca['update'](),this[_0x1b2b45(0xcd9)][_0x1b2b45(0x3d9)](_0x97ccca),this[_0x1b2b45(0x91b)][_0x1b2b45(0x538)](_0x97ccca);}else _0x2a5886=Math['floor'](Math[_0x1b2b45(0x30f)]()*(_0xc7c0b2+0x1)),_0x2cb502=_0x367b76[_0xc7c0b2],_0x367b76[_0xc7c0b2]=_0x367b76[_0x2a5886],_0x367b76[_0x2a5886]=_0x2cb502;}return _0x367b76;},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x5c8)]=Game_Interpreter[_0x3823ba(0x8d6)][_0x3823ba(0x60a)],Game_Interpreter[_0x3823ba(0x8d6)]['command357']=function(_0x48ff56){const _0x11cd89=_0x3823ba;return $gameTemp[_0x11cd89(0x696)](this),VisuMZ[_0x11cd89(0x4f3)][_0x11cd89(0x5c8)]['call'](this,_0x48ff56);},VisuMZ['BattleCore'][_0x3823ba(0x8a6)]=Game_Interpreter[_0x3823ba(0x8d6)][_0x3823ba(0xc6a)],Game_Interpreter[_0x3823ba(0x8d6)][_0x3823ba(0xc6a)]=function(){const _0x1a08b9=_0x3823ba;if(SceneManager[_0x1a08b9(0xbc6)]()){if(_0x1a08b9(0x62a)===_0x1a08b9(0x88b))this[_0x1a08b9(0x6d8)]();else switch(this[_0x1a08b9(0x887)]){case'battleAngle':if(Imported[_0x1a08b9(0x29c)]){if($gameScreen[_0x1a08b9(0x3d6)]()[_0x1a08b9(0xa1e)]>0x0)return!![];this[_0x1a08b9(0x887)]='';}break;case _0x1a08b9(0x5d0):if(BattleManager[_0x1a08b9(0x8a5)][_0x1a08b9(0x524)]())return!![];this[_0x1a08b9(0x887)]='';break;case _0x1a08b9(0x5f6):if(BattleManager['_spriteset'][_0x1a08b9(0x7ca)]())return!![];this[_0x1a08b9(0x887)]='';break;case'battleCamera':if(Imported[_0x1a08b9(0x29c)]){if($gameScreen[_0x1a08b9(0x3d6)]()[_0x1a08b9(0xbb3)]>0x0)return!![];if($gameScreen[_0x1a08b9(0x3d6)]()[_0x1a08b9(0x65c)]>0x0)return!![];this[_0x1a08b9(0x887)]='';}break;case'battleEffect':if(BattleManager['_spriteset'][_0x1a08b9(0x30e)]())return!![];this[_0x1a08b9(0x887)]='';break;case _0x1a08b9(0x598):if(BattleManager[_0x1a08b9(0x8a5)]['isAnyoneFloating']())return!![];this['_waitMode']='';break;case'battleJump':if(BattleManager[_0x1a08b9(0x8a5)]['isAnyoneJumping']())return!![];this[_0x1a08b9(0x887)]='';break;case _0x1a08b9(0x6dc):if(BattleManager['_logWindow']['isBusy']())return!![];this[_0x1a08b9(0x887)]='';break;case _0x1a08b9(0x5a9):if(BattleManager[_0x1a08b9(0x8a5)][_0x1a08b9(0x18d)]())return!![];this[_0x1a08b9(0x887)]='';break;case _0x1a08b9(0xc77):if(BattleManager['_spriteset'][_0x1a08b9(0x191)]())return!![];this[_0x1a08b9(0x887)]='';break;case _0x1a08b9(0xa62):if(BattleManager['_spriteset'][_0x1a08b9(0x108)]())return!![];this[_0x1a08b9(0x887)]='';break;case _0x1a08b9(0x9de):if(BattleManager['_spriteset'][_0x1a08b9(0x143)]())return!![];this[_0x1a08b9(0x887)]='';break;case _0x1a08b9(0xba3):if(Imported[_0x1a08b9(0x154)]){if(BattleManager['_spriteset'][_0x1a08b9(0xab1)]())return!![];this['_waitMode']='';}break;case _0x1a08b9(0x948):if(Imported['VisuMZ_3_ActSeqCamera']){if($gameScreen['battleCameraData']()['skewDuration']>0x0)return!![];this[_0x1a08b9(0x887)]='';}break;case _0x1a08b9(0x82e):if(BattleManager[_0x1a08b9(0x8a5)][_0x1a08b9(0xd3b)]())return!![];this[_0x1a08b9(0x887)]='';break;case'battleZoom':if(Imported[_0x1a08b9(0x29c)]){if(_0x1a08b9(0xbac)!==_0x1a08b9(0xbac)){if(_0x9470a4['BattleCore'][_0x1a08b9(0x242)]['BattleLog'][_0x1a08b9(0x685)])return _0x3abb6c[_0x1a08b9(0x4f3)][_0x1a08b9(0x242)][_0x1a08b9(0xa26)][_0x1a08b9(0x685)]['call'](this);return _0x4eb2c5[_0x1a08b9(0x4f3)]['Scene_Battle_logWindowRect'][_0x1a08b9(0x162)](this);}else{if($gameScreen[_0x1a08b9(0x3d6)]()[_0x1a08b9(0x30c)]>0x0)return!![];this[_0x1a08b9(0x887)]='';}}break;case _0x1a08b9(0xa64):if(Imported['VisuMZ_3_ActSeqImpact']){if(_0x1a08b9(0xa37)===_0x1a08b9(0xa37)){if(BattleManager[_0x1a08b9(0x8a5)][_0x1a08b9(0x158)]){if(BattleManager['_spriteset']['isAnyoneInjectAniPrepping']())return!![];this[_0x1a08b9(0x887)]=_0x1a08b9(0x5ae);}else this[_0x1a08b9(0x887)]='';break;}else _0x3ecf50+=_0x13c3d6;}break;case _0x1a08b9(0x5ae):if(Imported['VisuMZ_3_ActSeqImpact']){if(_0x1a08b9(0x54e)!==_0x1a08b9(0x54e))return;else{if(BattleManager[_0x1a08b9(0x8a5)][_0x1a08b9(0xb44)]())return!![];this[_0x1a08b9(0x887)]='';}}break;}}return VisuMZ[_0x1a08b9(0x4f3)][_0x1a08b9(0x8a6)]['call'](this);},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0xd79)]=Game_Interpreter[_0x3823ba(0x8d6)][_0x3823ba(0x10f)],Game_Interpreter[_0x3823ba(0x8d6)][_0x3823ba(0x10f)]=function(_0xad710c){const _0x2b4667=_0x3823ba;if(!$gameParty[_0x2b4667(0xcea)]()){if(_0x2b4667(0xd01)!==_0x2b4667(0xd01)){const _0x19f336=_0x34d477[_0x2b4667(0xd93)]('['+_0x469ed8['$1'][_0x2b4667(0xd57)](/\d+/g)+']');for(const _0x293763 of _0x19f336){if(_0x103b9f[_0x2b4667(0x16d)](_0x293763))return!![];}return![];}else return this['command301_PreBattleEvent'](_0xad710c);}else return VisuMZ[_0x2b4667(0x4f3)][_0x2b4667(0xd79)]['call'](this,_0xad710c);},Game_Interpreter['prototype']['command3011']=function(_0x247003){const _0x6a4e96=_0x3823ba;return VisuMZ[_0x6a4e96(0x4f3)][_0x6a4e96(0xd79)][_0x6a4e96(0x162)](this,_0x247003),BattleManager['setEventCallback'](_0x208909=>{const _0x176b87=_0x6a4e96;_0x176b87(0xd12)!==_0x176b87(0xd12)?_0xa3e524=_0x113499>=_0x4e28a4?_0x3ab853:_0x433349:this[_0x176b87(0x1ac)][this[_0x176b87(0x10d)]]=_0x208909;}),!![];},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x13d)]=function(_0x273524){const _0x5c05fe=_0x3823ba,_0x2c9809=$dataCommonEvents[_0x273524];if(!_0x2c9809)return![];if(_0x2c9809[_0x5c05fe(0x934)]['length']<=0x1)return![];return!![];},Game_Interpreter[_0x3823ba(0x8d6)][_0x3823ba(0x818)]=function(_0x479f0a){const _0x4709a3=_0x3823ba,_0x2804f1=VisuMZ[_0x4709a3(0x4f3)][_0x4709a3(0x242)][_0x4709a3(0x911)],_0x527cf4=_0x2804f1[_0x4709a3(0x8f7)],_0x1dcac5=$dataCommonEvents[_0x527cf4];if(_0x1dcac5&&VisuMZ[_0x4709a3(0x4f3)]['CheckMapBattleEventValid'](_0x527cf4)){if(_0x4709a3(0x564)==='GvuvX'){const _0x385a7d=this[_0x4709a3(0x1e2)]()?this[_0x4709a3(0xa88)]:0x0,_0x3822ec=_0x1dcac5[_0x4709a3(0x934)];this[_0x4709a3(0x146)](_0x3822ec,_0x385a7d),this[_0x4709a3(0xb92)]=JsonEx[_0x4709a3(0x682)](this[_0x4709a3(0xb92)]);const _0x51926d={'code':0xbc3,'indent':this[_0x4709a3(0x10d)],'parameters':JsonEx[_0x4709a3(0x682)](_0x479f0a)};return this[_0x4709a3(0xb92)][_0x4709a3(0xb7a)](this[_0x4709a3(0x73b)]+0x1,0x0,_0x51926d),!![];}else{if(!_0xadf67a[_0x4709a3(0xbc6)]())return;_0x4d5ba4['ConvertParams'](_0x146df0,_0x264e24);const _0x46f97b=_0x7bdcba[_0x4709a3(0xb97)];_0x5d5f6c['_scene'][_0x4709a3(0x16e)](_0x46f97b);}}else return VisuMZ[_0x4709a3(0x4f3)][_0x4709a3(0xd79)][_0x4709a3(0x162)](this,_0x479f0a);},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x1c6)]=BattleManager[_0x3823ba(0x27c)],BattleManager[_0x3823ba(0x27c)]=function(){const _0x204f66=_0x3823ba;VisuMZ[_0x204f66(0x4f3)][_0x204f66(0x1c6)]['call'](this),this[_0x204f66(0x1f1)]();},BattleManager[_0x3823ba(0x1f1)]=function(){const _0x543de7=_0x3823ba,_0xb54a10=VisuMZ[_0x543de7(0x4f3)]['Settings'][_0x543de7(0x911)],_0x31fd5b=_0xb54a10[_0x543de7(0x8f7)];_0x31fd5b&&VisuMZ['BattleCore'][_0x543de7(0x13d)](_0x31fd5b)&&(_0x543de7(0xbc0)===_0x543de7(0xc46)?(this[_0x543de7(0x317)]['scale']['x']=0x1/(this['scale']['x']||0.001),this[_0x543de7(0x317)][_0x543de7(0x6cc)]['y']=0x1/(this[_0x543de7(0x6cc)]['y']||0.001)):(this[_0x543de7(0xa81)]=!![],$gameTemp['reserveCommonEvent'](_0xb54a10[_0x543de7(0x8f7)]),$gameMap['updateInterpreter'](),$gameMap['_interpreter'][_0x543de7(0xa3b)]=!![]));if(_0xb54a10[_0x543de7(0x105)]>0x0){if(_0x543de7(0xc57)==='TDqMU')this[_0x543de7(0x955)]=!![];else return _0xfa6f3a[_0x543de7(0x2a1)][_0x543de7(0x242)]['QoL'][_0x543de7(0x6be)];}},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x30a)]=Scene_Map[_0x3823ba(0x8d6)]['updateCallMenu'],Scene_Map[_0x3823ba(0x8d6)][_0x3823ba(0xca8)]=function(){const _0x283c8f=_0x3823ba;if(BattleManager[_0x283c8f(0xa81)])return;VisuMZ[_0x283c8f(0x4f3)]['Scene_Map_updateCallMenu'][_0x283c8f(0x162)](this);},VisuMZ[_0x3823ba(0x4f3)]['Scene_Map_launchBattle']=Scene_Map[_0x3823ba(0x8d6)][_0x3823ba(0x82c)],Scene_Map['prototype']['launchBattle']=function(){const _0x2450b9=_0x3823ba;if(BattleManager[_0x2450b9(0xa81)]){if('qejJF'==='DyMjB'){_0x515ec2(_0x2450b9(0x25b)),_0x12ed9e[_0x2450b9(0x824)]();return;}else this[_0x2450b9(0x3c7)]();}else VisuMZ[_0x2450b9(0x4f3)]['Scene_Map_launchBattle'][_0x2450b9(0x162)](this);},Scene_Map[_0x3823ba(0x8d6)][_0x3823ba(0x3c7)]=function(){const _0x113742=_0x3823ba;this[_0x113742(0x3df)]=!![];},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x16f)]=SceneManager['isSceneChanging'],SceneManager[_0x3823ba(0x6b3)]=function(){const _0x43f75e=_0x3823ba;if(BattleManager[_0x43f75e(0xa81)])return![];return VisuMZ[_0x43f75e(0x4f3)][_0x43f75e(0x16f)][_0x43f75e(0x162)](this);},VisuMZ['BattleCore']['Game_Interpreter_terminate']=Game_Interpreter[_0x3823ba(0x8d6)]['terminate'],Game_Interpreter[_0x3823ba(0x8d6)]['terminate']=function(){const _0x34480c=_0x3823ba;VisuMZ[_0x34480c(0x4f3)]['Game_Interpreter_terminate'][_0x34480c(0x162)](this);if(this['_preBattleCommonEvent']){if(_0x34480c(0x978)===_0x34480c(0x978))this[_0x34480c(0xa3b)]=undefined,SceneManager[_0x34480c(0xaa3)][_0x34480c(0x1a9)]();else{_0x19eabc[_0x34480c(0x4f3)][_0x34480c(0x241)][_0x34480c(0x162)](this);if(this['_callSceneOptions']&&!_0x4f7a7c['_subject'])this[_0x34480c(0x6d8)]();}}},Scene_Map[_0x3823ba(0x8d6)][_0x3823ba(0x1a9)]=function(){const _0x30f8aa=_0x3823ba;BattleManager['_battleCoreBattleStartEvent']=undefined,BattleManager[_0x30f8aa(0x860)]=!![],this[_0x30f8aa(0x1e7)]();},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x36a)]=Scene_Map[_0x3823ba(0x8d6)]['initialize'],Scene_Map[_0x3823ba(0x8d6)][_0x3823ba(0xc06)]=function(){const _0xa373e6=_0x3823ba;VisuMZ['BattleCore']['Scene_Map_initializeAfter'][_0xa373e6(0x162)](this),BattleManager['_battleCoreBattleResumeAfter']&&(this[_0xa373e6(0x3df)]=!![],BattleManager[_0xa373e6(0x860)]=undefined);},VisuMZ['BattleCore']['Scene_Map_initialize']=Scene_Map[_0x3823ba(0x8d6)][_0x3823ba(0xc06)],Scene_Map[_0x3823ba(0x8d6)][_0x3823ba(0xc06)]=function(){const _0x474631=_0x3823ba;VisuMZ['BattleCore']['Scene_Map_initialize'][_0x474631(0x162)](this),$gameTemp['clearForcedGameTroopSettingsBattleCore']();},VisuMZ['BattleCore'][_0x3823ba(0x80d)]=Scene_ItemBase[_0x3823ba(0x8d6)][_0x3823ba(0x70d)],Scene_ItemBase['prototype'][_0x3823ba(0x70d)]=function(){const _0x5563f4=_0x3823ba;VisuMZ['BattleCore'][_0x5563f4(0x80d)][_0x5563f4(0x162)](this);if(this[_0x5563f4(0x733)]()[_0x5563f4(0x920)][_0x5563f4(0xd57)](/<BYPASS AUTO ACTION SEQUENCE>/i))return;this[_0x5563f4(0x733)]()[_0x5563f4(0x920)]['match'](/<CUSTOM ACTION SEQUENCE>/i)&&($gameTemp['_commonEventQueue']=[]),DataManager[_0x5563f4(0xd59)](this[_0x5563f4(0x733)]())&&(_0x5563f4(0xb39)!=='LcfUl'?(_0x2fdcce[_0x5563f4(0x4f3)]['Window_BattleEnemy_show']['call'](this),this['y']=_0x43e662[_0x5563f4(0xd6d)]*0xa,this[_0x5563f4(0x390)]()&&this[_0x5563f4(0xa7c)]()):$gameTemp[_0x5563f4(0x3e3)]=[]);},VisuMZ[_0x3823ba(0x4f3)]['Scene_Options_maxCommands']=Scene_Options[_0x3823ba(0x8d6)][_0x3823ba(0xc3d)],Scene_Options[_0x3823ba(0x8d6)][_0x3823ba(0xc3d)]=function(){const _0x892bec=_0x3823ba;let _0xf2c5b7=VisuMZ[_0x892bec(0x4f3)]['Scene_Options_maxCommands'][_0x892bec(0x162)](this);const _0x4692d5=VisuMZ['BattleCore'][_0x892bec(0x242)];if(_0x4692d5[_0x892bec(0x9d8)][_0x892bec(0xca2)]&&_0x4692d5[_0x892bec(0x9d8)][_0x892bec(0x2de)])_0xf2c5b7+=0x2;if(_0x4692d5[_0x892bec(0xb40)][_0x892bec(0xca2)]&&_0x4692d5[_0x892bec(0xb40)]['AdjustRect'])_0xf2c5b7+=0x1;return _0xf2c5b7;},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x183)]=Scene_Battle[_0x3823ba(0x8d6)][_0x3823ba(0xc06)],Scene_Battle[_0x3823ba(0x8d6)]['initialize']=function(){const _0x58c532=_0x3823ba;VisuMZ['BattleCore'][_0x58c532(0x183)]['call'](this),this[_0x58c532(0x2da)]();},VisuMZ['BattleCore'][_0x3823ba(0xb06)]=Scene_Battle[_0x3823ba(0x8d6)][_0x3823ba(0x9ce)],Scene_Battle['prototype'][_0x3823ba(0x9ce)]=function(){const _0x567ad=_0x3823ba;if(SceneManager[_0x567ad(0x641)]()){if(_0x567ad(0x489)!==_0x567ad(0x489))return 0x1;else{Scene_Message[_0x567ad(0x8d6)][_0x567ad(0x9ce)][_0x567ad(0x162)](this);this[_0x567ad(0x8a5)]&&this[_0x567ad(0x8a5)][_0x567ad(0x456)]();if(BattleManager[_0x567ad(0x5d5)]){if(_0x567ad(0x6b1)===_0x567ad(0xc3b)){const _0xec57c4=_0x428e2e[_0x567ad(0x4f3)][_0x567ad(0x242)][_0x567ad(0x911)],_0xc06349=_0xec57c4[_0x567ad(0x8f7)];_0xc06349&&_0x4daf3f[_0x567ad(0x4f3)][_0x567ad(0x13d)](_0xc06349)&&(this[_0x567ad(0xa81)]=!![],_0x251d5c['reserveCommonEvent'](_0xec57c4[_0x567ad(0x8f7)]),_0x30aa02[_0x567ad(0x452)](),_0x2208ae[_0x567ad(0x91f)][_0x567ad(0xa3b)]=!![]),_0xec57c4[_0x567ad(0x105)]>0x0&&(this[_0x567ad(0x955)]=!![]);}else BattleManager[_0x567ad(0x596)]();}}}else VisuMZ[_0x567ad(0x4f3)]['Scene_Battle_start'][_0x567ad(0x162)](this),$gameTroop[_0x567ad(0x999)]();},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x944)]=Scene_Battle['prototype'][_0x3823ba(0x1e7)],Scene_Battle['prototype']['stop']=function(){const _0x16f6bb=_0x3823ba;SceneManager[_0x16f6bb(0x5c2)]()?Scene_Message[_0x16f6bb(0x8d6)]['stop']['call'](this):VisuMZ[_0x16f6bb(0x4f3)][_0x16f6bb(0x944)][_0x16f6bb(0x162)](this);},VisuMZ[_0x3823ba(0x4f3)]['Scene_Battle_terminate']=Scene_Battle[_0x3823ba(0x8d6)][_0x3823ba(0x127)],Scene_Battle[_0x3823ba(0x8d6)][_0x3823ba(0x127)]=function(){const _0x354c25=_0x3823ba;SceneManager[_0x354c25(0x5c2)]()?Scene_Message['prototype'][_0x354c25(0x127)]['call'](this):VisuMZ[_0x354c25(0x4f3)][_0x354c25(0xa40)]['call'](this),$gameTemp['clearBattleBalloons'](),this['clearOnceParallelInterpreters']();},Scene_Battle['prototype'][_0x3823ba(0x361)]=function(){const _0x2ea230=_0x3823ba;if(ConfigManager[_0x2ea230(0x57f)]&&ConfigManager[_0x2ea230(0x7ab)]!==undefined)return ConfigManager['uiInputPosition'];else{if(this['battleLayoutStyle']()===_0x2ea230(0x43a))return![];else{return Scene_Message[_0x2ea230(0x8d6)]['isRightInputMode'][_0x2ea230(0x162)](this);;}}},VisuMZ[_0x3823ba(0x4f3)]['Scene_Battle_createAllWindows']=Scene_Battle[_0x3823ba(0x8d6)][_0x3823ba(0x107)],Scene_Battle[_0x3823ba(0x8d6)][_0x3823ba(0x107)]=function(){const _0x587b69=_0x3823ba;this[_0x587b69(0x29f)](),VisuMZ['BattleCore'][_0x587b69(0x3f7)][_0x587b69(0x162)](this),this[_0x587b69(0x4b9)]();},VisuMZ['BattleCore'][_0x3823ba(0x79c)]=Scene_Battle[_0x3823ba(0x8d6)][_0x3823ba(0xc8f)],Scene_Battle[_0x3823ba(0x8d6)]['createEnemyWindow']=function(){const _0x3f5a5b=_0x3823ba;VisuMZ[_0x3f5a5b(0x4f3)][_0x3f5a5b(0x79c)][_0x3f5a5b(0x162)](this),this[_0x3f5a5b(0xd48)]();},Scene_Battle[_0x3823ba(0x8d6)][_0x3823ba(0xd48)]=function(){const _0x4497c0=_0x3823ba;this[_0x4497c0(0x3af)](!![]),this[_0x4497c0(0x3af)](![]);},Scene_Battle[_0x3823ba(0x8d6)]['multiTargetWindowRect']=function(_0x25f8db){const _0xdc594=_0x3823ba,_0x130009=Window_BattleMultiTarget[_0xdc594(0xa5b)],_0x38e0fc=this['calcWindowHeight'](0x1,!![]);let _0x5f59e2=_0x25f8db?Graphics[_0xdc594(0xc13)]-_0x130009:0x0;_0x5f59e2+=_0x25f8db?Window_BattleMultiTarget['ACTOR_OFFSET_X']:Window_BattleMultiTarget['ENEMY_OFFSET_X'];const _0x44b445=[_0xdc594(0x5ef)][_0xdc594(0x97e)](this['battleLayoutStyle']())?0x0:this[_0xdc594(0x264)][_0xdc594(0xd6d)];let _0x480ff7=Graphics['boxHeight']-_0x44b445-_0x38e0fc;return _0x480ff7+=_0x25f8db?Window_BattleMultiTarget[_0xdc594(0xba9)]:Window_BattleMultiTarget[_0xdc594(0x555)],new Rectangle(_0x5f59e2,_0x480ff7,_0x130009,_0x38e0fc);},Scene_Battle[_0x3823ba(0x8d6)][_0x3823ba(0x3af)]=function(_0x2647ae){const _0x194081=_0x3823ba,_0xd1e7e0=this[_0x194081(0x377)](_0x2647ae),_0x1413fd=new Window_BattleMultiTarget(_0xd1e7e0,_0x2647ae);this[_0x194081(0xa9e)](_0x1413fd);if(_0x2647ae){if('lAMls'!=='lAMls'){this['isAnimationShownOnBattlePortrait'](_0x3f9999)?this['battleStatusWindowAnimationContainer']()[_0x194081(0x491)](_0x16953d):this[_0x194081(0xd0b)][_0x194081(0x491)](_0x120e37);this[_0x194081(0x3f8)][_0x194081(0x491)](_0x17e402),this['_animationContainer'][_0x194081(0x491)](_0x171342),this[_0x194081(0x6e2)][_0x194081(0xbc4)](_0x42e036);if(this[_0x194081(0xb35)])this[_0x194081(0xb35)][_0x194081(0xbc4)](_0x31e7d3);}else this[_0x194081(0x913)]=_0x1413fd;}else{if(_0x194081(0x39c)!=='eEYIN'){_0x142278(_0x194081(0x25b)),_0x3c3b24[_0x194081(0x824)]();return;}else this[_0x194081(0xace)]=_0x1413fd;}},VisuMZ['BattleCore']['Scene_Battle_createCancelButton']=Scene_Battle['prototype'][_0x3823ba(0x4ee)],Scene_Battle['prototype'][_0x3823ba(0x4ee)]=function(){const _0x3c0733=_0x3823ba;VisuMZ[_0x3c0733(0x4f3)][_0x3c0733(0x3a0)][_0x3c0733(0x162)](this),this['battleLayoutStyle']()===_0x3c0733(0x43a)&&this[_0x3c0733(0x349)]();},Scene_Battle[_0x3823ba(0x8d6)][_0x3823ba(0x4c6)]=function(_0x416c43){const _0x260d48=_0x3823ba;_0x416c43?(this['_windowLayer']['x']=(Graphics[_0x260d48(0x204)]-Graphics['boxWidth'])/0x2,this[_0x260d48(0x837)]['y']=(Graphics['height']-Graphics[_0x260d48(0x53c)])/0x2):(this['_windowLayer']['x']=Graphics['width']*0xa,this[_0x260d48(0x837)]['y']=Graphics[_0x260d48(0xd6d)]*0xa);},VisuMZ[_0x3823ba(0x4f3)]['Scene_Battle_selectNextCommand']=Scene_Battle[_0x3823ba(0x8d6)][_0x3823ba(0x2d5)],Scene_Battle[_0x3823ba(0x8d6)][_0x3823ba(0x2d5)]=function(){const _0x23153b=_0x3823ba,_0x49d4a1=BattleManager[_0x23153b(0x846)]();VisuMZ[_0x23153b(0x4f3)][_0x23153b(0xc98)]['call'](this);if(_0x49d4a1){if(_0x23153b(0x90c)!==_0x23153b(0x3ec)){if(_0x49d4a1===BattleManager['actor']())return;if(_0x49d4a1===BattleManager[_0x23153b(0x527)])return;if(_0x49d4a1[_0x23153b(0x798)]())_0x49d4a1[_0x23153b(0x798)]()[_0x23153b(0xaa4)]();}else{if(this['_growDuration']<=0x0)return;if(!this[_0x23153b(0xc5c)])return;const _0xe93b67=this['_growDuration'],_0x3a5dd6=this[_0x23153b(0x429)],_0x3b7073=this[_0x23153b(0xcdc)];_0x49331b[_0x23153b(0x32f)]?(this[_0x23153b(0x9dd)]=this[_0x23153b(0x877)](this['_growX'],this[_0x23153b(0x902)],_0xe93b67,_0x3a5dd6,_0x3b7073),this[_0x23153b(0x97b)]=this[_0x23153b(0x877)](this[_0x23153b(0x97b)],this[_0x23153b(0x879)],_0xe93b67,_0x3a5dd6,_0x3b7073)):(this['_growX']=(this['_growX']*(_0xe93b67-0x1)+this[_0x23153b(0x902)])/_0xe93b67,this[_0x23153b(0x97b)]=(this[_0x23153b(0x97b)]*(_0xe93b67-0x1)+this[_0x23153b(0x879)])/_0xe93b67);this[_0x23153b(0x448)]--;if(this[_0x23153b(0x448)]<=0x0)this[_0x23153b(0x96a)]();}}},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0xaa8)]=Scene_Battle[_0x3823ba(0x8d6)][_0x3823ba(0x170)],Scene_Battle['prototype'][_0x3823ba(0x170)]=function(){const _0x1e0b99=_0x3823ba,_0x382afc=BattleManager[_0x1e0b99(0x846)]();if(_0x382afc&&_0x382afc[_0x1e0b99(0x798)])_0x382afc[_0x1e0b99(0x798)]()[_0x1e0b99(0xaa4)]();VisuMZ[_0x1e0b99(0x4f3)][_0x1e0b99(0xaa8)][_0x1e0b99(0x162)](this);},VisuMZ['BattleCore'][_0x3823ba(0x6f6)]=Scene_Battle[_0x3823ba(0x8d6)][_0x3823ba(0x3b3)],Scene_Battle[_0x3823ba(0x8d6)][_0x3823ba(0x3b3)]=function(){const _0x1e1fb0=_0x3823ba;if(VisuMZ['BattleCore'][_0x1e1fb0(0x242)][_0x1e1fb0(0xa26)]['BattleLogRectJS'])return VisuMZ['BattleCore'][_0x1e1fb0(0x242)][_0x1e1fb0(0xa26)][_0x1e1fb0(0x685)][_0x1e1fb0(0x162)](this);return VisuMZ[_0x1e1fb0(0x4f3)][_0x1e1fb0(0x6f6)][_0x1e1fb0(0x162)](this);},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x82d)]=Scene_Battle['prototype'][_0x3823ba(0x5f4)],Scene_Battle[_0x3823ba(0x8d6)][_0x3823ba(0x5f4)]=function(){const _0x353c17=_0x3823ba;VisuMZ[_0x353c17(0x4f3)][_0x353c17(0x82d)][_0x353c17(0x162)](this),this[_0x353c17(0x2d9)]();},Scene_Battle[_0x3823ba(0x8d6)]['createPartyCommandWindowBattleCore']=function(){const _0x184494=_0x3823ba,_0x48c2a6=this[_0x184494(0x43f)];_0x48c2a6[_0x184494(0x9f6)]('autoBattle',this[_0x184494(0x518)][_0x184494(0x343)](this)),_0x48c2a6['setHandler'](_0x184494(0xb16),this[_0x184494(0x4f5)][_0x184494(0x343)](this));const _0xdce337=this[_0x184494(0xa73)]();switch(_0xdce337){case'xp':case _0x184494(0x9e6):return this[_0x184494(0x43f)][_0x184494(0x5a8)](0x1);break;}},Scene_Battle['prototype']['commandAutoBattle']=function(){const _0x48b774=_0x3823ba;BattleManager[_0x48b774(0x670)]=!![],$gameParty[_0x48b774(0x8f2)](),this[_0x48b774(0x2d5)](),BattleManager[_0x48b774(0xac0)]()&&(BattleManager['_inputting']=![]);},Scene_Battle['prototype']['commandOptions']=function(){const _0x27b7a7=_0x3823ba;this[_0x27b7a7(0x8c5)]()?(this[_0x27b7a7(0xb68)]=!![],this['_logWindow'][_0x27b7a7(0x3d9)](_0x27b7a7(0xc47),VisuMZ[_0x27b7a7(0x4f3)][_0x27b7a7(0x242)][_0x27b7a7(0x4e2)][_0x27b7a7(0x8e5)])):this['callOptions']();},Scene_Battle['prototype'][_0x3823ba(0x8c5)]=function(){const _0x5acdb0=_0x3823ba;return BattleManager[_0x5acdb0(0x973)]();},Scene_Battle['prototype'][_0x3823ba(0x6d8)]=function(){const _0x5b8066=_0x3823ba;this[_0x5b8066(0xb68)]=![],this[_0x5b8066(0x8a5)]['update'](),this[_0x5b8066(0x837)][_0x5b8066(0x425)]=![];if(BattleManager[_0x5b8066(0x3e2)]()){if('xYzQW'===_0x5b8066(0x753)){const _0x2af0b9=this[_0x5b8066(0xbca)](_0x1b827c);if(_0x2af0b9[_0x5b8066(0xd57)](/\\I\[(\d+)\]/i)){const _0x37939b=this['itemLineRect'](_0x1c2762),_0x530aca=this[_0x5b8066(0x699)](_0x2af0b9)['width'];return _0x530aca<=_0x37939b[_0x5b8066(0x204)]?_0x5b8066(0x386):'icon';}}else($dataSystem[_0x5b8066(0x997)]||$dataSystem[_0x5b8066(0x866)])&&(_0x5b8066(0x3fd)==='GwAfM'?SceneManager[_0x5b8066(0x881)]():this[_0x5b8066(0xb90)](_0x5b8066(0x733)));}else($gameMap[_0x5b8066(0x997)]()||$gameMap[_0x5b8066(0x866)]())&&SceneManager[_0x5b8066(0x881)]();SceneManager[_0x5b8066(0x3d9)](Scene_Options);if(BattleManager[_0x5b8066(0xac0)]()){if(_0x5b8066(0xd3a)===_0x5b8066(0x4fd)){const _0x2d122d=this[_0x5b8066(0x5c9)](this[_0x5b8066(0xb0f)]());let _0x2c486a=this['commandName'](this[_0x5b8066(0xb0f)]());_0x2c486a=_0x2c486a[_0x5b8066(0x7fc)](/\\I\[(\d+)\]/gi,''),_0x256634[_0x5b8066(0x54d)](),this[_0x5b8066(0x7c9)](_0x2c486a,_0x2d122d),this[_0x5b8066(0xb36)](_0x2c486a,_0x2d122d),this[_0x5b8066(0x426)](_0x2c486a,_0x2d122d);}else BattleManager[_0x5b8066(0x5d5)]=BattleManager[_0x5b8066(0x846)]();}},VisuMZ[_0x3823ba(0x4f3)]['Scene_Battle_updateBattleProcess']=Scene_Battle['prototype']['updateBattleProcess'],Scene_Battle[_0x3823ba(0x8d6)][_0x3823ba(0x1f4)]=function(){const _0x5f1cef=_0x3823ba;VisuMZ[_0x5f1cef(0x4f3)][_0x5f1cef(0x241)][_0x5f1cef(0x162)](this);if(this[_0x5f1cef(0xb68)]&&!BattleManager['_subject'])this[_0x5f1cef(0x6d8)]();},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0xa9c)]=Scene_Battle['prototype'][_0x3823ba(0x456)],Scene_Battle[_0x3823ba(0x8d6)][_0x3823ba(0x456)]=function(){const _0x3eec05=_0x3823ba;VisuMZ[_0x3eec05(0x4f3)][_0x3eec05(0xa9c)][_0x3eec05(0x162)](this),this['updateOnceParallelInterpreters']();},Scene_Battle[_0x3823ba(0x8d6)][_0x3823ba(0x4b9)]=function(){const _0x2b025d=_0x3823ba,_0x5ae796=this['autoBattleWindowRect']();this[_0x2b025d(0xc63)]=new Window_AutoBattleCancel(_0x5ae796),this[_0x2b025d(0xc63)]['hide'](),this[_0x2b025d(0x538)](this[_0x2b025d(0xc63)]);},Scene_Battle['prototype'][_0x3823ba(0x5d3)]=function(){const _0x238d48=_0x3823ba;return VisuMZ[_0x238d48(0x4f3)]['Settings'][_0x238d48(0x9d8)]['AutoBattleRect'][_0x238d48(0x162)](this);},Scene_Battle[_0x3823ba(0x8d6)][_0x3823ba(0x2da)]=function(){this['_onceParallelInterpreters']=[];},Scene_Battle[_0x3823ba(0x8d6)][_0x3823ba(0xa61)]=function(){const _0x9e6201=_0x3823ba;if(!this[_0x9e6201(0x845)])return;for(const _0x15ccb5 of this[_0x9e6201(0x845)]){_0x15ccb5&&(_0x9e6201(0xd22)!==_0x9e6201(0x6aa)?_0x15ccb5[_0x9e6201(0x456)]():(this[_0x9e6201(0x227)](),this[_0x9e6201(0xca4)]=![],_0x5c6bd6[_0x9e6201(0x5db)]()));}},Scene_Battle[_0x3823ba(0x8d6)][_0x3823ba(0x16e)]=function(_0x55b95d){const _0x33c5f8=_0x3823ba,_0x44dc25=$dataCommonEvents[_0x55b95d];if(!_0x44dc25)return;const _0x59f7fa=new Game_BattleOnceParallelInterpreter();this[_0x33c5f8(0x631)](_0x59f7fa),_0x59f7fa[_0x33c5f8(0xb9e)](_0x55b95d);},Scene_Battle['prototype'][_0x3823ba(0x631)]=function(_0xced213){const _0x2f3854=_0x3823ba;this[_0x2f3854(0x845)]=this[_0x2f3854(0x845)]||[],this[_0x2f3854(0x845)]['push'](_0xced213);},Scene_Battle[_0x3823ba(0x8d6)][_0x3823ba(0x2f6)]=function(_0x407ddc){const _0x4fe69a=_0x3823ba;this[_0x4fe69a(0x845)]=this[_0x4fe69a(0x845)]||[],this[_0x4fe69a(0x845)][_0x4fe69a(0xbc4)](_0x407ddc);},Game_Troop[_0x3823ba(0x8d6)]['onBattleStartOnceParallels']=function(){const _0x36ccaa=_0x3823ba;for(const _0x3620cf of this[_0x36ccaa(0x7a0)]()[_0x36ccaa(0x748)]){if(!this[_0x36ccaa(0x436)](_0x3620cf))continue;SceneManager['_scene'][_0x36ccaa(0xb28)](_0x3620cf);}},Game_Troop[_0x3823ba(0x8d6)][_0x3823ba(0x436)]=function(_0x1d0d61){const _0x36c038=_0x3823ba;if(!_0x1d0d61)return;for(const _0x4db56b of _0x1d0d61[_0x36c038(0x934)]){if([0x6c,0x198][_0x36c038(0x97e)](_0x4db56b[_0x36c038(0xcad)])){if('DgBvn'!==_0x36c038(0xc50)){const _0x227fa4=_0x29f989(_0x308340['$1'])[_0x36c038(0x22f)](/[\r\n]+/)[_0x36c038(0x4d0)](_0x2f87dc=>_0x89eef9(_0x2f87dc)[_0x36c038(0x2d8)]()[_0x36c038(0xaf4)]());_0x5cb1d2=_0x38db1f[_0x36c038(0x145)](_0x227fa4);!_0x4f33c9['note']['match'](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x5cd920['note']+=_0x36c038(0x7e9));;}else{const _0xad4809=_0x4db56b[_0x36c038(0xd66)][0x0];if(_0xad4809[_0x36c038(0xd57)](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}}}return![];},Scene_Battle[_0x3823ba(0x8d6)][_0x3823ba(0xb28)]=function(_0x332ee1){const _0x4bdba2=_0x3823ba;if(!_0x332ee1)return;const _0x3465da=new Game_BattleOnceParallelInterpreter();this[_0x4bdba2(0x631)](_0x3465da),_0x3465da[_0x4bdba2(0xd85)](_0x332ee1);};function Game_BattleOnceParallelInterpreter(){const _0x80d2ad=_0x3823ba;this[_0x80d2ad(0xc06)](...arguments);}Game_BattleOnceParallelInterpreter[_0x3823ba(0x8d6)]=Object[_0x3823ba(0x312)](Game_Interpreter[_0x3823ba(0x8d6)]),Game_BattleOnceParallelInterpreter[_0x3823ba(0x8d6)][_0x3823ba(0x786)]=Game_BattleOnceParallelInterpreter,Game_BattleOnceParallelInterpreter[_0x3823ba(0x8d6)][_0x3823ba(0xb9e)]=function(_0x3134dd){const _0x2ef8f9=_0x3823ba,_0x498220=$dataCommonEvents[_0x3134dd];if(_0x498220){if(_0x2ef8f9(0x21b)==='glJob')this[_0x2ef8f9(0xa63)](_0x498220[_0x2ef8f9(0x934)],0x0);else return this[_0x2ef8f9(0xd0f)]()&&this['currentAction']()[_0x2ef8f9(0x733)]()&&!this['currentAction']()['isMagical']();}else this[_0x2ef8f9(0x127)]();},Game_BattleOnceParallelInterpreter[_0x3823ba(0x8d6)]['terminate']=function(){const _0x392f9a=_0x3823ba;if(!SceneManager[_0x392f9a(0xbc6)]())return;SceneManager[_0x392f9a(0xaa3)][_0x392f9a(0x2f6)](this),Game_Interpreter['prototype']['terminate'][_0x392f9a(0x162)](this);},Game_BattleOnceParallelInterpreter[_0x3823ba(0x8d6)][_0x3823ba(0xd85)]=function(_0x25b5c2){const _0xb99868=_0x3823ba;_0x25b5c2?_0xb99868(0xcce)===_0xb99868(0x5e0)?(_0x20ec8e[_0xb99868(0x4f3)][_0xb99868(0x135)][_0xb99868(0x162)](this),this[_0xb99868(0xbe6)]=[]):this[_0xb99868(0xa63)](_0x25b5c2['list'],0x0):'mvmfc'==='mvmfc'?this[_0xb99868(0x127)]():_0x3412de['BattleCore']['Settings']['Actor']['HomePosJS'][_0xb99868(0x162)](this,_0x4e44dd);},Scene_Battle['prototype'][_0x3823ba(0x6cd)]=function(){const _0xb5c6de=_0x3823ba;return VisuMZ[_0xb5c6de(0x4f3)][_0xb5c6de(0x242)][_0xb5c6de(0x4e2)][_0xb5c6de(0x707)];},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x1c3)]=Scene_Battle['prototype'][_0x3823ba(0xad7)],Scene_Battle[_0x3823ba(0x8d6)][_0x3823ba(0xad7)]=function(){const _0x3b4f58=_0x3823ba;this['isPartyCommandWindowDisabled']()?this[_0x3b4f58(0xa4b)]():VisuMZ[_0x3b4f58(0x4f3)][_0x3b4f58(0x1c3)][_0x3b4f58(0x162)](this);},Scene_Battle['prototype'][_0x3823ba(0xa4b)]=function(){const _0x51df32=_0x3823ba;if(BattleManager['isDTB']()){if(_0x51df32(0xb93)===_0x51df32(0x522)){if(_0x2f49d2[_0x51df32(0x1e4)][_0x51df32(0xd18)]<1.12){let _0x3e2fbb='';_0x3e2fbb+=_0x51df32(0xa78),_0x3e2fbb+=_0x51df32(0x251),_0x3e2fbb+='with\x20latest\x20version\x20of\x20VisuMZ_1_BattleCore!',_0x4a7c89(_0x3e2fbb),_0x4021b8[_0x51df32(0x824)]();}}else this[_0x51df32(0x2d5)]();}else BattleManager['isTpb']()&&VisuMZ['BattleCore'][_0x51df32(0x1c3)][_0x51df32(0x162)](this);},VisuMZ['BattleCore'][_0x3823ba(0x8b8)]=Scene_Battle[_0x3823ba(0x8d6)][_0x3823ba(0xb10)],Scene_Battle[_0x3823ba(0x8d6)][_0x3823ba(0xb10)]=function(){const _0x1aaf06=_0x3823ba;if(BattleManager['isTpb']()){if(_0x1aaf06(0x59d)===_0x1aaf06(0x59d))this[_0x1aaf06(0x6ac)](),this['startActorCommandSelection']();else{const _0x262df8=_0x319126(_0x2f6997['$1'])[_0x1aaf06(0x22f)](/[\r\n]+/)[_0x1aaf06(0xbc4)]('');_0xb9d1fc[_0x1aaf06(0x2a3)]=_0x6a0d87['processRandomizedData'](_0x262df8);}}else{if(_0x1aaf06(0x4a8)!==_0x1aaf06(0x86d))VisuMZ[_0x1aaf06(0x4f3)][_0x1aaf06(0x8b8)][_0x1aaf06(0x162)](this);else{const _0x39c0bc=_0x216689[_0x1aaf06(0x4f3)][_0x1aaf06(0x242)][_0x1aaf06(0x179)];if(_0x39c0bc[_0x1aaf06(0x6f7)]&&!_0x39c0bc['NameLegacy']){this[_0x1aaf06(0xa14)]['opacity']=0x0;return;}this[_0x1aaf06(0xa14)]['x']=0x0,this[_0x1aaf06(0xa14)]['x']+=this[_0x1aaf06(0x6b7)][_0x1aaf06(0x89d)]();let _0x36481a=0x1;if(this[_0x1aaf06(0x850)])_0x36481a=this[_0x1aaf06(0x850)][_0x1aaf06(0xd6d)];this[_0x1aaf06(0xa14)]['y']=-_0x36481a-this[_0x1aaf06(0xa14)]['height']-0x4,this['_stateIconSprite']['y']+=this['_battler'][_0x1aaf06(0x44f)](),this[_0x1aaf06(0xa14)][_0x1aaf06(0x6cc)]['x']=0x1/(this[_0x1aaf06(0x6cc)]['x']||0.001),this['_stateIconSprite'][_0x1aaf06(0x6cc)]['y']=0x1/(this[_0x1aaf06(0x6cc)]['y']||0.001),this[_0x1aaf06(0x366)]()&&(this[_0x1aaf06(0x396)][_0x1aaf06(0x317)][_0x1aaf06(0x6cc)]['x']=-0x1/(this[_0x1aaf06(0x6cc)]['x']||0.001),this['_svBattlerSprite'][_0x1aaf06(0x317)][_0x1aaf06(0x6cc)]['y']=0x1/(this['scale']['y']||0.001));}}},Scene_Battle[_0x3823ba(0x8d6)][_0x3823ba(0x6ac)]=function(){const _0x1f8175=_0x3823ba;if(!VisuMZ[_0x1f8175(0x4f3)]['TpbActiveChangeEnabled'])return;if(Imported['VisuMZ_2_BattleSystemCTB']&&BattleManager[_0x1f8175(0x897)]())return;const _0x1a0d52=$gameParty[_0x1f8175(0xd31)]()[_0x1f8175(0x3a2)](_0xf3d5e7=>_0xf3d5e7[_0x1f8175(0x23c)]()&&_0xf3d5e7['canInput']());BattleManager['_currentActor']=_0x1a0d52[0x0]||null,BattleManager['_currentActor']&&BattleManager['_currentActor'][_0x1f8175(0xcca)](_0x1f8175(0xa3a));},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0xd1d)]=Scene_Battle[_0x3823ba(0x8d6)]['commandEscape'],Scene_Battle[_0x3823ba(0x8d6)]['commandEscape']=function(){const _0x2d366d=_0x3823ba;VisuMZ[_0x2d366d(0x4f3)][_0x2d366d(0xd1d)]['call'](this);if(!BattleManager[_0x2d366d(0xac0)]())BattleManager[_0x2d366d(0x1ae)]=null;},VisuMZ['BattleCore']['Scene_Battle_createActorCommandWindow']=Scene_Battle['prototype'][_0x3823ba(0x674)],Scene_Battle['prototype'][_0x3823ba(0x674)]=function(){const _0x36cd69=_0x3823ba;VisuMZ[_0x36cd69(0x4f3)][_0x36cd69(0x23d)]['call'](this),this[_0x36cd69(0x382)]();},Scene_Battle['prototype']['createActorCommandWindowBattleCore']=function(){const _0x32f5dc=_0x3823ba,_0x4df968=this['_actorCommandWindow'];_0x4df968['setHandler']('escape',this[_0x32f5dc(0xaa1)]['bind'](this)),_0x4df968[_0x32f5dc(0x9f6)](_0x32f5dc(0xbf5),this[_0x32f5dc(0x75b)][_0x32f5dc(0x343)](this)),_0x4df968[_0x32f5dc(0x9f6)](_0x32f5dc(0x609),this['actorCommandSingleSkill'][_0x32f5dc(0x343)](this));if(BattleManager[_0x32f5dc(0xac0)]()){if(this[_0x32f5dc(0x6cd)]())delete _0x4df968[_0x32f5dc(0x431)]['cancel'];else{if('IyHGO'!==_0x32f5dc(0x91a))_0x4df968[_0x32f5dc(0x9f6)](_0x32f5dc(0x5d2),this['actorCommandCancelTPB'][_0x32f5dc(0x343)](this));else{const _0x582294=this[_0x32f5dc(0xcc0)]();_0x4cdaf2=_0x582294[_0x30e910]?_0x582294[_0x3514ee][_0x32f5dc(0x1af)]:0x0;}}}},Scene_Battle[_0x3823ba(0x8d6)][_0x3823ba(0xaa1)]=function(){const _0x7ba46b=_0x3823ba;this[_0x7ba46b(0xbde)]();},Scene_Battle[_0x3823ba(0x8d6)][_0x3823ba(0x75b)]=function(){const _0x1d822a=_0x3823ba;BattleManager[_0x1d822a(0x846)]()[_0x1d822a(0x200)](),BattleManager['finishActorInput'](),BattleManager['selectNextActor'](),this['changeInputWindow']();},Scene_Battle[_0x3823ba(0x8d6)]['actorCommandSingleSkill']=function(){const _0x2b21f9=_0x3823ba,_0x275114=BattleManager['inputtingAction'](),_0x5c072e=this[_0x2b21f9(0x55b)][_0x2b21f9(0xa1a)]();_0x275114['setSkill'](_0x5c072e),BattleManager[_0x2b21f9(0x846)]()[_0x2b21f9(0x4b5)]($dataSkills[_0x5c072e]),this['onSelectAction']();},Scene_Battle['prototype'][_0x3823ba(0x6eb)]=function(){const _0x1c26c2=_0x3823ba;this['tpbActorSwitchConditionsMet']()?this[_0x1c26c2(0x325)]():_0x1c26c2(0xab5)===_0x1c26c2(0x444)?(_0x365f34[_0x1c26c2(0x4f3)]['Spriteset_Battle_createBattleField'][_0x1c26c2(0x162)](this),this[_0x1c26c2(0x2ae)]()):this[_0x1c26c2(0x311)]();},VisuMZ['BattleCore']['TpbActiveChangeEnabled']=![],Scene_Battle[_0x3823ba(0x8d6)][_0x3823ba(0x4f4)]=function(){const _0x5b75d4=_0x3823ba;if(Imported['VisuMZ_2_BattleSystemCTB']&&BattleManager['isCTB']())return![];else{if(!VisuMZ[_0x5b75d4(0x4f3)][_0x5b75d4(0x72b)])return![];const _0x52024f=$gameParty[_0x5b75d4(0xd31)]()['filter'](_0x555b41=>_0x555b41[_0x5b75d4(0x23c)]()&&_0x555b41[_0x5b75d4(0x9c3)]());return _0x52024f[_0x5b75d4(0xb23)]>0x0&&BattleManager['actor']()!==_0x52024f[_0x52024f[_0x5b75d4(0xb23)]-0x1];}},Scene_Battle['prototype']['performTpbActiveCheckSwitch']=function(){const _0x54d310=_0x3823ba,_0x420142=BattleManager[_0x54d310(0x846)](),_0x2e081b=_0x420142[_0x54d310(0x798)]();if(_0x2e081b)_0x2e081b[_0x54d310(0xaa4)]();const _0x49dea5=$gameParty[_0x54d310(0xd31)]()[_0x54d310(0x3a2)](_0x49affc=>_0x49affc['isTpbCharged']()&&_0x49affc[_0x54d310(0x9c3)]()),_0x2595e5=_0x49dea5[_0x54d310(0x122)](_0x420142),_0x31ad5a=_0x49dea5[_0x2595e5+0x1];BattleManager['_currentActor']=_0x31ad5a||null;if(_0x31ad5a)_0x31ad5a['setActionState'](_0x54d310(0xa3a));_0x420142['setActionState'](_0x54d310(0xd27)),this[_0x54d310(0x1bb)]();},Scene_Battle[_0x3823ba(0x8d6)]['processActorCommandCancelTPB']=function(){const _0x273496=_0x3823ba;this[_0x273496(0x43f)][_0x273496(0xa63)](),this[_0x273496(0x55b)][_0x273496(0x35e)]();if(!VisuMZ[_0x273496(0x4f3)][_0x273496(0x72b)])return;if(Imported[_0x273496(0x594)]&&BattleManager['isCTB']())return;if(BattleManager[_0x273496(0x1ae)]){BattleManager[_0x273496(0x1ae)][_0x273496(0xcca)](_0x273496(0xd27));const _0x14909e=BattleManager[_0x273496(0x1ae)][_0x273496(0x798)]();if(_0x14909e)_0x14909e[_0x273496(0xaa4)]();}BattleManager[_0x273496(0x1ae)]=null;},VisuMZ['BattleCore'][_0x3823ba(0x546)]=Scene_Battle[_0x3823ba(0x8d6)][_0x3823ba(0x8ab)],Scene_Battle['prototype'][_0x3823ba(0x8ab)]=function(){const _0x2669b4=_0x3823ba;VisuMZ['BattleCore'][_0x2669b4(0x546)][_0x2669b4(0x162)](this),this[_0x2669b4(0x71b)]();},Scene_Battle['prototype'][_0x3823ba(0x71b)]=function(){const _0x556382=_0x3823ba;this['_actorCommandWindow'][_0x556382(0x6ca)](this[_0x556382(0xd00)]),this[_0x556382(0x43f)][_0x556382(0x6ca)](this[_0x556382(0xd00)]);},Scene_Battle[_0x3823ba(0x8d6)][_0x3823ba(0xa73)]=function(){const _0x557088=_0x3823ba;if($gameTemp[_0x557088(0xb78)]!==undefined)return $gameTemp[_0x557088(0xb78)];if(this[_0x557088(0x9eb)]){if(_0x557088(0x63b)!==_0x557088(0xb87))return this[_0x557088(0x9eb)];else _0x55cb2b[_0x557088(0x1ae)]['setActionState']('inputting');}return this[_0x557088(0x9eb)]=VisuMZ[_0x557088(0x4f3)][_0x557088(0x242)][_0x557088(0x735)]['Style'][_0x557088(0x8cf)]()['trim'](),this[_0x557088(0x9eb)]===_0x557088(0x269)&&!Imported[_0x557088(0x318)]&&(this['_battleLayoutStyle']='default'),this[_0x557088(0x9eb)]==='frontview_ui'&&!Imported[_0x557088(0xd99)]&&(this[_0x557088(0x9eb)]=_0x557088(0x4d8)),this['_battleLayoutStyle'];},VisuMZ['BattleCore'][_0x3823ba(0x9ec)]=Scene_Battle[_0x3823ba(0x8d6)][_0x3823ba(0x21d)],Scene_Battle[_0x3823ba(0x8d6)][_0x3823ba(0x21d)]=function(){const _0x5217fb=_0x3823ba,_0x18aef4=this[_0x5217fb(0xa73)]();switch(_0x18aef4){case _0x5217fb(0x934):return this[_0x5217fb(0x720)](Math[_0x5217fb(0xd19)](0x1,$gameParty[_0x5217fb(0x1cb)]()),!![]);break;default:return VisuMZ[_0x5217fb(0x4f3)]['Scene_Battle_windowAreaHeight'][_0x5217fb(0x162)](this);break;}},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x94f)]=Scene_Battle[_0x3823ba(0x8d6)][_0x3823ba(0x661)],Scene_Battle[_0x3823ba(0x8d6)][_0x3823ba(0x661)]=function(){const _0x637629=_0x3823ba,_0x615e5a=this['battleLayoutStyle']();switch(_0x615e5a){case _0x637629(0x43a):return this[_0x637629(0x6c7)]();break;case _0x637629(0x4d8):case _0x637629(0x934):case'xp':case _0x637629(0x9e6):default:return VisuMZ[_0x637629(0x4f3)][_0x637629(0x94f)][_0x637629(0x162)](this);break;}},Scene_Battle[_0x3823ba(0x8d6)][_0x3823ba(0x88d)]=function(){const _0x262e59=_0x3823ba,_0x3fda06=this['battleLayoutStyle']();switch(_0x3fda06){case'xp':case _0x262e59(0x9e6):return this[_0x262e59(0x54b)]();break;case'border':return this['statusWindowRectBorderStyle']();break;case _0x262e59(0x4d8):case _0x262e59(0x934):default:return this[_0x262e59(0x471)]();break;}},VisuMZ['BattleCore']['Scene_Battle_partyCommandWindowRect']=Scene_Battle['prototype'][_0x3823ba(0x7b5)],Scene_Battle[_0x3823ba(0x8d6)][_0x3823ba(0x7b5)]=function(){const _0x2e1d3c=_0x3823ba,_0x53c4b9=this[_0x2e1d3c(0xa73)]();switch(_0x53c4b9){case'xp':case'portrait':return this[_0x2e1d3c(0x9bc)]();break;case'border':return this['partyCommandWindowRectBorderStyle']();case _0x2e1d3c(0x4d8):case _0x2e1d3c(0x934):default:return this['partyCommandWindowRectDefaultStyle']();break;}},Scene_Battle[_0x3823ba(0x8d6)]['partyCommandWindowRectDefaultStyle']=function(){const _0xfb5621=_0x3823ba,_0x25b779=VisuMZ[_0xfb5621(0x4f3)]['Settings'][_0xfb5621(0x735)],_0x394697=_0x25b779[_0xfb5621(0x4c0)]||0xc0,_0x2e116d=this[_0xfb5621(0x21d)](),_0xbdd896=this[_0xfb5621(0x361)]()?Graphics['boxWidth']-_0x394697:0x0,_0x54521e=Graphics[_0xfb5621(0x53c)]-_0x2e116d;return new Rectangle(_0xbdd896,_0x54521e,_0x394697,_0x2e116d);},Scene_Battle[_0x3823ba(0x8d6)][_0x3823ba(0x4e1)]=function(){const _0x5075d3=_0x3823ba;return this[_0x5075d3(0x7b5)]();},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0xbb9)]=Scene_Battle[_0x3823ba(0x8d6)][_0x3823ba(0xbd9)],Scene_Battle[_0x3823ba(0x8d6)][_0x3823ba(0xbd9)]=function(){const _0x4235b9=_0x3823ba,_0x27a30a=this[_0x4235b9(0xa73)]();switch(_0x27a30a){case'xp':case _0x4235b9(0x9e6):case'border':break;case'default':case _0x4235b9(0x934):default:VisuMZ[_0x4235b9(0x4f3)][_0x4235b9(0xbb9)]['call'](this);break;}},VisuMZ[_0x3823ba(0x4f3)]['Scene_Battle_startActorSelection']=Scene_Battle[_0x3823ba(0x8d6)]['startActorSelection'],Scene_Battle[_0x3823ba(0x8d6)]['startActorSelection']=function(){const _0x256a4a=_0x3823ba;VisuMZ[_0x256a4a(0x4f3)]['Scene_Battle_startActorSelection']['call'](this),this['makeTargetSelectionMoreVisible']();},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x42e)]=Scene_Battle[_0x3823ba(0x8d6)]['startEnemySelection'],Scene_Battle['prototype'][_0x3823ba(0xd67)]=function(){const _0x16cdec=_0x3823ba;VisuMZ[_0x16cdec(0x4f3)][_0x16cdec(0x42e)][_0x16cdec(0x162)](this),this[_0x16cdec(0x67c)][_0x16cdec(0x371)](),this['makeTargetSelectionMoreVisible']();},Scene_Battle[_0x3823ba(0x8d6)][_0x3823ba(0x8ee)]=function(){const _0x52f4e5=_0x3823ba,_0x330502=this[_0x52f4e5(0xa73)]();['xp','portrait','border']['includes'](_0x330502)&&this[_0x52f4e5(0x55b)]['close'](),(_0x330502===_0x52f4e5(0x43a)||this[_0x52f4e5(0x6bd)]())&&(this[_0x52f4e5(0x35c)]['close'](),this[_0x52f4e5(0x35b)][_0x52f4e5(0x35e)]());},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x919)]=Scene_Battle[_0x3823ba(0x8d6)][_0x3823ba(0x2c1)],Scene_Battle[_0x3823ba(0x8d6)][_0x3823ba(0x2c1)]=function(){const _0x4eeaef=_0x3823ba;VisuMZ[_0x4eeaef(0x4f3)][_0x4eeaef(0x919)]['call'](this),this['okTargetSelectionVisibility']();},Scene_Battle[_0x3823ba(0x8d6)][_0x3823ba(0x2c6)]=function(){const _0x1e2531=_0x3823ba;return[_0x1e2531(0x484),_0x1e2531(0xb56),'singleSkill']['includes'](this[_0x1e2531(0x55b)][_0x1e2531(0x5f5)]());},VisuMZ[_0x3823ba(0x4f3)]['Scene_Battle_onActorCancel']=Scene_Battle[_0x3823ba(0x8d6)][_0x3823ba(0x240)],Scene_Battle['prototype'][_0x3823ba(0x240)]=function(){const _0x38fe83=_0x3823ba;this[_0x38fe83(0x2c6)]()?(this[_0x38fe83(0x264)][_0x38fe83(0x39d)](),this[_0x38fe83(0x5f2)][_0x38fe83(0x423)](),this[_0x38fe83(0x55b)]['activate']()):VisuMZ[_0x38fe83(0x4f3)][_0x38fe83(0x1f6)][_0x38fe83(0x162)](this),this[_0x38fe83(0x923)]();},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x581)]=Scene_Battle[_0x3823ba(0x8d6)][_0x3823ba(0xd02)],Scene_Battle[_0x3823ba(0x8d6)][_0x3823ba(0xd02)]=function(){const _0x1a105f=_0x3823ba,_0x5e0399=BattleManager[_0x1a105f(0x841)]();_0x5e0399[_0x1a105f(0x7f2)](this[_0x1a105f(0x67c)][_0x1a105f(0x634)]()),this[_0x1a105f(0x67c)][_0x1a105f(0x982)](),VisuMZ[_0x1a105f(0x4f3)]['Scene_Battle_onEnemyOk'][_0x1a105f(0x162)](this),this[_0x1a105f(0x2e7)]();},VisuMZ['BattleCore'][_0x3823ba(0x4a4)]=Scene_Battle[_0x3823ba(0x8d6)][_0x3823ba(0xc7b)],Scene_Battle['prototype'][_0x3823ba(0xc7b)]=function(){const _0x3fdcdb=_0x3823ba;this[_0x3fdcdb(0x2c6)]()?(this[_0x3fdcdb(0x264)][_0x3fdcdb(0x39d)](),this[_0x3fdcdb(0x67c)][_0x3fdcdb(0x423)](),this[_0x3fdcdb(0x55b)]['activate']()):VisuMZ[_0x3fdcdb(0x4f3)][_0x3fdcdb(0x4a4)][_0x3fdcdb(0x162)](this),this[_0x3fdcdb(0x923)](),this[_0x3fdcdb(0x67c)][_0x3fdcdb(0x982)]();},Scene_Battle[_0x3823ba(0x8d6)]['okTargetSelectionVisibility']=function(){const _0x10304d=_0x3823ba,_0x15c426=this[_0x10304d(0xa73)]();if(_0x15c426===_0x10304d(0x43a)||this['isSkillItemWindowsMiddle']()){this[_0x10304d(0x35c)][_0x10304d(0x1b5)]();if(this[_0x10304d(0x35c)][_0x10304d(0xa4e)]){if('sbFkW'===_0x10304d(0xc92)){if(!_0x200657[_0x10304d(0x4f3)][_0x10304d(0x242)][_0x10304d(0xa26)][_0x10304d(0x745)])return;_0x5efde3['BattleCore'][_0x10304d(0xaf8)][_0x10304d(0x162)](this,_0x5ccd3d);}else this[_0x10304d(0x35c)][_0x10304d(0x39d)]();}this[_0x10304d(0x35b)]['open'](),this[_0x10304d(0x35b)][_0x10304d(0xa4e)]&&this['_itemWindow'][_0x10304d(0x39d)]();}},Scene_Battle[_0x3823ba(0x8d6)][_0x3823ba(0x923)]=function(){const _0x3c3906=_0x3823ba,_0x2d7045=this['battleLayoutStyle']();['xp',_0x3c3906(0x9e6),_0x3c3906(0x43a)][_0x3c3906(0x97e)](_0x2d7045)&&this['_actorCommandWindow'][_0x3c3906(0x1b5)](),this[_0x3c3906(0x2e7)]();},Scene_Battle[_0x3823ba(0x8d6)]['statusWindowRectDefaultStyle']=function(){const _0x2e8980=_0x3823ba,_0x41ccd7=VisuMZ[_0x2e8980(0x4f3)][_0x2e8980(0x242)][_0x2e8980(0x735)],_0x19f77a=Window_BattleStatus['prototype'][_0x2e8980(0xc91)](),_0x5b6ab5=Graphics[_0x2e8980(0xc13)]-(_0x41ccd7[_0x2e8980(0x4c0)]||0xc0),_0x4a6da6=this[_0x2e8980(0x21d)]()+_0x19f77a,_0x3b1ccb=this[_0x2e8980(0x361)]()?0x0:Graphics[_0x2e8980(0xc13)]-_0x5b6ab5,_0x291485=Graphics[_0x2e8980(0x53c)]-_0x4a6da6+_0x19f77a;return new Rectangle(_0x3b1ccb,_0x291485,_0x5b6ab5,_0x4a6da6);},Scene_Battle[_0x3823ba(0x8d6)][_0x3823ba(0x54b)]=function(){const _0x21b363=_0x3823ba,_0x5c95b8=Window_BattleStatus[_0x21b363(0x8d6)][_0x21b363(0xc91)](),_0x2a206d=Graphics[_0x21b363(0xc13)],_0x5ecb1f=this[_0x21b363(0x21d)]()+_0x5c95b8,_0x5bf6aa=0x0,_0x25241b=Graphics[_0x21b363(0x53c)]-_0x5ecb1f+_0x5c95b8;return new Rectangle(_0x5bf6aa,_0x25241b,_0x2a206d,_0x5ecb1f);},Scene_Battle[_0x3823ba(0x8d6)]['partyCommandWindowRectXPStyle']=function(){const _0x3de994=_0x3823ba,_0x3be197=Graphics['boxWidth']/0x2,_0x5f1e20=this[_0x3de994(0x720)](VisuMZ[_0x3de994(0x4f3)]['Settings'][_0x3de994(0x735)]['XPActorCommandLines'],!![]),_0x472488=Math[_0x3de994(0x282)]((Graphics['boxWidth']-_0x3be197)/0x2),_0x4a4aa8=Graphics[_0x3de994(0x53c)]-_0x5f1e20-this['statusWindowRectXPStyle']()[_0x3de994(0xd6d)];return new Rectangle(_0x472488,_0x4a4aa8,_0x3be197,_0x5f1e20);},Scene_Battle['prototype'][_0x3823ba(0x6c7)]=function(){const _0x51abc2=_0x3823ba,_0x1792ce=Graphics['width'],_0x51bb90=Math['round']((Graphics[_0x51abc2(0xc13)]-_0x1792ce)/0x2),_0x1b5ccb=this['helpAreaHeight'](),_0x48eefe=(Graphics['height']-Graphics[_0x51abc2(0x53c)])/-0x2;return new Rectangle(_0x51bb90,_0x48eefe,_0x1792ce,_0x1b5ccb);},Scene_Battle['prototype'][_0x3823ba(0xc9c)]=function(){const _0x447da5=_0x3823ba,_0x206289=Graphics[_0x447da5(0x204)],_0x3703ef=Math[_0x447da5(0x282)]((Graphics[_0x447da5(0xc13)]-_0x206289)/0x2),_0x2b0aea=this[_0x447da5(0x720)](0x4,!![]),_0x2bfa04=Graphics[_0x447da5(0x53c)]-_0x2b0aea+(Graphics[_0x447da5(0xd6d)]-Graphics[_0x447da5(0x53c)])/0x2;return new Rectangle(_0x3703ef,_0x2bfa04,_0x206289,_0x2b0aea);},Scene_Battle[_0x3823ba(0x8d6)]['partyCommandWindowRectBorderStyle']=function(){const _0x37b591=_0x3823ba,_0x264e8a=Math[_0x37b591(0x975)](Graphics[_0x37b591(0x204)]/0x3),_0x1b8ebd=this['isRightInputMode']()?(Graphics[_0x37b591(0x204)]+Graphics['boxWidth'])/0x2-_0x264e8a:(Graphics[_0x37b591(0x204)]-Graphics[_0x37b591(0xc13)])/-0x2,_0x5ea9f0=this['helpWindowRectBorderStyle'](),_0x399e93=_0x5ea9f0['y']+_0x5ea9f0[_0x37b591(0xd6d)],_0x595d76=this[_0x37b591(0xc9c)](),_0x399bdb=_0x595d76['y']-_0x399e93;return new Rectangle(_0x1b8ebd,_0x399e93,_0x264e8a,_0x399bdb);},Scene_Battle['prototype'][_0x3823ba(0xd04)]=function(){const _0x5731c6=_0x3823ba,_0x16ee79=Math['ceil'](Graphics[_0x5731c6(0x204)]/0x3),_0xf57553=Math[_0x5731c6(0x282)]((Graphics['boxWidth']-_0x16ee79)/0x2),_0x28aac9=this[_0x5731c6(0x60d)](),_0x3adb6=_0x28aac9['y'],_0x11112f=_0x28aac9['height'];return new Rectangle(_0xf57553,_0x3adb6,_0x16ee79,_0x11112f);},Scene_Battle['prototype'][_0x3823ba(0x349)]=function(){const _0x152fe9=_0x3823ba;this[_0x152fe9(0x9bd)]['y']=this[_0x152fe9(0xd00)]['y']+this[_0x152fe9(0xd00)]['height'];if(this[_0x152fe9(0x361)]()){if(this['battleLayoutStyle']()===_0x152fe9(0x43a))this[_0x152fe9(0x9bd)]['x']=0x8;else{if('QsWZU'!==_0x152fe9(0x10c))this[_0x152fe9(0x9bd)]['x']=-this[_0x152fe9(0x9bd)][_0x152fe9(0x204)]-0x4;else{_0x43c294[_0x152fe9(0x8d6)]['updateFrame']['call'](this);const _0x538ff3=this[_0x152fe9(0x7f9)]()||this;if(!_0x538ff3)return;!_0x538ff3[_0x152fe9(0x850)]&&(_0x538ff3[_0x152fe9(0x850)]=new _0x133965(this[_0x152fe9(0x204)]||0x1,this[_0x152fe9(0xd6d)]||0x1));if(this[_0x152fe9(0x715)]===_0x152fe9(0xbc5))this[_0x152fe9(0x1f8)][_0x152fe9(0x502)](0x0,0x0,this[_0x152fe9(0x1f8)][_0x152fe9(0x204)]||0x1,this['_effectDuration']);else{let _0xcc2ba5=0x1;if(_0x538ff3&&_0x538ff3['bitmap'])_0xcc2ba5=_0x538ff3[_0x152fe9(0x850)][_0x152fe9(0x204)];let _0x410dd3=0x1;if(this['bitmap'])_0x410dd3=this['bitmap']['height'];_0x538ff3[_0x152fe9(0x502)](0x0,0x0,_0xcc2ba5,_0x410dd3);}}}}else _0x152fe9(0x207)!==_0x152fe9(0x207)?_0x42c252[_0x152fe9(0x9fc)][_0x152fe9(0x50b)]=!![]:this['_cancelButton']['x']=Graphics[_0x152fe9(0x204)]-(Graphics[_0x152fe9(0x204)]-Graphics[_0x152fe9(0xc13)])/0x2-this[_0x152fe9(0x9bd)]['width']-0x4;},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x51c)]=Scene_Battle['prototype']['skillWindowRect'],Scene_Battle[_0x3823ba(0x8d6)]['skillWindowRect']=function(){const _0x4462ca=_0x3823ba;if(this['battleLayoutStyle']()==='border')return this['skillItemWindowRectBorderStyle']();else{if(this[_0x4462ca(0x6bd)]())return this[_0x4462ca(0x8c0)]();else{if(_0x4462ca(0xc65)!==_0x4462ca(0xc65))this[_0x4462ca(0x2e8)](_0x46f884[_0x4462ca(0x888)]()['motionIdle']||'walk');else return VisuMZ['BattleCore'][_0x4462ca(0x51c)]['call'](this);}}},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0xbce)]=Scene_Battle['prototype'][_0x3823ba(0x914)],Scene_Battle[_0x3823ba(0x8d6)][_0x3823ba(0x914)]=function(){const _0xd6a176=_0x3823ba;if(this[_0xd6a176(0xa73)]()==='border')return this['skillItemWindowRectBorderStyle']();else{if(this[_0xd6a176(0x6bd)]()){if(_0xd6a176(0xd49)===_0xd6a176(0xc74)){if(_0x2d7ab3===_0x1bedcb[_0xd6a176(0x846)]())return;if(_0x379306===_0x284cd4[_0xd6a176(0x527)])return;if(_0x38ad41[_0xd6a176(0x798)]())_0x1282f7[_0xd6a176(0x798)]()['stepBack']();}else return this['skillItemWindowRectMiddle']();}else return VisuMZ['BattleCore']['Scene_Battle_itemWindowRect'][_0xd6a176(0x162)](this);}},Scene_Battle['prototype']['isSkillItemWindowsMiddle']=function(){const _0xca58d8=_0x3823ba;return VisuMZ[_0xca58d8(0x4f3)][_0xca58d8(0x242)][_0xca58d8(0x735)][_0xca58d8(0x810)];},Scene_Battle[_0x3823ba(0x8d6)]['skillItemWindowRectMiddle']=function(){const _0x49e253=_0x3823ba,_0x5a66cf=Sprite_Button[_0x49e253(0x8d6)][_0x49e253(0x49c)]()*0x2+0x4;let _0x4b8474=Graphics[_0x49e253(0xc13)]-_0x5a66cf;Imported['VisuMZ_0_CoreEngine']&&SceneManager[_0x49e253(0x504)]()&&(_0x4b8474+=_0x5a66cf);const _0x2d7b8f=this['helpAreaBottom'](),_0x1e5035=Graphics[_0x49e253(0x53c)]-_0x2d7b8f-this[_0x49e253(0x88d)]()[_0x49e253(0xd6d)]+Window_BattleStatus[_0x49e253(0x8d6)][_0x49e253(0xc91)](),_0x16b58f=0x0;return new Rectangle(_0x16b58f,_0x2d7b8f,_0x4b8474,_0x1e5035);},Scene_Battle[_0x3823ba(0x8d6)]['createEnemyNameContainer']=function(){const _0x43eccc=_0x3823ba;if(!VisuMZ['BattleCore'][_0x43eccc(0x242)][_0x43eccc(0x179)][_0x43eccc(0xc5f)])return;this[_0x43eccc(0xd1e)]=new Sprite(),this[_0x43eccc(0xd1e)]['x']=this[_0x43eccc(0x837)]['x'],this[_0x43eccc(0xd1e)]['y']=this[_0x43eccc(0x837)]['y'];const _0x3bd154=this[_0x43eccc(0x394)][_0x43eccc(0x122)](this[_0x43eccc(0x837)]);this[_0x43eccc(0x7d0)](this['_enemyNameContainer'],_0x3bd154);for(let _0x24d06b=0x0;_0x24d06b<0x8;_0x24d06b++){const _0x408c91=new Window_EnemyName(_0x24d06b);this[_0x43eccc(0xd1e)][_0x43eccc(0x538)](_0x408c91);}},Sprite_Battler[_0x3823ba(0x842)]=VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x242)][_0x3823ba(0x9fc)]['MotionSpeed'],VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x46a)]=Sprite_Battler[_0x3823ba(0x8d6)]['initMembers'],Sprite_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x6f2)]=function(){const _0x10dc45=_0x3823ba;VisuMZ[_0x10dc45(0x4f3)][_0x10dc45(0x46a)]['call'](this),this['initMembersBattleCore']();if(this[_0x10dc45(0x786)]===Sprite_Enemy)this[_0x10dc45(0xcd4)]();this[_0x10dc45(0xa6b)]();},Sprite_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x2a2)]=function(){const _0x2c2658=_0x3823ba;this[_0x2c2658(0x12d)]=0x0,this[_0x2c2658(0xcf6)]=0x0,this['_floatHeight']=0x0,this[_0x2c2658(0x3e9)]=0x0,this[_0x2c2658(0x1b3)]=0x0,this[_0x2c2658(0x6b6)]=0x0,this['_floatEasing']=_0x2c2658(0x12f),this[_0x2c2658(0x6ba)]=0x0,this[_0x2c2658(0x4b0)]=0x0,this[_0x2c2658(0xbc3)]=0x0,this[_0x2c2658(0x2c7)]=0x0,this[_0x2c2658(0x314)]=0xff,this[_0x2c2658(0x6ec)]=0x0,this[_0x2c2658(0xc95)]=0x0,this[_0x2c2658(0x70c)]=_0x2c2658(0x12f),this['_currentAngle']=0x0,this[_0x2c2658(0x924)]=0x0,this[_0x2c2658(0x807)]=0x0,this[_0x2c2658(0xa5a)]=0x0,this[_0x2c2658(0x61e)]=_0x2c2658(0x12f),this['_angleRevertOnFinish']=!![],this[_0x2c2658(0x2aa)]=0x0,this['_skewY']=0x0,this[_0x2c2658(0x608)]=0x0,this['_targetSkewY']=0x0,this[_0x2c2658(0xd55)]=0x0,this[_0x2c2658(0x828)]=0x0,this[_0x2c2658(0x4b7)]=_0x2c2658(0x12f),this[_0x2c2658(0x9dd)]=0x1,this[_0x2c2658(0x97b)]=0x1,this[_0x2c2658(0x902)]=0x1,this[_0x2c2658(0x879)]=0x1,this[_0x2c2658(0x448)]=0x0,this[_0x2c2658(0x429)]=0x0,this[_0x2c2658(0xcdc)]=_0x2c2658(0x12f),this['_flipScaleX']=0x1,this['_targetHomeX']=0x0,this[_0x2c2658(0x97c)]=0x0,this[_0x2c2658(0x319)]=0x0,this['_homeWholeDuration']=0x0,this[_0x2c2658(0x57b)]=_0x2c2658(0x12f),this[_0x2c2658(0x1a0)]=0x0,this[_0x2c2658(0x780)]=0x0;},Sprite_Battler[_0x3823ba(0x8d6)]['createShadowSprite']=function(){const _0xff6a96=_0x3823ba;this[_0xff6a96(0x61a)]=new Sprite(),this['_shadowSprite'][_0xff6a96(0x850)]=ImageManager[_0xff6a96(0x976)](_0xff6a96(0x5cb)),this[_0xff6a96(0x61a)][_0xff6a96(0x850)][_0xff6a96(0x64e)]=VisuMZ[_0xff6a96(0x4f3)]['Settings'][_0xff6a96(0x9fc)][_0xff6a96(0xc62)],this['_shadowSprite'][_0xff6a96(0xcef)]['x']=0.5,this[_0xff6a96(0x61a)]['anchor']['y']=0.5,this[_0xff6a96(0x61a)]['y']=-0x2,this[_0xff6a96(0x61a)]['visible']=![],this['addChild'](this[_0xff6a96(0x61a)]);},Sprite_Battler[_0x3823ba(0x8d6)][_0x3823ba(0xa6b)]=function(){const _0x458308=_0x3823ba;this['_distortionSprite']=new Sprite(),this[_0x458308(0xc5c)][_0x458308(0xcef)]['x']=0.5,this[_0x458308(0xc5c)][_0x458308(0xcef)]['y']=0.5,this[_0x458308(0x538)](this['_distortionSprite']);},Sprite_Battler[_0x3823ba(0x8d6)]['attachSpritesToDistortionSprite']=function(){const _0x398db6=_0x3823ba;if(!this[_0x398db6(0xc5c)])return;if(this[_0x398db6(0x61a)]){if(_0x398db6(0x727)===_0x398db6(0x727)){const _0x550168=this[_0x398db6(0x9e7)](this[_0x398db6(0xc5c)]);this[_0x398db6(0x7d0)](this['_shadowSprite'],_0x550168),this[_0x398db6(0x236)]();}else{if(!_0x152fef[_0x398db6(0xbc6)]())return;if(!_0xe6bca6[_0x398db6(0xa03)])return;if(!_0x8ed877[_0x398db6(0xc8d)]())return;_0x1615de[_0x398db6(0xb9f)](_0x3a5225,_0x4a78fd);const _0x7f9f81=_0x5e0bb6[_0x398db6(0x515)];_0x28f61a['_subject']&&_0x1040ba['_subject'][_0x398db6(0x691)]()[_0x398db6(0x5a7)](_0x7f9f81);}}this['_svBattlerSprite']&&('IQRGD'!==_0x398db6(0x85f)?(_0x34584d[_0x398db6(0x846)]()[_0x398db6(0x200)](),_0x40bc57[_0x398db6(0x64b)](),_0x4ccd57['selectNextActor'](),this[_0x398db6(0x1bb)]()):this[_0x398db6(0xc5c)]['addChild'](this[_0x398db6(0x396)])),this[_0x398db6(0x873)]&&this[_0x398db6(0xc5c)][_0x398db6(0x538)](this[_0x398db6(0x873)]),this[_0x398db6(0x1f8)]&&this[_0x398db6(0xc5c)][_0x398db6(0x538)](this[_0x398db6(0x1f8)]),this[_0x398db6(0xc2b)]&&this[_0x398db6(0xc5c)][_0x398db6(0x538)](this[_0x398db6(0xc2b)]),this[_0x398db6(0x6e9)]&&this[_0x398db6(0xc5c)][_0x398db6(0x538)](this[_0x398db6(0x6e9)]);},Sprite_Battler[_0x3823ba(0x8d6)]['updateShadowVisibility']=function(){const _0xe6f608=_0x3823ba;if(!this[_0xe6f608(0x61a)])return;if(this[_0xe6f608(0x6b7)]&&this['_battler'][_0xe6f608(0x586)]()){const _0x184aa6=this[_0xe6f608(0x61a)]['bitmap'];this['_shadowSprite']['setFrame'](0x0,0x0,_0x184aa6[_0xe6f608(0x204)],_0x184aa6[_0xe6f608(0xd6d)]);}else _0xe6f608(0x942)===_0xe6f608(0x89c)?_0x3358f5[_0xe6f608(0x850)]=_0xf1a71a:this[_0xe6f608(0x61a)]['setFrame'](0x0,0x0,0x0,0x0);},Sprite_Battler[_0x3823ba(0x8d6)][_0x3823ba(0xac6)]=function(){const _0x1bb5c8=_0x3823ba;return SceneManager['isSceneBattle']()?SceneManager['_scene'][_0x1bb5c8(0x8a5)][_0x1bb5c8(0x820)]:this[_0x1bb5c8(0x73c)];},Sprite_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x193)]=function(_0x5ed171,_0x10c30b){const _0x396982=_0x3823ba;if(!this[_0x396982(0x6b7)]['isSpriteVisible']())return;if(BattleManager[_0x396982(0xc1e)]())return;const _0x4a1b37=VisuMZ[_0x396982(0x4f3)]['Settings'][_0x396982(0x630)],_0x44a0e8=new Sprite_Damage();_0x44a0e8['_duration']=_0x4a1b37['PopupDuration'],this[_0x396982(0x724)](_0x44a0e8),_0x44a0e8['setupTextPopup'](_0x5ed171,_0x10c30b),this[_0x396982(0x279)](_0x44a0e8);},Sprite_Battler['prototype'][_0x3823ba(0x65f)]=function(_0x3d5639,_0x12d6ce,_0xbc98c4){const _0x316419=_0x3823ba;if(!this['_battler']['isSpriteVisible']())return;if(BattleManager[_0x316419(0xc1e)]())return;const _0x3d082b=VisuMZ[_0x316419(0x4f3)]['Settings'][_0x316419(0x630)],_0x159806=new Sprite_Damage();_0x159806[_0x316419(0xd23)]=_0x3d082b[_0x316419(0x6ff)],this[_0x316419(0x724)](_0x159806),_0x159806['setupIconTextPopup'](_0x3d5639,_0x12d6ce,_0xbc98c4),this[_0x316419(0x279)](_0x159806);},Sprite_Battler[_0x3823ba(0x8d6)]['setupDamagePopup']=function(){const _0x4c7c52=_0x3823ba;if(!this[_0x4c7c52(0x6b7)][_0x4c7c52(0xd50)]())return;while(this['_battler'][_0x4c7c52(0xd50)]()){if(_0x4c7c52(0x71d)===_0x4c7c52(0x71d))this[_0x4c7c52(0x6b7)][_0x4c7c52(0x5ec)]()&&this[_0x4c7c52(0x778)]();else{if(!_0x3e88b8[_0x4c7c52(0x4f3)][_0x4c7c52(0x242)][_0x4c7c52(0xa26)]['ShowRemovedState'])return;const _0x31f204=_0x224704[_0x4c7c52(0xc87)](),_0x5dfe66=_0x31f204[_0x4c7c52(0x1da)]();for(const _0x175515 of _0x5dfe66){_0x175515[_0x4c7c52(0x387)]&&(this[_0x4c7c52(0x3d9)](_0x4c7c52(0xa21)),this[_0x4c7c52(0x3d9)](_0x4c7c52(0xb4d)),this[_0x4c7c52(0x3d9)](_0x4c7c52(0x620)),this[_0x4c7c52(0x3d9)](_0x4c7c52(0xc47),_0x175515['message4']['format'](_0x1c0ef0[_0x4c7c52(0x450)]())),this[_0x4c7c52(0x3d9)](_0x4c7c52(0x498)));}}}this[_0x4c7c52(0x6b7)]['clearDamagePopup'](),this[_0x4c7c52(0x6b7)][_0x4c7c52(0x3f6)]();},Sprite_Battler[_0x3823ba(0x8d6)]['createDamageSprite']=function(){const _0x108609=_0x3823ba;if(BattleManager[_0x108609(0xc1e)]())return;const _0x37b923=VisuMZ[_0x108609(0x4f3)][_0x108609(0x242)]['Damage'],_0x2ce5cb=new Sprite_Damage();_0x2ce5cb[_0x108609(0xd23)]=_0x37b923[_0x108609(0x6ff)],this['sortDamageSprites'](_0x2ce5cb),_0x2ce5cb['setup'](this[_0x108609(0x6b7)]),_0x2ce5cb['setupBattleCore'](this[_0x108609(0x6b7)]),this[_0x108609(0x279)](_0x2ce5cb);},Sprite_Battler['prototype'][_0x3823ba(0x279)]=function(_0x25e6ed){const _0x584f29=_0x3823ba;this[_0x584f29(0x184)]['push'](_0x25e6ed);if(this[_0x584f29(0x1f2)]()){if('hmMaU'!==_0x584f29(0xa1d)){const _0x20cacc=SceneManager[_0x584f29(0xaa3)][_0x584f29(0x264)];if(_0x20cacc)_0x20cacc[_0x584f29(0x279)](_0x25e6ed,this['_battler']);}else _0x2227c6[_0x584f29(0x61b)](_0x3dd5b4[_0x584f29(0x729)]||'',_0xade143[_0x584f29(0x46e)]||0x0);}else{if(_0x584f29(0x9b9)!=='cheJY'){this[_0x584f29(0xac6)]()[_0x584f29(0x538)](_0x25e6ed);if(SceneManager[_0x584f29(0x441)]())_0x25e6ed[_0x584f29(0x6cc)]['x']=-0x1;}else _0x37340f+=_0x19aaa8(_0xce1628['$1']);}},Sprite_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x1f2)]=function(){const _0x1fcebd=_0x3823ba;return!$gameSystem[_0x1fcebd(0x839)]()&&this[_0x1fcebd(0x6b7)]&&this['_battler']['isActor']();return!$gameSystem[_0x1fcebd(0x839)]()&&this['_battler']&&this[_0x1fcebd(0x6b7)][_0x1fcebd(0x4e0)]()&&Window_BattleStatus['prototype'][_0x1fcebd(0xa73)]()==='portrait';},Sprite_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x724)]=function(_0xfeba4){const _0x169109=_0x3823ba;this[_0x169109(0x6c2)](_0xfeba4,!![]);const _0x543775=VisuMZ['BattleCore'][_0x169109(0x242)][_0x169109(0x630)],_0x3aa186=SceneManager[_0x169109(0x441)]()?-0x1:0x1;if(_0x543775[_0x169109(0x4ea)])for(const _0x378b8f of this[_0x169109(0x184)]){_0x378b8f['x']+=_0x543775[_0x169109(0x6b8)]*_0x3aa186,_0x378b8f['y']+=_0x543775[_0x169109(0x329)];}else{const _0x3afb3d=this[_0x169109(0x184)][this[_0x169109(0x184)][_0x169109(0xb23)]-0x1];_0x3afb3d&&(_0xfeba4['x']=_0x3afb3d['x']+_0x543775[_0x169109(0x6b8)]*_0x3aa186,_0xfeba4['y']=_0x3afb3d['y']+_0x543775[_0x169109(0x329)]);}},Sprite_Battler[_0x3823ba(0x8d6)]['alignBattleCoreDamageSprite']=function(_0x1433c4,_0x4f1170){const _0x354cc2=_0x3823ba,_0x364433=SceneManager['isBattleFlipped']()?-0x1:0x1;let _0x1b9623=this[_0x354cc2(0x12d)];_0x1b9623+=this[_0x354cc2(0x61f)]();let _0x4ff5d1=this['_baseY'];const _0x23a11a=this[_0x354cc2(0xc5c)][_0x354cc2(0x6cc)]['y'];_0x4ff5d1+=this[_0x354cc2(0x19a)]();const _0x2b5de3=SceneManager[_0x354cc2(0xaa3)][_0x354cc2(0x264)];if(_0x2b5de3&&this[_0x354cc2(0x73c)]===_0x2b5de3){_0x1b9623+=_0x2b5de3['x']-this[_0x354cc2(0x70b)]();const _0x47b358=_0x2b5de3['lineHeight']()*0x3/0x4;_0x4ff5d1=_0x2b5de3['y']+_0x47b358,_0x4ff5d1=Math[_0x354cc2(0x28a)](_0x4ff5d1,_0x2b5de3['y']+this['y']-this['height']+_0x47b358);}_0x1433c4['x']=Math[_0x354cc2(0x282)](_0x1b9623+this[_0x354cc2(0x70b)]()*_0x364433),_0x1433c4['y']=Math[_0x354cc2(0x282)](_0x4ff5d1+this['damageOffsetY']());},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x89a)]=Sprite_Battler[_0x3823ba(0x8d6)]['damageOffsetX'],Sprite_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x70b)]=function(){const _0x27a275=_0x3823ba;let _0x1afde3=VisuMZ[_0x27a275(0x4f3)][_0x27a275(0x89a)][_0x27a275(0x162)](this),_0x6c1dbb=VisuMZ['BattleCore']['Settings'][_0x27a275(0x630)][_0x27a275(0x726)]||0x0;return Math[_0x27a275(0x282)](_0x1afde3+_0x6c1dbb);},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x826)]=Sprite_Battler[_0x3823ba(0x8d6)]['damageOffsetY'],Sprite_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x96d)]=function(){const _0x2e2653=_0x3823ba;let _0x3cd7b6=VisuMZ[_0x2e2653(0x4f3)]['Sprite_Battler_damageOffsetY'][_0x2e2653(0x162)](this);switch(VisuMZ['BattleCore'][_0x2e2653(0x242)]['Damage'][_0x2e2653(0xd72)]){case _0x2e2653(0x432):_0x3cd7b6-=this[_0x2e2653(0xd6d)]*this['scale']['y'];break;case _0x2e2653(0x542):_0x3cd7b6-=this[_0x2e2653(0xd6d)]*this[_0x2e2653(0x6cc)]['y']*0.5;break;}let _0x161d9a=VisuMZ['BattleCore'][_0x2e2653(0x242)][_0x2e2653(0x630)][_0x2e2653(0x33b)]||0x0;return Math[_0x2e2653(0x282)](_0x3cd7b6+_0x161d9a);},Sprite_Actor['prototype'][_0x3823ba(0x70b)]=function(){const _0x57bcf9=_0x3823ba;return Sprite_Battler[_0x57bcf9(0x8d6)]['damageOffsetX'][_0x57bcf9(0x162)](this);},Sprite_Actor[_0x3823ba(0x8d6)][_0x3823ba(0x96d)]=function(){const _0x198c8c=_0x3823ba;return Sprite_Battler[_0x198c8c(0x8d6)][_0x198c8c(0x96d)][_0x198c8c(0x162)](this);},Sprite_Battler['prototype']['destroyDamageSprite']=function(_0x431335){const _0x3f439b=_0x3823ba;this[_0x3f439b(0x1f2)]()?SceneManager['_scene'][_0x3f439b(0x264)]['removeDamageSprite'](_0x431335):(this[_0x3f439b(0xac6)]()[_0x3f439b(0x491)](_0x431335),this[_0x3f439b(0x184)][_0x3f439b(0xbc4)](_0x431335),_0x431335[_0x3f439b(0xbb7)]());},VisuMZ['BattleCore']['Sprite_Battler_setHome']=Sprite_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x79d)],Sprite_Battler[_0x3823ba(0x8d6)]['setHome']=function(_0x569a0e,_0x5eddc2){const _0xf45b45=_0x3823ba,_0x3ea10a=VisuMZ[_0xf45b45(0x4f3)]['Settings'];if(this[_0xf45b45(0x786)]===Sprite_Actor)_0x569a0e+=_0x3ea10a[_0xf45b45(0x9fc)]['OffsetX']||0x0,_0x5eddc2+=_0x3ea10a[_0xf45b45(0x9fc)][_0xf45b45(0x615)]||0x0;else this['constructor']===Sprite_Enemy&&(_0x569a0e+=_0x3ea10a[_0xf45b45(0x179)][_0xf45b45(0x24e)]||0x0,_0x5eddc2+=_0x3ea10a[_0xf45b45(0x179)][_0xf45b45(0x615)]||0x0);this[_0xf45b45(0x6b7)]&&('gPkjt'!==_0xf45b45(0x7bc)?(_0x569a0e=this[_0xf45b45(0x6b7)]['_forcedHomeX']??_0x569a0e,_0x5eddc2=this[_0xf45b45(0x6b7)][_0xf45b45(0x710)]??_0x5eddc2):(_0x31b47a=_0x2f3f20(_0x353da2['$1']),_0x6a362=_0x488600(_0xa0df41['$2']))),VisuMZ[_0xf45b45(0x4f3)][_0xf45b45(0x215)][_0xf45b45(0x162)](this,_0x569a0e,_0x5eddc2),this[_0xf45b45(0x83d)]=this[_0xf45b45(0x43c)],this[_0xf45b45(0x97c)]=this['_homeY'],this[_0xf45b45(0x319)]=0x0,this['_homeWholeDuration']=0x0,this['_homeEasing']=_0xf45b45(0x12f);},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x985)]=Sprite_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x456)],Sprite_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x456)]=function(){const _0x994147=_0x3823ba;VisuMZ[_0x994147(0x4f3)][_0x994147(0x985)]['call'](this),!this['_battler']&&this[_0x994147(0x33d)]&&(this[_0x994147(0x33d)]['visible']=![]);},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x7f7)]=Sprite_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x180)],Sprite_Battler[_0x3823ba(0x8d6)]['updateMain']=function(){const _0x9d96d8=_0x3823ba;this[_0x9d96d8(0x2e0)](),this[_0x9d96d8(0x233)](),this[_0x9d96d8(0x981)](),this[_0x9d96d8(0x9df)](),VisuMZ[_0x9d96d8(0x4f3)][_0x9d96d8(0x7f7)][_0x9d96d8(0x162)](this),this[_0x9d96d8(0x3d3)](),this[_0x9d96d8(0xa83)]();if(this['constructor']===Sprite_Enemy)this[_0x9d96d8(0xa92)]();},VisuMZ[_0x3823ba(0x4f3)]['Sprite_Battler_updatePosition']=Sprite_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x1b7)],Sprite_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x1b7)]=function(){const _0x523175=_0x3823ba;this[_0x523175(0x6fb)](),VisuMZ['BattleCore'][_0x523175(0xab9)][_0x523175(0x162)](this),this[_0x523175(0x7f0)](),this[_0x523175(0x86a)]();},Sprite_Battler[_0x3823ba(0x8d6)][_0x3823ba(0xc80)]=function(){const _0x2149fd=_0x3823ba,_0x304145=this[_0x2149fd(0x7f9)]();if(this['_battler'][_0x2149fd(0xd5c)]())this['_selectionEffectCount']++,Graphics[_0x2149fd(0xa8f)]%0x1e<0xf?_0x304145[_0x2149fd(0x9f8)]([0xff,0xff,0xff,0x40]):_0x304145[_0x2149fd(0x9f8)]([0x0,0x0,0x0,0x0]);else{if(this[_0x2149fd(0xa01)]>0x0){if('hIWOa'!==_0x2149fd(0x39b)){const _0x34c002=this[_0x2149fd(0xb1e)](),_0x121405=_0x120ffc[_0x2149fd(0x4f3)][_0x2149fd(0x242)][_0x2149fd(0x4e2)][_0x2149fd(0x759)],_0x1d11be=_0x34c002==='text'?_0x316494[_0x2149fd(0xb42)]:_0x2149fd(0xaa2)[_0x2149fd(0xabf)](_0x121405,_0x37c6dd['escape']),_0x22ccda=this[_0x2149fd(0x63c)]();this['addCommand'](_0x1d11be,'escape',_0x22ccda);}else this['_selectionEffectCount']=0x0,_0x304145[_0x2149fd(0x9f8)]([0x0,0x0,0x0,0x0]);}}},Sprite_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x721)]=function(_0x458ac8,_0x429289){const _0x549c9e=_0x3823ba,_0x418826=_0x458ac8-this[_0x549c9e(0x43c)],_0x47b9d5=_0x429289-this[_0x549c9e(0x372)];this['_homeX']=_0x458ac8,this[_0x549c9e(0x372)]=_0x429289,this[_0x549c9e(0x73f)]-=_0x418826,this[_0x549c9e(0x3b1)]-=_0x47b9d5,this['_targetOffsetX']-=_0x418826,this[_0x549c9e(0xd9a)]-=_0x47b9d5,this[_0x549c9e(0x1b7)]();},Sprite_Battler['prototype'][_0x3823ba(0xd2f)]=function(_0x13d213,_0x582aae,_0x3921f0,_0x21cdcd){const _0x422fd0=_0x3823ba;(this[_0x422fd0(0x83d)]!==_0x13d213||this[_0x422fd0(0x97c)]!==_0x582aae)&&(this[_0x422fd0(0x83d)]=_0x13d213,this[_0x422fd0(0x97c)]=_0x582aae,this[_0x422fd0(0x319)]=_0x3921f0,this[_0x422fd0(0x8e1)]=_0x3921f0,this[_0x422fd0(0x57b)]=_0x21cdcd,_0x3921f0<=0x0&&this[_0x422fd0(0x45b)]());},Sprite_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x6fb)]=function(){const _0x590f90=_0x3823ba;if(this['_homeDuration']<=0x0)return;const _0xbed691=this[_0x590f90(0x319)],_0x29e36d=this['_homeWholeDuration'],_0x169afe=this[_0x590f90(0x57b)];Imported[_0x590f90(0x32f)]?(this[_0x590f90(0x43c)]=this['applyEasing'](this['_homeX'],this[_0x590f90(0x83d)],_0xbed691,_0x29e36d,_0x169afe),this['_homeY']=this[_0x590f90(0x877)](this[_0x590f90(0x372)],this[_0x590f90(0x97c)],_0xbed691,_0x29e36d,_0x169afe)):(this['_homeX']=(this['_homeX']*(_0xbed691-0x1)+this['_targetHomeX'])/_0xbed691,this[_0x590f90(0x372)]=(this[_0x590f90(0x372)]*(_0xbed691-0x1)+this[_0x590f90(0x97c)])/_0xbed691);this['_homeDuration']--;if(this[_0x590f90(0x319)]<=0x0)this[_0x590f90(0x45b)]();},Sprite_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x45b)]=function(){const _0x418d98=_0x3823ba;this[_0x418d98(0x43c)]=this['_targetHomeX'],this['_homeY']=this[_0x418d98(0x97c)];},Sprite_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x7f0)]=function(){const _0x186f8a=_0x3823ba;this[_0x186f8a(0x12d)]=this['x'],this['_baseY']=this['y'],this[_0x186f8a(0x71e)](),this['updateJump'](),this['x']+=this['extraPositionX'](),this['y']+=this[_0x186f8a(0x19a)](),this['y']+=this[_0x186f8a(0xb8e)](),this['x']=Math[_0x186f8a(0x975)](this['x']),this['y']=Math[_0x186f8a(0x975)](this['y']);},Sprite_Battler['prototype'][_0x3823ba(0x61f)]=function(){let _0x4b3f74=0x0;return _0x4b3f74;},Sprite_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x19a)]=function(){const _0x27e8ca=_0x3823ba;let _0x212ae5=0x0;return this[_0x27e8ca(0x6b7)]&&!this[_0x27e8ca(0x6b7)][_0x27e8ca(0x547)]()&&(_0x212ae5-=this[_0x27e8ca(0x639)],_0x212ae5-=this[_0x27e8ca(0x6ba)]),_0x212ae5;},Sprite_Battler['prototype'][_0x3823ba(0xb8e)]=function(){const _0x237231=_0x3823ba;let _0x34fbfb=0x0;if(this[_0x237231(0xc5c)]&&this['constructor']!==Sprite_SvEnemy){const _0x3610af=this['_distortionSprite']['scale']['y'];_0x34fbfb-=(_0x3610af-0x1)*this[_0x237231(0xd6d)];}return _0x34fbfb;},Sprite_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x9df)]=function(){const _0x58a0ef=_0x3823ba,_0x5a345c=this['_battler']&&this[_0x58a0ef(0x6b7)]['isBattlerFlipped']();this[_0x58a0ef(0xd40)]=(_0x5a345c?-0x1:0x1)*Math[_0x58a0ef(0x6ee)](this[_0x58a0ef(0x6cc)]['x']);},Sprite_Battler[_0x3823ba(0x8d6)][_0x3823ba(0xb5f)]=function(_0x485758,_0x5db0b2,_0x3959c6){const _0x1676a4=_0x3823ba;if(!this[_0x1676a4(0xaf7)]())return;if(this[_0x1676a4(0x3e9)]===_0x485758)return;this['_targetFloatHeight']=_0x485758,this['_floatDuration']=_0x5db0b2,this[_0x1676a4(0x6b6)]=_0x5db0b2,this[_0x1676a4(0x8ba)]=_0x3959c6||_0x1676a4(0x12f);if(_0x5db0b2<=0x0)this[_0x1676a4(0x639)]=_0x485758;},Sprite_Battler['prototype']['updateFloat']=function(){const _0xc07be=_0x3823ba;if(this[_0xc07be(0x1b3)]<=0x0)return;const _0xacd5f4=this[_0xc07be(0x1b3)],_0x382ff4=this['_floatWholeDuration'],_0x2a7254=this[_0xc07be(0x8ba)];Imported[_0xc07be(0x32f)]?this[_0xc07be(0x639)]=this[_0xc07be(0x877)](this[_0xc07be(0x639)],this[_0xc07be(0x3e9)],_0xacd5f4,_0x382ff4,_0x2a7254):this['_floatHeight']=(this[_0xc07be(0x639)]*(_0xacd5f4-0x1)+this['_targetFloatHeight'])/_0xacd5f4;this[_0xc07be(0x1b3)]--;if(this[_0xc07be(0x1b3)]<=0x0)this[_0xc07be(0x962)]();},Sprite_Battler['prototype']['onFloatEnd']=function(){const _0x742fbe=_0x3823ba;this['_floatHeight']=this[_0x742fbe(0x3e9)];},Sprite_Battler[_0x3823ba(0x8d6)][_0x3823ba(0xd2e)]=function(){return this['_floatDuration']>0x0;},Sprite_Battler['prototype'][_0x3823ba(0x9f1)]=function(_0x5112c8,_0x512d99){const _0x18efd3=_0x3823ba;if(!this[_0x18efd3(0xaf7)]())return;if(_0x512d99<=0x0)return;this[_0x18efd3(0x4b0)]=_0x5112c8,this[_0x18efd3(0xbc3)]=_0x512d99,this['_jumpWholeDuration']=_0x512d99;},Sprite_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x7fe)]=function(){const _0x45455c=_0x3823ba;if(this['_jumpDuration']<=0x0)return;const _0x43ff19=this[_0x45455c(0x2c7)]-this[_0x45455c(0xbc3)],_0x309c6a=this[_0x45455c(0x2c7)]/0x2,_0x370b02=this[_0x45455c(0x4b0)],_0x203c03=-_0x370b02/Math[_0x45455c(0x3fe)](_0x309c6a,0x2);this[_0x45455c(0x6ba)]=_0x203c03*Math[_0x45455c(0x3fe)](_0x43ff19-_0x309c6a,0x2)+_0x370b02,this[_0x45455c(0xbc3)]--;if(this[_0x45455c(0xbc3)]<=0x0)return this[_0x45455c(0x454)]();},Sprite_Battler['prototype'][_0x3823ba(0x454)]=function(){const _0x49d7ed=_0x3823ba;this[_0x49d7ed(0x6ba)]=0x0;},Sprite_Battler[_0x3823ba(0x8d6)]['isJumping']=function(){const _0xd53d86=_0x3823ba;return this[_0xd53d86(0xbc3)]>0x0;},Sprite_Battler[_0x3823ba(0x8d6)]['startOpacity']=function(_0x7e4d6e,_0x184ffb,_0x5afcc6){const _0x523bad=_0x3823ba;if(this['_targetOpacity']===_0x7e4d6e)return;this[_0x523bad(0x314)]=_0x7e4d6e,this[_0x523bad(0x6ec)]=_0x184ffb,this[_0x523bad(0xc95)]=_0x184ffb,this['_opacityEasing']=_0x5afcc6||'Linear';if(_0x184ffb<=0x0)this['opacity']=_0x7e4d6e;},Sprite_Battler['prototype'][_0x3823ba(0x86a)]=function(){const _0x713b04=_0x3823ba;if(this['constructor'][_0x713b04(0x450)]==='Sprite_SvEnemy')return;if(this['_opacityDuration']<=0x0)return;const _0x5d5eb4=this['_opacityDuration'],_0x2edd25=this[_0x713b04(0xc95)],_0x598672=this['_opacityEasing'];Imported['VisuMZ_0_CoreEngine']?this[_0x713b04(0xa2c)]=this[_0x713b04(0x877)](this['opacity'],this[_0x713b04(0x314)],_0x5d5eb4,_0x2edd25,_0x598672):_0x713b04(0xd2c)!=='GnDfj'?_0x3128b3['BattleGridSystem']['ActSeq_Grid_TeleportToNode'](_0x36a20d):this['opacity']=(this[_0x713b04(0xa2c)]*(_0x5d5eb4-0x1)+this[_0x713b04(0x314)])/_0x5d5eb4;this[_0x713b04(0x6ec)]--;if(this[_0x713b04(0x6ec)]<=0x0)this[_0x713b04(0x573)]();},Sprite_Battler['prototype'][_0x3823ba(0x573)]=function(){this['opacity']=this['_targetOpacity'];},Sprite_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x980)]=function(){const _0x430951=_0x3823ba;return this[_0x430951(0x6ec)]>0x0;},Sprite_Battler[_0x3823ba(0x8d6)]['updateShadow']=function(){const _0x39eab0=_0x3823ba;this['_shadowSprite'][_0x39eab0(0x425)]=this[_0x39eab0(0x6b7)]['hasSvBattler'](),this[_0x39eab0(0x34c)]();},Sprite_Battler['prototype']['updateShadowPosition']=function(){const _0x104d16=_0x3823ba;if(!this[_0x104d16(0x61a)])return;this[_0x104d16(0x61a)]['y']=this[_0x104d16(0xcf6)]-this['y']-0x2;},Sprite_Battler[_0x3823ba(0x8d6)][_0x3823ba(0xb3e)]=function(){const _0x12e398=_0x3823ba;if(!this[_0x12e398(0x6b7)])return;this[_0x12e398(0xa41)]=this[_0x12e398(0x6b7)][_0x12e398(0x8f9)](),this[_0x12e398(0x9e0)]=this[_0x12e398(0x6b7)][_0x12e398(0x256)]();},Game_BattlerBase[_0x3823ba(0x8d6)][_0x3823ba(0x8f9)]=function(){const _0x18d68b=_0x3823ba,_0x3ca6f6=this[_0x18d68b(0x4e0)]()?this['actor']():this[_0x18d68b(0x634)]();if(_0x3ca6f6){const _0x470845=_0x3ca6f6[_0x18d68b(0x920)];if(_0x470845[_0x18d68b(0xd57)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i)){if(_0x18d68b(0xb5c)!==_0x18d68b(0xb5c)){const _0x4ac074=_0x3bfe3f[_0x9b11f];if(!_0x4ac074)return'';let _0x5d40d3='';_0x5d40d3+=_0x4ac074[_0x18d68b(0x450)];for(const _0x554e2b of _0x4ac074[_0x18d68b(0x748)]){for(const _0x575208 of _0x554e2b[_0x18d68b(0x934)]){[0x6c,0x198]['includes'](_0x575208[_0x18d68b(0xcad)])&&(_0x5d40d3+='\x0a',_0x5d40d3+=_0x575208['parameters'][0x0]);}}return _0x5d40d3;}else return Number(RegExp['$1'])*0.01;}else{if(_0x470845[_0x18d68b(0xd57)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Game_BattlerBase[_0x3823ba(0x8d6)]['battlerShadowScaleY']=function(){const _0x148377=_0x3823ba,_0x3b9e23=this[_0x148377(0x4e0)]()?this[_0x148377(0x846)]():this['enemy']();if(_0x3b9e23){if('ZEnbp'==='ZEnbp'){const _0x25d137=_0x3b9e23[_0x148377(0x920)];if(_0x25d137[_0x148377(0xd57)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x25d137['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}else return 0x1;}return 0x1;},Sprite_Battler[_0x3823ba(0x8d6)]['updateScale']=function(){const _0xe42ff6=_0x3823ba;if(this[_0xe42ff6(0x786)]===Sprite_SvEnemy)return;this[_0xe42ff6(0x168)](),this[_0xe42ff6(0x945)]();},Sprite_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x945)]=function(){const _0x17e92b=_0x3823ba,_0x2d1484=this[_0x17e92b(0xc5c)];_0x2d1484&&(_0x2d1484[_0x17e92b(0x6cc)]['x']=this['mainSpriteScaleX'](),_0x2d1484['scale']['y']=this[_0x17e92b(0x298)]());},Sprite_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x72c)]=function(){const _0x443467=_0x3823ba;let _0x346b57=0x1;return _0x346b57*=this[_0x443467(0xd40)],_0x346b57*=this[_0x443467(0x9dd)],_0x346b57;},Sprite_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x298)]=function(){const _0xc6d2f5=_0x3823ba;return 0x1*this[_0xc6d2f5(0x97b)];},Sprite_Battler[_0x3823ba(0x8d6)][_0x3823ba(0xbdb)]=function(){const _0x49caf6=_0x3823ba;return this[_0x49caf6(0x204)]*this[_0x49caf6(0x72c)]();},Sprite_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x5ba)]=function(){return this['height']*this['mainSpriteScaleY']();},Sprite_Battler[_0x3823ba(0x8d6)]['startGrow']=function(_0x4fab52,_0x23c07f,_0x56b7ad,_0xaa599d){const _0x57e69b=_0x3823ba;if(!this[_0x57e69b(0xaf7)]())return;if(!this['_distortionSprite'])return;if(this[_0x57e69b(0x902)]===_0x4fab52&&this[_0x57e69b(0x879)]===_0x23c07f)return;this[_0x57e69b(0x902)]=_0x4fab52,this[_0x57e69b(0x879)]=_0x23c07f,this[_0x57e69b(0x448)]=_0x56b7ad,this[_0x57e69b(0x429)]=_0x56b7ad,this[_0x57e69b(0xcdc)]=_0xaa599d||'Linear';if(_0x56b7ad<=0x0){if(_0x57e69b(0x7bb)===_0x57e69b(0x7bb))this[_0x57e69b(0x9dd)]=this[_0x57e69b(0x902)],this[_0x57e69b(0x97b)]=this[_0x57e69b(0x879)];else return this['maxItems']();}},Sprite_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x168)]=function(){const _0x3cbbd0=_0x3823ba;if(this[_0x3cbbd0(0x448)]<=0x0)return;if(!this[_0x3cbbd0(0xc5c)])return;const _0x2528f3=this[_0x3cbbd0(0x448)],_0x3fae23=this['_growWholeDuration'],_0x2adb1a=this[_0x3cbbd0(0xcdc)];Imported[_0x3cbbd0(0x32f)]?(this[_0x3cbbd0(0x9dd)]=this[_0x3cbbd0(0x877)](this['_growX'],this['_targetGrowX'],_0x2528f3,_0x3fae23,_0x2adb1a),this[_0x3cbbd0(0x97b)]=this[_0x3cbbd0(0x877)](this[_0x3cbbd0(0x97b)],this[_0x3cbbd0(0x879)],_0x2528f3,_0x3fae23,_0x2adb1a)):(this[_0x3cbbd0(0x9dd)]=(this['_growX']*(_0x2528f3-0x1)+this['_targetGrowX'])/_0x2528f3,this[_0x3cbbd0(0x97b)]=(this[_0x3cbbd0(0x97b)]*(_0x2528f3-0x1)+this['_targetGrowY'])/_0x2528f3);this[_0x3cbbd0(0x448)]--;if(this[_0x3cbbd0(0x448)]<=0x0)this[_0x3cbbd0(0x96a)]();},Sprite_Battler['prototype'][_0x3823ba(0x96a)]=function(){const _0x4f1d13=_0x3823ba;this[_0x4f1d13(0x9dd)]=this[_0x4f1d13(0x902)],this[_0x4f1d13(0x97b)]=this['_targetGrowY'];},Sprite_Battler[_0x3823ba(0x8d6)]['isGrowing']=function(){return this['_growDuration']>0x0;},Sprite_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x821)]=function(_0x257158,_0x3b80f6,_0x266e39,_0x1dee06){const _0x5588ff=_0x3823ba;if(!this['canMove']())return;if(!this[_0x5588ff(0xc5c)])return;if(this['_targetSkewX']===_0x257158&&this[_0x5588ff(0x865)]===_0x3b80f6)return;this[_0x5588ff(0x608)]=_0x257158,this[_0x5588ff(0x865)]=_0x3b80f6,this['_skewDuration']=_0x266e39,this[_0x5588ff(0x828)]=_0x266e39,this[_0x5588ff(0x4b7)]=_0x1dee06||_0x5588ff(0x12f),_0x266e39<=0x0&&(this[_0x5588ff(0xc5c)]['skew']['x']=this[_0x5588ff(0x608)],this['_distortionSprite']['skew']['y']=this[_0x5588ff(0x865)]);},Sprite_Battler[_0x3823ba(0x8d6)]['updateSkew']=function(){const _0x5bd28f=_0x3823ba;if(this[_0x5bd28f(0xd55)]<=0x0)return;if(!this[_0x5bd28f(0xc5c)])return;const _0x384a2a=this['_skewDuration'],_0x5889e3=this[_0x5bd28f(0x828)],_0x224890=this[_0x5bd28f(0x4b7)],_0x4099f7=this['_distortionSprite'];Imported[_0x5bd28f(0x32f)]?_0x5bd28f(0xbd4)===_0x5bd28f(0xbd4)?(_0x4099f7[_0x5bd28f(0xd1c)]['x']=this[_0x5bd28f(0x877)](_0x4099f7[_0x5bd28f(0xd1c)]['x'],this[_0x5bd28f(0x608)],_0x384a2a,_0x5889e3,_0x224890),_0x4099f7[_0x5bd28f(0xd1c)]['y']=this['applyEasing'](_0x4099f7['skew']['y'],this[_0x5bd28f(0x865)],_0x384a2a,_0x5889e3,_0x224890)):this[_0x5bd28f(0xb90)](_0x5bd28f(0x806)):(_0x4099f7[_0x5bd28f(0xd1c)]['x']=(_0x4099f7[_0x5bd28f(0xd1c)]['x']*(_0x384a2a-0x1)+this[_0x5bd28f(0x608)])/_0x384a2a,_0x4099f7[_0x5bd28f(0xd1c)]['y']=(_0x4099f7[_0x5bd28f(0xd1c)]['y']*(_0x384a2a-0x1)+this[_0x5bd28f(0x865)])/_0x384a2a);this[_0x5bd28f(0xd55)]--;if(this[_0x5bd28f(0xd55)]<=0x0)this[_0x5bd28f(0xb1d)]();},Sprite_Battler[_0x3823ba(0x8d6)][_0x3823ba(0xb1d)]=function(){const _0x5a19eb=_0x3823ba;this[_0x5a19eb(0xc5c)]['skew']['x']=this[_0x5a19eb(0x608)],this[_0x5a19eb(0xc5c)]['skew']['y']=this['_targetSkewY'];},Sprite_Battler['prototype'][_0x3823ba(0x3b0)]=function(){const _0x4ced04=_0x3823ba;return this[_0x4ced04(0xd55)]>0x0;},Sprite_Battler[_0x3823ba(0x8d6)][_0x3823ba(0xb04)]=function(_0x3efd0d,_0x4d1bbf,_0x2a9cc1,_0x3bebd7){const _0x4c2d52=_0x3823ba;if(!this['canMove']())return;if(!this[_0x4c2d52(0xc5c)])return;if(this[_0x4c2d52(0x924)]===_0x3efd0d)return;this[_0x4c2d52(0x924)]=_0x3efd0d,this[_0x4c2d52(0x807)]=_0x4d1bbf,this['_angleWholeDuration']=_0x4d1bbf,this['_angleEasing']=_0x2a9cc1||_0x4c2d52(0x12f),this[_0x4c2d52(0x65d)]=_0x3bebd7;if(this[_0x4c2d52(0x65d)]===undefined){if(_0x4c2d52(0x9ed)!==_0x4c2d52(0x9ed)){if(_0x304cc5[_0x4c2d52(0x2a9)](_0x12bcdc))return!![];return![];}else this[_0x4c2d52(0x65d)]=!![];}_0x4d1bbf<=0x0&&(this[_0x4c2d52(0x782)]=_0x3efd0d,this[_0x4c2d52(0x65d)]&&(_0x4c2d52(0xb71)!==_0x4c2d52(0x151)?(this['_targetAngle']=0x0,this[_0x4c2d52(0x782)]=0x0):_0x389dac[_0x4c2d52(0x1af)]=_0x5f28bb[_0x4c2d52(0x644)](_0x278896['$1'])));},Sprite_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x981)]=function(){const _0x4cdcb0=_0x3823ba;this['updateAngleCalculations'](),this[_0x4cdcb0(0xb75)]();},Sprite_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x8b7)]=function(){const _0x3997c8=_0x3823ba;if(this['_angleDuration']<=0x0)return;const _0x170139=this[_0x3997c8(0x807)],_0x300a7b=this['_angleWholeDuration'],_0x176c28=this[_0x3997c8(0x61e)];if(Imported[_0x3997c8(0x32f)]){if(_0x3997c8(0x7d3)===_0x3997c8(0x730)){if(!_0x42a2f0[_0x3997c8(0xc9d)]())return![];if(!_0x5e23ed['isForOne']())return![];if(!_0x495326['isForOpponent']())return![];return _0x6d10e0['BattleCore'][_0x3997c8(0x242)]['ActionSequence'][_0x3997c8(0x485)];}else this[_0x3997c8(0x782)]=this['applyEasing'](this[_0x3997c8(0x782)],this[_0x3997c8(0x924)],_0x170139,_0x300a7b,_0x176c28);}else this[_0x3997c8(0x782)]=(this[_0x3997c8(0x782)]*(_0x170139-0x1)+this[_0x3997c8(0x924)])/_0x170139;this['_angleDuration']--;if(this['_angleDuration']<=0x0)this[_0x3997c8(0x7bd)]();},Sprite_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x7bd)]=function(){const _0x2307d6=_0x3823ba;this[_0x2307d6(0x782)]=this['_targetAngle'],this[_0x2307d6(0x65d)]&&(this['_targetAngle']=0x0,this[_0x2307d6(0x782)]=0x0);},Sprite_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x545)]=function(){const _0x2f7f66=_0x3823ba;return this[_0x2f7f66(0x807)]>0x0;},Sprite_Battler[_0x3823ba(0x8d6)][_0x3823ba(0xb75)]=function(){const _0x5dde5f=_0x3823ba;if(!this[_0x5dde5f(0xc5c)])return;const _0x5bb0fd=this[_0x5dde5f(0x782)],_0x1dc22f=this[_0x5dde5f(0x6cc)]['x'],_0x242629=this[_0x5dde5f(0x6b7)]['isActor']()?-0x1:0x1;this[_0x5dde5f(0xc5c)]['angle']=_0x5bb0fd*_0x1dc22f*_0x242629;const _0x21f892=this['_distortionSprite'][_0x5dde5f(0x6cc)]['y'];this[_0x5dde5f(0xc5c)]['y']=this[_0x5dde5f(0xd6d)]*-0.5*(0x2-_0x21f892),this[_0x5dde5f(0xc5c)]['y']=Math['ceil'](this[_0x5dde5f(0xc5c)]['y']);const _0x225ab7=[this[_0x5dde5f(0x1f8)],this[_0x5dde5f(0x396)],this[_0x5dde5f(0x6e9)]];for(const _0x398c04 of _0x225ab7){if(!_0x398c04)continue;_0x398c04['y']=this[_0x5dde5f(0xd6d)]*0.5;}this[_0x5dde5f(0x61a)]&&(this[_0x5dde5f(0xa41)]=this[_0x5dde5f(0xa41)]??0x1,this[_0x5dde5f(0x9e0)]=this[_0x5dde5f(0x9e0)]??0x1,this[_0x5dde5f(0x61a)]['scale']['x']=this[_0x5dde5f(0xc5c)]['scale']['x']*this['_shadowScaleX'],this[_0x5dde5f(0x61a)][_0x5dde5f(0x6cc)]['y']=this['_distortionSprite'][_0x5dde5f(0x6cc)]['y']*this['_shadowScaleY']);},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0xa9b)]=Sprite_Actor['prototype'][_0x3823ba(0xadb)],Sprite_Actor[_0x3823ba(0x8d6)][_0x3823ba(0xadb)]=function(){const _0x37b3da=_0x3823ba;VisuMZ[_0x37b3da(0x4f3)]['Sprite_Actor_createStateSprite'][_0x37b3da(0x162)](this),VisuMZ[_0x37b3da(0x4f3)][_0x37b3da(0x242)]['HpGauge'][_0x37b3da(0x7ac)]&&this[_0x37b3da(0xc38)]();},VisuMZ[_0x3823ba(0x4f3)]['Sprite_Enemy_createStateIconSprite']=Sprite_Enemy[_0x3823ba(0x8d6)][_0x3823ba(0x9c7)],Sprite_Enemy['prototype'][_0x3823ba(0x9c7)]=function(){const _0x5d8b2e=_0x3823ba;VisuMZ['BattleCore'][_0x5d8b2e(0x242)]['HpGauge'][_0x5d8b2e(0x572)]&&this[_0x5d8b2e(0xc38)](),VisuMZ[_0x5d8b2e(0x4f3)]['Sprite_Enemy_createStateIconSprite']['call'](this);},Sprite_Battler[_0x3823ba(0x8d6)][_0x3823ba(0xc38)]=function(){const _0x4dbbde=_0x3823ba;if(!ConfigManager['visualHpGauge'])return;if(this[_0x4dbbde(0x786)]===Sprite_SvEnemy)return;const _0x35043b=VisuMZ[_0x4dbbde(0x4f3)][_0x4dbbde(0x242)][_0x4dbbde(0xb40)],_0x4ff1f7=new Sprite_HpGauge();_0x4ff1f7[_0x4dbbde(0xcef)]['x']=_0x35043b['AnchorX'],_0x4ff1f7[_0x4dbbde(0xcef)]['y']=_0x35043b[_0x4dbbde(0x5b7)],_0x4ff1f7[_0x4dbbde(0x6cc)]['x']=_0x4ff1f7[_0x4dbbde(0x6cc)]['y']=_0x35043b['Scale'],this[_0x4dbbde(0x33d)]=_0x4ff1f7,this[_0x4dbbde(0x538)](this[_0x4dbbde(0x33d)]);if(Spriteset_Battle[_0x4dbbde(0xa8e)]){if(_0x4dbbde(0x9c2)===_0x4dbbde(0x144)){if(this['actor']()['note'][_0x4dbbde(0xd57)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i))return _0x10187e(_0x56dfc4['$1']);else{if(this['actor']()[_0x4dbbde(0x920)][_0x4dbbde(0xd57)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return _0x500269(_0x23a78c['$2']);}return 0x0;}else BattleManager['addChildToUiContainer'](this[_0x4dbbde(0x33d)]);}},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x464)]=Sprite_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x120)],Sprite_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x120)]=function(_0x380f16){const _0x2dc33f=_0x3823ba,_0x2468b2=this[_0x2dc33f(0x6b7)];VisuMZ[_0x2dc33f(0x4f3)][_0x2dc33f(0x464)]['call'](this,_0x380f16),this[_0x2dc33f(0x662)](_0x380f16);if(_0x2468b2!==_0x380f16)this[_0x2dc33f(0xb3e)]();},Sprite_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x662)]=function(_0x273a38){const _0x1a3b95=_0x3823ba;if(!_0x273a38)return;if(!this[_0x1a3b95(0x33d)])return;if(_0x273a38[_0x1a3b95(0x4e0)]()){}else{if(_0x273a38[_0x1a3b95(0x737)]()){if(this[_0x1a3b95(0x786)]===Sprite_SvEnemy&&!_0x273a38['hasSvBattler']())return;}}this[_0x1a3b95(0x33d)][_0x1a3b95(0xa63)](_0x273a38,'hp');},Sprite_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x8a7)]=function(){const _0x59948e=_0x3823ba;return this[_0x59948e(0x6b7)]&&this[_0x59948e(0x6b7)][_0x59948e(0x8a7)]();},Sprite_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x27e)]=function(){const _0x56b6cc=_0x3823ba,_0x560d05=this[_0x56b6cc(0x1f8)][_0x56b6cc(0x850)];if(!_0x560d05)return;const _0xff58c7=_0x560d05['width'];let _0x3bac03=_0x560d05['height'];if(this['_battler'][_0x56b6cc(0x3b8)]()){if(this[_0x56b6cc(0x83b)])_0x3bac03=Math[_0x56b6cc(0xd19)](0x0,this[_0x56b6cc(0x83b)][_0x56b6cc(0xd6d)]-0x4);}this['_mainSprite'][_0x56b6cc(0x502)](0x0,0x0,_0xff58c7,_0x3bac03),this[_0x56b6cc(0x502)](0x0,0x0,_0xff58c7,_0x3bac03);},Sprite_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x3d3)]=function(){const _0x133ce5=_0x3823ba;if(!this[_0x133ce5(0x6b7)])return;if(!this[_0x133ce5(0x33d)])return;const _0x3bb77a=VisuMZ['BattleCore'][_0x133ce5(0x242)]['HpGauge'],_0x3750ab=this['_hpGaugeSprite'];_0x3750ab['visible']=this['isVisualHpGaugeDisplayed']();const _0x186d70=_0x3bb77a[_0x133ce5(0x24e)],_0x3f406f=_0x3bb77a[_0x133ce5(0x615)];_0x3750ab['x']=_0x186d70,_0x3750ab['x']+=this[_0x133ce5(0x6b7)]['battleUIOffsetX'](),_0x3750ab['y']=-this[_0x133ce5(0xd6d)]+_0x3f406f,_0x3750ab['y']+=this[_0x133ce5(0x6b7)][_0x133ce5(0x44f)](),Spriteset_Battle[_0x133ce5(0xa8e)]&&SceneManager[_0x133ce5(0xaa3)]['_spriteset']&&('WgDhx'!==_0x133ce5(0xa0c)?(_0x3750ab['x']+=this['x'],_0x3750ab['y']+=this['y']):_0x3bd1f2[_0x133ce5(0x2a3)]=_0x1db5f1(_0x4e4591['$1'])[_0x133ce5(0x8cf)]()[_0x133ce5(0xaf4)]());},Sprite_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x6a6)]=function(){const _0x578a9e=_0x3823ba;if(!this[_0x578a9e(0x6b7)])return![];if(this[_0x578a9e(0x6b7)]['isActor']())return!![];if(this['_battler'][_0x578a9e(0x763)]())return![];if(this[_0x578a9e(0xa2c)]<=0x0)return![];const _0x3f00ce=this[_0x578a9e(0x6b7)][_0x578a9e(0x634)]()[_0x578a9e(0x920)];if(_0x3f00ce['match'](/<SHOW HP GAUGE>/i))return!![];if(_0x3f00ce[_0x578a9e(0xd57)](/<HIDE HP GAUGE>/i))return![];const _0x38f6a0=VisuMZ[_0x578a9e(0x4f3)][_0x578a9e(0x242)][_0x578a9e(0xb40)];if(_0x38f6a0[_0x578a9e(0x20a)]){if(_0x578a9e(0xbc8)!==_0x578a9e(0xbc8)){_0x4d14b5[_0x578a9e(0x4f3)][_0x578a9e(0x1ee)][_0x578a9e(0x162)](this);if(this[_0x578a9e(0xca4)])this[_0x578a9e(0x25f)]();}else{if(_0x38f6a0[_0x578a9e(0xbaf)]&&BattleManager[_0x578a9e(0x3e2)]())return!![];if(this[_0x578a9e(0x6b7)][_0x578a9e(0xb54)])return![];return this[_0x578a9e(0x6b7)][_0x578a9e(0xb27)]();}}return!![];},VisuMZ[_0x3823ba(0x4f3)]['Sprite_Battler_isMoving']=Sprite_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x439)],Sprite_Battler['prototype'][_0x3823ba(0x439)]=function(){const _0x492bd0=_0x3823ba;if(!this[_0x492bd0(0x6b7)])return![];if(this[_0x492bd0(0x319)]>0x0)return!![];return VisuMZ[_0x492bd0(0x4f3)][_0x492bd0(0x22d)][_0x492bd0(0x162)](this);},VisuMZ[_0x3823ba(0x4f3)]['Sprite_Battler_startMove']=Sprite_Battler['prototype']['startMove'],Sprite_Battler['prototype'][_0x3823ba(0x67d)]=function(_0x6dca20,_0x2704a6,_0x5137ff){const _0x2e5145=_0x3823ba;this[_0x2e5145(0xaf7)]()&&VisuMZ[_0x2e5145(0x4f3)][_0x2e5145(0x63e)][_0x2e5145(0x162)](this,_0x6dca20,_0x2704a6,_0x5137ff);},Sprite_Battler[_0x3823ba(0x8d6)][_0x3823ba(0xaf7)]=function(){const _0x4e93ae=_0x3823ba;if(this[_0x4e93ae(0x6b7)]&&this[_0x4e93ae(0x6b7)][_0x4e93ae(0x3b8)]())return![];if(this[_0x4e93ae(0x6b7)]&&!this[_0x4e93ae(0x6b7)][_0x4e93ae(0xba4)]())return![];return $gameSystem['isSideView']();},Sprite_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x8f8)]=function(){},Sprite_Battler[_0x3823ba(0x8d6)][_0x3823ba(0xaa4)]=function(){const _0x290387=_0x3823ba;this[_0x290387(0x67d)](0x0,0x0,0xc);},Sprite_Battler[_0x3823ba(0x8d6)][_0x3823ba(0xaac)]=function(){},Sprite_Battler['prototype'][_0x3823ba(0x9be)]=function(){const _0x4146bc=_0x3823ba,_0x121a49=VisuMZ[_0x4146bc(0x4f3)][_0x4146bc(0x242)][_0x4146bc(0x9fc)],_0x92e373=this[_0x4146bc(0x6b7)]&&this[_0x4146bc(0x6b7)][_0x4146bc(0x4e0)]()?0x1:-0x1,_0x184ca7=this[_0x4146bc(0x12d)]-this[_0x4146bc(0x43c)]+_0x92e373*_0x121a49[_0x4146bc(0xbe0)],_0x327878=this[_0x4146bc(0xcf6)]-this[_0x4146bc(0x372)]+_0x92e373*_0x121a49['FlinchDistanceY'],_0xce13de=_0x121a49[_0x4146bc(0x548)];this[_0x4146bc(0x67d)](_0x184ca7,_0x327878,_0xce13de);},Sprite_Battler[_0x3823ba(0x8d6)][_0x3823ba(0x6e5)]=function(_0x548ce4,_0x57a89f){const _0x40f04c=_0x3823ba,_0x5f5caf=VisuMZ[_0x40f04c(0x4f3)]['Settings'][_0x40f04c(0x9fc)];this[_0x40f04c(0x1a0)]=Math['ceil']((_0x5f5caf[_0x40f04c(0xa8d)]??0x18)*_0x57a89f),this['_shakeFlinchPower']=Math['max'](this[_0x40f04c(0x780)],_0x548ce4);},Sprite_Battler[_0x3823ba(0x8d6)][_0x3823ba(0xa83)]=function(){const _0x55b5ac=_0x3823ba,_0x21f935=VisuMZ[_0x55b5ac(0x4f3)][_0x55b5ac(0x242)][_0x55b5ac(0x9fc)];if(!(_0x21f935[_0x55b5ac(0x259)]??![]))return;if(this[_0x55b5ac(0x1a0)]>0x0){if('OkWBh'!==_0x55b5ac(0x867)){this[_0x55b5ac(0xad6)]['remove'](_0x420854);if(_0x263a75===this[_0x55b5ac(0x527)])return;const _0x39d8f8=_0x425323[_0x55b5ac(0x682)](_0x35ffc1[_0x55b5ac(0xd0f)]());this[_0x55b5ac(0x611)][_0x55b5ac(0x3d9)]([_0x5338d4,_0x39d8f8]);}else{const _0x4181ca=this[_0x55b5ac(0x1a0)];this[_0x55b5ac(0x780)]=this[_0x55b5ac(0x780)]*(_0x4181ca-0x1)/_0x4181ca,this[_0x55b5ac(0x1a0)]--,this[_0x55b5ac(0x1a0)]<=0x0&&(this[_0x55b5ac(0x780)]=0x0);}}this[_0x55b5ac(0x780)]>0x0?(this[_0x55b5ac(0x1f8)]['x']=Math[_0x55b5ac(0x407)](this[_0x55b5ac(0x780)])*(Math['random']()<0.5?-0x1:0x1),this[_0x55b5ac(0xcf6)]!==this['y']&&(this['_mainSprite']['y']=this['height']*0.5,this[_0x55b5ac(0x1f8)]['y']+=Math[_0x55b5ac(0x407)](this['_shakeFlinchPower'])*(Math[_0x55b5ac(0x30f)]()<0.5?-0x1:0x1))):_0x55b5ac(0xa7e)===_0x55b5ac(0x1d2)?_0x3e6022=_0xa0cd70:(this['_mainSprite']['x']=0x0,this[_0x55b5ac(0x1f8)]['y']=this[_0x55b5ac(0xd6d)]*0.5);},VisuMZ['BattleCore']['Sprite_Actor_initMembers']=Sprite_Actor['prototype']['initMembers'],Sprite_Actor[_0x3823ba(0x8d6)][_0x3823ba(0x6f2)]=function(){const _0xe1bc47=_0x3823ba;VisuMZ['BattleCore'][_0xe1bc47(0xd32)]['call'](this),this[_0xe1bc47(0xac2)]();},Sprite_Actor[_0x3823ba(0x8d6)][_0x3823ba(0x7f9)]=function(){const _0x3a726b=_0x3823ba;return this[_0x3a726b(0xc5c)]||this[_0x3a726b(0x1f8)]||this;},VisuMZ[_0x3823ba(0x4f3)]['Sprite_Actor_moveToStartPosition']=Sprite_Actor[_0x3823ba(0x8d6)][_0x3823ba(0x4b1)],Sprite_Actor[_0x3823ba(0x8d6)][_0x3823ba(0x4b1)]=function(){},Sprite_Actor[_0x3823ba(0x8d6)][_0x3823ba(0xa86)]=function(_0xb2ce28){const _0x154f45=_0x3823ba;if(SceneManager['isPreviousSceneBattleTransitionable']())return;if(!_0xb2ce28)return;if(!_0xb2ce28[_0x154f45(0xaf7)]())return;VisuMZ[_0x154f45(0x4f3)][_0x154f45(0x910)]['call'](this);},VisuMZ[_0x3823ba(0x4f3)]['Sprite_Actor_setActorHome']=Sprite_Actor['prototype'][_0x3823ba(0xc29)],Sprite_Actor[_0x3823ba(0x8d6)]['setActorHome']=function(_0x19e661){const _0x2a2839=_0x3823ba;VisuMZ[_0x2a2839(0x4f3)][_0x2a2839(0x242)][_0x2a2839(0x9fc)][_0x2a2839(0x147)]?_0x2a2839(0x155)==='ttaiD'?_0x223cfd['BattleCore'][_0x2a2839(0xba2)][_0x2a2839(0x162)](this,_0x406592,_0x11ce17):VisuMZ[_0x2a2839(0x4f3)][_0x2a2839(0x242)]['Actor']['HomePosJS'][_0x2a2839(0x162)](this,_0x19e661):_0x2a2839(0x132)!=='hGFOE'?VisuMZ[_0x2a2839(0x4f3)][_0x2a2839(0xb17)]['call'](this,_0x19e661):(this[_0x2a2839(0x70f)]=_0x10f62f,this[_0x2a2839(0x3e8)]=-_0x40e293,this[_0x2a2839(0x397)]=_0x15bf37,this[_0x2a2839(0x8e0)](),this['updateFrame']());},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0xae3)]=Sprite_Actor[_0x3823ba(0x8d6)][_0x3823ba(0x120)],Sprite_Actor[_0x3823ba(0x8d6)]['setBattler']=function(_0x3673d5){const _0x1bc83b=_0x3823ba;VisuMZ[_0x1bc83b(0x4f3)][_0x1bc83b(0xae3)][_0x1bc83b(0x162)](this,_0x3673d5),this['setBattlerBattleCore'](_0x3673d5);},Sprite_Actor[_0x3823ba(0x8d6)][_0x3823ba(0x271)]=function(_0x552c7b){const _0x3a7755=_0x3823ba;if(!_0x552c7b)return;if(!this[_0x3a7755(0x1f8)])return;this[_0x3a7755(0x1f8)]['anchor']['x']=this[_0x3a7755(0x9c0)]['svBattlerAnchorX'](),this[_0x3a7755(0x1f8)][_0x3a7755(0xcef)]['y']=this[_0x3a7755(0x9c0)]['svBattlerAnchorY'](),this[_0x3a7755(0x236)]();},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x4d2)]=Sprite_Actor[_0x3823ba(0x8d6)][_0x3823ba(0x456)],Sprite_Actor[_0x3823ba(0x8d6)][_0x3823ba(0x456)]=function(){const _0x4709ee=_0x3823ba;VisuMZ['BattleCore'][_0x4709ee(0x4d2)]['call'](this),this[_0x4709ee(0x9c0)]&&(this[_0x4709ee(0x12b)](),this[_0x4709ee(0x12c)]());},VisuMZ[_0x3823ba(0x4f3)]['Sprite_Actor_updateBitmap']=Sprite_Actor[_0x3823ba(0x8d6)][_0x3823ba(0x87a)],Sprite_Actor[_0x3823ba(0x8d6)][_0x3823ba(0x87a)]=function(){const _0x2de54d=_0x3823ba;VisuMZ['BattleCore'][_0x2de54d(0xcaa)][_0x2de54d(0x162)](this);if(this[_0x2de54d(0x1f8)]&&this[_0x2de54d(0x1f8)]['bitmap']&&this[_0x2de54d(0x6b7)]){if(this[_0x2de54d(0x1f8)][_0x2de54d(0x850)]['smooth']!==this[_0x2de54d(0x6b7)][_0x2de54d(0x8e6)]()){if(_0x2de54d(0x7ba)===_0x2de54d(0x7ba))this[_0x2de54d(0x1f8)]['bitmap'][_0x2de54d(0x64e)]=this['_battler']['battlerSmoothImage']();else{const _0x1fb2d4=0xa,_0x42ed02=0x12c*_0x1fb2d4,_0xc0d29=0x1e*_0x1fb2d4;this['startMove'](_0x42ed02,0x0,_0xc0d29);}}}},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x1d3)]=Sprite_Actor['prototype'][_0x3823ba(0xa92)],Sprite_Actor[_0x3823ba(0x8d6)][_0x3823ba(0xa92)]=function(){const _0x57b8b3=_0x3823ba;VisuMZ[_0x57b8b3(0x4f3)]['Sprite_Actor_updateShadow'][_0x57b8b3(0x162)](this),this[_0x57b8b3(0xc2a)]();},Sprite_Actor[_0x3823ba(0x8d6)][_0x3823ba(0xc2a)]=function(){const _0x30dbb2=_0x3823ba;if(!this[_0x30dbb2(0x1f8)])return;if(!this[_0x30dbb2(0x61a)])return;this[_0x30dbb2(0x236)](),this['updateShadowPosition']();},Sprite_Actor[_0x3823ba(0x8d6)][_0x3823ba(0x12b)]=function(){const _0x56ffe3=_0x3823ba;this[_0x56ffe3(0x317)]['scale']['x']=0x1/(this['scale']['x']||0.001),this[_0x56ffe3(0x317)][_0x56ffe3(0x6cc)]['y']=0x1/(this[_0x56ffe3(0x6cc)]['y']||0.001);},Sprite_Actor[_0x3823ba(0x8d6)][_0x3823ba(0x12c)]=function(){const _0x421e70=_0x3823ba;if(!$gameSystem['isSideView']()&&this[_0x421e70(0x786)]===Sprite_Actor){const _0x373264=Scene_Battle[_0x421e70(0x8d6)]['battleLayoutStyle']();[_0x421e70(0x4d8),_0x421e70(0x934),_0x421e70(0x9e6),'border']['includes'](_0x373264)&&(this[_0x421e70(0xa2c)]=0x0);}},Sprite_Actor[_0x3823ba(0x8d6)]['refreshMotion']=function(){const _0x46833e=_0x3823ba,_0x3320c6=this[_0x46833e(0x9c0)];if(_0x3320c6){if(_0x3320c6[_0x46833e(0xd07)])return;const _0x3d545e=_0x3320c6[_0x46833e(0x2e1)]();if(_0x3320c6[_0x46833e(0xd96)]()||_0x3320c6[_0x46833e(0x63d)]()){if('wkgca'!==_0x46833e(0x77e))this[_0x46833e(0x2e8)]('walk');else{if(_0x531f80[_0x46833e(0xc1e)]())return;const _0x469df9=_0x12967c[_0x46833e(0x4f3)][_0x46833e(0x242)][_0x46833e(0x630)],_0x222af1=new _0x7745f();_0x222af1['_duration']=_0x469df9[_0x46833e(0x6ff)],this[_0x46833e(0x724)](_0x222af1),_0x222af1[_0x46833e(0xa63)](this[_0x46833e(0x6b7)]),_0x222af1[_0x46833e(0x82a)](this[_0x46833e(0x6b7)]),this['addDamageSprite'](_0x222af1);}}else{if(_0x3d545e===0x3)this[_0x46833e(0x2e8)](_0x46833e(0x455));else{if(_0x3d545e===0x2)this[_0x46833e(0x2e8)](_0x46833e(0xd3f));else{if(this['forceEscapeSprite'])this[_0x46833e(0x2e8)](_0x46833e(0xb42));else{if(_0x3320c6[_0x46833e(0x8d1)]()){if('FbQil'!=='FbQil'){const _0x4778c2=_0x700f9b(_0x13b9c8['$1']);return _0x22f388[_0x46833e(0xd31)]()[_0x46833e(0x3a2)](_0x299a61=>_0x299a61[_0x46833e(0xce6)]()===_0x4778c2);}else this['startMotion']('wait');}else{if(_0x3320c6['isChanting']())this[_0x46833e(0x2e8)]('chant');else{if(_0x3320c6[_0x46833e(0x378)]()||_0x3320c6[_0x46833e(0x909)]())this[_0x46833e(0x2e8)]('guard');else{if(_0x3d545e===0x1)_0x46833e(0x7ee)!==_0x46833e(0x7ee)?_0x4fc142[_0x46833e(0x9fd)](0x0):this[_0x46833e(0x2e8)](_0x46833e(0x1d7));else{if(_0x3320c6['isDying']()){if('jeVxZ'!==_0x46833e(0x98c))this[_0x46833e(0x2e8)](_0x46833e(0xc4c));else{if(_0x2796ac===_0x463cf3[_0x46833e(0x846)]())return![];}}else{if(_0x3320c6['isUndecided']())this['startMotion']('walk');else _0x3320c6[_0x46833e(0xd0f)]()?this[_0x46833e(0x2e8)](_0x46833e(0x498)):this['startMotion'](_0x46833e(0x5bf));}}}}}}}}}}},Sprite_Actor['prototype'][_0x3823ba(0xaac)]=function(){const _0xca88d=_0x3823ba,_0xb5d484=0xa,_0x1ec396=0x12c*_0xb5d484,_0x27ec9d=0x1e*_0xb5d484;this[_0xca88d(0x67d)](_0x1ec396,0x0,_0x27ec9d);},Sprite_Actor[_0x3823ba(0x8d6)][_0x3823ba(0x15c)]=function(){const _0x277075=_0x3823ba;Sprite_Battler[_0x277075(0x8d6)][_0x277075(0x15c)][_0x277075(0x162)](this);},Sprite_Actor[_0x3823ba(0x8d6)][_0x3823ba(0xd8e)]=function(){const _0x2f5586=_0x3823ba;return Sprite_Battler[_0x2f5586(0x842)];},Sprite_Weapon[_0x3823ba(0x8d6)]['animationWait']=function(){const _0x5cc0c5=_0x3823ba;return Sprite_Battler[_0x5cc0c5(0x842)];},Sprite_Actor['prototype'][_0x3823ba(0x42d)]=function(){},Sprite_Actor[_0x3823ba(0x8d6)][_0x3823ba(0x15a)]=function(){},Sprite_Actor[_0x3823ba(0x8d6)]['updateMotionCount']=function(){const _0x5d6994=_0x3823ba;if(this[_0x5d6994(0x9b0)]&&++this[_0x5d6994(0xbe5)]>=this[_0x5d6994(0xd8e)]()){if(this['_motion'][_0x5d6994(0x90b)])_0x5d6994(0xab3)===_0x5d6994(0x1d5)?this[_0x5d6994(0xa14)][_0x5d6994(0xa63)](this['_battler']):this[_0x5d6994(0x397)]=(this[_0x5d6994(0x397)]+0x1)%0x4;else{if(this['_pattern']<0x2)this[_0x5d6994(0x397)]++;else{if('mBVyW'!==_0x5d6994(0x677))this[_0x5d6994(0xd61)]['push'](_0x5d6994(0x498)),this[_0x5d6994(0xd61)]['push'](_0x5d6994(0xcd2));else{const _0x240ce1=this[_0x5d6994(0x9c0)];if(_0x240ce1)_0x240ce1[_0x5d6994(0xd07)]=undefined;this[_0x5d6994(0x34f)]();}}}this[_0x5d6994(0xbe5)]=0x0;}},Sprite_Actor[_0x3823ba(0x8d6)][_0x3823ba(0x701)]=function(_0x2b7372){const _0x24f591=_0x3823ba;if(this[_0x24f591(0x6b7)]&&this['_battler']['isDead']()){this[_0x24f591(0x9b0)]=Sprite_Actor[_0x24f591(0x938)]['dead'];return;}const _0xff08e1=Sprite_Actor['MOTIONS'][_0x2b7372];this[_0x24f591(0x9b0)]=_0xff08e1,this['_motionCount']=0x0,this[_0x24f591(0x397)]=0x0;},Sprite_Actor[_0x3823ba(0x8d6)][_0x3823ba(0x7c0)]=function(_0x38a31b){const _0x2fdc40=_0x3823ba;if(this[_0x2fdc40(0x8a7)]())return;this[_0x2fdc40(0x9f5)](),this[_0x2fdc40(0x873)][_0x2fdc40(0xa63)](_0x38a31b),this[_0x2fdc40(0x9c0)]['clearWeaponAnimation']();},Sprite_Actor[_0x3823ba(0x8d6)][_0x3823ba(0x9f5)]=function(){const _0x5326e8=_0x3823ba;let _0x2bd97a=-0x10,_0x48d0c7=this[_0x5326e8(0xd6d)]*0.5;const _0x2924b1=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0x2711b8=this[_0x5326e8(0x6b7)][_0x5326e8(0x4f7)]()[_0x5326e8(0x4d0)](_0x20e30f=>_0x20e30f&&_0x20e30f[_0x5326e8(0x920)][_0x5326e8(0xd57)](_0x2924b1)?Number(RegExp['$1']):0x0),_0x4892dc=this['_battler'][_0x5326e8(0x4f7)]()['map'](_0x21650a=>_0x21650a&&_0x21650a['note']['match'](_0x2924b1)?Number(RegExp['$2']):0x0);_0x2bd97a=_0x2711b8['reduce']((_0x580d23,_0xed6870)=>_0x580d23+_0xed6870,_0x2bd97a),_0x48d0c7=_0x4892dc[_0x5326e8(0x19f)]((_0x42411e,_0x2a4d9f)=>_0x42411e+_0x2a4d9f,_0x48d0c7),this[_0x5326e8(0x873)]['x']=_0x2bd97a,this['_weaponSprite']['y']=_0x48d0c7,this[_0x5326e8(0x873)]['update']();},Sprite_Weapon[_0x3823ba(0x8d6)][_0x3823ba(0xa63)]=function(_0x2503e1){const _0x5b8238=_0x3823ba;this[_0x5b8238(0x70f)]=_0x2503e1,this[_0x5b8238(0x3e8)]=-0x1,this[_0x5b8238(0x397)]=0x0,this['loadBitmap'](),this[_0x5b8238(0x3f5)]();},Sprite_Actor[_0x3823ba(0x8d6)]['updateTargetPosition']=function(){},Sprite_Actor[_0x3823ba(0x8d6)][_0x3823ba(0x8f8)]=function(){const _0xd3ea9d=_0x3823ba,_0x5977a5=VisuMZ[_0xd3ea9d(0x4f3)]['Settings']['ActionSequence'],_0x233c79=_0x5977a5[_0xd3ea9d(0x14d)],_0x1b4cf4=_0x5977a5[_0xd3ea9d(0x11f)],_0x5f22af=_0x5977a5['StepDuration'];this['startMove'](-_0x233c79,-_0x1b4cf4,_0x5f22af);},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x14e)]=Sprite_Actor[_0x3823ba(0x8d6)][_0x3823ba(0x3f5)],Sprite_Actor[_0x3823ba(0x8d6)][_0x3823ba(0x3f5)]=function(){const _0x382962=_0x3823ba;this['hasStaticSvBattler']()?this[_0x382962(0x27e)]():(this['applyFreezeMotionFrames'](),VisuMZ[_0x382962(0x4f3)][_0x382962(0x14e)]['call'](this));},Sprite_Actor['prototype']['applyFreezeMotionFrames']=function(){const _0x343617=_0x3823ba;if(this[_0x343617(0x6b7)]&&this[_0x343617(0x6b7)]['_freezeMotionData']){const _0x529b5d=this['_battler']['_freezeMotionData'];this[_0x343617(0x9b0)]=Sprite_Actor['MOTIONS'][_0x529b5d[_0x343617(0x855)]],this[_0x343617(0x397)]=_0x529b5d[_0x343617(0x89b)];const _0x30f3ab=this[_0x343617(0x873)];_0x30f3ab[_0x343617(0x210)](_0x529b5d[_0x343617(0x360)],_0x529b5d[_0x343617(0x89b)]),this[_0x343617(0x9f5)]();}},Sprite_Weapon[_0x3823ba(0x8d6)][_0x3823ba(0x210)]=function(_0x2a91a9,_0x4268e6){const _0x4d6bf5=_0x3823ba;this[_0x4d6bf5(0x70f)]=_0x2a91a9,this[_0x4d6bf5(0x3e8)]=-Infinity,this[_0x4d6bf5(0x397)]=_0x4268e6,this[_0x4d6bf5(0x8e0)](),this['updateFrame']();},Sprite_Enemy[_0x3823ba(0x8d6)][_0x3823ba(0x6f2)]=function(){const _0x3f8495=_0x3823ba;Sprite_Battler[_0x3f8495(0x8d6)][_0x3f8495(0x6f2)][_0x3f8495(0x162)](this),this['_enemy']=null,this[_0x3f8495(0x5b0)]=![],this[_0x3f8495(0xcc6)]='',this['_battlerHue']=0x0,this[_0x3f8495(0x715)]=null,this['_effectDuration']=0x0,this[_0x3f8495(0xb14)]=0x0,this[_0x3f8495(0x413)](),this['createStateIconSprite']();},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x28d)]=Sprite_Enemy['prototype']['update'],Sprite_Enemy['prototype'][_0x3823ba(0x456)]=function(){const _0x5865da=_0x3823ba;VisuMZ[_0x5865da(0x4f3)]['Sprite_Enemy_update']['call'](this),this[_0x5865da(0x236)]();},Sprite_Enemy['prototype'][_0x3823ba(0x413)]=function(){const _0x59ae08=_0x3823ba;this[_0x59ae08(0x1f8)]=new Sprite(),this[_0x59ae08(0x1f8)][_0x59ae08(0xcef)]['x']=0.5,this[_0x59ae08(0x1f8)][_0x59ae08(0xcef)]['y']=0x1,this[_0x59ae08(0x538)](this[_0x59ae08(0x1f8)]),this[_0x59ae08(0xac2)]();},Sprite_Enemy[_0x3823ba(0x8d6)]['mainSprite']=function(){return this['_distortionSprite']||this['_mainSprite']||this;},Sprite_Enemy[_0x3823ba(0x8d6)]['loadBitmap']=function(_0xcef699){const _0x21bba7=_0x3823ba;this[_0x21bba7(0x850)]=new Bitmap(0x1,0x1);if(this[_0x21bba7(0x366)]()){if(_0x21bba7(0xb19)===_0x21bba7(0xc00)){if(!_0x7ba687['VisuMZ_3_ActSeqImpact'])return;const _0x2eb042=_0x214423['_scene'][_0x21bba7(0x8a5)];if(!_0x2eb042)return;if(_0x49b2fe[_0x21bba7(0x79b)][_0x21bba7(0xd18)]<=1.04){_0x601f6(_0x21bba7(0x25b)),_0xdf41c8[_0x21bba7(0x824)]();return;}_0x390ac3['ConvertParams'](_0x43e588,_0xb9262b);const _0x3149fc=_0x531ff4['Enable'];_0x2eb042[_0x21bba7(0xc2e)](_0x3149fc);}else{const _0xe311f2=this[_0x21bba7(0x99c)]['svBattlerData']();this[_0x21bba7(0x850)]=new Bitmap(_0xe311f2[_0x21bba7(0x204)],_0xe311f2[_0x21bba7(0xd6d)]),this[_0x21bba7(0x1f8)]['bitmap']=new Bitmap(0x1,0x1);}}else{if($gameSystem[_0x21bba7(0x839)]()){const _0x248c5b=ImageManager[_0x21bba7(0x732)](_0xcef699);_0x248c5b[_0x21bba7(0x2b7)](this[_0x21bba7(0x166)][_0x21bba7(0x343)](this,_0x248c5b));}else{const _0x3ac77b=ImageManager[_0x21bba7(0x591)](_0xcef699);_0x3ac77b[_0x21bba7(0x2b7)](this[_0x21bba7(0x166)][_0x21bba7(0x343)](this,_0x3ac77b));}}},Sprite_Enemy[_0x3823ba(0x8d6)][_0x3823ba(0x166)]=function(_0x2c2a70){const _0x58b4a5=_0x3823ba;this[_0x58b4a5(0x1f8)]['bitmap']=_0x2c2a70,this['bitmap']=new Bitmap(_0x2c2a70['width'],_0x2c2a70[_0x58b4a5(0xd6d)]);},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x404)]=Sprite_Enemy['prototype'][_0x3823ba(0x51b)],Sprite_Enemy[_0x3823ba(0x8d6)][_0x3823ba(0x51b)]=function(_0x3ae9c9){const _0x523216=_0x3823ba;if(this[_0x523216(0x1f8)]){if(_0x523216(0x384)===_0x523216(0x384))this[_0x523216(0x1f8)][_0x523216(0x51b)](_0x3ae9c9);else{const _0x1f1d79=_0x88e9a5['BattleCore']['Settings'][_0x523216(0x179)];this[_0x523216(0x2b6)]=_0x1f1d79[_0x523216(0x4d1)],this[_0x523216(0xa45)]={};}}},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0xb86)]=Sprite_Enemy[_0x3823ba(0x8d6)]['initVisibility'],Sprite_Enemy[_0x3823ba(0x8d6)][_0x3823ba(0xc2d)]=function(){const _0x70297f=_0x3823ba;if(this[_0x70297f(0xa56)]()){if('qnXLH'!==_0x70297f(0x643)){if(this[_0x70297f(0x51a)]>0x0)this[_0x70297f(0x51a)]-=0x10;}else VisuMZ[_0x70297f(0x4f3)]['Sprite_Enemy_initVisibility'][_0x70297f(0x162)](this);}else this[_0x70297f(0x5b0)]=!this[_0x70297f(0x99c)][_0x70297f(0x763)](),!this[_0x70297f(0x5b0)]&&(_0x70297f(0x523)!=='KLVIQ'?this[_0x70297f(0x965)](!![]):this[_0x70297f(0xa2c)]=0x0);},VisuMZ['BattleCore'][_0x3823ba(0xa7a)]=Sprite_Enemy[_0x3823ba(0x8d6)][_0x3823ba(0x941)],Sprite_Enemy[_0x3823ba(0x8d6)][_0x3823ba(0x941)]=function(){const _0x2d4f7a=_0x3823ba;if(this[_0x2d4f7a(0xa56)]())VisuMZ['BattleCore'][_0x2d4f7a(0xa7a)]['call'](this);},Sprite_Enemy[_0x3823ba(0x8d6)]['updateFrame']=function(){const _0x3f2183=_0x3823ba;Sprite_Battler['prototype'][_0x3f2183(0x3f5)]['call'](this);const _0x473ba9=this['mainSprite']()||this;if(!_0x473ba9)return;!_0x473ba9[_0x3f2183(0x850)]&&(_0x473ba9['bitmap']=new Bitmap(this[_0x3f2183(0x204)]||0x1,this[_0x3f2183(0xd6d)]||0x1));if(this[_0x3f2183(0x715)]===_0x3f2183(0xbc5))this['_mainSprite'][_0x3f2183(0x502)](0x0,0x0,this[_0x3f2183(0x1f8)][_0x3f2183(0x204)]||0x1,this[_0x3f2183(0x648)]);else{if(_0x3f2183(0x739)!==_0x3f2183(0xbea)){let _0x100813=0x1;if(_0x473ba9&&_0x473ba9[_0x3f2183(0x850)])_0x100813=_0x473ba9[_0x3f2183(0x850)]['width'];let _0x468f26=0x1;if(this['bitmap'])_0x468f26=this[_0x3f2183(0x850)][_0x3f2183(0xd6d)];_0x473ba9[_0x3f2183(0x502)](0x0,0x0,_0x100813,_0x468f26);}else{if(!_0x4804ee[_0x3f2183(0xbc6)]())return;if(_0x2c04a0[_0x3f2183(0xc1e)]())return;if(!this[_0x3f2183(0x798)]())return;if(_0x4b52f8[_0x3f2183(0xb23)]<=0x0)return;_0x5071af=_0x8c731d||{},_0x52eed5[_0x3f2183(0xb76)]=_0x2e4281['textColor']||'#ffffff',_0x112d25['flashColor']=_0x4e2d91[_0x3f2183(0x5cc)]||[0x0,0x0,0x0,0x0],_0xe3cdc5[_0x3f2183(0x55a)]=_0x40e822[_0x3f2183(0x55a)]||0x0,this['battler']()['setupTextPopup'](_0x96df5a,_0x4b34f4);}}},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x11e)]=Sprite_Enemy['prototype'][_0x3823ba(0x176)],Sprite_Enemy[_0x3823ba(0x8d6)][_0x3823ba(0x176)]=function(){const _0x5a5bb1=_0x3823ba;if(this[_0x5a5bb1(0xa56)]())VisuMZ[_0x5a5bb1(0x4f3)][_0x5a5bb1(0x11e)][_0x5a5bb1(0x162)](this);},Sprite_Enemy[_0x3823ba(0x8d6)]['isMoving']=function(){const _0x7c641e=_0x3823ba;return Sprite_Battler[_0x7c641e(0x8d6)][_0x7c641e(0x439)]['call'](this);},VisuMZ[_0x3823ba(0x4f3)]['Sprite_Enemy_updateStateSprite']=Sprite_Enemy[_0x3823ba(0x8d6)]['updateStateSprite'],Sprite_Enemy[_0x3823ba(0x8d6)][_0x3823ba(0x12b)]=function(){const _0x260713=_0x3823ba;VisuMZ[_0x260713(0x4f3)][_0x260713(0x9cc)][_0x260713(0x162)](this),this['updateStateSpriteBattleCore']();},Sprite_Enemy['prototype'][_0x3823ba(0x6b9)]=function(){const _0x35ca8d=_0x3823ba,_0x27ac27=VisuMZ[_0x35ca8d(0x4f3)][_0x35ca8d(0x242)][_0x35ca8d(0x179)];if(_0x27ac27[_0x35ca8d(0x6f7)]&&!_0x27ac27['NameLegacy']){this[_0x35ca8d(0xa14)][_0x35ca8d(0xa2c)]=0x0;return;}this[_0x35ca8d(0xa14)]['x']=0x0,this[_0x35ca8d(0xa14)]['x']+=this[_0x35ca8d(0x6b7)][_0x35ca8d(0x89d)]();let _0x585ca1=0x1;if(this[_0x35ca8d(0x850)])_0x585ca1=this['bitmap'][_0x35ca8d(0xd6d)];this[_0x35ca8d(0xa14)]['y']=-_0x585ca1-this[_0x35ca8d(0xa14)][_0x35ca8d(0xd6d)]-0x4,this[_0x35ca8d(0xa14)]['y']+=this[_0x35ca8d(0x6b7)][_0x35ca8d(0x44f)](),this[_0x35ca8d(0xa14)][_0x35ca8d(0x6cc)]['x']=0x1/(this[_0x35ca8d(0x6cc)]['x']||0.001),this['_stateIconSprite'][_0x35ca8d(0x6cc)]['y']=0x1/(this['scale']['y']||0.001),this['hasSvBattler']()&&(this['_svBattlerSprite'][_0x35ca8d(0x317)][_0x35ca8d(0x6cc)]['x']=-0x1/(this['scale']['x']||0.001),this[_0x35ca8d(0x396)][_0x35ca8d(0x317)][_0x35ca8d(0x6cc)]['y']=0x1/(this[_0x35ca8d(0x6cc)]['y']||0.001));},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x29a)]=Sprite_Enemy[_0x3823ba(0x8d6)]['setBattler'],Sprite_Enemy[_0x3823ba(0x8d6)][_0x3823ba(0x120)]=function(_0x511223){const _0x5358a3=_0x3823ba;VisuMZ[_0x5358a3(0x4f3)]['Sprite_Enemy_setBattler']['call'](this,_0x511223),this[_0x5358a3(0x3dd)](_0x511223);},Sprite_Enemy[_0x3823ba(0x8d6)]['setSvBattlerSprite']=function(_0x193e23){const _0x5158b4=_0x3823ba;!this[_0x5158b4(0x396)]&&(_0x5158b4(0xced)!=='jNKAZ'?this[_0x5158b4(0xb78)]=_0x5158b4(0x4d8):(this[_0x5158b4(0x396)]=new Sprite_SvEnemy(_0x193e23),this[_0x5158b4(0xac2)]())),this['_svBattlerSprite'][_0x5158b4(0x120)](_0x193e23);},Sprite_Enemy[_0x3823ba(0x8d6)]['hasSvBattler']=function(){const _0x3d73e6=_0x3823ba;return this[_0x3d73e6(0x99c)]&&this[_0x3d73e6(0x99c)][_0x3d73e6(0x366)]();},Sprite_Enemy[_0x3823ba(0x8d6)][_0x3823ba(0xa56)]=function(){const _0x182203=_0x3823ba;return this['hasSvBattler']()?_0x182203(0x2ca)===_0x182203(0xc9a)?this[_0x182203(0x888)]()[_0x182203(0x450)]:this[_0x182203(0x99c)][_0x182203(0xa56)]():!![];},Sprite_Enemy[_0x3823ba(0x8d6)][_0x3823ba(0x34f)]=function(){const _0x507cc9=_0x3823ba;this[_0x507cc9(0x366)]()&&(_0x507cc9(0x177)!==_0x507cc9(0x177)?_0x2e394e=_0x4f4797[_0x507cc9(0x306)]:this[_0x507cc9(0x396)]['refreshMotion']());},Sprite_Enemy[_0x3823ba(0x8d6)]['forceMotion']=function(_0x2fcccc){const _0x4551f9=_0x3823ba;if(this[_0x4551f9(0x366)]())this[_0x4551f9(0x396)]['forceMotion'](_0x2fcccc);},Sprite_Enemy['prototype'][_0x3823ba(0x7c0)]=function(_0x5f1820){const _0x566764=_0x3823ba;if(this[_0x566764(0x366)]())this[_0x566764(0x396)][_0x566764(0x7c0)](_0x5f1820);},Sprite_Enemy[_0x3823ba(0x8d6)][_0x3823ba(0x8f8)]=function(){const _0x166482=_0x3823ba,_0x2f5e27=VisuMZ[_0x166482(0x4f3)][_0x166482(0x242)][_0x166482(0x871)],_0x549e62=_0x2f5e27[_0x166482(0x14d)],_0x9f727=_0x2f5e27['StepDistanceY'],_0x1bf87c=_0x2f5e27[_0x166482(0x41b)];this[_0x166482(0x67d)](_0x549e62,_0x9f727,_0x1bf87c);};function _0x2f55(){const _0x1c0499=['jNKAZ','removeActor','anchor','_createCursorSprite','GHhDP','CriticalHitRateJS','processEnemyModeTouchBattleCore','tone','%1\x20is\x20missing\x20a\x20required\x20plugin.\x0aPlease\x20install\x20%2\x20into\x20the\x20Plugin\x20Manager.','_baseY','_waitCount','skills','PostApplyAsTargetJS','ActSeq_Mechanics_StbExploit','AsUser','rIlmb','criticalDmgFlat','JS\x20%1END\x20ACTION','onBattleStartBattleCore','_helpWindow','aGcsK','onEnemyOk','changeAtbCastTime','skillItemWindowRectBorderStyle','jcErW','isOpponent','_performDamageMotion','lSWxH','recoverAll','guardSkillId','_animationContainer','focus','mkiih','_lastPluginCommandInterpreter','currentAction','UmWPL','ActSeq_Mechanics_CustomDmgFormula','eYDQh','removeStatesAuto','CriticalDmgFlat','qAZSW','XgxHk','createBattleFieldContainer','version','max','JS\x20BATTLE\x20DEFEAT','DamageStyleList','skew','Scene_Battle_commandEscape','_enemyNameContainer','SLMpu','fillRect','battleStatusSprite','IsVMZ','_duration','testApply','duration','lgZrQ','undecided','HP_Rate','createCommandNameWindow','ppSkz','ActSeq_Horror_NoiseCreate','GnDfj','Window_BattleActor_hide','isFloating','startHomeMove','updateWeather','aliveMembers','Sprite_Actor_initMembers','DEF','process_VisuMZ_BattleCore_BaseTroops','ShowPortraitsBorderStyle','SvBattlerSolo-%1-%2','setItem','mHpNA','isNegativeLifeSteal','ljNBf','isAnyoneSpinning','refreshBattlerMotions','WaitForAngle','startAction','sleep','_flipScaleX','special','zLbRR','iGYwV','PxDjJ','pgdaK','battleJump','performJump','createMultiTargetWindows','gsPWg','_updateFilterArea','autoBattleStart','_actions','vKKhB','ActionEffect','ATK','isDamagePopupRequested','dwsyn','PreEndActionJS','_flashColor','alive\x20actors\x20not\x20user','_skewDuration','getSpecificBattlerKeyTarget','match','%1-%2','checkAutoCustomActionSequenceNotetagEffect','getEnemyIdWithName','QvmNh','isSelected','getDualWieldTimes','HpGaugeOffsetX','BattleDefeatJS','CriticalColor','_logWindow','SkillItemBorderCols','Game_Battler_performDamage','rEADE','mmlBZ','parameters','startEnemySelection','version\x20in\x20order\x20to\x20use\x20the\x20<Extend:\x20x>\x20function.','Game_Action_itemEffectAddNormalState','onRegeneratePlayStateAnimation','alive\x20opponents','Game_Action_testApply','height','StyleName','hpDamage','_tempBattler','placeTimeGauge','PopupPosition','randomTargets','FPBpd','QKzJS','centerFrontViewSprite','_battleField','damageRate','Game_Interpreter_command301','ActSeq_Movement_WaitForFloat','_playTestFastMode','getConfigValue','ActSeq_Grid_TeleportToNode','JS\x20%1START\x20BATTLE','ActSeq_Mechanics_ActiveChainInputDisable','isAutoBattleCommandEnabled','TextFmt','Window_BattleEnemy_initialize','isBusy','CmdStyle','setTroopPage','Armor-%1-%2','EnemyOffsetY','save','ActorOffsetX','Filename','atbInterrupt','alive\x20enemies\x20not\x20user','RevertAngle','motionSpeed','NameAlwaysHidden','BattleManager_onEscapeSuccess','makeTargetsBattleCore','forceAction','parse','ActSeq_Mechanics_AtbGauge','JeUhM','isInputting','_namesCount','command236','VisuMZ_3_FrontviewBattleUI','_targetOffsetY','adjustPosition_ScaleToFit','StartTurnWait','needsSelection','becomeSTBExploited','IbZSN','_enemies','ActSeq_Impact_ZoomBlurTargetCenter','DefeatEvent','dead\x20opponents','createAllWindows','isAnyoneGrowing','CQBzN','HlAQs','performMoveToPoint','hwqqu','_indent','GRID\x20MOVE','command301','isBattleCoreTargetScope','deselect','_reflectionTarget','onBattleStart','_forcing','canEscape','NameAlwaysVisible','emulateAction','updateAttachedSprites','alive\x20friends','displayCounter','playCancel','Game_Map_setupBattleback','Game_Interpreter_command283','Sprite_Enemy_updateBossCollapse','StepDistanceY','setBattler','HxKLM','indexOf','RegExp','lgbKs','disarmLifeSteal','setupBattlebackBattleCore','terminate','occasion','makeTargetSprites','removeChildFromUiContainer','updateStateSprite','updateStyleOpacity','_baseX','SvMotionIdleSolo-%1-%2','Linear','Window_BattleLog_displayCurrentState','_action','ZiwWA','APPXf','Game_Battler_regenerateAll','Game_Temp_initialize','gMJNw','visibilityState','criticalHitFlat','isAnyoneJumping','Mute','ActSeq_Mechanics_StbExtraAction','ActSeq_Projectile_Picture','CheckMapBattleEventValid','ExtraSettings','updateKeyboardKeys','CreateActionSequenceTargets','displayTpDamage','ActSeq_Mechanics_CtbOrder','isAnyoneSkewing','VejMC','concat','setupChild','HomePosJS','_frontAttachmentSprite','isGrowing','addNewState','EXObQ','actionEffect','StepDistanceX','Sprite_Actor_updateFrame','UcuKS','KYNnC','IAeZB','_weather','itemRect','VisuMZ_3_ActSeqProjectiles','cnfgZ','ActSeq_Horror_TVRemove','gJTMq','isAnyoneInjectAniPrepping','YJBUn','setupWeaponAnimation','fdPrS','onMoveEnd','hidden','turnOrderChangeOTB','callNextMethod','QWfPS','animationId','call','bgType','gaugeLineHeight','ANGLE','onStaticEnemyBitmapLoad','alterActionCostPTB','updateGrow','oPUYN','288djqBsp','VisuMZ_3_ActSeqImpact','QOKvR','value','playOnceParallelInterpreter','SceneManager_isSceneChanging','selectPreviousCommand','etkcf','isCommandEnabled','lrdhb','isGuardLifeSteal','setEnemyWindowMode','updateBossCollapse','nlooE','HitRate','Enemy','lastCommandSymbol','Game_Action_setSubject','attackSkillId','_lastEnemy','VCzJV','CastAnimation','updateMain','rKwNI','_escapeRatio','Scene_Battle_initialize','_damages','VoiceLineType','isOptionsCommandEnabled','drawText','ActSeq_Movement_HomeReset','addBattleCoreAutoBattleStartupCommand','isClicked','ActSeq_Camera_WaitForCamera','ParseActorNotetags','isAnyoneMoving','MpGaugeOffsetY','sXKUW','wBQqN','isAnyoneChangingOpacity','shouldPopupDamage','setupTextPopup','SMDaF','wZcKE','NTQoz','actor%1-portrait','_lineHeight','LRqpR','extraPositionY','AzmAC','lifeSteaItem','contents','changeCtbCastTime','reduce','_shakeFlinchDuration','QIYuB','applyData','addItemCommand','rNrIR','PostEndBattleJS','mainFontSize','LIGHT-BULB','CreateCommonEventKeys','battleCoreResumeLaunchBattle','drawItemImageXPStyle','jumpBattler','_branch','drawItemImageListStyle','_currentActor','wtypeId','updateCustomActionSequence','_stypeIDs','dHsAk','_floatDuration','createAnimationContainer','open','xAEpP','updatePosition','find','updateAttachmentSprites','NsKqo','changeInputWindow','VisuMZ_2_BattleSystemBTB','paySkillCost','ActSeq_Weapon_ClearActiveWeapon','_forceAction','all\x20targets','displayActionResults','globalAlpha','Scene_Battle_startPartyCommandSelection','TKXAn','aMYLR','BattleManager_onEncounter','BattleManager_processDefeat','getBattlePortraitOffsetY','edTKt','pageup','maxBattleMembers','ActSeq_Movement_FaceDirection','alive\x20battlers','ActSeq_DB_DragonbonesMotionAni','isPlaying','makeTargetsBattleCoreJS','_endBattle','cUrsX','Sprite_Actor_updateShadow','isPlaytest','vkkuR','formula','abnormal','damageFlat','VisuMZ_3_VisualCutinEffect','removedStateObjects','StatusWindowAttachmentFront','ActSeq_Movement_Scale','AnimationID','rAejm','XBdzY','ApplyImmortal','floatBattler','isOnCurrentMap','isAnimationShownOnBattlePortrait','AggroControlSystem','Targets2','_drawTextBody','stop','RACcc','setBattlePortrait','JS\x20%1END\x20BATTLE','...','string','negativeHpLifeSteal','Window_BattleLog_update','slices','IconSet','onEncounterBattleCore','isShownOnBattlePortrait','AOCsX','updateBattleProcess','Post','Scene_Battle_onActorCancel','JS\x20ESCAPE\x20FAILURE','_mainSprite','HelpOptions','iGPhk','KGdtF','ActSeq_Grid_ClearPassiveStatesFromNode','performEvasion','uROPo','performMoveToTargets','makeAutoBattleActions','getSkillTypes','ActSeq_Cutin_EndVisualCutinEffectAll','isItemCommandEnabled','width','isFrameVisible','StatusWindowSelectableBackHide','XWiuo','jsScaleToFit','startTpbTurn','RequiresDefeat','PRqXr','ZlTUL','gRrQg','needsActorInputCancel','XPActorCommandLines','freezeFrame','StatusWindowAttachmentBackOffsetX','addFightCommand','mJXLR','svActorVertCells','Sprite_Battler_setHome','ShowReflect','autoBattleAtStart','oaAra','gainHp','WaitForSkew','glJob','HelpItem','windowAreaHeight','actionBattleCoreJS','applyGuard','_borderPortraitSprite','isForFriend','animationNextDelay','battleEffect','ActSeq_ChangeSkew','cnFVq','OffsetAdjust','preparePartyRefresh','IhnwO','LIGHTBULB','mvDJg','VisuMZ_1_BattleCore\x20does\x20NOT\x20support\x20changing','JS\x20%1START\x20TURN','Sprite_Battler_isMoving','%1StartActionJS','split','Game_BattlerBase_addNewState','_regionBattleback1','targetSpritePosition','updateSkew','SXcDt','EscapeSuccess','updateShadowVisibility','ActSeq_Grid_PushFromTargetNode','glitch','move','Game_Enemy_transform','autoMeleeSingleTargetActionSet','isTpbCharged','Scene_Battle_createActorCommandWindow','loadSvActor','Window_BattleStatus_drawItemImage','onActorCancel','Scene_Battle_updateBattleProcess','Settings','tNLet','Game_Battler_performMiss','Scene_Boot_onDatabaseLoaded','Game_Troop_expTotal','\x20to\x20%1\x20midbattle.','GetActionSequenceSpecialTargetWithFlags','isForAnyoneFocusFriends','BARE\x20HANDS','wBUBu','_back1Sprite','PostStartActionJS','OffsetX','switchToWeaponType','createDamageContainer','in\x20order\x20for\x20Taunt\x20and\x20Provoke\x20features\x20to\x20work\x20','ShowCurrentState','ixElq','StateIconOffsetY','ElementStatusCore','battlerShadowScaleY','mmp','isCustomActionSequence','ShakeFlinch','Debuffs','Action\x20Sequence\x20Impact\x20needs\x20an\x20update!','JSON','resizeWindowBorderStyle','changePaintOpacity','processRefresh','ActSeq_Mechanics_AddState','ActSeq_Zoom_Reset','retrieveBattleBalloon','ActSeq_BattleLog_PushBaseLine','_statusWindow','ConfigManager_makeData','LeLDe','YTHEH','createBattleBalloon','sideview_ui','makeCommandList','#%1','Game_Battler_clearMotion','alive\x20battlers\x20not\x20target','AutoBattleCancel','WNDRa','_dimmerSprite','setBattlerBattleCore','unVLu','command339','mwLNt','Game_Map_encounterList','IGhwq','applyVariance','ActSeq_Impact_ColorBreak','addDamageSprite','moveBattlerHomeDistance','clearFreezeMotion','onEncounter','processOk','updateStaticSvBattlerFrames','itemHeight','expRate','_commandNameWindow','round','GKNlp','mUwBy','createInnerPortrait','regionId','All\x20Allies','ActSeq_Cutin_WaitForEntrance','applyImmortal','min','canGuard','SvBattlerMass-%1-%2','Sprite_Enemy_update','invokeMagicReflection','getAttackMotionSlot','addImmortal','createUIContainer','members','physical','onEscapeFailure','NjtVe','magicReflection','expTotal','mainSpriteScaleY','executeMpDamage','Sprite_Enemy_setBattler','onTurnEnd','VisuMZ_3_ActSeqCamera','subject','jOrIP','createEnemyNameContainer','isForNotUser','CoreEngine','initMembersBattleCore','motionIdle','CmdIconFight','ActSeq_Impact_BlueRedInvert','bYmGX','118BjlhMJ','fLVUp','isPreviousScene','_skewX','eXOKm','lejqv','useDigitGrouping','createBattleFieldBattleCore','cancelMpLifeSteal','fEvDw','createCommandVisibleJS','LUK','cwFas','battleZoom','isForRandom','_attackAnimationId','addLoadListener','JS\x20%1START\x20ACTION','all\x20enemies','iterateBattler','_forActor','Mbipq','SoyrI','PostDamageJS','HVXYl','lIeHT','onActorOk','displayMiss','performAttack','ShowCosts','fbZWC','isNonSubmenuCancel','_jumpWholeDuration','setSkill','EuxDw','xSdQa','magicSkills','PHTOR','negativeLifeSteal','OverallFormulaJS','getColor','lgwaz','ActSeq_Camera_FocusPoint','jsScaleDown','ActSeq_Mechanics_EmulateGuardEffect','ActSeq_BattleLog_UI','selectNextCommand','updateRefresh','itemTextAlign','toUpperCase','createPartyCommandWindowBattleCore','clearOnceParallelInterpreters','LQAhz','LVuOg','CommandVisible','AdjustRect','mmsgM','updateScale','stateMotionIndex','VarianceFormulaJS','battleCommandName','_damagePopupArray','ConvertActionSequenceTarget','requestFauxAnimation','okTargetSelectionVisibility','startMotion','ActSeq_Motion_WaitMotionFrame','updateCancel','ShowWeapon','mgpEi','Game_Action_numRepeats','refreshDimmerBitmap','ActSeq_Impact_MotionTrailCreate','applyForcedGameTroopSettingsBattleCore','ActSeq_Movement_Skew','BravePoints','isTpbMainPhase','placeGauge','startOpacity','removeOnceParallelInterpreter','AllowRandomSpeed','changeBattlebacks','UGduq','setImmortal','ZxcQE','DistanceAdjust','swapEnemyIDs','drawItemStatus','criticalHitRate','gainFullActionsPTB','Name','ActSeq_Movement_WaitForJump','startAttackWeaponAnimation','CmdIconAutoBattle','guardLifeSteal','CastPhysical','_buttonKey','playBattleVoice','getItemDamageAmountLabelOriginal','Scene_Map_updateCallMenu','drawBackgroundRect','zoomDuration','in\x20order\x20for\x20VisuMZ_1_BattleCore\x20to\x20work.','isEffecting','random','ActSeq_Mechanics_CtbSpeed','processActorCommandCancelTPB','create','mpDamage','_targetOpacity','eRjRH','_text','_stateSprite','VisuMZ_3_SideviewBattleUI','_homeDuration','toIAD','displayAction','addMeleeReturnActionSet','CastCertain','portraitType','hitRate','requestDragonbonesAnimation','freezeTime','getDefeatedEnemies','wibpy','hitType','performTpbActiveCheckSwitch','dUhtg','States','isHiddenSkill','PopupShiftY','uQJEH','collapseType','shift','status','canAttack','VisuMZ_0_CoreEngine','Game_Action_evalDamageFormula','FocusX','gaugeX','createBattleField','isSkipPartyCommandWindow','JS\x20%1REGENERATE','Game_BattlerBase_initMembers','vertCells','bGqxh','_inputting','Skill-%1-%2','PopupOffsetY','iwFsP','_hpGaugeSprite','ActSeq_Mechanics_BoostPointsStoreData','PostRegenerateJS','SvfmV','getDamageStyle','alterCost','bind','isMeleeMultiTargetAction','suBtN','QGKlV','Game_Action_apply','Angle','repositionCancelButtonBorderStyle','guardHpLifeSteal','Interrupt','updateShadowPosition','GkfCN','with\x20latest\x20version\x20of\x20VisuMZ_1_BattleCore!','refreshMotion','moveBattlerToPoint','createChildSprite','iKfsb','pEdZa','buAmn','PRE-','CalcEscapeRaiseJS','updateEffectsContainer','Game_BattlerBase_die','KnMvj','MAIup','_itemWindow','_skillWindow','svBattlerName','close','wsFpD','weaponImageId','isRightInputMode','DezgG','ViGhH','xuOjZ','GnNfE','hasSvBattler','attackAnimationIdSlot','_regionBattleback2','isStatusAffected','Scene_Map_initializeAfter','setLetter','mAxzz','setupZoomBlurImpactFilter','_targets','portraitIndex','Victory','autoSelect','_homeY','_makeFontNameText','ParseStateNotetags','_makeCursorAlpha','makeBattleCommand','multiTargetWindowRect','isGuard','CriticalDuration','_armorPenetration','NameOffsetY','CWUPY','vKLsg','ActSeq_Movement_WaitForSpin','ActSeq_Horror_Clear','nYWKs','AvpOV','createActorCommandWindowBattleCore','uPYOW','bVdSW','Immortal','iconText','message4','PreDamageJS','BattleManager_inputtingAction','negativeMpLifeSteal','clearFreezeMotionForWeapons','applyTargetFilters','DlCeR','AttachStateOffsetX','PjWYm','meetsSelectFrontviewActorConditions','AS\x20TARGET','moveBattlerHomeToPoint','uxoBH','children','hasSkill','_svBattlerSprite','_pattern','YnwtI','Defeat','isForFriendBattleCore','hIWOa','eEYIN','show','_showWeapon','isWaiting','Scene_Battle_createCancelButton','BindCommonEventKeysForGroup','filter','getNextSubject','freezeMotion','setActiveWeaponSet','startDamagePopup','PointJS','rjdCo','process_VisuMZ_BattleCore_jsFunctions','FlashDuration','VisuMZ_4_BreakShields','ShowPopup','BattleManager_startTurn','displayEvasion','createMultiTargetWindow','isSkewing','_offsetY','dimColor1','logWindowRect','MotionType','xOcyd','VisuMZ_2_AggroControlSystem','removeCurrentAction','isDead','_battleCoreNoElement','process_VisuMZ_BattleCore_CommonEventKeys','hardDamageCap','kXBYa','hkbBY','VisuMZ_3_BattleVoices','EiTVm','rowSpacing','TpGaugeOffsetX','ICLXZ','Class-%1-%2','ActSeq_Animation_AttackAnimation','mmaGK','_executedValue','battleCorePreBattleCommonEvent','canAddSkillCommand','removeBuff','AutoBattleOK','Game_Action_isForAliveFriend','waitCount','popupDamage','zkRaQ','displayHpDamage','makeActionList','startGrow','1:1','updateHpGaugePosition','HelpFight','CwmWX','battleCameraData','spinBattler','skewBattler','push','getMenuImage','isLearnedSkill','ubPtP','setSvBattlerSprite','xrjZx','_active','QQhEH','text','isBattleTest','_commonEventQueue','ActSeq_BattleLog_PopBaseLine','pagedown','effects','UAtdj','_animationCount','_targetFloatHeight','xYVVY','ZZOJE','eQuYY','Window_BattleLog_performAction','padding','ekZib','qOfwY','FRUSTRATION','FiZjh','hOgOe','message2','updateFrame','clearResult','Scene_Battle_createAllWindows','_effectsContainer','createAttachedSprites','WaitForScale','ShowHide','KwENg','GwAfM','pow','HoLYY','jhhAP','GoCLV','ShuffleArray','sort','Sprite_Enemy_setHue','ActSeq_Mechanics_Immortal','processVictory','randomInt','battleVoices','performSTBExploiter','svBattlerAnchorX','usePremadeActionSequence','Parse_Notetags_Targets','NIWww','DefaultDamageStyle','EmergeText','KHLsC','Spriteset_Battle_update','WEAPON\x20SWAP','createMainSprite','waitForAnimation','allowRandomSpeed','performReflection','Window_BattleLog_performSubstitute','gySfl','Reveal','CheckVisibleSkillNotetags','StepDuration','EndBattlePopups','validTargets','pauseInjectAnimation','VariableDmg','Spriteset_Battle_createBattleField','SfMDA','endIcon','hide','StatusWindowSkinHide','visible','commandNameWindowCenter','CastMagical','isTpbReady','_growWholeDuration','xXMsi','loadWindowskin','faceRect','setupMotion','Scene_Battle_startEnemySelection','JS\x20ESCAPE\x20SUCCESS','okButtonText','_handlers','head','PostStartBattleJS','VINYi','MaxLines','doesPageHaveOnceParallelStart','performMiss','Duration','isMoving','border','ActSeq_Movement_Jump','_homeX','drawItemBackground','Frame','_partyCommandWindow','pwAtD','isBattleFlipped','uNlrX','IconStypeNorm','nJlhj','ActSeq_Mechanics_PtbFullHalfAction','BattleAI','QoL','_growDuration','ext','speed','StartName','Uhgiv','Game_Map_battleback1Name','isActionSelectionValid','battleUIOffsetY','name','ActSeq_Mechanics_RemoveState','updateInterpreter','_statusType','onJumpEnd','dead','update','WpHSO','targetActionSet','createJS','ActorOffsetY','onHomeMoveEnd','MDF','ActSeq_Impact_ZoomBlurPoint','command119','ShowAddedDebuff','%1Damage%2JS','cutinExit','ActSeq_Movement_MoveBy','ActSeq_Animation_BalloonAnimation','Sprite_Battler_setBattler','VisuMZ_2_DragonbonesUnion','vXaBG','dfUqp','ActSeq_Movement_FaceJsPoint','EpmEp','Sprite_Battler_initMembers','ArPenFlat','ActionEndUpdate','processTurn','CombatLogIcon','processExtendTroopMembers','canUse','statusWindowRectDefaultStyle','AutoAddState','removeImmortal','iIOjQ','FaceAway','EZhmk','mUFOP','ConfigManager_applyData','isStateAffected','isCurrentItemEnabled','callOkHandler','updateBorderStyle','flipVisualCutinVert','process_VisuMZ_BattleCore_CreateRegExp','autoBattleStyle','icons','BattleManager_selectNextCommand','evalDamageFormulaBattleCore','transform','attack','AutoMeleeSolo','WaitForEffect','endBattle','_isBattlerFlipped','ikrsp','isAffectedByBreakShield','current\x20target','zMvIN','PrioritySortActive','requestBattleBalloon','endAction','processDefeat','removeChild','Window_BattleLog_performEvasion','PerformAction','softDamageCap','EPDXp','WziUt','gainBravePoints','wait','QyYIx','Window_BattleLog_refresh','_buttonText','blockWidth','gkMeU','drawItem','thrust','cbobl','oDlgm','setStateTurns','mHaDh','Scene_Battle_onEnemyCancel','%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.','isSubjectValidForAnyoneSelect','emulateActionEffect','FzopS','linkSprite','FfaCV','all\x20actors','VcvXA','startActorCommandSelection','7266080xvhywa','addGuardCommand','_jumpMaxHeight','moveToStartPosition','prepareBorderActor','Amp','ShowRemovedBuff','setLastBattleSkill','BattleManager_startAction','_skewEasing','SvMotionIdleMass-%1-%2','createAutoBattleWindow','isAttack','_speed','_actionInputIndex','VariableID','MessageWait','_totalValue','CommandWidth','Sprite_Gauge_smoothness','%1StartTurnJS','updateLink','oRTHy','mKBuI','setVisibleUI','jQPTd','PSfps','itglf','VisuMZ_2_BattleSystemPTB','PQtut','sliceMax','XQjwk','ActSeq_Element_NullElements','PostDamageAsTargetJS','map','AttackAnimation','Sprite_Actor_update','callUpdateHelp','arPenFlat','lwHPq','iconWidth','_back2Sprite','default','DGgxC','getHalfActionsPTB','Window_BattleLog_pushBaseLine','checkCacheKey','NWFMc','commandSymbol','PreApplyAsTargetJS','isActor','actorCommandWindowRect','PartyCmd','3723246xSabxT','_battleCoreAddedElements','UdVag','left','ActSeq_Mechanics_BreakShieldReset','createSeparateDamagePopups','createKeyJS','NewPopupBottom','alive\x20enemies','wubCR','fNqSa','createCancelButton','ActSeq_Camera_Reset','buffRemove','zcOui','substitute','BattleCore','tpbActorSwitchConditionsMet','commandOptions','equips','traitObjects','ActSeq_Grid_MoveTargetsInDirection','rjaSQ','WaitForCamera','Novbp','StartTurnShow','WtHrk','Balloon','findSymbolExt','rUSAO','ShowAddedState','setFrame','useItem','isSideButtonLayout','mhp','olpDO','zqWjz','IconIndex','LastSelected','skillId','PrioritySortActors','registerDefeatedEnemy','TbKNt','battleEnd','VisuMZ_2_BattleSystemATB','rfWhy','soTnO','canAttackBattleCore','Game_Actor_setup','applyCritical','ActionCount','LifeStealRegExp','showNormalAnimation','commandAutoBattle','NBYos','contentsOpacity','setHue','Scene_Battle_skillWindowRect','qKmHH','ShowFacesListStyle','ldvZy','placeStateIcon','repositionEnemiesByResolution','VULBJ','KLVIQ','isAnimationPlaying','float','Window_BattleEnemy_show','_subject','Game_Action_clear','turnCount','Parse_Notetags_TraitObjects','ActionAnimation','Khjhe','displayCurrentState','executeDamage','onEscapeSuccess','hpRate','BattleManager_updatePhase','_battleCoreForcedElements','VisuMZ_2_WeaponSwapSystem','fejQw','applyArmorModifiers','CmdIconOptions','ardzx','addChild','irHae','isBorderStylePortraitShown','setGuard','boxHeight','dldmq','movement','cancelLifeSteal','ForceDeath','Dwchc','center','getItemDamageAmountLabelBattleCore','makeTargets','isSpinning','Scene_Battle_createHelpWindow','isBattlerGrounded','FlinchDuration','WaitComplete','stateRate','statusWindowRectXPStyle','hUNPD','resetFontSettings','mXxAo','PreStartActionJS','showAnimation','addSkillTypeCommand','Actions','EavTe','setBattleCameraTargets','ENEMY_OFFSET_Y','Game_Action_makeTargets','WGtTO','numTargets','soitS','flashDuration','_actorCommandWindow','checkExtendTroopCompatibility','FfRMB','cancelActorInput','ActSeq_Set_TargetActionSet','hpAffected','equipSlots','adjustPosition','shouldDisperseDamage','GvuvX','iconIndex','TanUv','process_VisuMZ_BattleCore_Notetags','MIN_SAFE_INTEGER','createMiss','ugoyx','getItemDamageAmountTextBattleCore','OJILN','uPfcJ','wxfhP','liPuO','hBsDF','BqrOy','ShowEnemyGauge','onOpacityEnd','SideviewSelect','ESCAPE','evade','LFDCN','adYtn','BattleManager_processVictory','CounterPlayback','_homeEasing','getNextDamagePopup','addAutoBattleCommands','HapuZ','uiMenuStyle','sTOiN','Scene_Battle_onEnemyOk','Game_Actor_makeActionList','%1EndTurnJS','die','BattleManager_setup','svBattlerShadowVisible','Pmqob','getSkillIdWithName','ActSeq_Grid_ActionAnimationAtNode','some','ItemID','<%1>\x5cs*([\x5cs\x5cS]*)\x5cs*<\x5c/%1>','displayChangedBuffs','TP_Rate','scope','dead\x20actors','loadEnemy','ARRAYNUM','SvWeaponSolo-%1-%2','VisuMZ_2_BattleSystemCTB','_battleBalloonSprites','revertTpbCachedActor','evPFw','battleFloat','displayRemovedStates','Turns','BattleManager_startInput','Game_BattlerBase_refresh','scWCQ','performRecovery','rxwAE','LIGHT','RPJHN','PostEndTurnJS','xfQUJ','setupCriticalEffect','BattleManager_checkBattleEnd','Game_Party_addActor','gainCurrentActionsETB','setBackgroundType','battleMove','BG_TYPE','OdotR','getNextSubjectFromPool','setupDamagePopup','battleInjectAni','setBattleSkew','_appeared','apply','virtualClick','selectSymbol','ActSeq_Movement_MoveToJsPoint','STB','isDisplayEmergedEnemies','AnchorY','CmdTextAlign','enemyNames','mainSpriteHeight','statusText','setBattleAngle','actorId','XPSpriteYLocation','walk','applyGlobalCommonEventNotetags','Game_Action_needsSelection','isNextSceneBattleTransitionable','PortraitScale','gainStoredBoostPoints','Window_BattleStatus_initialize','BattleVictoryJS','ActSeq_Projectile_Icon','Game_Interpreter_PluginCommand','itemLineRect','_padding','Shadow2','flashColor','coreEngineRepositionEnemies','maxTp','ActSeq_Animation_ChangeBattlePortrait','battleAnimation','hue','cancel','autoBattleWindowRect','_skillIDs','_tpbSceneChangeCacheActor','isDTB','refreshRequest','fontSize','_deathStateApplied','addAnimationSpriteToContainer','clearBattleRefreshRequest','AroXd','jsScaleUp','addSkillCommands','itemEffectGainTp','FidRe','eronQ','applyGlobal','ActSeq_Mechanics_ArmorPenetration','soLhu','Window_Options_addGeneralOptions','_enemyIDs','wifDJ','fittingHeight','VgorK','compareBattlerSprites','ActSeq_Inject_AnimationStart','isSpriteVisible','ARRAYFUNC','xdurh','frontview_ui','updatePhase','oonvE','_actorWindow','CriticalHitMultiplier','createPartyCommandWindow','currentSymbol','battleBalloon','Game_Action_setGuard','clearRect','setSubject','Vohst','SILENCE','ActSeq_Mechanics_EmulateAttackEffect','ljwAS','ActSeq_Motion_ClearFreezeFrame','startInjectAnimation','isConfused','HITTYPE_PHYSICAL','zjhkl','ActSeq_Mechanics_SwapWeapon','OaHkF','checkShowHideSwitchNotetags','HDguC','updateBattlebackBitmap1','_targetSkewX','singleSkill','command357','AhKBa','Setting','partyCommandWindowRectBorderStyle','getAttackMotion','performActionEndMembers','ActSeq_Horror_NoiseRemove','_forcedBattlers','ECFAw','_animation','attackStatesRate','OffsetY','action','USER-DEFINED\x205','isBTB','3113478atBfAb','_shadowSprite','addTextToCombatLog','BrgAz','Window_BattleLog_displayActionResults','_angleEasing','extraPositionX','pushBaseLine','ZqVpb','forceEscapeSprite','setAttack','isItem','reverse','WVAoL','ActSeq_Movement_Opacity','addBuff','updateBattlebackBitmap2','ROawI','hGkKl','performFlinch','EMQiw','ActSeq_Mechanics_PtbAlterCost','ENEMY_OFFSET_X','Damage','addOnceParallelInterpreter','redraw','ActSeq_Camera_Offset','enemy','autoSelectLastSelected','svBattlerAnchorY','CjhyZ','CommandAddAutoBattle','_floatHeight','TextColor','dtZQt','isEscapeCommandEnabled','isActing','Sprite_Battler_startMove','nVwbE','ActSeq_Element_Clear','isPreviousSceneBattleTransitionable','EscapeFailureJS','qnXLH','getWtypeIdWithName','noSimilarSTypes','GOhSW','onAllActionsEnd','_effectDuration','QMBIe','SGTyK','finishActorInput','CriticalDmgRate','ActSeq_Mechanics_Collapse','smooth','processBattleCoreJS','MUSIC','ParseWeaponNotetags','HelpAutoBattle','ActSeq_Target_PrevTarget','front\x20base','WaitForJump','_wtypeIDs','performDamage','selectedBattlers','ARRAYEVAL','isAtbCastingState','JumpToLabel','cameraOffsetDuration','_angleRevertOnFinish','CopyCombatLog','setupIconTextPopup','Weapon-%1-%2','helpWindowRect','setupHpGaugeSprite','trueRandomTarget','onBattleEnd','Rate','StatusWindowAttachmentFrontOffsetX','portraitFilename','bRimb','startIcon','AniDuration','AAlCT','makeHpDamageText','kVFSn','targetDistortionSpritePosition','LIGHT\x20BULB','_autoBattle','isBorderPortraitSpriteVisible','_uiContainer','updateEffectContainers','createActorCommandWindow','drawIcon','KYmuJ','mBVyW','createAnimationSprite','setBattlerMotionTrailData','isFlipped','isBreakStunned','_enemyWindow','startMove','applyHardDamageCap','disarmMpLifeSteal','getStypeIdWithName','offsetX','makeDeepCopy','top','TargetLocation','BattleLogRectJS','opponentsUnit','missile','Game_Action_isForOne','SaLpx','Window_Options_statusText','CGRXL','UEqXo','%1RegenerateJS','guardMpLifeSteal','isIncludedInEnemyWindow','ActSeq_Zoom_WaitForZoom','friendsUnit','HpGaugeOffsetY','turn','ReflectPlayback','_tempActor','setLastPluginCommandInterpreter','IPbHZ','autoBattleUseSkills','textSizeEx','QGaoF','KnKUN','zlWVX','isPTB','jNDlb','aiQKn','clamp','USER-DEFINED\x202','ActSeq_Animation_WaitForAnimation','OYbPp','isTickBased','Spriteset_Battle_updateActors','isVisualHpGaugeDisplayed','Game_Battler_forceAction','lukEffectRate','regenerateAllBattleCore','nbEzo','createWeather','tpbCommandFight','BattlebackScale','utfhJ','gainHalfActionsPTB','_enemyWindowMode','fkRVi','initBattlePortrait','isSceneChanging','hitIndex','Sroxr','_floatWholeDuration','_battler','PopupShiftX','updateStateSpriteBattleCore','_jumpHeight','DistanceY','ActSeq_Mechanics_WaitForEffect','isSkillItemWindowsMiddle','DigitGroupingDamageSprites','isMagicSkill','processForcedAction','byrFK','alignBattleCoreDamageSprite','attackAnimationId1','VisuMZ_4_IconBalloons','Window_BattleLog_displayMiss','_emptyBitmap','helpWindowRectBorderStyle','nameY','nhTZi','setHelpWindow','ActSeq_Animation_BalloonIconRange','scale','isPartyCommandWindowDisabled','Dmxmq','addGeneralOptions','isForAnyoneFocusOpponents','compareEnemySprite','OWYPj','regenerateAll','EscapeFail','command283','alive\x20actors','displayReflection','callOptions','CriticalHitRate','SwitchCritical','maxItems','battlelog','bwfwh','ALL_ENEMIES','Vwhje','svActor','SvWeaponMass-%1-%2','_animationSprites','drawSkillCost','VisuMZ_3_WeaknessDisplay','startShakeFlinch','arRedFlat','removeState','Game_Action_itemTargetCandidates','_dragonbonesSpriteContainer','_tpbChargeTime','actorCommandCancelTPB','_opacityDuration','numRepeats','abs','_executeHpDamage','makeEscapeRatio','FlashColor','initMembers','QlGJR','xURUN','displayBattleCoreTransitionErrorMsg','Scene_Battle_logWindowRect','NameAttachStateIcon','optDisplayTp','isSkill','ActSeq_Mechanics_FtbAction','updateHomeMove','isNextScene','BattleManager_startBattle','createTroopNote','PopupDuration','ArRedFlat','forceMotion','ActSeq_Mechanics_StateTurnsChangeBy','EvBXi','fAUiR','windowskin','WaitForExit','DisablePartyCmd','_item','arSII','clearActiveWeaponSet','damageOffsetX','_opacityEasing','applyItem','currentClass','_weaponImageId','_forcedHomeY','itemTargetCandidates','restore','clearHorrorEffects','waitForMovement','_effectType','addEscapeCommand','_cursorArea','gkSsV','UcVeR','waitForOpacity','createHelpWindowBattleCore','svAnchorY','BVQAe','updateFloat','isDeathStateAffected','calcWindowHeight','silentHomeMove','isForOpponent','Mirror','sortDamageSprites','Window_BattleLog_performMagicEvasion','PopupOffsetX','nNynK','addExtendedTroopMembers','Text','CheckVisibleBattleNotetags','TpbActiveChangeEnabled','mainSpriteScaleX','clearBattleCoreData','VisuMZ_1_MainMenuCore','displayBuffs','lkUEY','_preemptive','loadSvEnemy','item','BattleGridSystem','BattleLayout','%1EndActionJS','isEnemy','pmlQE','PMZKz','updateCommandNameWindow','_index','parent','toUseBoostPoints','ftrbA','_offsetX','brHWM','clearMotion','checkBattleEnd','MAXHP','uxaCj','ShowCritical','_baseLineStack','PortraitScaleBorderStyle','pages','ActSeq_BattleLog_Clear','Game_System_initialize','checkSceneBattleTransitionable','Game_Action_setItem','setupFont','isBattlerFlipped','actionSplicePoint','Update\x20your\x20Battle\x20System\x20-\x20%1\x20to\x20the\x20latest','_targetIndex','selectNextCommandTpb','trlVZ','MANUAL','_defeatedEnemies','AGI','setBattleImpactTimeScale','ActorCmd','CmdIconEscape','addCustomCommands','actorCommandAutoBattle','targetObject','UTAOL','Scene_Party','damageStyle','addStateTurns','refreshActorPortrait','removeDamageSprite','isHidden','displayStartMessages','ChargeRate','isForDeadFriend','Ffrjb','ActSeq_Animation_AttackAnimation2','vNtYs','ClearBattleLog','textBaseline','Window_BattleEnemy_hide','HzHtu','ActSeq_Animation_ShowAnimationJS','getBattlePortraitOffsetX','Game_BattlerBase_canGuard','filters','ActSeq_Grid_AnimationJsAtNode','updatePadding','ldWRz','updateUiContainerPosition','attackMotions','SkillItemStandardCols','createDamageSprite','requestRefresh','PreApplyAsUserJS','gRRPs','gIRpw','addedDebuffs','pqupZ','HelpSkillType','_shakeFlinchPower','AsTarget','_currentAngle','ActSeq_Horror_TVCreate','bottom','Skills','constructor','measureTextWidth','Game_Action_itemHit','TimeScale','spriteId','noise','ActSeq_Element_AddElements','VisuMZ_2_HorrorEffects','All\x20Enemies','CmdTextAutoBattle','showHelpWindow','JS\x20%1END\x20TURN','lYpwe','process_VisuMZ_BattleCore_PreBattleCommonEvent','_createCursorArea','AHfkM','updateForceAction','createLowerLayer','battler','filterArea','Xasmu','ActSeqImpact','Scene_Battle_createEnemyWindow','setHome','ActSeq_Grid_AnimationTypeAtNode','horzCells','troop','QtQhe','performWeaponAnimation','MP_Flat','drawTextEx','front\x20center','wSFJh','_customDamageFormula','displaySubstitute','mpHealingFmt','forceSelect','uiInputPosition','ShowActorGauge','zdhNx','ngdaN','VisuMZ_3_BattleAI\x20needs\x20to\x20be\x20updated\x20','dead\x20friends','loadBattleback2','aIByD','windowPadding','GKTVo','partyCommandWindowRect','isBuffAffected','Game_Action_setSkill','StartTurnMsg','displayAffectedStatus','KSDOU','yERmY','fUeaw','onAngleEnd','clearBattlerMotionTrailData','PostStartTurnJS','forceWeaponAnimation','needsSelectionBattleCore','rRwnh','ziDlP','finishActionSet','ActSeq_Grid_RemovePassiveStatesFromNode','YXSKL','PWLsM','Window_BattleLog_popupDamage','commandNameWindowDrawBackground','isAnyBattleBalloonPlaying','frontviewSpriteY','WVjlL','ActSeq_Mechanics_BtbGain','Window_BattleActor_processTouch','maxCols','addChildAt','targetObjects','changeAtbChargeTime','XqJwN','clearForcedGameTroopSettingsBattleCore','isForAnyone','BesxZ','Zfsbq','isCommonEventReserved','_colorType','addSingleSkillCommand','sBalx','getItemDamageAmountTextOriginal','bitmapHeight','VbCaV','ActSeq_BattleVoice_PlaySpecialLine','Game_Battler_clearDamagePopup','addAttackCommand','requestMotionRefresh','setActiveWeaponSlot','isForAliveFriend','rzEph','OfDzf','makeActionListAutoAttack','innerHeight','<CUSTOM\x20ACTION\x20SEQUENCE>','displayChangedStates','ZJSXi','_multipliers','reserveCommonEvent','UDtHz','weatherPower','updatePositionBattleCore','zxblP','setTargetBattlerKey','Intensity','_lastActor','MpGaugeOffsetX','RwVvK','Sprite_Battler_updateMain','USER-DEFINED\x203','mainSprite','VisuMZ_3_ActSeqProjectiles\x20needs\x20to\x20be\x20updated\x20','setBattleCameraOffset','replace','repeats','updateJump','mRRyT','ActSeq_Mechanics_EmulateSkillCost','Formula','Direction','FrontViewSelect','Window_BattleLog_displayMpDamage','refreshStatusWindow','damage','_angleDuration','QANIV','ActSeq_Impact_Desaturate','isTriggered','RqQSG','updateBorderSprite','Scene_ItemBase_applyItem','lineRect','in\x20order\x20for\x20Ally\x20or\x20Enemy\x20targeting\x20to\x20work\x20','SkillItemMiddleLayout','FollowTurn','256oytlAi','debuffAdd','Spriteset_Battle_createLowerLayer','Window_BattleLog_clear','VariableHeal','performActionEnd','command301_PreBattleEvent','mpDamageFmt','TERiu','alterChange','MAXMP','requestBalloon','description','WaitForSpin','_damageContainer','startSkew','gPqTz','context','exit','DUYTv','Sprite_Battler_damageOffsetY','loadPicture','_skewWholeDuration','CheckVisibleSwitchNotetags','setupBattleCore','drawActorFace','launchBattle','Scene_Battle_createPartyCommandWindow','battleSpin','haeMh','wpoim','_createClientArea','ShowTpDmg','Window_BattleLog_performReflection','ActSeq_Animation_ActionAnimation','addActor','messageSpeed','_windowLayer','fXgXo','isSideView','HelpEscape','_frame','dead\x20enemies','_targetHomeX','eraseState','Window_BattleLog_performCounter','_surprise','inputtingAction','_motionSpeed','endAnimation','NzjPa','_onceParallelInterpreters','actor','_tempEquipCheck','fGZhV','smoothness','DefaultSoftScaler','ScaleDown','pgLrG','JPAqd','Game_Battler_onBattleStart','getBattlerKeyTargetReplacement','bitmap','stopInjectAnimation','getLastHpDamage','setSTBExploited','isImmortal','motionType','XEmoL','StatusWindowAttachmentBack','ActSeq_Mechanics_DamagePopup','ActSeq_Weapon_NextActiveWeapon','Elements','ParseClassNotetags','isAutoBattle','VoiceLine','addCombatLogCommand','IQRGD','_battleCoreBattleResumeAfter','WaitForZoom','actorCommandSingleSkill','origin','PreEndBattleJS','_targetSkewY','battleback2Name','OkWBh','Vslsu','selectNextActor','updateOpacity','ActSeq_Cutin_AddVisualCutinEffect','SLEEP','jWQOT','Sprite_Animation_targetSpritePosition','addBattleGridMoveCommand','blt','ActionSequence','pointY','_weaponSprite','performCounter','prepare','ohPuP','applyEasing','FUEga','_targetGrowY','updateBitmap','initElementStatusCore','battleStatusWindowAnimationContainer','setupBlueRedInvertImpactFilter','Game_Action_setAttack','getBattlerFromKey','clearDamagePopup','snapForBackground','ActSeq_Mechanics_PtbConvert','YWgyy','Uktlc','lifeStealRate','parallaxScrollXinvertEnemy','_waitMode','svBattlerData','VfERv','performActionMotions','MxQoi','removedBuffs','statusWindowRect','AlphaFilter','SkillsStatesCore','EasingType','%1Event','isATB','WtypeId','isAlwaysVisible','showEnemyAttackAnimation','IarvZ','isCTB','99386AyZxmB','COBWEB','Sprite_Battler_damageOffsetX','pattern','AalcY','battleUIOffsetX','ActSeq_Grid_AddTriggerToNode','CommandAddOptions','NextTurn','eDNep','hpHealingFmt','AJibW','ShowButton','_spriteset','Game_Interpreter_updateWaitMode','hasStaticSvBattler','gradientFillRect','OoRVi','isAutoBattleCommandAdded','createHelpWindow','evalDamageFormula','charged','isCertainHit','AiNhU','deactivate','SceneManager_push','woasP','eFiLA','ActSeq_Mechanics_HpMpTp','Radius','_immortal','updateAngleCalculations','Scene_Battle_commandFight','drawItemStyleIconText','_floatEasing','mkpYK','processBattleBalloonRequests','ActSeq_Impact_MotionBlurScreen','getFullActionsPTB','drawItemImagePortraitStyle','skillItemWindowRectMiddle','OITmA','icon','svROS','Iewmd','isQueueOptionsMenu','updateStart','BattleManager_endAction','isAlwaysHidden','_updateCursorFilterArea','isOptionsCommandAdded','sliceMin','PostDamage%1JS','nrttq','Game_Battler_makeSpeed','toLowerCase','lineHeight','isCharging','_endingBattle','qxcmX','Exploited','FMOjy','prototype','ParseEnemyNotetags','svAnchorX','updateHelp','PreApply%1JS','alive\x20battlers\x20not\x20user','FGmfW','checkTpbInputOpen','ftCov','parallaxScrollX','loadBitmap','_homeWholeDuration','isCustomBattleScope','FVKow','ZaUjb','ActiveTpbOptionsMessage','battlerSmoothImage','ShowRemovedState','_baseTexture','requestAnimation','Window_BattleLog_performRecovery','CscwK','_character','isAlive','makeTargetSelectionMoreVisible','Window_ItemList_maxCols','rec','anchorY','makeActions','ActSeq_Grid_RemoveTriggerFromNode','Strength','drawSingleSkillCost','ActSeq_Mechanics_BreakShieldChange','BattleStartEvent','stepForward','battlerShadowScaleX','ANNOYED','StatusWindowSkinFilename','applyBattleCoreJS','Window_PartyCommand_initialize','animationBaseDelay','setCursorRect','OspmS','fBxPU','_targetGrowX','adtRU','isBattleRefreshRequested','fight','Opacity','AS\x20USER','SyncBuffExpire','isGuardWaiting','TpkcE','loop','FXofZ','SkipPartyCmd','alive\x20friends\x20not\x20user','getTraitSetKeys','Sprite_Actor_moveToStartPosition','Mechanics','refresh','_actorMultiTargetWindow','itemWindowRect','sPAHv','setBattlerFacePoint','ActSeq_BattleLog_WaitForBattleLog','NLBNP','Scene_Battle_onActorOk','NAHqH','_battlerContainer','setHalfActionsPTB','MotionFrameWait','BQbHl','_interpreter','note','value2','missed','cancelTargetSelectionVisibility','_targetAngle','ActSeq_Camera_Clamp','PreStartBattleJS','XkwTH','UNTITLED','gainMp','pqTIJ','Sprite_Battleback_adjustPosition','executeHpDamage','PostApplyAsUserJS','alterType','GroupDigits','battleMembers','gainTp','hvcJT','Window_BattleLog_displayTpDamage','list','iconHeight','qQxjc','CTB','MOTIONS','Game_Battler_startTpbTurn','performShakeFlinch','battleSys','battleAngle','LrXaT','ParseAllNotetags','setMoveEasingType','_enemySprites','updateCollapse','DFklO','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20visible\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20visible;\x0a\x20\x20\x20\x20','Scene_Battle_stop','finalizeScale','LTakS','visualHpGauge','battleSkew','ActSeq_Animation_CastAnimation','GdIaG','parseForcedGameTroopSettingsBattleCore','QlNsU','victory','auto','Scene_Battle_helpWindowRect','drawItemStatusXPStyle','pFDaY','AddHpGaugeOption','collapse','HAoYL','_canLose','createActors','isForOne','vIdeg','addChildToBack','casting','initBattleCore','POST-','forActor','displayItemMessage','svActorHorzCells','Game_Enemy_setup','traitSet','onFloatEnd','Game_Action_makeDamageValueDisperse','basicGaugesY','addWeaponSwapCommand','aSNdi','chant','WaitCount','delay','onGrowEnd','ITEM','SWEAT','damageOffsetY','stypeId','applyResultSwitches','inHomePosition','Window_ActorCommand_setup','NameOffsetX','isActiveTpb','aWHBQ','floor','loadSystem','clearBattleBalloons','qKDki','encounterList','clearTargetBattlerKey','_growY','_targetHomeY','select','includes','battleCommands','isChangingOpacity','updateSpin','closeBattleActorWindow','currentValue','setHorrorEffectSettings','Sprite_Battler_update','applyDamageCaps','performCastAnimation','Vxkla','createEffectActionSet','type','commandStyleCheck','lmRoR','jAtCa','cancelButtonText','ActSeq_Animation_BalloonIcon','_performActionEnd','ACTOR_OFFSET_X','Game_Map_battleback2Name','changeCtbChargeTime','ActSeq_Mechanics_BoostPointsChange','_motionType','displayMpDamage','battleback1Name','makeSpeed','onBattleStartOnceParallels','ForceRandom','contains','_enemy','ActionStart','setupActionSet','createDigits','ActSeq_Movement_MoveToPoint','commandRemember','ActSeq_BattleLog_AddText','Window_BattleLog_performMiss','GetActionSequenceSpecialTarget','Destination','kSPUg','_borderPortraitDuration','visualCutinPortraitIndex','parallaxHue','ryhuN','makeData','innerWidth','Scale','createContents','RzdAR','_motion','ShowPortraits','placeActorName','ZFHhZ','lifeStealTrait','KzCRV','pfkuj','6473DJCxyM','nXThy','JAPXA','_targetBattlerKey','processPostBattleCommonEvents','partyCommandWindowRectXPStyle','_cancelButton','stepFlinch','Enable','_actor','EscapeSuccessJS','kZOIr','canInput','_methods','WaitForMovement','ChantStyle','createStateIconSprite','ActSeq_Inject_AnimationPauseResume','gainCurrentActionsFTB','_createEffectsContainer','NLktc','Sprite_Enemy_updateStateSprite','parseLocalizedText','start','getHardDamageCap','ActSeq_Grid_TraverseToNode','_createDamageContainer','rlJoH','FqjfI','ALL_ACTORS','dcuEK','addSingleSkillCommands','VisuMZ_1_ElementStatusCore','AutoBattle','%1StartBattleJS','CFTWe','VisuMZ_3_BattleAI','loadBattleback1','_growX','battleSpriteSkew','updateFlip','_shadowScaleY','HpRiQ','activate','swing','_activeWeaponSlot','performCollapse','portrait','getChildIndex','addedStateObjects','ljHYh','Scene_Battle_startActorCommandSelection','_battleLayoutStyle','Scene_Battle_windowAreaHeight','peJPQ','processEscape','CreateCutinSettings','_drawTextOutline','startJump','critical','process_VisuMZ_BattleCore_DamageStyles','JS\x20%1DAMAGE\x20%2','adjustWeaponSpriteOffset','setHandler','Game_Action_executeDamage','setBlendColor','_linkedSprite','dataId','PreRegenerateJS','Actor','startWeaponAnimation','lastBattleSkill','vaNOk','ActSeq_Movement_MoveToTarget','_selectionEffectCount','XlopT','VisuMZ_2_BattleSystemETB','PostApply%1JS','StateID','Window_BattleLog_performActionStart','ParseItemNotetags','addState','JRvuK','QEbTH','statusTextAutoBattleStyle','pbRGd','prev\x20target','battleCoreTpbMainPhase','unchanged','oOeqB','isForAll','BattleManager_makeActionOrders','join','_stateIconSprite','lNGDV','FgxPR','dTcho','ShowSubstitute','HITTYPE_MAGICAL','currentExt','BattleSystemCTB','McUjS','vOBIV','angleDuration','COMBAT\x20LOG','HbHwZ','fnordRemovedStates','SHOW_BUTTON','Window_BattleLog_performActionEnd','StateIconOffsetX','FaceDirection','BattleLog','softDamageCapRate','_phase','WaitForAnimation','Game_Action_isForRandom','_target','opacity','Slot','AnchorX','ParseSkillNotetags','autoMeleeMultiTargetActionSet','ButtonAssist','EnableSoftCap','DTB','return\x200','playEnemyDamage','value1','lWPRl','Game_Action_isForAll','45894yEarLV','inputting','_preBattleCommonEvent','VisuMZ_1_SkillsStatesCore','isJumping','HitFlat','YCKTQ','Scene_Battle_terminate','_shadowScaleX','TpbGaugeOffsetX','JByvh','NWsba','_svBattlerData','registerCommand','hitFlat','AutoBattleBgType','eWlps','ActSeq_Mechanics_EtbAction','onDisabledPartyCommandSelection','DblrQ','removeHorrorEffect','active','Window_BattleLog_popBaseLine','AqjEf','resetResultSwitches','createBattleUIOffsetY','yQesd','targetsForOpponents','Sprite_StateIcon_updateFrame','allowCollapse','WaitCount1','itemHit','clearElementChanges','_angleWholeDuration','WIDTH','BiCLE','FUNC','PreDamage%1JS','performActionStart','ActionEnd','updateOnceParallelInterpreters','battleGrow','setup','battleInjectPrep','power','XznRM','_forcedHomeX','deathStateId','eRwUD','iIwDe','createDistortionSprite','Index','isBattleSys','changeTurnOrderByCTB','removeAnimationFromContainer','removeBuffsAuto','_allTargets','_battlePortrait','battleLayoutStyle','LbfgA','BoFmf','fMArT','symbol','VisuMZ_2_AggroControlSystem\x20needs\x20to\x20be\x20updated\x20','createBorderStylePortraitSprite','Sprite_Enemy_updateCollapse','WpFvM','openBattleActorWindow','wHhTQ','OBmyL','setupMotionBlurImpactFilter','createBattleUIOffsetX','_battleCoreBattleStartEvent','isOpen','updateShakeFlinch','Game_Battler_performEvasion','KAEVi','moveToStartPositionBattleCore','Sprite_Weapon_loadBitmap','_eventId','bkRia','PrkPA','STYPES','Shadow','ShakeFlinchDuration','ANTI_TINT_UI','frameCount','hMYxO','VisuMZ_3_BoostAction','updateShadow','adjustPosition_ScaleDown','adjustFlippedBattlefield','addShowHpGaugeCommand','ActSeq_Mechanics_Multipliers','HITTYPE_CERTAIN','processBorderActor','ArPenRate','chantStyle','Sprite_Actor_createStateSprite','Scene_Battle_update','VisuMZ_2_BattleGridSystem','addWindow','NYauy','Window_BattleLog_performDamage','actorCommandEscape','\x5cI[%1]%2','_scene','stepBack','unshift','_displayBattleCoreTransitionErrorMsg','getLastPluginCommandInterpreter','Scene_Battle_selectPreviousCommand','_lastAction','hpDamageFmt','createEnemies','retreat','targetsForFriends','ActSeq_Grid_PullToTargetNode','_tpbNeedsPartyCommand','setWaitMode','isAnyProjectilePresent','ActSeq_Skew_WaitForSkew','gRuIH','UECar','HoPME','GuardFormulaJS','WaitForNewLine','isAnyoneFloating','Sprite_Battler_updatePosition','customDamageFormula','TpbGaugeOffsetY','extendTroopMembers','PostDamageAsUserJS','Window_BattleLog_performCollapse','format','isTpb','ActSeq_Target_NextTarget','attachSpritesToDistortionSprite','agKOY','CheckActSeqProjectileVersion','pSZVo','damageContainer','dIoUg','BRZcG','addCommand','attackStates','gPXHl','ceil','TCtFR','_enemyMultiTargetWindow','ParseArmorNotetags','skillTypes','ActSeq_Motion_MotionType','Targets','Paeja','_backAttachmentSprite','TiBNT','_actionBattlers','startPartyCommandSelection','ActSeq_Movement_HomeMoveToJsPoint','ITWZS','addPartyCommand','createStateSprite','#ffffff','CalcEscapeRatioJS','KTedS','sRjcb','SuTuw','ActSeq_Grid_AnimationIDAtNode','ActSeq_Target_RandTarget','Sprite_Actor_setBattler','waitForNewLine','setText','kxNHd','VisualCutinEffect','PostEndActionJS','ActSeq_Movement_BattleStep','evaded','tByXz','isBypassDamageCap','repeatTargets','isDisarmLifeSteal','BattleManager_endBattle','PreStartTurnJS','battlerSprites','ruBVi','isFriendly','trim','VisuMZ_2_BattleSystemSTB','weaponTypes','canMove','Window_BattleLog_displayCritical','changeBattlerOpacity','xvfEs','BackColor','VisuMZ_4_CombatLog','updateVisibility','_battlerKeyCache','process_VisuMZ_BattleCore_PluginParams','MeleeDistance','updateBattlerContainer','itemLifeStealRate','KHiIZ','startSpin','ActSeq_Movement_WaitForSkew','Scene_Battle_start','xRONa','parallaxScrollY','ARRAYSTRUCT','canSingleOrMultipleSelect','QUESTION','findTargetSprite','NOTE','ARRAYJSON','index','commandFight','isForRandomBattleCore','ArRedRate','Zkihb','_shake','PUSyP','options','Sprite_Actor_setActorHome','ddOSm','PPgQi','canGuardBattleCore','ActSeq_Movement_HomeMoveToTarget','BattleManager_isTpbMainPhase','onSkewEnd','commandStyle','Game_Action_applyGlobal','clearActiveWeaponSlot','Wwzpi','XmjYU','length','ActSeq_Angle_WaitForAngle','sortEnemies','_lastHpDamage','hasBeenDefeatedBefore','playOnceParallelTroopPage','azBwM','getBattlerKeyTargets','EnableDamageCap','_updateCursorArea','PreEndTurnJS','QHhHb','Parse_Notetags_Action','displayFailure','BattleSystemBTB','applySoftDamageCap','processTouch','DefaultStyle','_fauxAnimationSprites','commandNameWindowDrawText','ActionSkillMsg1','NchDb','LcfUl','jsOneForOne','bitmapWidth','ActSeq_Impact_TimeStop','custom','updateShadowScale','ActSeq_Inject_WaitForInjectAni','HpGauge','drawItemStatusListStyle','escape','message1','isAnyoneInjectAnimating','gUdjr','GPDhe','_lines','MngSB','BTB','Game_Action_executeHpDamage','isFightCommandEnabled','RCToP','popBaseLine','PJZtU','performMagicEvasion','Window_BattleLog_displayEvasion','ShowMissEvasion','faceWidth','isPartyTpbInputtable','_visualHpGauge_JustDied','AllEnemiesText','guard','setBattlerFlip','drawItemStyleIcon','textWidth','DefaultHardCap','process_VisuMZ_BattleCore_Action_Notetags','izCEM','State-%1-%2','drawItemImage','startFloat','pwbrs','WaitCount2','isChanting','parallaxHueEnemyModifier','jTpFL','checkSubstitute','Game_Troop_setup','displayReflectionPlayBack','_callSceneOptions','makeDamageValue','resetBreakShield','attackAnimationId2','createTargetsJS','deadMembers','ActSeq_BattleLog_DisplayAction','xGrAX','Height','EImIv','refreshCursor','notFocusValid','itemEffectAddAttackState','applyAngleChange','textColor','LaZPQ','_forcedBattleLayout','toString','splice','nextActiveWeaponSlot','FZOqX','isAppeared','jFICf','_borderPortraitTargetX','selectAllActors','skill','ShowFailure','setBattleCameraPoint','itemCri','qwhNv','Sprite_Enemy_initVisibility','FiDOM','removeBattleBalloon','QZSqF','Variable','StatusWindowAttachmentFrontOffsetY','yxiFJ','createEnemyNames','extraPositionScaledY','processRandomizedData','requestMotion','kuSiw','_list','Rmell','ResetOffset','target','GhQCn','CommonEventID','performAttackSlot','ActSeq_Impact_MotionBlurTarget','ebgqZ','ActionCenteredName','checkShowHideSkillNotetags','aevxl','setCommonEvent','ConvertParams','resetTextColor','getInputButtonString','Game_Temp_requestBalloon','battleProjectiles','canBattlerMove','MultiTarget','SwitchMissEvade','setFullActionsPTB','performAction','ACTOR_OFFSET_Y','drawEnemyName','_enemyID','RpAKM','BattleManager_checkSubstitute','BULB','BTestBypass','getCommonEventIdWithName','COMBATLOG','alive\x20actors\x20not\x20target','cameraDuration','juNct','DualWield','prepareCustomActionSequence','destroy','_commonEventKey','Scene_Battle_updateStatusWindowPosition','adjustPosition_1for1','BattleManager_onEscapeFailure','isSTB','_flinched','battleCommandIcon','Game_Action_itemEffectAddAttackState','LThIB','lThsU','CwaHT','_jumpDuration','remove','bossCollapse','isSceneBattle','EGOWu','nBInL','EVAL','commandName','depNA','TPB','onDatabaseLoaded','Scene_Battle_itemWindowRect','MAT','ActSeq_Movement_Float','qJEEP','pop','GaYcH','jMCDm','BuKix','battleCamera','isOTB','LNqHf','updateStatusWindowPosition','isFastForward','mainSpriteWidth','arPenRate','performLifeSteal','commandEscape','PostApplyJS','FlinchDistanceX','pVksT','SkillID','preemptive','TP_Flat','_motionCount','_battleBalloonQueue','createActionSequenceProjectile','Game_Action_isForDeadFriend','ActSeq_Impact_Oversaturate','cMCAB','ActionItemMsg','setupBattleback','noxvo','allBattleMembers','WaitForProjectile','xlraX','_cache','ActSeq_Movement_FacePoint','ActSeq_Mechanics_StateTurnsChangeTo','Game_Battler_onTurnEnd','autoBattle','Targets1','startBattle','createAttachmentSprites','AcjKJ','lastFilename','_additionalSprites','CheckSkillCommandShowSwitches','pAHot','isDrain','isArray','yRYPP','drain','BattleManager_cancelActorInput','svShadow','setCustomDamageFormula','checkTpbInputClose','initialize','_flashDuration','fnordAddedStates','jump','-%1\x20MP','DbPNB','tbwqB','Game_Actor_equips','_commonEventIDs','Users','alterPriority','xytyy','VisuMZ_2_PartySystem','boxWidth','MUSICNOTE','isForAliveFriendBattleCore','DefaultSoftCap','Game_Battler_performActionStart','waitForJump','ZkcZQ','HTwcS','Scene_Options','TjMCI','DamageStyles','shouldHideBattleEndPopups','SkewY','ActSeq_BattleLog_Refresh','right','anchorX','BrNCN','ArloC','yqHCi','zCkKs','EXCLAMATION','xgQMS','setActorHome','updateShadowBattleCore','_injectAnimationSprite','cBULq','initVisibility','setupOversaturateImpactFilter','KCqWB','ActSeq_Movement_WaitForOpacity','Buffs','isMeleeSingleTargetAction','_lastRegenFrameCount','SKTSL','ActSeq_Movement_WaitForMovement','slice','startInput','createHpGaugeSprite','MotionIdle','AllActorsText','SJkSf','itemEffectRecoverHp','maxCommands','_cacheTextWidth','-%1','makeSuccess','moveBattlerDistance','getAttackWeaponAnimationId','resizeWindowXPStyle','Game_Action_isForOpponent','RgPYW','QUulc','addText','oYgYO','BOWnI','DamageFlat','WeaponTypeID','dying','addChildToUiContainer','wUAxd','performSubstitute','DgBvn','autoSelectPriority','UBvQV','selectAllEnemies','isUndecided','sTZgz','3933630JZnwvc','TDqMU','cLIYz','shadow','Game_BattlerBase_meetsUsableItemConditions','makeActionOrders','_distortionSprite','lkMdv','log','NameLegacy','ShowHpDmg','surprise','SmoothImage','_autoBattleWindow','GUARD','lcsEB','disperseDamage','GNTcb','tgPAx','GFIKC','updateWaitMode','ActSeq_Movement_WaitForScale','ActSeq_Mechanics_VariablePopup','setupDesaturateImpactFilter','VGBJk','ActSeq_Animation_ItemAnimation','worldTransform','IconStypeMagic','YaVsI','MHYhJ','BAuvf','CmdIconItem','kKuSX','battleOpacity','isTurnBased','ScaleY','CalcActionSpeedJS','onEnemyCancel','adjustPosition_ScaleUp','_cursorSprite','Game_Party_removeActor','BindCommonEventKeysForObj','updateSelectionEffect','HouMG','XLZBt','stbGainInstant','BattleEndEvent','SkewX','visualCutinPortraitFilename','result','NameAlwaysSelectOnly','meetsUsableItemConditions','battlerKey','ActSeq_Motion_PerformAction','CoygA','isETB','Window_SkillList_maxCols','createEnemyWindow','Sprite_Damage_createChildSprite','extraHeight','uIboZ','process_VisuMZ_BattleCore_TraitObject_Notetags','RnuGM','_opacityWholeDuration','DamageRate','GpDgK','Scene_Battle_selectNextCommand','updateStateIconSprite','CbcAu','Game_Temp_requestAnimation','statusWindowRectBorderStyle','isPhysical','TpGaugeOffsetY','aJuTa','offsetY','setHelpWindowItem','AddOption','ActSeq_Impact_Negative','_requestRefresh','gRlvQ','backColor','Pre','updateCallMenu','pha','Sprite_Actor_updateBitmap','Wave','exXXG','code','YQVRO','Window_BattleActor_show','LNpuM','Game_BattlerBase_canAttack','makeUniqueNames','MotionAni','sFpSX','createString','DistanceX','setBattleZoom','addOptionsCommand','updateBattleBalloons','BattleManager_initMembers','disarmHpLifeSteal','wholeActionSet','DamageType%1','jMDAu','_doubleTouch','weapons','DioQQ','hpqor','NUM','isActiveTpbReady','GGmEX','_battlerName','UrUzS','NsfQD','BkbqZ','setActionState','setValue','Game_BattlerBase_isStateResist','ActSeq_Mechanics_StbRemoveExcessActions','dBEsi','isCancelled','isMagical','targetBattlerContainerOpacity','clear','updatePointAnimations','createShadowSprite','_tpbState','parallaxScrollYinvertEnemy','putActiveBattlerOnTop','displayCritical','_actorSprites','attackTimesAdd','vqOpI','_growEasing','setupBattleCoreData','xhFFM','_enemyId','displayAddedStates','_ptbActionCost','_updateClientArea','sIfjX','ALL\x20SKILLS','growBattler','enemyId','CKGZF','getBattlePortrait','addAutoBattleCommand','inBattle','checkShowHideBattleNotetags','position'];_0x2f55=function(){return _0x1c0499;};return _0x2f55();}function Sprite_SvEnemy(){this['initialize'](...arguments);}Sprite_SvEnemy[_0x3823ba(0x8d6)]=Object['create'](Sprite_Actor[_0x3823ba(0x8d6)]),Sprite_SvEnemy[_0x3823ba(0x8d6)][_0x3823ba(0x786)]=Sprite_SvEnemy,Sprite_SvEnemy[_0x3823ba(0x8d6)][_0x3823ba(0xc06)]=function(_0x177a4a){const _0x540325=_0x3823ba;Sprite_Actor[_0x540325(0x8d6)][_0x540325(0xc06)][_0x540325(0x162)](this,_0x177a4a),this[_0x540325(0x6cc)]['x']=-0x1,this[_0x540325(0x317)][_0x540325(0x6cc)]['x']=-0x1;},Sprite_SvEnemy['prototype'][_0x3823ba(0xcd4)]=function(){},Sprite_SvEnemy[_0x3823ba(0x8d6)]['moveToStartPosition']=function(){},Sprite_SvEnemy[_0x3823ba(0x8d6)][_0x3823ba(0xc29)]=function(_0x3645b3){},Sprite_SvEnemy[_0x3823ba(0x8d6)]['updateShadow']=function(){},Sprite_SvEnemy[_0x3823ba(0x8d6)]['updateShadowPosition']=function(){},Sprite_SvEnemy[_0x3823ba(0x8d6)][_0x3823ba(0x12b)]=function(){const _0x408912=_0x3823ba;this[_0x408912(0x317)][_0x408912(0x425)]=![];},Sprite_SvEnemy[_0x3823ba(0x8d6)][_0x3823ba(0x87a)]=function(){const _0x44c54f=_0x3823ba;Sprite_Battler[_0x44c54f(0x8d6)][_0x44c54f(0x87a)]['call'](this);const _0xb106ad=this[_0x44c54f(0x9c0)][_0x44c54f(0x35d)]();this[_0x44c54f(0xcc6)]!==_0xb106ad&&(this[_0x44c54f(0xcc6)]=_0xb106ad,this['_mainSprite'][_0x44c54f(0x850)]=ImageManager[_0x44c54f(0x23e)](_0xb106ad)),this['_mainSprite']&&this[_0x44c54f(0x1f8)]['bitmap']&&this['_battler']&&(this[_0x44c54f(0x1f8)][_0x44c54f(0x850)][_0x44c54f(0x64e)]!==this[_0x44c54f(0x6b7)]['battlerSmoothImage']()&&('jTjwN'==='PzYAj'?this[_0x44c54f(0xa2c)]=this[_0x44c54f(0x314)]:this[_0x44c54f(0x1f8)]['bitmap'][_0x44c54f(0x64e)]=this[_0x44c54f(0x6b7)]['battlerSmoothImage']()));},Sprite_SvEnemy[_0x3823ba(0x8d6)][_0x3823ba(0xaac)]=function(){},Sprite_SvEnemy[_0x3823ba(0x8d6)][_0x3823ba(0x67d)]=function(_0xaba04e,_0x307df9,_0x3bdcc5){const _0x4643ac=_0x3823ba;if(this[_0x4643ac(0x73c)])this[_0x4643ac(0x73c)][_0x4643ac(0x67d)](_0xaba04e,_0x307df9,_0x3bdcc5);},Sprite_SvEnemy['prototype']['refreshMotion']=function(){const _0x406504=_0x3823ba,_0xe17eb2=this[_0x406504(0x9c0)];if(_0xe17eb2){const _0x4c0735=_0xe17eb2[_0x406504(0x2e1)]();if(_0xe17eb2[_0x406504(0xd96)]()||_0xe17eb2[_0x406504(0x63d)]()){if(_0x406504(0xb60)===_0x406504(0xb60))this[_0x406504(0x2e8)](_0x406504(0x5bf));else return _0xd45c31['BattleCore'][_0x406504(0x242)]['Actor']['AnchorX'];}else{if(_0x4c0735===0x3)'hGkKl'===_0x406504(0x62b)?this['startMotion']('dead'):(_0x53f34b[_0x406504(0x4f3)][_0x406504(0xa12)][_0x406504(0x162)](this),this[_0x406504(0xad6)]=this[_0x406504(0xad6)]['filter'](_0x4eb773=>_0x4eb773&&_0x4eb773['isAppeared']()));else{if(_0x4c0735===0x2){if(_0x406504(0x704)===_0x406504(0x703)){_0xad8ec1(_0x406504(0x25b)),_0x2b9c7c[_0x406504(0x824)]();return;}else this[_0x406504(0x2e8)](_0x406504(0xd3f));}else{if(_0xe17eb2[_0x406504(0xb62)]())this['startMotion'](_0x406504(0x967));else{if(_0xe17eb2[_0x406504(0x378)]()||_0xe17eb2['isGuardWaiting']()){if(_0x406504(0x958)===_0x406504(0x958))this['startMotion']('guard');else{const _0x5bd956={'target':_0x70088,'balloonId':_0xea7657};this[_0x406504(0xbe6)]=this['_battleBalloonQueue']||[],this[_0x406504(0xbe6)][_0x406504(0x3d9)](_0x5bd956);}}else{if(_0x4c0735===0x1){if(_0x406504(0xc49)==='hMEFe')return this[_0x406504(0xa0b)]();else this[_0x406504(0x2e8)]('abnormal');}else{if(_0xe17eb2['isDying']()){if(_0x406504(0x381)!==_0x406504(0x381)){const _0x692298=_0x59a9d7[_0x406504(0x282)](_0x1ca1c5[_0x406504(0x204)]/0x2),_0x358c30=_0x13a247['round'](_0x4077c5[_0x406504(0xd6d)]/0x2);_0x3a71f3[_0x406504(0xb83)](_0x692298,_0x358c30,_0x520591[_0x406504(0x438)],_0x513e47[_0x406504(0x890)]);}else this[_0x406504(0x2e8)]('dying');}else _0xe17eb2[_0x406504(0xc54)]()?'NjtVe'!==_0x406504(0x295)?(_0xef4672['anchorX']=_0x155345(_0x4ae6f5['$1']),_0x2622c4[_0x406504(0x8f1)]=_0xb3aa1d(_0x1f5846['$2'])):this[_0x406504(0x2e8)]('walk'):_0x406504(0xc2c)!==_0x406504(0xc2c)?this[_0x406504(0x3d9)](_0x406504(0x59e),_0x2e7e70):this[_0x406504(0x2e8)](_0xe17eb2[_0x406504(0x888)]()[_0x406504(0x2a3)]||_0x406504(0x5bf));}}}}}}}},Sprite_SvEnemy[_0x3823ba(0x8d6)][_0x3823ba(0x970)]=function(){const _0x91047a=_0x3823ba;return this[_0x91047a(0x73c)]?this['parent']['_offsetX']===0x0&&this[_0x91047a(0x73c)][_0x91047a(0x3b1)]===0x0:_0x91047a(0x81a)==='TERiu'?!![]:this[_0x91047a(0x6ec)]>0x0;},Sprite_SvEnemy[_0x3823ba(0x8d6)][_0x3823ba(0x9df)]=function(){},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x86e)]=Sprite_Animation[_0x3823ba(0x8d6)][_0x3823ba(0x232)],Sprite_Animation[_0x3823ba(0x8d6)][_0x3823ba(0x232)]=function(_0x657d5d){const _0x22b555=_0x3823ba;if(_0x657d5d[_0x22b555(0xc5c)]){if(_0x22b555(0x537)!==_0x22b555(0xa8a))return this[_0x22b555(0x66e)](_0x657d5d);else this[_0x22b555(0x3d9)](_0x22b555(0x3a5),_0x3404a6,_0x4deb6b);}else return VisuMZ['BattleCore'][_0x22b555(0x86e)][_0x22b555(0x162)](this,_0x657d5d);},Sprite_Animation[_0x3823ba(0x8d6)][_0x3823ba(0x66e)]=function(_0x5bb566){const _0x276136=_0x3823ba;let _0x2e4d70=_0x5bb566['x'],_0x3b71e1=_0x5bb566['y'],_0xb6d44a=_0x5bb566['height'],_0x15cb95=_0x5bb566[_0x276136(0xc5c)][_0x276136(0x6cc)]['y'];_0x5bb566['x']=_0x5bb566['_baseX']+_0x5bb566[_0x276136(0x61f)](),_0x5bb566['y']=_0x5bb566['_baseY']+_0x5bb566[_0x276136(0x19a)](),_0x5bb566[_0x276136(0xd6d)]*=_0x15cb95;let _0xa01ce8=VisuMZ['BattleCore'][_0x276136(0x86e)][_0x276136(0x162)](this,_0x5bb566);return _0x5bb566['x']=_0x2e4d70,_0x5bb566['y']=_0x3b71e1,_0x5bb566[_0x276136(0xd6d)]=_0xb6d44a,_0xa01ce8;},VisuMZ['BattleCore']['Sprite_AnimationMV_updatePosition']=Sprite_AnimationMV['prototype']['updatePosition'],Sprite_AnimationMV[_0x3823ba(0x8d6)]['updatePosition']=function(){const _0xc8dcd4=_0x3823ba;VisuMZ[_0xc8dcd4(0x4f3)]['Sprite_AnimationMV_updatePosition'][_0xc8dcd4(0x162)](this);if(!SceneManager['isSceneBattle']())return;if(this['_animation']['position']===0x3)this['x']=Math['round'](Graphics[_0xc8dcd4(0xc13)]/0x2),this['y']=Math[_0xc8dcd4(0x282)](Graphics[_0xc8dcd4(0x53c)]/0x2);else{if(_0xc8dcd4(0xb15)!==_0xc8dcd4(0x1a4)){if(this[_0xc8dcd4(0xd21)])return;}else _0x3a1773&&_0x5acf4b[_0xc8dcd4(0x4e0)]()&&_0x5be2be[_0xc8dcd4(0xb20)](),this[_0xc8dcd4(0x15f)]();}},Sprite_Damage[_0x3823ba(0x8d6)][_0x3823ba(0x82a)]=function(_0x755c51){const _0x2058a8=_0x3823ba,_0x48056d=_0x755c51[_0x2058a8(0x57c)]()||_0x755c51['result']();if(_0x48056d[_0x2058a8(0x922)]||_0x48056d[_0x2058a8(0xaea)])this[_0x2058a8(0x7d9)]=0x0,this[_0x2058a8(0x569)]();else{if(_0x48056d[_0x2058a8(0x560)])this[_0x2058a8(0x7d9)]=_0x48056d[_0x2058a8(0xd6f)]>=0x0?0x0:0x1,this['createDigits'](_0x48056d['hpDamage']);else _0x755c51[_0x2058a8(0x8ed)]()&&_0x48056d['mpDamage']!==0x0&&(this[_0x2058a8(0x7d9)]=_0x48056d['mpDamage']>=0x0?0x2:0x3,this['createDigits'](_0x48056d[_0x2058a8(0x313)]));}_0x48056d[_0x2058a8(0x9f2)]&&this[_0x2058a8(0x5a4)]();},Sprite_Damage[_0x3823ba(0x8d6)]['setup']=function(_0x479a90){},Sprite_Damage[_0x3823ba(0x8d6)][_0x3823ba(0x99f)]=function(_0x2a514a){const _0x2ac0ee=_0x3823ba;let _0x3c349e=this[_0x2ac0ee(0xcb5)](_0x2a514a);const _0xc26250=this['fontSize'](),_0x193899=Math[_0x2ac0ee(0x975)](_0xc26250*0.75);for(let _0x4572b5=0x0;_0x4572b5<_0x3c349e[_0x2ac0ee(0xb23)];_0x4572b5++){const _0x3b855f=this['createChildSprite'](_0x193899,_0xc26250);_0x3b855f['bitmap']['drawText'](_0x3c349e[_0x4572b5],0x0,0x0,_0x193899,_0xc26250,_0x2ac0ee(0x542)),_0x3b855f['x']=(_0x4572b5-(_0x3c349e['length']-0x1)/0x2)*_0x193899,_0x3b855f['dy']=-_0x4572b5;}},Sprite_Damage['prototype'][_0x3823ba(0xcb5)]=function(_0x55465e){const _0x35d6f4=_0x3823ba;let _0x66b04e=Math[_0x35d6f4(0x6ee)](_0x55465e)[_0x35d6f4(0xb79)]();this[_0x35d6f4(0x2ad)]()&&(_0x35d6f4(0x951)!=='pFDaY'?this[_0x35d6f4(0xd0e)]=_0x2a619d:_0x66b04e=VisuMZ[_0x35d6f4(0x92f)](_0x66b04e));const _0x237f8=VisuMZ[_0x35d6f4(0x4f3)][_0x35d6f4(0x242)][_0x35d6f4(0x630)];let _0x1921d4='',_0x2ae32d='';switch(this['_colorType']){case 0x0:_0x1921d4=_0x237f8[_0x35d6f4(0xaaa)]||_0x35d6f4(0xc3f),_0x2ae32d=TextManager['hp'];if(_0x55465e===0x0)_0x1921d4='%1';break;case 0x1:_0x1921d4=_0x237f8[_0x35d6f4(0x8a2)]||'+%1',_0x2ae32d=TextManager['hp'];break;case 0x2:_0x1921d4=_0x237f8[_0x35d6f4(0x819)]||_0x35d6f4(0xc0a),_0x2ae32d=TextManager['mp'];break;case 0x3:_0x1921d4=_0x237f8[_0x35d6f4(0x7a9)]||'+%1\x20MP',_0x2ae32d=TextManager['mp'];break;}return _0x1921d4['format'](_0x66b04e,_0x2ae32d)[_0x35d6f4(0xaf4)]();},Sprite_Damage[_0x3823ba(0x8d6)]['useDigitGrouping']=function(){const _0xc70536=_0x3823ba;if(Imported['VisuMZ_0_CoreEngine'])return VisuMZ[_0xc70536(0x2a1)][_0xc70536(0x242)][_0xc70536(0x447)][_0xc70536(0x6be)];else{if(_0xc70536(0x42a)!==_0xc70536(0x42a)){const _0x160561=this[_0xc70536(0x55b)];_0x160561['setHandler'](_0xc70536(0xb42),this['actorCommandEscape'][_0xc70536(0x343)](this)),_0x160561[_0xc70536(0x9f6)](_0xc70536(0xbf5),this[_0xc70536(0x75b)]['bind'](this)),_0x160561[_0xc70536(0x9f6)](_0xc70536(0x609),this[_0xc70536(0x862)][_0xc70536(0x343)](this)),_0x4ee80a['isTpb']()&&(this[_0xc70536(0x6cd)]()?delete _0x160561[_0xc70536(0x431)]['cancel']:_0x160561[_0xc70536(0x9f6)]('cancel',this['actorCommandCancelTPB'][_0xc70536(0x343)](this)));}else return![];}},Sprite_Damage[_0x3823ba(0x8d6)]['setupCriticalEffect']=function(){const _0x16cf1d=_0x3823ba,_0x2f55c1=VisuMZ[_0x16cf1d(0x4f3)]['Settings'][_0x16cf1d(0x630)];this[_0x16cf1d(0xd53)]=_0x2f55c1[_0x16cf1d(0xd60)]['slice'](0x0),this[_0x16cf1d(0xc07)]=_0x2f55c1['CriticalDuration'];},Sprite_Damage[_0x3823ba(0x8d6)][_0x3823ba(0x193)]=function(_0x52797a,_0x44b481){const _0x2262c0=_0x3823ba;this[_0x2262c0(0xd53)]=_0x44b481[_0x2262c0(0x5cc)]||[0x0,0x0,0x0,0x0],this[_0x2262c0(0xd53)]=JsonEx[_0x2262c0(0x682)](this[_0x2262c0(0xd53)]),this[_0x2262c0(0xc07)]=_0x44b481[_0x2262c0(0x55a)]||0x0;const _0x4fdf40=this[_0x2262c0(0x5d8)](),_0x5523b1=Math[_0x2262c0(0x975)](_0x4fdf40*0x1e),_0x2ee18f=this['createChildSprite'](_0x5523b1,_0x4fdf40);_0x2ee18f[_0x2262c0(0x850)]['textColor']=ColorManager['getColor'](_0x44b481[_0x2262c0(0xb76)]),_0x2ee18f['bitmap'][_0x2262c0(0x187)](_0x52797a,0x0,0x0,_0x5523b1,_0x4fdf40,_0x2262c0(0x542)),_0x2ee18f['dy']=0x0;},Sprite_Damage[_0x3823ba(0x8d6)][_0x3823ba(0x65f)]=function(_0x5c15ee,_0x37af8e,_0x487efa){const _0x4b1003=_0x3823ba,_0xa6b1dd=Math[_0x4b1003(0xd19)](this[_0x4b1003(0x5d8)](),ImageManager[_0x4b1003(0x935)]),_0x2e38a6=Math[_0x4b1003(0x975)](_0xa6b1dd*0x1e),_0x45c41a=this[_0x4b1003(0x351)](_0x2e38a6,_0xa6b1dd),_0x5e7691=ImageManager['iconWidth']/0x2,_0x28a596=_0x45c41a['bitmap'][_0x4b1003(0x787)](_0x37af8e+'\x20');_0x45c41a[_0x4b1003(0x850)][_0x4b1003(0xb76)]=ColorManager[_0x4b1003(0x2cf)](_0x487efa['textColor']),_0x45c41a[_0x4b1003(0x850)]['drawText'](_0x37af8e,_0x5e7691,0x0,_0x2e38a6-_0x5e7691,_0xa6b1dd,_0x4b1003(0x542));const _0x506411=Math['round']((_0xa6b1dd-ImageManager[_0x4b1003(0x935)])/0x2),_0x1e01f3=_0x2e38a6/0x2-ImageManager['iconWidth']-_0x28a596/0x2+_0x5e7691/0x2,_0x11bd8c=ImageManager['loadSystem'](_0x4b1003(0x1f0)),_0x359fde=ImageManager['iconWidth'],_0x24e5d8=ImageManager['iconHeight'],_0x376b24=_0x5c15ee%0x10*_0x359fde,_0x48c20d=Math[_0x4b1003(0x975)](_0x5c15ee/0x10)*_0x24e5d8;_0x45c41a[_0x4b1003(0x850)][_0x4b1003(0x870)](_0x11bd8c,_0x376b24,_0x48c20d,_0x359fde,_0x24e5d8,_0x1e01f3,_0x506411),this[_0x4b1003(0xd53)]=_0x487efa[_0x4b1003(0x5cc)]||[0x0,0x0,0x0,0x0],this[_0x4b1003(0xd53)]=JsonEx[_0x4b1003(0x682)](this[_0x4b1003(0xd53)]),this[_0x4b1003(0xc07)]=_0x487efa[_0x4b1003(0x55a)]||0x0,_0x45c41a['dy']=0x0;},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0xc90)]=Sprite_Damage['prototype'][_0x3823ba(0x351)],Sprite_Damage[_0x3823ba(0x8d6)][_0x3823ba(0x351)]=function(_0x4d5dfd,_0x46d46a){const _0x19ce47=_0x3823ba;return _0x46d46a=Math[_0x19ce47(0x282)](_0x46d46a*1.2),VisuMZ['BattleCore'][_0x19ce47(0xc90)]['call'](this,_0x4d5dfd,_0x46d46a);},VisuMZ['BattleCore'][_0x3823ba(0xa55)]=Sprite_StateIcon[_0x3823ba(0x8d6)][_0x3823ba(0x3f5)],Sprite_StateIcon[_0x3823ba(0x8d6)][_0x3823ba(0x3f5)]=function(){const _0x964e05=_0x3823ba;VisuMZ[_0x964e05(0x4f3)][_0x964e05(0xa55)]['call'](this),this['opacity']=this['_iconIndex']>0x0?0xff:0x0;},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0xa87)]=Sprite_Weapon[_0x3823ba(0x8d6)][_0x3823ba(0x8e0)],Sprite_Weapon['prototype'][_0x3823ba(0x8e0)]=function(){const _0x1ba1bd=_0x3823ba;VisuMZ[_0x1ba1bd(0x4f3)]['Sprite_Weapon_loadBitmap'][_0x1ba1bd(0x162)](this),this[_0x1ba1bd(0x850)]&&(this[_0x1ba1bd(0x850)][_0x1ba1bd(0x64e)]=VisuMZ[_0x1ba1bd(0x4f3)][_0x1ba1bd(0x242)]['Actor'][_0x1ba1bd(0xc62)]);},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x4c1)]=Sprite_Gauge[_0x3823ba(0x8d6)][_0x3823ba(0x849)],Sprite_Gauge['prototype'][_0x3823ba(0x849)]=function(){const _0x4fc1e7=_0x3823ba;if(this[_0x4fc1e7(0x453)]!=='time'){if(_0x4fc1e7(0xc0b)!==_0x4fc1e7(0xc0b)){const _0x4b10ee='\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20visible\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20visible;\x0a\x20\x20\x20\x20'['format'](_0xac6b9b);_0x3ab453[_0x4fc1e7(0x4f3)]['JS'][_0x5f1eb2]=new _0x109506(_0x4b10ee);}else return VisuMZ['BattleCore'][_0x4fc1e7(0x242)][_0x4fc1e7(0xb40)][_0x4fc1e7(0x66a)]??0x14;}else return VisuMZ[_0x4fc1e7(0x4f3)][_0x4fc1e7(0x4c1)][_0x4fc1e7(0x162)](this);};function Sprite_HpGauge(){const _0x3c607f=_0x3823ba;this[_0x3c607f(0xc06)](...arguments);}Sprite_HpGauge[_0x3823ba(0x8d6)]=Object[_0x3823ba(0x312)](Sprite_Gauge[_0x3823ba(0x8d6)]),Sprite_HpGauge[_0x3823ba(0x8d6)]['constructor']=Sprite_HpGauge,Sprite_HpGauge[_0x3823ba(0x8d6)]['initialize']=function(){const _0x4c5f83=_0x3823ba;Sprite_Gauge[_0x4c5f83(0x8d6)][_0x4c5f83(0xc06)][_0x4c5f83(0x162)](this);},Sprite_HpGauge[_0x3823ba(0x8d6)][_0x3823ba(0x332)]=function(){return 0x0;},Sprite_HpGauge['prototype'][_0x3823ba(0x632)]=function(){const _0x10d5d8=_0x3823ba;this[_0x10d5d8(0x850)][_0x10d5d8(0xcd2)]();const _0x41abdd=this[_0x10d5d8(0x983)]();!isNaN(_0x41abdd)&&(_0x10d5d8(0x5ab)===_0x10d5d8(0x5ab)?this['drawGauge']():(_0x3c8900*=-0x1,_0x2e9bb1*=-0x1));};function _0xf8bb(_0x277253,_0x2926b6){const _0x2f5536=_0x2f55();return _0xf8bb=function(_0xf8bb0f,_0x4f463b){_0xf8bb0f=_0xf8bb0f-0x105;let _0x19474f=_0x2f5536[_0xf8bb0f];return _0x19474f;},_0xf8bb(_0x277253,_0x2926b6);}function Sprite_EnemyName(){const _0x54924f=_0x3823ba;this[_0x54924f(0xc06)](...arguments);}Sprite_EnemyName[_0x3823ba(0x8d6)]=Object['create'](Sprite_Name[_0x3823ba(0x8d6)]),Sprite_EnemyName[_0x3823ba(0x8d6)][_0x3823ba(0x786)]=Sprite_EnemyName,Sprite_EnemyName[_0x3823ba(0x8d6)][_0x3823ba(0xc06)]=function(){const _0x5f0702=_0x3823ba;Sprite_Name[_0x5f0702(0x8d6)]['initialize'][_0x5f0702(0x162)](this),this[_0x5f0702(0x3f9)]();},Sprite_EnemyName[_0x3823ba(0x8d6)][_0x3823ba(0x6f2)]=function(){const _0x40f6a6=_0x3823ba;Sprite_Name[_0x40f6a6(0x8d6)][_0x40f6a6(0x6f2)][_0x40f6a6(0x162)](this),this['opacity']=0x0,this[_0x40f6a6(0x9f9)]=null,this['anchor']['x']=0.5,this['anchor']['y']=0x0;},Sprite_EnemyName[_0x3823ba(0x8d6)]['createAttachedSprites']=function(){const _0x5a8ac4=_0x3823ba;VisuMZ[_0x5a8ac4(0x4f3)][_0x5a8ac4(0x242)][_0x5a8ac4(0x179)][_0x5a8ac4(0x6f7)]&&(this[_0x5a8ac4(0xa14)]=new Sprite_StateIcon(),this[_0x5a8ac4(0x538)](this[_0x5a8ac4(0xa14)]));},Sprite_EnemyName[_0x3823ba(0x8d6)][_0x3823ba(0xb3b)]=function(){const _0x2fdf80=_0x3823ba;return Graphics[_0x2fdf80(0xc13)];},Sprite_EnemyName[_0x3823ba(0x8d6)]['bitmapHeight']=function(){const _0x2691ea=_0x3823ba;return this[_0x2691ea(0x198)]=this[_0x2691ea(0x198)]||Window_Base['prototype'][_0x2691ea(0x8d0)]()||0x24,this[_0x2691ea(0x198)]*0x4;},Sprite_EnemyName[_0x3823ba(0x8d6)][_0x3823ba(0x5d8)]=function(){const _0x296b7a=_0x3823ba;return VisuMZ[_0x296b7a(0x4f3)][_0x296b7a(0x242)][_0x296b7a(0x179)]['NameFontSize']||$gameSystem[_0x296b7a(0x1a6)]();},Sprite_EnemyName[_0x3823ba(0x8d6)]['linkSprite']=function(_0x18e1c5){const _0x3ad49b=_0x3823ba;this[_0x3ad49b(0x9f9)]=_0x18e1c5;},Sprite_EnemyName[_0x3823ba(0x8d6)][_0x3823ba(0x456)]=function(){const _0x489c2b=_0x3823ba;Sprite_Name[_0x489c2b(0x8d6)][_0x489c2b(0x456)][_0x489c2b(0x162)](this),this['updateLink'](),this[_0x489c2b(0x1b7)](),this[_0x489c2b(0x118)](),this[_0x489c2b(0x86a)]();},Sprite_EnemyName[_0x3823ba(0x8d6)][_0x3823ba(0x632)]=function(){const _0x1d05ed=_0x3823ba;this['_cacheTextWidth']=undefined;const _0x1c463e=this['name'](),_0x22c1f6=this['bitmapWidth'](),_0x255288=Window_Base[_0x1d05ed(0x8d6)]['lineHeight']();this['setupFont'](),this['bitmap'][_0x1d05ed(0xcd2)](),this[_0x1d05ed(0x850)][_0x1d05ed(0x187)](_0x1c463e,0x0,0x0,_0x22c1f6,_0x255288,'center');},Sprite_EnemyName[_0x3823ba(0x8d6)][_0x3823ba(0x4c3)]=function(){const _0x6cc9ec=_0x3823ba;if(!this['_linkedSprite'])return;this[_0x6cc9ec(0x6b7)]!==this['_linkedSprite'][_0x6cc9ec(0x6b7)]&&this[_0x6cc9ec(0xa63)](this[_0x6cc9ec(0x9f9)][_0x6cc9ec(0x6b7)]);},Sprite_EnemyName[_0x3823ba(0x8d6)][_0x3823ba(0x1b7)]=function(){const _0xec03d4=_0x3823ba;if(!this[_0xec03d4(0x9f9)])return;this[_0xec03d4(0x198)]=this[_0xec03d4(0x198)]||Window_Base[_0xec03d4(0x8d6)]['lineHeight'](),this['x']=Math['round'](this[_0xec03d4(0x9f9)][_0xec03d4(0x12d)]),this['y']=Math['round'](this[_0xec03d4(0x9f9)][_0xec03d4(0xcf6)]-this[_0xec03d4(0x198)]*0.5);const _0x84e370=VisuMZ[_0xec03d4(0x4f3)][_0xec03d4(0x242)]['Enemy'];this['x']+=Math[_0xec03d4(0x282)](_0x84e370[_0xec03d4(0x972)]||0x0),this['y']+=Math['round'](_0x84e370[_0xec03d4(0x37b)]||0x0);},Sprite_EnemyName[_0x3823ba(0x8d6)][_0x3823ba(0x118)]=function(){const _0x25245b=_0x3823ba;this[_0x25245b(0xc99)]();},Sprite_EnemyName[_0x3823ba(0x8d6)][_0x3823ba(0xc99)]=function(){const _0x5c2f72=_0x3823ba;if(!this[_0x5c2f72(0xa14)])return;this[_0x5c2f72(0x6b7)]!==this[_0x5c2f72(0xa14)][_0x5c2f72(0x6b7)]&&(_0x5c2f72(0x364)===_0x5c2f72(0x364)?this[_0x5c2f72(0xa14)]['setup'](this[_0x5c2f72(0x6b7)]):_0x50c55f=_0x15d242[_0x5c2f72(0x31d)]);const _0x2ff63a=this[_0x5c2f72(0xb59)]();this[_0x5c2f72(0x198)]=this[_0x5c2f72(0x198)]||Window_Base['prototype']['lineHeight'](),this[_0x5c2f72(0xa14)]['x']=Math[_0x5c2f72(0x282)]((_0x2ff63a+ImageManager[_0x5c2f72(0x4d6)])/0x2)+0x8,this['_stateIconSprite']['y']=this[_0x5c2f72(0x198)]/0x2;const _0x1f7d64=VisuMZ['BattleCore'][_0x5c2f72(0x242)][_0x5c2f72(0x179)];this[_0x5c2f72(0xa14)]['x']+=_0x1f7d64[_0x5c2f72(0x38e)]||0x0,this[_0x5c2f72(0xa14)]['y']+=_0x1f7d64['AttachStateOffsetY']||0x0;},Sprite_EnemyName[_0x3823ba(0x8d6)][_0x3823ba(0x86a)]=function(){const _0x3930ff=_0x3823ba,_0x376112=this['visibilityState']();if(_0x376112&&this[_0x3930ff(0xa2c)]<0xff)this[_0x3930ff(0xa2c)]+=0x10;else!_0x376112&&this[_0x3930ff(0xa2c)]>0x0&&(this[_0x3930ff(0xa2c)]-=0x10);},Sprite_EnemyName['prototype'][_0x3823ba(0x137)]=function(){const _0x4b2b2b=_0x3823ba;if(this[_0x4b2b2b(0x8c8)]())return![];else{if(!this['_battler'])return![];else{if(this[_0x4b2b2b(0x6b7)]['isDead']())return _0x4b2b2b(0x5e1)!==_0x4b2b2b(0x3f3)?![]:_0x500570[_0x4b2b2b(0x4f3)][_0x4b2b2b(0x242)][_0x4b2b2b(0x735)]['SkillItemBorderCols'];else{if(!this[_0x4b2b2b(0x6b7)][_0x4b2b2b(0xb7d)]())return![];else{if(this['compatibilityVisible']()){if(_0x4b2b2b(0x7b2)===_0x4b2b2b(0x4c4))this[_0x4b2b2b(0x8d2)]=!![],this[_0x4b2b2b(0x64f)](_0x4b2b2b(0x5c6)),_0x1c089a[_0x4b2b2b(0x4f3)]['BattleManager_processVictory'][_0x4b2b2b(0x162)](this),this[_0x4b2b2b(0x9bb)](_0x4b2b2b(0x370));else return!![];}else{if(this['isAlwaysVisible']())return!![];else{if(this[_0x4b2b2b(0x68f)]()){if('ZXBeI'===_0x4b2b2b(0x883))_0x137564=(_0xe52880+_0x5451d3)/0x2;else return!![];}else{if(this[_0x4b2b2b(0xa2c)]>0x0){if('UhGaa'===_0x4b2b2b(0x7e6))this[_0x4b2b2b(0xa3b)]=_0x38550e,_0x227291['_scene']['battleCoreResumeLaunchBattle']();else return![];}}}}}}}}},Sprite_EnemyName['prototype'][_0x3823ba(0x8c8)]=function(){const _0x5c7719=_0x3823ba;return VisuMZ[_0x5c7719(0x4f3)][_0x5c7719(0x242)][_0x5c7719(0x179)][_0x5c7719(0xd8f)];},Sprite_EnemyName[_0x3823ba(0x8d6)]['compatibilityVisible']=function(){return![];},Sprite_EnemyName[_0x3823ba(0x8d6)][_0x3823ba(0x894)]=function(){const _0x347775=_0x3823ba;return VisuMZ[_0x347775(0x4f3)]['Settings'][_0x347775(0x179)][_0x347775(0x116)];},Sprite_EnemyName[_0x3823ba(0x8d6)][_0x3823ba(0x68f)]=function(){const _0x4d5813=_0x3823ba;return VisuMZ[_0x4d5813(0x4f3)][_0x4d5813(0x242)][_0x4d5813(0x179)][_0x4d5813(0xc88)]?this['_battler'][_0x4d5813(0xd5c)]():SceneManager[_0x4d5813(0xaa3)]['_enemyWindow']&&SceneManager[_0x4d5813(0xaa3)][_0x4d5813(0x67c)][_0x4d5813(0xa4e)]&&SceneManager['_scene'][_0x4d5813(0x67c)][_0x4d5813(0xda0)][_0x4d5813(0x97e)](this[_0x4d5813(0x6b7)]);},Sprite_EnemyName[_0x3823ba(0x8d6)][_0x3823ba(0xb59)]=function(){const _0xe7c0eb=_0x3823ba;if(!this[_0xe7c0eb(0x6b7)])return 0x0;if(this['_cacheTextWidth'])return this[_0xe7c0eb(0xc3e)];const _0x48301a=this['name']();return this[_0xe7c0eb(0x74d)](),this[_0xe7c0eb(0xc3e)]=this[_0xe7c0eb(0x850)][_0xe7c0eb(0x787)](_0x48301a)||0x1,this[_0xe7c0eb(0xc3e)];},VisuMZ[_0x3823ba(0x4f3)]['Sprite_Battleback_adjustPosition']=Sprite_Battleback['prototype']['adjustPosition'],Sprite_Battleback[_0x3823ba(0x8d6)][_0x3823ba(0x562)]=function(){const _0x316daf=_0x3823ba,_0x1fa2c5=VisuMZ[_0x316daf(0x4f3)][_0x316daf(0x242)][_0x316daf(0x6ad)];if(!_0x1fa2c5){if('YgCws'===_0x316daf(0xa7b)){if(this['battler']())this['battler']()[_0x316daf(0x34f)]();}else return VisuMZ['BattleCore'][_0x316daf(0x92b)][_0x316daf(0x162)](this);}const _0x61cef7=String(_0x1fa2c5[_0x316daf(0xb34)])||'MZ';switch(_0x61cef7){case'MZ':VisuMZ[_0x316daf(0x4f3)][_0x316daf(0x92b)][_0x316daf(0x162)](this);break;case _0x316daf(0x3d2):this[_0x316daf(0xbba)]();break;case'ScaleToFit':this['adjustPosition_ScaleToFit']();break;case _0x316daf(0x84b):this[_0x316daf(0xa93)]();break;case'ScaleUp':this[_0x316daf(0xc7c)]();break;}},Sprite_Battleback[_0x3823ba(0x8d6)]['adjustPosition_1for1']=function(){const _0x1c8af0=_0x3823ba,_0xd8da64=VisuMZ['BattleCore'][_0x1c8af0(0x242)][_0x1c8af0(0x6ad)];if(_0xd8da64&&_0xd8da64[_0x1c8af0(0xb3a)])return _0xd8da64[_0x1c8af0(0xb3a)][_0x1c8af0(0x162)](this);this[_0x1c8af0(0x204)]=Graphics[_0x1c8af0(0x204)],this[_0x1c8af0(0xd6d)]=Graphics[_0x1c8af0(0xd6d)];const _0x479ee2=0x1;this[_0x1c8af0(0x6cc)]['x']=_0x479ee2,this[_0x1c8af0(0x6cc)]['y']=_0x479ee2,this['x']=0x0,this['y']=0x0;},Sprite_Battleback[_0x3823ba(0x8d6)][_0x3823ba(0xd9b)]=function(){const _0x2d015e=_0x3823ba,_0x45a6f3=VisuMZ[_0x2d015e(0x4f3)][_0x2d015e(0x242)]['BattlebackScale'];if(_0x45a6f3&&_0x45a6f3[_0x2d015e(0x208)]){if(_0x2d015e(0xb9a)!=='kZkXf')return _0x45a6f3[_0x2d015e(0x208)][_0x2d015e(0x162)](this);else _0x1bfc35[_0x2d015e(0x4f3)][_0x2d015e(0x28d)]['call'](this),this[_0x2d015e(0x236)]();}this[_0x2d015e(0x204)]=Graphics[_0x2d015e(0x204)],this[_0x2d015e(0xd6d)]=Graphics[_0x2d015e(0xd6d)];const _0x46b023=this['width']/this['bitmap'][_0x2d015e(0x204)],_0x50527a=this['height']/this[_0x2d015e(0x850)][_0x2d015e(0xd6d)],_0x243c9b=Math['max'](_0x46b023,_0x50527a);this[_0x2d015e(0x6cc)]['x']=_0x243c9b,this[_0x2d015e(0x6cc)]['y']=_0x243c9b,this['x']=(Graphics['width']-this['width'])/0x2,this['y']=Graphics[_0x2d015e(0xd6d)]-this[_0x2d015e(0xd6d)];},Sprite_Battleback[_0x3823ba(0x8d6)][_0x3823ba(0xa93)]=function(){const _0x277c55=_0x3823ba,_0x58797c=VisuMZ[_0x277c55(0x4f3)][_0x277c55(0x242)]['BattlebackScale'];if(_0x58797c&&_0x58797c[_0x277c55(0x2d2)]){if(_0x277c55(0x79a)===_0x277c55(0x79a))return _0x58797c[_0x277c55(0x2d2)]['call'](this);else{let _0x2d1c40=_0x96f6db['value'](_0x43554a[_0x277c55(0x816)]);_0x1ff02b[_0x277c55(0xd6f)]<0x0&&(_0x2d1c40+=_0x2aa51e['abs'](_0x496e43['hpDamage'])),_0x177e7b[_0x277c55(0xccb)](_0x53e7fd[_0x277c55(0x816)],_0x2d1c40);}}this[_0x277c55(0x204)]=Graphics['width'],this['height']=Graphics[_0x277c55(0xd6d)];const _0x134dc7=Math[_0x277c55(0x28a)](0x1,this[_0x277c55(0x204)]/this[_0x277c55(0x850)][_0x277c55(0x204)]),_0x382f5f=Math[_0x277c55(0x28a)](0x1,this['height']/this[_0x277c55(0x850)][_0x277c55(0xd6d)]),_0x14d975=Math['max'](_0x134dc7,_0x382f5f);this[_0x277c55(0x6cc)]['x']=_0x14d975,this[_0x277c55(0x6cc)]['y']=_0x14d975,this['x']=(Graphics[_0x277c55(0x204)]-this[_0x277c55(0x204)])/0x2,this['y']=Graphics['height']-this[_0x277c55(0xd6d)];},Sprite_Battleback['prototype']['adjustPosition_ScaleUp']=function(){const _0x558325=_0x3823ba,_0x87ab94=VisuMZ[_0x558325(0x4f3)]['Settings'][_0x558325(0x6ad)];if(_0x87ab94&&_0x87ab94[_0x558325(0x5dd)])return _0x87ab94[_0x558325(0x5dd)]['call'](this);this[_0x558325(0x204)]=Graphics['width'],this[_0x558325(0xd6d)]=Graphics[_0x558325(0xd6d)];const _0xc5c90a=Math[_0x558325(0xd19)](0x1,this[_0x558325(0x204)]/this[_0x558325(0x850)][_0x558325(0x204)]),_0x820016=Math['max'](0x1,this[_0x558325(0xd6d)]/this[_0x558325(0x850)][_0x558325(0xd6d)]),_0x25fb2c=Math['max'](_0xc5c90a,_0x820016);this[_0x558325(0x6cc)]['x']=_0x25fb2c,this[_0x558325(0x6cc)]['y']=_0x25fb2c,this['x']=(Graphics[_0x558325(0x204)]-this['width'])/0x2,this['y']=Graphics[_0x558325(0xd6d)]-this[_0x558325(0xd6d)];},Spriteset_Battle['ANTI_TINT_UI']=![],Spriteset_Battle[_0x3823ba(0x8d6)]['isFlipped']=function(){const _0x55a9ad=_0x3823ba;if(!$gameSystem[_0x55a9ad(0x839)]())return![];return![];},Spriteset_Battle[_0x3823ba(0x8d6)][_0x3823ba(0x8fe)]=function(){return 0x0;},Spriteset_Battle[_0x3823ba(0x8d6)][_0x3823ba(0x222)]=function(){return 0x0;},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x814)]=Spriteset_Battle[_0x3823ba(0x8d6)][_0x3823ba(0x797)],Spriteset_Battle[_0x3823ba(0x8d6)][_0x3823ba(0x797)]=function(){const _0x58beb1=_0x3823ba;VisuMZ[_0x58beb1(0x4f3)][_0x58beb1(0x814)][_0x58beb1(0x162)](this),this['createWeather'](),this[_0x58beb1(0xb8d)]();},VisuMZ['BattleCore'][_0x3823ba(0x411)]=Spriteset_Battle[_0x3823ba(0x8d6)][_0x3823ba(0x456)],Spriteset_Battle[_0x3823ba(0x8d6)]['update']=function(){const _0xc257ac=_0x3823ba;VisuMZ[_0xc257ac(0x4f3)][_0xc257ac(0x411)][_0xc257ac(0x162)](this),this[_0xc257ac(0xb01)](),this['updateUiContainerPosition'](),this[_0xc257ac(0xd30)](),this[_0xc257ac(0xcb9)]();},Spriteset_Battle['prototype']['createWeather']=function(){const _0xc4c7cf=_0x3823ba;this[_0xc4c7cf(0x152)]=new Weather(),this[_0xc4c7cf(0xd77)][_0xc4c7cf(0x538)](this[_0xc4c7cf(0x152)]);},Spriteset_Battle[_0x3823ba(0x8d6)]['updateWeather']=function(){const _0x38c01e=_0x3823ba;this[_0x38c01e(0x152)][_0x38c01e(0x98a)]=$gameScreen['weatherType'](),this[_0x38c01e(0x152)][_0x38c01e(0xa65)]=$gameScreen[_0x38c01e(0x7ef)]();},Game_Interpreter[_0x3823ba(0x8d6)][_0x3823ba(0xd98)]=function(_0x27617e){const _0x3def28=_0x3823ba;$gameScreen['changeWeather'](_0x27617e[0x0],_0x27617e[0x1],_0x27617e[0x2]);if(_0x27617e[0x3])this[_0x3def28(0x498)](_0x27617e[0x2]);return!![];},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x11d)]=Game_Interpreter[_0x3823ba(0x8d6)][_0x3823ba(0x6d5)],Game_Interpreter['prototype'][_0x3823ba(0x6d5)]=function(_0x1afe25){const _0xeac9c2=_0x3823ba;if(SceneManager['isSceneBattle']()){if(_0xeac9c2(0xd43)==='NWozV')this[_0xeac9c2(0x755)]=this['_defeatedEnemies']||[];else return SceneManager[_0xeac9c2(0xaa3)]['_spriteset'][_0xeac9c2(0x2f8)](_0x1afe25[0x0],_0x1afe25[0x1]),!![];}else{if(_0xeac9c2(0x769)!==_0xeac9c2(0x5fd))return VisuMZ[_0xeac9c2(0x4f3)][_0xeac9c2(0x11d)][_0xeac9c2(0x162)](this,_0x1afe25);else{const _0x20def8=this[_0xeac9c2(0x9ba)];return _0x20def8[_0xeac9c2(0xd57)](/ACTOR/i)?this[_0xeac9c2(0x691)]()['trueRandomTarget']():this[_0xeac9c2(0x686)]()[_0xeac9c2(0x663)]();}}},Spriteset_Battle[_0x3823ba(0x8d6)]['updateBattlebackBitmap']=function(_0x465df8,_0xe9fb74){const _0x422ef4=_0x3823ba;_0x465df8[_0x422ef4(0x850)]=_0xe9fb74;},Spriteset_Battle['prototype'][_0x3823ba(0x2f8)]=function(_0xc85c3e,_0x5205d8){const _0x14ae84=_0x3823ba;_0xc85c3e=_0xc85c3e||'',_0x5205d8=_0x5205d8||'';_0xc85c3e===''&&_0x5205d8===''&&(_0x14ae84(0x838)!=='IkBQB'?(_0xc85c3e=this[_0x14ae84(0x24c)]['battleback1Name'](),_0x5205d8=this[_0x14ae84(0x4d7)][_0x14ae84(0x866)]()):(this['_endBattle']=![],this['_autoBattle']=_0x551e0a[_0x14ae84(0x217)],this[_0x14ae84(0x8d2)]=![],this['processBattleCoreJS']('PreStartBattleJS'),_0x1aaa66[_0x14ae84(0x4f3)][_0x14ae84(0x6fd)][_0x14ae84(0x162)](this),this[_0x14ae84(0x64f)](_0x14ae84(0x433))));const _0x128146=ImageManager[_0x14ae84(0x9dc)](_0xc85c3e),_0x12572c=ImageManager[_0x14ae84(0x7b1)](_0x5205d8);_0x128146[_0x14ae84(0x2b7)](this[_0x14ae84(0x607)]['bind'](this,this[_0x14ae84(0x24c)],this[_0x14ae84(0x4d7)],_0x128146,_0x12572c));},Spriteset_Battle[_0x3823ba(0x8d6)][_0x3823ba(0x607)]=function(_0x5b94d8,_0xbb898b,_0x24b48c,_0x3af1cb){const _0x383bb=_0x3823ba;_0x3af1cb['addLoadListener'](this[_0x383bb(0x629)][_0x383bb(0x343)](this,_0x5b94d8,_0xbb898b,_0x24b48c,_0x3af1cb));},Spriteset_Battle['prototype']['updateBattlebackBitmap2']=function(_0x2f8042,_0x4f5952,_0xcf8128,_0x423e19){const _0x1a4ec4=_0x3823ba;_0x2f8042[_0x1a4ec4(0x850)]=_0xcf8128,_0x4f5952[_0x1a4ec4(0x850)]=_0x423e19,_0x2f8042[_0x1a4ec4(0x562)](),_0x4f5952[_0x1a4ec4(0x562)]();},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x420)]=Spriteset_Battle[_0x3823ba(0x8d6)]['createBattleField'],Spriteset_Battle[_0x3823ba(0x8d6)][_0x3823ba(0x333)]=function(){const _0x34c01f=_0x3823ba;VisuMZ[_0x34c01f(0x4f3)][_0x34c01f(0x420)][_0x34c01f(0x162)](this),this[_0x34c01f(0x2ae)]();},Spriteset_Battle[_0x3823ba(0x8d6)]['createBattleFieldBattleCore']=function(){const _0x20b5f3=_0x3823ba;this[_0x20b5f3(0xd17)](),this[_0x20b5f3(0x291)](),this[_0x20b5f3(0x1b4)](),this[_0x20b5f3(0x250)](),this[_0x20b5f3(0xa94)]();},Spriteset_Battle[_0x3823ba(0x8d6)]['createBattleFieldContainer']=function(){const _0x5b23a4=_0x3823ba;this[_0x5b23a4(0x91b)]=new Sprite(),this[_0x5b23a4(0xd77)]['addChild'](this[_0x5b23a4(0x91b)]);},Spriteset_Battle[_0x3823ba(0x8d6)][_0x3823ba(0x1b4)]=function(){const _0x52916f=_0x3823ba;this[_0x52916f(0xd0b)]=new Sprite(),Spriteset_Battle[_0x52916f(0xa8e)]?this['addChild'](this[_0x52916f(0xd0b)]):this[_0x52916f(0xd77)][_0x52916f(0x538)](this[_0x52916f(0xd0b)]);},Spriteset_Battle['prototype'][_0x3823ba(0x250)]=function(){const _0x4f96bf=_0x3823ba;this['_damageContainer']=new Sprite(),this[_0x4f96bf(0x820)]['x']=this[_0x4f96bf(0xd77)]['x'],this[_0x4f96bf(0x820)]['y']=this['_battleField']['y'],this['addChild'](this[_0x4f96bf(0x820)]);},Spriteset_Battle['prototype'][_0x3823ba(0xa94)]=function(){const _0x5944b6=_0x3823ba;if(!this[_0x5944b6(0x67a)]())return;this[_0x5944b6(0x91b)]['scale']['x']=-0x1,this['_battlerContainer']['x']=this[_0x5944b6(0xd77)]['width'],this['_uiContainer'][_0x5944b6(0x6cc)]['x']=-0x1,this[_0x5944b6(0x672)]['x']=this['_battleField'][_0x5944b6(0x204)],this[_0x5944b6(0xd0b)][_0x5944b6(0x6cc)]['x']=-0x1,this[_0x5944b6(0xd0b)]['x']=this['_battleField'][_0x5944b6(0x204)],this[_0x5944b6(0x820)][_0x5944b6(0x6cc)]['x']=-0x1,this[_0x5944b6(0x820)]['x']=this[_0x5944b6(0xd77)]['x']+this['_battleField'][_0x5944b6(0x204)];},Spriteset_Battle[_0x3823ba(0x8d6)][_0x3823ba(0xaab)]=function(){const _0x4ce779=_0x3823ba;if(Imported['VisuMZ_0_CoreEngine']&&this[_0x4ce779(0x5cd)]()){if(_0x4ce779(0x57e)===_0x4ce779(0x57e))this[_0x4ce779(0x521)]();else{const _0x504999=this[_0x4ce779(0x9c0)][_0x4ce779(0xad0)]();for(const _0x279945 of _0x504999){this[_0x4ce779(0x551)](_0x279945);}}}const _0x23ef24=$gameTroop['members'](),_0x4fb340=[];for(const _0x3a640f of _0x23ef24){if(_0x4ce779(0xcc2)===_0x4ce779(0x196)){let _0x31781d=_0x27c5f7(_0x3237bb['$1'])[_0x4ce779(0x7fc)](/,/g,'')[_0x4ce779(0x2d8)]()['trim']();_0x69e27a[_0x4ce779(0x4f3)][_0x4ce779(0xbb8)][_0x31781d]=_0x3592c1['id'];}else _0x4fb340[_0x4ce779(0x3d9)](new Sprite_Enemy(_0x3a640f));}_0x4fb340['sort'](this[_0x4ce779(0x6d1)]['bind'](this));for(const _0x483868 of _0x4fb340){this['_battlerContainer'][_0x4ce779(0x538)](_0x483868);}this[_0x4ce779(0x940)]=_0x4fb340;},Spriteset_Battle['prototype'][_0x3823ba(0x956)]=function(){const _0x42ca14=_0x3823ba;this[_0x42ca14(0xcd9)]=[];for(let _0x4110bb=0x0;_0x4110bb<$gameParty['maxBattleMembers']();_0x4110bb++){if(_0x42ca14(0xbfd)===_0x42ca14(0x927)){return;this[_0x42ca14(0x3f8)]&&(this[_0x42ca14(0x3f8)]['x']=this['x'],this['_effectsContainer']['y']=this['y']),this[_0x42ca14(0x820)]&&(this[_0x42ca14(0x820)]['x']=this['x'],this['_damageContainer']['y']=this['y']);}else{const _0x2443fd=$gameParty['battleMembers']()[_0x4110bb],_0x4d0425=new Sprite_Actor();_0x4d0425['moveToStartPositionBattleCore'](_0x2443fd),_0x4d0425[_0x42ca14(0x120)](_0x2443fd),_0x4d0425[_0x42ca14(0x456)](),this[_0x42ca14(0xcd9)][_0x42ca14(0x3d9)](_0x4d0425),this[_0x42ca14(0x91b)][_0x42ca14(0x538)](_0x4d0425);}}},Spriteset_Battle[_0x3823ba(0x8d6)][_0x3823ba(0x678)]=function(_0x562dd1,_0x5b7a29,_0x3f4c9a,_0x1cc2b7){const _0x5f20d6=_0x3823ba,_0x151f23=this['isMVAnimation'](_0x5b7a29),_0x278012=new(_0x151f23?Sprite_AnimationMV:Sprite_Animation)(),_0x840aa5=this[_0x5f20d6(0x129)](_0x562dd1);if(this['animationShouldMirror'](_0x562dd1[0x0])){if('QaeMx'===_0x5f20d6(0x20c)){if(!_0x274ea1)return![];return _0x315c70['opponentsUnit']()===this['friendsUnit']();}else _0x3f4c9a=!_0x3f4c9a;}_0x278012[_0x5f20d6(0x7d1)]=_0x562dd1,_0x278012['setup'](_0x840aa5,_0x5b7a29,_0x3f4c9a,_0x1cc2b7),this[_0x5f20d6(0x5da)](_0x278012);},Spriteset_Battle[_0x3823ba(0x8d6)]['addAnimationSpriteToContainer']=function(_0x2d131e){const _0x12cb38=_0x3823ba;if(this[_0x12cb38(0x1e3)](_0x2d131e)){if(_0x12cb38(0x808)!==_0x12cb38(0x808)){const _0x194d91=_0x1eef7b[_0x12cb38(0x732)](_0x1234d9);_0x194d91[_0x12cb38(0x2b7)](this[_0x12cb38(0x166)]['bind'](this,_0x194d91));}else this[_0x12cb38(0x87c)]()[_0x12cb38(0x538)](_0x2d131e),_0x2d131e[_0x12cb38(0xd21)]=!![];}else{if('kXBYa'!==_0x12cb38(0x3bc)){const _0x5c66d5=this[_0x12cb38(0x888)]()[_0x12cb38(0x1af)]||0x0,_0x11479e=_0x52077f['attackMotions'][_0x5c66d5];_0x11479e&&this[_0x12cb38(0x9fd)](_0x11479e[_0x12cb38(0x360)]);}else this[_0x12cb38(0xd0b)][_0x12cb38(0x538)](_0x2d131e),Spriteset_Battle[_0x12cb38(0xa8e)]&&(this[_0x12cb38(0xd0b)]['x']=this['_effectsContainer']['x'],this['_animationContainer']['y']=this['_effectsContainer']['y']);}this['_animationSprites'][_0x12cb38(0x3d9)](_0x2d131e);},Spriteset_Battle['prototype'][_0x3823ba(0x1e3)]=function(_0x22e4af){const _0x26edbe=_0x3823ba;if(!_0x22e4af)return![];if(!_0x22e4af[_0x26edbe(0x613)])return![];if(!_0x22e4af[_0x26edbe(0x7d1)][0x0])return![];if(_0x22e4af[_0x26edbe(0x7d1)][0x0][_0x26edbe(0x4e0)]&&!_0x22e4af['targetObjects'][0x0]['isActor']())return![];if($gameSystem[_0x26edbe(0x839)]())return![];if(!this[_0x26edbe(0x87c)]())return![];if(_0x22e4af['constructor']===Sprite_Animation){if(_0x22e4af[_0x26edbe(0x613)]['displayType']!==0x0)return![];}else{if(_0x22e4af[_0x26edbe(0x786)]===Sprite_AnimationMV){if(_0x22e4af['_animation'][_0x26edbe(0xcec)]===0x3)return![];}}return!![];const _0x678254=Window_BattleStatus[_0x26edbe(0x8d6)][_0x26edbe(0xa73)]();return['xp','portrait'][_0x26edbe(0x99b)](_0x678254);},Spriteset_Battle['prototype']['battleStatusWindowAnimationContainer']=function(){const _0x6c8ece=_0x3823ba;if(!SceneManager['_scene'])return null;if(!SceneManager[_0x6c8ece(0xaa3)][_0x6c8ece(0x264)])return null;if(!SceneManager[_0x6c8ece(0xaa3)]['_statusWindow'][_0x6c8ece(0x3f8)])return null;return SceneManager[_0x6c8ece(0xaa3)]['_statusWindow'][_0x6c8ece(0x3f8)];},Spriteset_Battle['prototype']['removeAnimation']=function(_0x10788d){const _0x29fca5=_0x3823ba;this[_0x29fca5(0xa6f)](_0x10788d);for(const _0x8c3181 of _0x10788d[_0x29fca5(0x7d1)]){_0x29fca5(0xade)!==_0x29fca5(0xa15)?_0x8c3181[_0x29fca5(0x843)]&&_0x8c3181[_0x29fca5(0x843)]():(_0xdc9c25+=_0x527036[_0x29fca5(0x4e0)]()?-_0x115db1:_0x3ae4a4,_0x434600+=_0x109cad);}_0x10788d[_0x29fca5(0xbb7)]();},Spriteset_Battle[_0x3823ba(0x8d6)][_0x3823ba(0xa6f)]=function(_0x2a8bf9){const _0x4c49d8=_0x3823ba;this[_0x4c49d8(0x1e3)](_0x2a8bf9)?this[_0x4c49d8(0x87c)]()[_0x4c49d8(0x491)](_0x2a8bf9):this[_0x4c49d8(0xd0b)][_0x4c49d8(0x491)](_0x2a8bf9);this[_0x4c49d8(0x3f8)][_0x4c49d8(0x491)](_0x2a8bf9),this[_0x4c49d8(0xd0b)]['removeChild'](_0x2a8bf9),this[_0x4c49d8(0x6e2)][_0x4c49d8(0xbc4)](_0x2a8bf9);if(this['_fauxAnimationSprites'])this[_0x4c49d8(0xb35)]['remove'](_0x2a8bf9);},VisuMZ[_0x3823ba(0x4f3)]['Spriteset_Battle_updateActors']=Spriteset_Battle['prototype']['updateActors'],Spriteset_Battle[_0x3823ba(0x8d6)]['updateActors']=function(){const _0x567876=_0x3823ba;VisuMZ[_0x567876(0x4f3)][_0x567876(0x6a5)][_0x567876(0x162)](this),this[_0x567876(0xb01)]();},Spriteset_Battle[_0x3823ba(0x8d6)][_0x3823ba(0xb01)]=function(){const _0x47c32e=_0x3823ba;this['_battlerContainer']['children'][_0x47c32e(0x403)](this[_0x47c32e(0x5ea)][_0x47c32e(0x343)](this)),this[_0x47c32e(0xcd7)]();if(!this[_0x47c32e(0x91b)])return;this['_battlerContainer'][_0x47c32e(0xa2c)]=this[_0x47c32e(0xcd1)]();},Spriteset_Battle[_0x3823ba(0x8d6)]['compareBattlerSprites']=function(_0x202bc3,_0x2bbcb0){const _0x5aa67a=_0x3823ba;if(VisuMZ[_0x5aa67a(0x4f3)][_0x5aa67a(0x242)][_0x5aa67a(0x9fc)][_0x5aa67a(0x50b)]){if(_0x5aa67a(0x3eb)!==_0x5aa67a(0x1c5)){if(_0x202bc3['_battler']&&_0x2bbcb0[_0x5aa67a(0x6b7)]){if(_0x202bc3[_0x5aa67a(0x6b7)][_0x5aa67a(0x4e0)]()&&_0x2bbcb0[_0x5aa67a(0x6b7)]['isEnemy']()){if(_0x5aa67a(0x31a)===_0x5aa67a(0x8eb)){if(this[_0x5aa67a(0xa73)]()==='border')return this[_0x5aa67a(0xd04)]();else return this[_0x5aa67a(0x6bd)]()?this[_0x5aa67a(0x8c0)]():_0x47bf3b[_0x5aa67a(0x4f3)][_0x5aa67a(0x51c)]['call'](this);}else return 0x1;}else{if(_0x2bbcb0['_battler']['isActor']()&&_0x202bc3[_0x5aa67a(0x6b7)][_0x5aa67a(0x737)]()){if(_0x5aa67a(0x740)===_0x5aa67a(0x7a1)){let _0x1f94a6=this[_0x5aa67a(0xcb5)](_0x42ed94);const _0x3866be=this['fontSize'](),_0x489381=_0x4120c6[_0x5aa67a(0x975)](_0x3866be*0.75);for(let _0x3ac640=0x0;_0x3ac640<_0x1f94a6[_0x5aa67a(0xb23)];_0x3ac640++){const _0x3f8a70=this['createChildSprite'](_0x489381,_0x3866be);_0x3f8a70[_0x5aa67a(0x850)][_0x5aa67a(0x187)](_0x1f94a6[_0x3ac640],0x0,0x0,_0x489381,_0x3866be,_0x5aa67a(0x542)),_0x3f8a70['x']=(_0x3ac640-(_0x1f94a6['length']-0x1)/0x2)*_0x489381,_0x3f8a70['dy']=-_0x3ac640;}}else return-0x1;}}}}else{let _0x8244b6=0x1;return _0x8244b6*=this[_0x5aa67a(0xd40)],_0x8244b6*=this['_growX'],_0x8244b6;}}return _0x202bc3[_0x5aa67a(0xcf6)]!==_0x2bbcb0[_0x5aa67a(0xcf6)]?_0x202bc3['_baseY']-_0x2bbcb0[_0x5aa67a(0xcf6)]:_0x2bbcb0['spriteId']-_0x202bc3[_0x5aa67a(0x78a)];},Spriteset_Battle[_0x3823ba(0x8d6)][_0x3823ba(0xcd7)]=function(){const _0x3e3cba=_0x3823ba;if(!VisuMZ[_0x3e3cba(0x4f3)][_0x3e3cba(0x242)][_0x3e3cba(0x9fc)][_0x3e3cba(0x48d)])return;const _0x5c94bc=BattleManager[_0x3e3cba(0x527)];if(_0x5c94bc){if(_0x5c94bc[_0x3e3cba(0x4e0)]()&&!$gameSystem['isSideView']())return;const _0x197318=_0x5c94bc[_0x3e3cba(0x798)]();if(_0x197318&&_0x5c94bc['isActor']())this[_0x3e3cba(0x91b)]['addChild'](_0x197318);}},Spriteset_Battle[_0x3823ba(0x8d6)][_0x3823ba(0x9ee)]=function(){const _0x11c012=_0x3823ba;for(const _0x14875c of $gameParty[_0x11c012(0xd31)]()){if(_0x11c012(0xcb4)===_0x11c012(0xcb4)){if(!_0x14875c)continue;if(!_0x14875c[_0x11c012(0x798)]())continue;_0x14875c[_0x11c012(0x798)]()[_0x11c012(0x622)]=!![],_0x14875c['battler']()['retreat']();}else _0x3ef12e[_0x11c012(0x97d)](this[_0x11c012(0x634)]()['index']());}},Spriteset_Battle[_0x3823ba(0x8d6)][_0x3823ba(0x291)]=function(){const _0x23bf70=_0x3823ba;this[_0x23bf70(0x672)]=new Sprite();if(Spriteset_Battle[_0x23bf70(0xa8e)]){if(_0x23bf70(0xbc2)==='wjqOs'){const _0x3b1386=_0x1c744f['BattleCore'][_0x23bf70(0x242)][_0x23bf70(0x179)];_0x3b1386[_0x23bf70(0x509)]?this['autoSelectLastSelected']():this[_0x23bf70(0xc51)]();}else this[_0x23bf70(0x538)](this[_0x23bf70(0x672)]);}else this[_0x23bf70(0xd77)][_0x23bf70(0x538)](this['_uiContainer']);SceneManager[_0x23bf70(0xaa3)][_0x23bf70(0x672)]=this[_0x23bf70(0x672)];},Spriteset_Battle[_0x3823ba(0x8d6)][_0x3823ba(0xb8d)]=function(){const _0x2a5ec3=_0x3823ba;if(VisuMZ[_0x2a5ec3(0x4f3)][_0x2a5ec3(0x242)][_0x2a5ec3(0x179)][_0x2a5ec3(0xc5f)])return;this[_0x2a5ec3(0xd1e)]=new Sprite(),BattleManager[_0x2a5ec3(0xc4d)](this[_0x2a5ec3(0xd1e)]);for(const _0xadf3ce of this[_0x2a5ec3(0x940)]){const _0x55aae6=new Sprite_EnemyName();this[_0x2a5ec3(0xd1e)][_0x2a5ec3(0x538)](_0x55aae6),_0x55aae6['linkSprite'](_0xadf3ce);}},Spriteset_Battle[_0x3823ba(0x8d6)][_0x3823ba(0x775)]=function(){const _0x374ed0=_0x3823ba;if(!this[_0x374ed0(0x820)])return;if(!this[_0x374ed0(0x672)])return;const _0x364825=Spriteset_Battle['ANTI_TINT_UI']?this[_0x374ed0(0x820)]['x']:0x0,_0x1e0a52=Spriteset_Battle[_0x374ed0(0xa8e)]?this['_damageContainer']['y']:0x0,_0x584cee=Imported[_0x374ed0(0x29c)]?this[_0x374ed0(0xd77)]['x']:0x0,_0x470878=Imported['VisuMZ_3_ActSeqCamera']?this['_battleField']['y']:0x0;this[_0x374ed0(0x672)]['x']=_0x364825+_0x584cee,this[_0x374ed0(0x672)]['y']=_0x1e0a52+_0x470878;},BattleManager['addChildToUiContainer']=function(_0x5d655d){const _0x2c956c=_0x3823ba;if(!SceneManager['_scene']['_uiContainer'])return;SceneManager[_0x2c956c(0xaa3)][_0x2c956c(0x672)][_0x2c956c(0x538)](_0x5d655d);},BattleManager[_0x3823ba(0x12a)]=function(_0x305b9f){const _0x4d5a7b=_0x3823ba;if(!SceneManager['_scene'][_0x4d5a7b(0x672)])return;SceneManager[_0x4d5a7b(0xaa3)][_0x4d5a7b(0x672)]['removeChild'](_0x305b9f);},Spriteset_Battle['prototype'][_0x3823ba(0xcd1)]=function(){return 0xff;},Spriteset_Battle[_0x3823ba(0x8d6)][_0x3823ba(0xd83)]=function(){return![];},Spriteset_Battle[_0x3823ba(0x8d6)]['isAnyoneFloating']=function(){const _0x291d95=_0x3823ba;return this[_0x291d95(0xaf1)]()[_0x291d95(0x58a)](_0x1e0f2c=>_0x1e0f2c[_0x291d95(0xd2e)]());},Spriteset_Battle[_0x3823ba(0x8d6)][_0x3823ba(0x139)]=function(){const _0x12b126=_0x3823ba;return this['battlerSprites']()[_0x12b126(0x58a)](_0x576a00=>_0x576a00[_0x12b126(0xa3d)]());},Spriteset_Battle[_0x3823ba(0x8d6)][_0x3823ba(0x108)]=function(){const _0x1405f9=_0x3823ba;return this['battlerSprites']()['some'](_0x460e3e=>_0x460e3e[_0x1405f9(0x149)]());},Spriteset_Battle['prototype'][_0x3823ba(0x143)]=function(){const _0x4727b7=_0x3823ba;return this[_0x4727b7(0xaf1)]()[_0x4727b7(0x58a)](_0x547a48=>_0x547a48['isSkewing']());},Spriteset_Battle[_0x3823ba(0x8d6)]['isAnyoneSpinning']=function(){const _0x9db59e=_0x3823ba;return this['battlerSprites']()[_0x9db59e(0x58a)](_0xc4ffc4=>_0xc4ffc4[_0x9db59e(0x545)]());},Spriteset_Battle[_0x3823ba(0x8d6)]['isAnyoneChangingOpacity']=function(){const _0x410c86=_0x3823ba;return this[_0x410c86(0xaf1)]()[_0x410c86(0x58a)](_0x565d03=>_0x565d03[_0x410c86(0x980)]());},VisuMZ['BattleCore'][_0x3823ba(0x8ef)]=Window_ItemList[_0x3823ba(0x8d6)]['maxCols'],Window_ItemList[_0x3823ba(0x8d6)][_0x3823ba(0x7cf)]=function(){const _0x3ae294=_0x3823ba;if(SceneManager[_0x3ae294(0xbc6)]()){if(SceneManager[_0x3ae294(0xaa3)][_0x3ae294(0xa73)]()===_0x3ae294(0x43a))return VisuMZ[_0x3ae294(0x4f3)][_0x3ae294(0x242)]['BattleLayout']['SkillItemBorderCols'];else{if(_0x3ae294(0x6dd)!==_0x3ae294(0xcb0))return VisuMZ[_0x3ae294(0x4f3)][_0x3ae294(0x242)][_0x3ae294(0x735)][_0x3ae294(0x777)];else{const _0x49aa72=this['friendsUnit']()['aliveMembers']();if(_0x49aa72[_0x3ae294(0xb23)]===0x1&&_0x49aa72[0x0]===this)return![];}}}else return VisuMZ[_0x3ae294(0x4f3)]['Window_ItemList_maxCols'][_0x3ae294(0x162)](this);},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0xc8e)]=Window_SkillList[_0x3823ba(0x8d6)]['maxCols'],Window_SkillList['prototype'][_0x3823ba(0x7cf)]=function(){const _0x278d88=_0x3823ba;if(SceneManager[_0x278d88(0xbc6)]())return SceneManager[_0x278d88(0xaa3)]['battleLayoutStyle']()===_0x278d88(0x43a)?VisuMZ['BattleCore']['Settings'][_0x278d88(0x735)][_0x278d88(0xd62)]:_0x278d88(0xd45)!==_0x278d88(0xd45)?_0x2be6a1[_0x278d88(0x2d2)]['call'](this):VisuMZ[_0x278d88(0x4f3)][_0x278d88(0x242)][_0x278d88(0x735)][_0x278d88(0x777)];else{if(_0x278d88(0xd10)!=='UmWPL'){if(this[_0x278d88(0x9ba)]===_0x278d88(0x4ab))return![];if(this[_0x278d88(0x9ba)]==='all\x20enemies')return![];return this[_0x278d88(0x110)]()&&!this['isCustomBattleScope']()?this[_0x278d88(0xb11)]():_0x3dfb66[_0x278d88(0x4f3)]['Game_Action_isForRandom'][_0x278d88(0x162)](this);}else return VisuMZ[_0x278d88(0x4f3)]['Window_SkillList_maxCols'][_0x278d88(0x162)](this);}},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x5e5)]=Window_Options['prototype'][_0x3823ba(0x6cf)],Window_Options[_0x3823ba(0x8d6)][_0x3823ba(0x6cf)]=function(){const _0x4b94ce=_0x3823ba;VisuMZ[_0x4b94ce(0x4f3)][_0x4b94ce(0x5e5)][_0x4b94ce(0x162)](this),this['addAutoBattleCommands'](),this[_0x4b94ce(0xa95)]();},Window_Options[_0x3823ba(0x8d6)][_0x3823ba(0x57d)]=function(){const _0x44fe09=_0x3823ba;if(VisuMZ[_0x44fe09(0x4f3)]['Settings'][_0x44fe09(0x9d8)][_0x44fe09(0xca2)]){if(_0x44fe09(0x6ce)!==_0x44fe09(0x6ce))return this[_0x44fe09(0xaf1)]()[_0x44fe09(0x58a)](_0xf67fc4=>_0xf67fc4['isSpinning']());else this[_0x44fe09(0x189)](),this['addBattleCoreAutoBattleStyleCommand']();}},Window_Options[_0x3823ba(0x8d6)][_0x3823ba(0xa95)]=function(){const _0x5659d6=_0x3823ba;if(!VisuMZ[_0x5659d6(0x4f3)][_0x5659d6(0x242)][_0x5659d6(0xb40)][_0x5659d6(0x952)])return;const _0x5edafb=TextManager['visualHpGauge'],_0x13f497='visualHpGauge';this[_0x5659d6(0xac9)](_0x5edafb,_0x13f497);},Window_Options[_0x3823ba(0x8d6)][_0x3823ba(0x189)]=function(){const _0x599695=_0x3823ba,_0x312909=TextManager[_0x599695(0xd4b)],_0x546a7c=_0x599695(0x217);this[_0x599695(0xac9)](_0x312909,_0x546a7c);},Window_Options[_0x3823ba(0x8d6)]['addBattleCoreAutoBattleStyleCommand']=function(){const _0x2cbfae=_0x3823ba,_0x1c36fc=TextManager['autoBattleStyle'],_0x12e6f6=_0x2cbfae(0x698);this['addCommand'](_0x1c36fc,_0x12e6f6);},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x68a)]=Window_Options[_0x3823ba(0x8d6)][_0x3823ba(0x5bb)],Window_Options['prototype'][_0x3823ba(0x5bb)]=function(_0x46f41e){const _0x4cd71a=_0x3823ba,_0x256235=this[_0x4cd71a(0x4de)](_0x46f41e);if(_0x256235===_0x4cd71a(0x698)){if(_0x4cd71a(0x8c3)===_0x4cd71a(0x8c3))return this[_0x4cd71a(0xa0b)]();else this[_0x4cd71a(0x7e1)]();}else{if(_0x4cd71a(0x719)!==_0x4cd71a(0x1b2))return VisuMZ[_0x4cd71a(0x4f3)]['Window_Options_statusText'][_0x4cd71a(0x162)](this,_0x46f41e);else{if(_0x34b9fd[_0x4cd71a(0x613)][_0x4cd71a(0xcec)]===0x3)return![];}}},Window_Options[_0x3823ba(0x8d6)]['statusTextAutoBattleStyle']=function(){const _0x3e1896=_0x3823ba,_0x202d22=VisuMZ['BattleCore'][_0x3e1896(0x242)]['AutoBattle'],_0x3e7241=this[_0x3e1896(0xd7c)](_0x3e1896(0x698));return _0x3e7241?_0x202d22['StyleON']:_0x202d22['StyleOFF'];},Window_ShopStatus[_0x3823ba(0x8d6)][_0x3823ba(0x543)]=function(){const _0x2c7d17=_0x3823ba,_0x5e177f=DataManager['getDamageStyle'](this[_0x2c7d17(0x708)]),_0x1064e7=VisuMZ[_0x2c7d17(0xc1d)][_0x5e177f];if(!_0x1064e7)return this[_0x2c7d17(0x309)]();const _0x353a20=_0x2c7d17(0xcbd)[_0x2c7d17(0xabf)](this[_0x2c7d17(0x708)]['damage'][_0x2c7d17(0x98a)]),_0x181f4c=[null,TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp']][this[_0x2c7d17(0x708)][_0x2c7d17(0x806)]['type']];return _0x1064e7[_0x353a20]['format'](_0x181f4c);},Window_ShopStatus['prototype'][_0x3823ba(0x56b)]=function(){const _0x5c66e0=_0x3823ba,_0x4f86e0=DataManager[_0x5c66e0(0x341)](this['_item']),_0x1209e7=VisuMZ[_0x5c66e0(0xc1d)][_0x4f86e0];if(!_0x1209e7)return this[_0x5c66e0(0x7dc)]();return _0x1209e7['DamageDisplay'][_0x5c66e0(0x162)](this);},VisuMZ[_0x3823ba(0x4f3)]['Window_PartyCommand_initialize']=Window_PartyCommand[_0x3823ba(0x8d6)]['initialize'],Window_PartyCommand['prototype'][_0x3823ba(0xc06)]=function(_0x3d29d9){const _0x2d023d=_0x3823ba;VisuMZ[_0x2d023d(0x4f3)][_0x2d023d(0x8fd)]['call'](this,_0x3d29d9),this[_0x2d023d(0xd29)](_0x3d29d9);},Window_PartyCommand['prototype']['createCommandNameWindow']=function(_0x4c0e6c){const _0x5957cf=_0x3823ba,_0x548dc2=new Rectangle(0x0,0x0,_0x4c0e6c['width'],_0x4c0e6c['height']);this['_commandNameWindow']=new Window_Base(_0x548dc2),this[_0x5957cf(0x281)][_0x5957cf(0xa2c)]=0x0,this[_0x5957cf(0x538)](this[_0x5957cf(0x281)]),this[_0x5957cf(0x73a)]();},Window_PartyCommand[_0x3823ba(0x8d6)]['callUpdateHelp']=function(){const _0x44d5bc=_0x3823ba;Window_Command['prototype'][_0x44d5bc(0x4d3)][_0x44d5bc(0x162)](this);if(this[_0x44d5bc(0x281)])this[_0x44d5bc(0x73a)]();},Window_PartyCommand[_0x3823ba(0x8d6)][_0x3823ba(0x73a)]=function(){const _0x42ad04=_0x3823ba,_0x535a0e=this[_0x42ad04(0x281)];_0x535a0e[_0x42ad04(0x19d)][_0x42ad04(0xcd2)]();const _0x3974de=this[_0x42ad04(0x98b)](this[_0x42ad04(0xb0f)]());if(_0x3974de==='icon'&&this[_0x42ad04(0x6db)]()>0x0){const _0xdbdcb2=this['itemLineRect'](this['index']());let _0x3775b9=this[_0x42ad04(0xbca)](this[_0x42ad04(0xb0f)]());_0x3775b9=_0x3775b9[_0x42ad04(0x7fc)](/\\I\[(\d+)\]/gi,''),_0x535a0e[_0x42ad04(0x54d)](),this['commandNameWindowDrawBackground'](_0x3775b9,_0xdbdcb2),this['commandNameWindowDrawText'](_0x3775b9,_0xdbdcb2),this[_0x42ad04(0x426)](_0x3775b9,_0xdbdcb2);}},Window_PartyCommand[_0x3823ba(0x8d6)][_0x3823ba(0x7c9)]=function(_0x55ce68,_0x59f4ee){},Window_PartyCommand['prototype'][_0x3823ba(0xb36)]=function(_0x59ffe8,_0x57722b){const _0x2935d3=_0x3823ba,_0x2e0898=this[_0x2935d3(0x281)];_0x2e0898[_0x2935d3(0x187)](_0x59ffe8,0x0,_0x57722b['y'],_0x2e0898[_0x2935d3(0x9ac)],_0x2935d3(0x542));},Window_PartyCommand[_0x3823ba(0x8d6)][_0x3823ba(0x426)]=function(_0x57eea0,_0x1ab712){const _0x43756a=_0x3823ba,_0x2bfbd8=this[_0x43756a(0x281)],_0x339e8a=$gameSystem[_0x43756a(0x7b3)](),_0x1843ca=_0x1ab712['x']+Math[_0x43756a(0x975)](_0x1ab712[_0x43756a(0x204)]/0x2)+_0x339e8a;_0x2bfbd8['x']=_0x2bfbd8[_0x43756a(0x204)]/-0x2+_0x1843ca,_0x2bfbd8['y']=Math['floor'](_0x1ab712[_0x43756a(0xd6d)]/0x2);},Window_PartyCommand[_0x3823ba(0x8d6)][_0x3823ba(0x26a)]=function(){const _0x189600=_0x3823ba;this[_0x189600(0x212)](),this[_0x189600(0xce9)](),this['addCustomCommands'](),this[_0x189600(0xcb8)](),this[_0x189600(0x716)]();},Window_PartyCommand[_0x3823ba(0x8d6)][_0x3823ba(0x212)]=function(){const _0xa5703d=_0x3823ba,_0x1f7298=this['commandStyle'](),_0x1a03fc=VisuMZ['BattleCore']['Settings'][_0xa5703d(0x4e2)][_0xa5703d(0x2a4)],_0x30767d=_0x1f7298===_0xa5703d(0x3e1)?TextManager[_0xa5703d(0x905)]:'\x5cI[%1]%2'[_0xa5703d(0xabf)](_0x1a03fc,TextManager['fight']),_0x23fb0c=this[_0xa5703d(0xb4b)]();this[_0xa5703d(0xac9)](_0x30767d,_0xa5703d(0x905),_0x23fb0c);},Window_PartyCommand[_0x3823ba(0x8d6)][_0x3823ba(0xb4b)]=function(){return!![];},Window_PartyCommand['prototype'][_0x3823ba(0xce9)]=function(){const _0x408d5c=_0x3823ba;if(!this[_0x408d5c(0x8aa)]())return;const _0x473408=this[_0x408d5c(0xb1e)](),_0x227fab=VisuMZ['BattleCore'][_0x408d5c(0x242)][_0x408d5c(0x4e2)][_0x408d5c(0x304)],_0x2a1987=_0x473408===_0x408d5c(0x3e1)?TextManager[_0x408d5c(0xbf5)]:_0x408d5c(0xaa2)[_0x408d5c(0xabf)](_0x227fab,TextManager[_0x408d5c(0xbf5)]),_0xd58f55=this[_0x408d5c(0xd80)]();this[_0x408d5c(0xac9)](_0x2a1987,_0x408d5c(0xbf5),_0xd58f55);},Window_PartyCommand[_0x3823ba(0x8d6)][_0x3823ba(0x8aa)]=function(){const _0x524503=_0x3823ba;return VisuMZ[_0x524503(0x4f3)][_0x524503(0x242)]['PartyCmd'][_0x524503(0x638)];},Window_PartyCommand['prototype']['isAutoBattleCommandEnabled']=function(){return!![];},Window_PartyCommand[_0x3823ba(0x8d6)]['addCustomCommands']=function(){},Window_PartyCommand['prototype'][_0x3823ba(0xcb8)]=function(){const _0x19ae3a=_0x3823ba;if(!this[_0x19ae3a(0x8ca)]())return;const _0x51f2d7=this[_0x19ae3a(0xb1e)](),_0x329ce6=VisuMZ['BattleCore'][_0x19ae3a(0x242)][_0x19ae3a(0x4e2)]['CmdIconOptions'],_0x178bf9=_0x51f2d7==='text'?TextManager[_0x19ae3a(0xb16)]:'\x5cI[%1]%2'[_0x19ae3a(0xabf)](_0x329ce6,TextManager[_0x19ae3a(0xb16)]),_0x2de1b=this[_0x19ae3a(0x186)]();this['addCommand'](_0x178bf9,_0x19ae3a(0xb16),_0x2de1b);},Window_PartyCommand[_0x3823ba(0x8d6)][_0x3823ba(0x8ca)]=function(){const _0x2b878c=_0x3823ba;return VisuMZ[_0x2b878c(0x4f3)][_0x2b878c(0x242)][_0x2b878c(0x4e2)][_0x2b878c(0x89f)];},Window_PartyCommand[_0x3823ba(0x8d6)][_0x3823ba(0x186)]=function(){return!![];},Window_PartyCommand['prototype']['addEscapeCommand']=function(){const _0x3eb266=_0x3823ba,_0x46bf68=this['commandStyle'](),_0x52a1aa=VisuMZ['BattleCore'][_0x3eb266(0x242)][_0x3eb266(0x4e2)][_0x3eb266(0x759)],_0x14c07d=_0x46bf68===_0x3eb266(0x3e1)?TextManager[_0x3eb266(0xb42)]:_0x3eb266(0xaa2)[_0x3eb266(0xabf)](_0x52a1aa,TextManager[_0x3eb266(0xb42)]),_0x43b644=this[_0x3eb266(0x63c)]();this[_0x3eb266(0xac9)](_0x14c07d,_0x3eb266(0xb42),_0x43b644);},Window_PartyCommand[_0x3823ba(0x8d6)]['isEscapeCommandEnabled']=function(){return BattleManager['canEscape']();},Window_PartyCommand[_0x3823ba(0x8d6)]['itemTextAlign']=function(){const _0x1b527d=_0x3823ba;return VisuMZ['BattleCore'][_0x1b527d(0x242)][_0x1b527d(0x4e2)]['CmdTextAlign'];},Window_PartyCommand[_0x3823ba(0x8d6)][_0x3823ba(0x49e)]=function(_0x22f74a){const _0xb8b8df=_0x3823ba,_0x1889b6=this[_0xb8b8df(0x98b)](_0x22f74a);if(_0x1889b6===_0xb8b8df(0x386))this[_0xb8b8df(0x8b9)](_0x22f74a);else _0x1889b6===_0xb8b8df(0x8c2)?_0xb8b8df(0x56e)===_0xb8b8df(0x56e)?this[_0xb8b8df(0xb58)](_0x22f74a):(this['_animationContainer']=new _0x525df4(),_0x280819[_0xb8b8df(0xa8e)]?this[_0xb8b8df(0x538)](this[_0xb8b8df(0xd0b)]):this[_0xb8b8df(0xd77)][_0xb8b8df(0x538)](this[_0xb8b8df(0xd0b)])):Window_Command['prototype']['drawItem'][_0xb8b8df(0x162)](this,_0x22f74a);},Window_PartyCommand[_0x3823ba(0x8d6)][_0x3823ba(0xb1e)]=function(){const _0x52c25e=_0x3823ba;return VisuMZ[_0x52c25e(0x4f3)][_0x52c25e(0x242)][_0x52c25e(0x4e2)][_0x52c25e(0xd84)];},Window_PartyCommand['prototype'][_0x3823ba(0x98b)]=function(_0x89082e){const _0x20dc9f=_0x3823ba;if(_0x89082e<0x0)return'text';const _0x2bdb1d=this[_0x20dc9f(0xb1e)]();if(_0x2bdb1d!=='auto'){if(_0x20dc9f(0x4c5)===_0x20dc9f(0xc4e))this[_0x20dc9f(0xc5c)][_0x20dc9f(0xd1c)]['x']=this[_0x20dc9f(0x608)],this['_distortionSprite'][_0x20dc9f(0xd1c)]['y']=this['_targetSkewY'];else return _0x2bdb1d;}else{if(this[_0x20dc9f(0x6db)]()>0x0){if(_0x20dc9f(0xcfc)!==_0x20dc9f(0xcbe)){const _0x73b2d8=this[_0x20dc9f(0xbca)](_0x89082e);if(_0x73b2d8[_0x20dc9f(0xd57)](/\\I\[(\d+)\]/i)){const _0x4d79c1=this[_0x20dc9f(0x5c9)](_0x89082e),_0x1dc003=this[_0x20dc9f(0x699)](_0x73b2d8)[_0x20dc9f(0x204)];return _0x1dc003<=_0x4d79c1['width']?_0x20dc9f(0x386):_0x20dc9f(0x8c2);}}else{if(!_0x29f7f7['isSceneBattle']())return;if(!_0x25a046[_0x20dc9f(0x154)])return;_0x1b544d[_0x20dc9f(0xb9f)](_0xf5ba2b,_0x2019fc),_0x253b1a['BattleCore'][_0x20dc9f(0xac4)]();const _0x31d842=_0x4225d8[_0x20dc9f(0xaa7)](),_0xea790c=_0x1d508d[_0x20dc9f(0xbef)];if(!_0x31d842)return;const _0x4e610e=_0x37ad7f['_spriteset'];if(!_0x4e610e)return;_0x4e610e['createActionSequenceProjectile'](_0x3597d0);if(_0xea790c)_0x31d842[_0x20dc9f(0xab0)](_0x20dc9f(0xba3));}}}return _0x20dc9f(0x3e1);},Window_PartyCommand[_0x3823ba(0x8d6)][_0x3823ba(0x8b9)]=function(_0x186b55){const _0x143f8b=_0x3823ba,_0x3e7f44=this[_0x143f8b(0x5c9)](_0x186b55),_0x32d998=this[_0x143f8b(0xbca)](_0x186b55),_0x969f2f=this[_0x143f8b(0x699)](_0x32d998)[_0x143f8b(0x204)];this[_0x143f8b(0x25e)](this['isCommandEnabled'](_0x186b55));const _0x4ca66e=this[_0x143f8b(0x2d7)]();if(_0x4ca66e==='right')_0x143f8b(0x10a)==='ePrgx'?(this[_0x143f8b(0x3af)](!![]),this[_0x143f8b(0x3af)](![])):this[_0x143f8b(0x7a4)](_0x32d998,_0x3e7f44['x']+_0x3e7f44[_0x143f8b(0x204)]-_0x969f2f,_0x3e7f44['y'],_0x969f2f);else{if(_0x4ca66e===_0x143f8b(0x542)){const _0x4aa2e5=_0x3e7f44['x']+Math[_0x143f8b(0x975)]((_0x3e7f44[_0x143f8b(0x204)]-_0x969f2f)/0x2);this[_0x143f8b(0x7a4)](_0x32d998,_0x4aa2e5,_0x3e7f44['y'],_0x969f2f);}else this[_0x143f8b(0x7a4)](_0x32d998,_0x3e7f44['x'],_0x3e7f44['y'],_0x969f2f);}},Window_PartyCommand[_0x3823ba(0x8d6)]['drawItemStyleIcon']=function(_0x30413b){const _0x43584a=_0x3823ba;this[_0x43584a(0xbca)](_0x30413b)[_0x43584a(0xd57)](/\\I\[(\d+)\]/i);const _0x5d986c=Number(RegExp['$1'])||0x0,_0x38ec08=this[_0x43584a(0x5c9)](_0x30413b),_0x4c9a95=_0x38ec08['x']+Math[_0x43584a(0x975)]((_0x38ec08[_0x43584a(0x204)]-ImageManager[_0x43584a(0x4d6)])/0x2),_0x3bd1f8=_0x38ec08['y']+(_0x38ec08[_0x43584a(0xd6d)]-ImageManager[_0x43584a(0x935)])/0x2;this[_0x43584a(0x675)](_0x5d986c,_0x4c9a95,_0x3bd1f8);},Window_PartyCommand[_0x3823ba(0x8d6)][_0x3823ba(0x423)]=function(){},Window_PartyCommand[_0x3823ba(0x8d6)][_0x3823ba(0x9e2)]=function(){const _0x1606d6=_0x3823ba;Window_Command['prototype'][_0x1606d6(0x9e2)][_0x1606d6(0x162)](this);const _0x5be052=this[_0x1606d6(0xa73)]();_0x5be052==='border'&&this[_0x1606d6(0x790)]();},Window_PartyCommand['prototype'][_0x3823ba(0xa73)]=function(){const _0x11e898=_0x3823ba;if(this['_battleLayoutStyle'])return this[_0x11e898(0x9eb)];return this['_battleLayoutStyle']=SceneManager[_0x11e898(0xaa3)][_0x11e898(0xa73)](),this[_0x11e898(0x9eb)];},Window_PartyCommand[_0x3823ba(0x8d6)]['updateHelp']=function(){const _0x261d57=_0x3823ba,_0x5cd965=VisuMZ[_0x261d57(0x4f3)][_0x261d57(0x242)]['PartyCmd'],_0x335e90=this[_0x261d57(0x5f5)]();switch(_0x335e90){case'fight':this['_helpWindow'][_0x261d57(0xae5)](_0x5cd965[_0x261d57(0x3d4)]);break;case _0x261d57(0xbf5):this[_0x261d57(0xd00)]['setText'](_0x5cd965['HelpAutoBattle']);break;case _0x261d57(0xb16):this[_0x261d57(0xd00)][_0x261d57(0xae5)](_0x5cd965[_0x261d57(0x1f9)]);break;case _0x261d57(0xb42):this[_0x261d57(0xd00)][_0x261d57(0xae5)](_0x5cd965[_0x261d57(0x83a)]);break;default:this['_helpWindow']['setText']('');break;}},VisuMZ['BattleCore']['Window_ActorCommand_initialize']=Window_ActorCommand['prototype'][_0x3823ba(0xc06)],Window_ActorCommand[_0x3823ba(0x8d6)][_0x3823ba(0xc06)]=function(_0x950647){const _0x571a39=_0x3823ba;VisuMZ['BattleCore']['Window_ActorCommand_initialize'][_0x571a39(0x162)](this,_0x950647),this[_0x571a39(0xd29)](_0x950647);},Window_ActorCommand['prototype'][_0x3823ba(0xd29)]=function(_0x29b029){const _0x9dc356=_0x3823ba,_0x7a9e0f=new Rectangle(0x0,0x0,_0x29b029[_0x9dc356(0x204)],_0x29b029[_0x9dc356(0xd6d)]);this['_commandNameWindow']=new Window_Base(_0x7a9e0f),this[_0x9dc356(0x281)][_0x9dc356(0xa2c)]=0x0,this['addChild'](this['_commandNameWindow']),this[_0x9dc356(0x73a)]();},Window_ActorCommand['prototype'][_0x3823ba(0x4d3)]=function(){const _0x3b9c8d=_0x3823ba;Window_Command['prototype']['callUpdateHelp'][_0x3b9c8d(0x162)](this);if(this[_0x3b9c8d(0x281)])this['updateCommandNameWindow']();},Window_ActorCommand[_0x3823ba(0x8d6)]['updateCommandNameWindow']=function(){const _0x39f833=_0x3823ba,_0x5a4010=this[_0x39f833(0x281)];_0x5a4010[_0x39f833(0x19d)][_0x39f833(0xcd2)]();const _0x40dadf=this['commandStyleCheck'](this[_0x39f833(0xb0f)]());if(_0x40dadf===_0x39f833(0x8c2)&&this[_0x39f833(0x6db)]()>0x0){const _0x2e6d25=this[_0x39f833(0x5c9)](this['index']());let _0x2d5266=this[_0x39f833(0xbca)](this[_0x39f833(0xb0f)]());_0x2d5266=_0x2d5266['replace'](/\\I\[(\d+)\]/gi,''),_0x5a4010[_0x39f833(0x54d)](),this[_0x39f833(0x7c9)](_0x2d5266,_0x2e6d25),this[_0x39f833(0xb36)](_0x2d5266,_0x2e6d25),this[_0x39f833(0x426)](_0x2d5266,_0x2e6d25);}},Window_ActorCommand[_0x3823ba(0x8d6)]['commandNameWindowDrawBackground']=function(_0x452643,_0x5a1b3a){},Window_ActorCommand[_0x3823ba(0x8d6)][_0x3823ba(0xb36)]=function(_0x574868,_0x1974b1){const _0x8057d9=_0x3823ba,_0x311277=this[_0x8057d9(0x281)];_0x311277['drawText'](_0x574868,0x0,_0x1974b1['y'],_0x311277[_0x8057d9(0x9ac)],_0x8057d9(0x542));},Window_ActorCommand[_0x3823ba(0x8d6)][_0x3823ba(0x426)]=function(_0x590065,_0x23c95d){const _0x363abd=_0x3823ba,_0x282bce=this['_commandNameWindow'],_0xb3bbeb=$gameSystem[_0x363abd(0x7b3)](),_0x4c42c1=_0x23c95d['x']+Math[_0x363abd(0x975)](_0x23c95d[_0x363abd(0x204)]/0x2)+_0xb3bbeb;_0x282bce['x']=_0x282bce[_0x363abd(0x204)]/-0x2+_0x4c42c1,_0x282bce['y']=Math[_0x363abd(0x975)](_0x23c95d[_0x363abd(0xd6d)]/0x2);},Window_ActorCommand[_0x3823ba(0x8d6)][_0x3823ba(0x26a)]=function(){const _0x5777da=_0x3823ba;if(!this[_0x5777da(0x9c0)])return;const _0x299eba=this[_0x5777da(0x9c0)][_0x5777da(0x97f)]();for(const _0x2555e5 of _0x299eba){if(_0x5777da(0x93d)===_0x5777da(0x93d))this['makeBattleCommand'](_0x2555e5[_0x5777da(0x2d8)]()[_0x5777da(0xaf4)]());else return[_0x578d86];}},Window_ActorCommand[_0x3823ba(0x8d6)][_0x3823ba(0x376)]=function(_0x43f4ef){const _0x4fe44c=_0x3823ba;_0x43f4ef==='ATTACK'&&this[_0x4fe44c(0x7e1)]();[_0x4fe44c(0xa8b),'SKILLS'][_0x4fe44c(0x97e)](_0x43f4ef)&&this[_0x4fe44c(0x5de)]();if(_0x43f4ef===_0x4fe44c(0xc64)){if('IPBxt'==='IPBxt')this[_0x4fe44c(0x4af)]();else{_0x8c6e76(_0x4fe44c(0x25b)),_0x1ff7ac[_0x4fe44c(0x824)]();return;}}_0x43f4ef===_0x4fe44c(0x96b)&&(_0x4fe44c(0xb2e)!==_0x4fe44c(0xb2e)?(this[_0x4fe44c(0xd0b)]['x']=this[_0x4fe44c(0x3f8)]['x'],this[_0x4fe44c(0xd0b)]['y']=this[_0x4fe44c(0x3f8)]['y']):this[_0x4fe44c(0x1a3)]());_0x43f4ef===_0x4fe44c(0x575)&&this['addEscapeCommand']();_0x43f4ef==='AUTO\x20BATTLE'&&this[_0x4fe44c(0xce9)]();if(_0x43f4ef[_0x4fe44c(0xd57)](/STYPE: (\d+)/i)){const _0x50e6d8=Number(RegExp['$1']);this['addSkillTypeCommand'](_0x50e6d8);}else{if(_0x43f4ef[_0x4fe44c(0xd57)](/STYPE: (.*)/i)){if('SMDaF'!==_0x4fe44c(0x194))return![];else{const _0x4c1c53=DataManager[_0x4fe44c(0x680)](RegExp['$1']);this[_0x4fe44c(0x551)](_0x4c1c53);}}}_0x43f4ef===_0x4fe44c(0xce4)&&this[_0x4fe44c(0x9d6)]();if(_0x43f4ef[_0x4fe44c(0xd57)](/SKILL: (\d+)/i)){if('alttZ'===_0x4fe44c(0xb03)){if(!this['_damagePopupArray'])this[_0x4fe44c(0x880)]();return this[_0x4fe44c(0x2e4)]['length']>0x0;}else{const _0x2aaa6e=Number(RegExp['$1']);this['addSingleSkillCommand']($dataSkills[_0x2aaa6e]);}}else{if(_0x43f4ef[_0x4fe44c(0xd57)](/SKILL: (.*)/i)){if(_0x4fe44c(0xbed)===_0x4fe44c(0xbed)){const _0x3a27d2=DataManager[_0x4fe44c(0x588)](RegExp['$1']);this[_0x4fe44c(0x7da)]($dataSkills[_0x3a27d2]);}else return _0xa4317d[_0x4fe44c(0x920)][_0x4fe44c(0xd57)](/<COMMAND TEXT: (.*)>/i)?_0x1a512c(_0x3b2a32['$1']):_0x54aff5[_0x4fe44c(0x450)];}}_0x43f4ef==='PARTY'&&Imported[_0x4fe44c(0xc12)]&&this[_0x4fe44c(0xada)](),[_0x4fe44c(0xbb1),_0x4fe44c(0xa1f)][_0x4fe44c(0x97e)](_0x43f4ef)&&Imported[_0x4fe44c(0xafc)]&&(_0x4fe44c(0xaeb)!==_0x4fe44c(0x52c)?this[_0x4fe44c(0x85e)]():(_0x3e89c5&&_0x48abfe[_0x4fe44c(0x4e0)]()&&_0x358b2a[_0x4fe44c(0x7e3)](_0x312452),this[_0x4fe44c(0x15f)]())),_0x43f4ef===_0x4fe44c(0x412)&&Imported[_0x4fe44c(0x533)]&&this[_0x4fe44c(0x965)](!![]),_0x43f4ef===_0x4fe44c(0x10e)&&Imported[_0x4fe44c(0xa9d)]&&this[_0x4fe44c(0x86f)]();},Window_ActorCommand[_0x3823ba(0x8d6)][_0x3823ba(0x7e1)]=function(){const _0x590c4c=_0x3823ba,_0x5b33a5=$dataSkills[this[_0x590c4c(0x9c0)][_0x590c4c(0x17c)]()];if(!_0x5b33a5)return;if(!this[_0x590c4c(0x3c8)](_0x5b33a5))return;const _0x9b073c=this['commandStyle'](),_0x3496a6=DataManager[_0x590c4c(0x2e3)](_0x5b33a5),_0x4877dd=DataManager[_0x590c4c(0xbbe)](_0x5b33a5),_0xef9071=_0x9b073c===_0x590c4c(0x3e1)?_0x3496a6:_0x590c4c(0xaa2)[_0x590c4c(0xabf)](_0x4877dd,_0x3496a6);this['addCommand'](_0xef9071,'attack',this['_actor']['canAttack']());},Window_ActorCommand[_0x3823ba(0x8d6)][_0x3823ba(0x4af)]=function(){const _0x362274=_0x3823ba,_0x450d56=$dataSkills[this['_actor'][_0x362274(0xd0a)]()];if(!_0x450d56)return;if(!this[_0x362274(0x3c8)](_0x450d56))return;const _0x29128d=this[_0x362274(0xb1e)](),_0x1b012e=DataManager[_0x362274(0x2e3)](_0x450d56),_0x16b296=DataManager[_0x362274(0xbbe)](_0x450d56),_0x4093e9=_0x29128d===_0x362274(0x3e1)?_0x1b012e:_0x362274(0xaa2)[_0x362274(0xabf)](_0x16b296,_0x1b012e);this[_0x362274(0xac9)](_0x4093e9,_0x362274(0xb56),this[_0x362274(0x9c0)][_0x362274(0x28b)]());},Window_ActorCommand['prototype']['addItemCommand']=function(){const _0x4cbf7e=_0x3823ba,_0x514335=this[_0x4cbf7e(0xb1e)](),_0x30e824=VisuMZ[_0x4cbf7e(0x4f3)]['Settings'][_0x4cbf7e(0x758)][_0x4cbf7e(0xc75)],_0xb17d02=_0x514335===_0x4cbf7e(0x3e1)?TextManager['item']:_0x4cbf7e(0xaa2)[_0x4cbf7e(0xabf)](_0x30e824,TextManager[_0x4cbf7e(0x733)]),_0x3b5959=this[_0x4cbf7e(0x203)]();this[_0x4cbf7e(0xac9)](_0xb17d02,'item',_0x3b5959);},Window_ActorCommand[_0x3823ba(0x8d6)][_0x3823ba(0x203)]=function(){const _0x1cbd38=_0x3823ba;return this[_0x1cbd38(0x9c0)]&&this[_0x1cbd38(0x9c0)]['canUseItemCommand']();},Window_ActorCommand[_0x3823ba(0x8d6)]['addSkillCommands']=function(){const _0x4a0192=_0x3823ba,_0x37c5bb=this['_actor'][_0x4a0192(0xad0)]();for(const _0x3ad4d3 of _0x37c5bb){'eQEUN'!==_0x4a0192(0xa90)?this[_0x4a0192(0x551)](_0x3ad4d3):_0x2d4c2f[_0x4a0192(0x8d6)][_0x4a0192(0x15c)][_0x4a0192(0x162)](this);}},Window_ActorCommand['prototype'][_0x3823ba(0x551)]=function(_0x415740){const _0x5dab9b=_0x3823ba;let _0xb8e457=$dataSystem[_0x5dab9b(0xad0)][_0x415740];if(!_0xb8e457)return;let _0x2f45da=_0xb8e457;const _0x1598c0=this[_0x5dab9b(0xb1e)]();if(_0x1598c0==='text')_0x2f45da=_0x2f45da[_0x5dab9b(0x7fc)](/\x1I\[(\d+)\]/gi,''),_0x2f45da=_0x2f45da['replace'](/\\I\[(\d+)\]/gi,'');else{if(!_0xb8e457[_0x5dab9b(0xd57)](/\\I\[(\d+)\]/i)){const _0x1e4162=Imported[_0x5dab9b(0xa3c)]?VisuMZ[_0x5dab9b(0x88f)][_0x5dab9b(0x242)][_0x5dab9b(0x785)]:VisuMZ[_0x5dab9b(0x4f3)][_0x5dab9b(0x242)][_0x5dab9b(0x758)],_0x4e1db7=$dataSystem[_0x5dab9b(0x2cb)]['includes'](_0x415740),_0xa10c0=_0x4e1db7?_0x1e4162[_0x5dab9b(0xc71)]:_0x1e4162[_0x5dab9b(0x443)];_0x2f45da=_0x5dab9b(0xaa2)[_0x5dab9b(0xabf)](_0xa10c0,_0xb8e457);}}this[_0x5dab9b(0xac9)](_0x2f45da,_0x5dab9b(0xb81),!![],_0x415740);},Window_ActorCommand['prototype'][_0x3823ba(0x9d6)]=function(){const _0x28d860=_0x3823ba,_0x648f5f=this['_actor'][_0x28d860(0xad0)](),_0x3e63c7=this[_0x28d860(0x9c0)]['skills']();for(const _0x88ee18 of _0x3e63c7){if(!_0x88ee18)continue;if(Imported['VisuMZ_1_SkillsStatesCore']){if(this[_0x28d860(0x645)](_0x88ee18))continue;if(this[_0x28d860(0x328)](_0x88ee18))continue;}else{if(!_0x648f5f[_0x28d860(0x97e)](_0x88ee18[_0x28d860(0x96e)]))continue;}this[_0x28d860(0x7da)](_0x88ee18);}},Window_ActorCommand[_0x3823ba(0x8d6)][_0x3823ba(0x645)]=function(_0x4e76da){const _0x3b3d6f=_0x3823ba,_0x4f48de=this[_0x3b3d6f(0x9c0)][_0x3b3d6f(0xad0)](),_0x5c0a0e=_0x4f48de[_0x3b3d6f(0x3a2)](_0x1cff42=>DataManager[_0x3b3d6f(0x201)](_0x4e76da)[_0x3b3d6f(0x97e)](_0x1cff42));return _0x5c0a0e[_0x3b3d6f(0xb23)]<=0x0;},Window_ActorCommand[_0x3823ba(0x8d6)][_0x3823ba(0x328)]=function(_0x32b60a){const _0x365b1d=_0x3823ba;if(Imported[_0x365b1d(0xa3c)]){if(VisuMZ[_0x365b1d(0x88f)][_0x365b1d(0xd18)]>=1.24){if(_0x365b1d(0x62d)===_0x365b1d(0x62d)){if(this[_0x365b1d(0x9c0)]){if(!VisuMZ[_0x365b1d(0x88f)][_0x365b1d(0x72a)](this[_0x365b1d(0x9c0)],_0x32b60a))return!![];if(!VisuMZ['SkillsStatesCore'][_0x365b1d(0x829)](this[_0x365b1d(0x9c0)],_0x32b60a))return!![];if(!VisuMZ[_0x365b1d(0x88f)][_0x365b1d(0x41a)](this['_actor'],_0x32b60a))return!![];}}else{const _0x56a56b=_0x5a6c1c[_0x365b1d(0x920)];if(_0x56a56b[_0x365b1d(0xd57)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return _0x1d6df0(_0x59d434['$1'])*0.01;else{if(_0x56a56b[_0x365b1d(0xd57)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return _0x2d5b11(_0x45dfb9['$1'])||0x0;}}}else{if(_0x365b1d(0x511)===_0x365b1d(0x511)){if(!Window_SkillList[_0x365b1d(0x8d6)]['checkShowHideBattleNotetags'][_0x365b1d(0x162)](this,_0x32b60a))return!![];if(!Window_SkillList[_0x365b1d(0x8d6)][_0x365b1d(0x605)][_0x365b1d(0x162)](this,_0x32b60a))return!![];if(!Window_SkillList[_0x365b1d(0x8d6)]['checkShowHideSkillNotetags']['call'](this,_0x32b60a))return!![];}else this['_distortionSprite']=new _0x44c861(),this[_0x365b1d(0xc5c)][_0x365b1d(0xcef)]['x']=0.5,this[_0x365b1d(0xc5c)]['anchor']['y']=0.5,this['addChild'](this[_0x365b1d(0xc5c)]);}}return![];},Window_ActorCommand[_0x3823ba(0x8d6)][_0x3823ba(0x7da)]=function(_0x5de8cf){const _0x2edfe7=_0x3823ba;if(!_0x5de8cf)return;if(!this['canAddSkillCommand'](_0x5de8cf))return;const _0x165670=this['commandStyle'](),_0x524091=DataManager['battleCommandName'](_0x5de8cf),_0x69d0c8=DataManager['battleCommandIcon'](_0x5de8cf),_0x3c2247=_0x165670===_0x2edfe7(0x3e1)?_0x524091:'\x5cI[%1]%2'[_0x2edfe7(0xabf)](_0x69d0c8,_0x524091),_0x18e07e=this[_0x2edfe7(0x9c0)][_0x2edfe7(0x470)](_0x5de8cf);this[_0x2edfe7(0xac9)](_0x3c2247,_0x2edfe7(0x609),_0x18e07e,_0x5de8cf['id']);},Window_ActorCommand[_0x3823ba(0x8d6)][_0x3823ba(0x3c8)]=function(_0x54b90f){const _0x301415=_0x3823ba,_0x548f77=_0x54b90f[_0x301415(0x920)];if(_0x548f77['match'](/<COMMAND REQUIRE LEARN>/i)){if(!this[_0x301415(0x9c0)][_0x301415(0x3db)](_0x54b90f['id']))return![];}if(_0x548f77[_0x301415(0xd57)](/<COMMAND REQUIRE ACCESS>/i)){if(_0x301415(0xc0c)!==_0x301415(0x553)){if(!this[_0x301415(0x9c0)][_0x301415(0x395)](_0x54b90f['id']))return![];}else this[_0x301415(0xca4)]=!![];}const _0x291c64=VisuMZ[_0x301415(0x4f3)][_0x301415(0x4e9)](_0x54b90f,_0x301415(0x2dd));if(VisuMZ[_0x301415(0x4f3)]['JS'][_0x291c64]){if(!VisuMZ[_0x301415(0x4f3)]['JS'][_0x291c64]['call'](this,this[_0x301415(0x9c0)],_0x54b90f))return![];}return VisuMZ['BattleCore']['CheckSkillCommandShowSwitches'](_0x54b90f);},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0xbfc)]=function(_0x5593cf){const _0x563bcb=_0x3823ba,_0x50b280=_0x5593cf[_0x563bcb(0x920)];if(_0x50b280[_0x563bcb(0xd57)](/<COMMAND SHOW[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x14b5f3=JSON[_0x563bcb(0xd93)]('['+RegExp['$1'][_0x563bcb(0xd57)](/\d+/g)+']');for(const _0x4f0e3c of _0x14b5f3){if(!$gameSwitches['value'](_0x4f0e3c))return![];}return!![];}if(_0x50b280[_0x563bcb(0xd57)](/<COMMAND SHOW ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if('CQBzN'!==_0x563bcb(0x109))this[_0x563bcb(0xb90)](_0x563bcb(0xb56));else{const _0x44dbc5=JSON[_0x563bcb(0xd93)]('['+RegExp['$1'][_0x563bcb(0xd57)](/\d+/g)+']');for(const _0x3fe7bc of _0x44dbc5){if(!$gameSwitches[_0x563bcb(0x16d)](_0x3fe7bc))return![];}return!![];}}if(_0x50b280[_0x563bcb(0xd57)](/<COMMAND SHOW ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x2cc45b=JSON['parse']('['+RegExp['$1'][_0x563bcb(0xd57)](/\d+/g)+']');for(const _0x21a97d of _0x2cc45b){if($gameSwitches[_0x563bcb(0x16d)](_0x21a97d))return!![];}return![];}if(_0x50b280[_0x563bcb(0xd57)](/<COMMAND HIDE[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x563bcb(0x3b5)==='xOcyd'){const _0x5e76a1=JSON[_0x563bcb(0xd93)]('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x2edbb3 of _0x5e76a1){if('CKXKB'!=='fKvlI'){if(!$gameSwitches[_0x563bcb(0x16d)](_0x2edbb3))return!![];}else{if(!_0x4f5bf4['isSideView']())return;const _0x28faf4=this[_0x563bcb(0x798)]();if(!_0x28faf4)return;_0x28faf4[_0x563bcb(0xb04)](_0x428e36,_0x16a940,_0x27ccf7,_0x456a8d);}}return![];}else{if(this[_0x563bcb(0x7d5)]())return!![];return![];}}if(_0x50b280[_0x563bcb(0xd57)](/<COMMAND HIDE ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x51e26a=JSON[_0x563bcb(0xd93)]('['+RegExp['$1'][_0x563bcb(0xd57)](/\d+/g)+']');for(const _0x4cb502 of _0x51e26a){if(_0x563bcb(0x64a)!==_0x563bcb(0x64a)){const _0x59a219=_0x3a396d[_0x563bcb(0x846)](),_0x3e5dc6=_0x59a219[_0x563bcb(0x798)]();if(_0x3e5dc6)_0x3e5dc6[_0x563bcb(0xaa4)]();const _0x2f5b18=_0xdd69f9[_0x563bcb(0xd31)]()[_0x563bcb(0x3a2)](_0x50be7e=>_0x50be7e[_0x563bcb(0x23c)]()&&_0x50be7e[_0x563bcb(0x9c3)]()),_0x194010=_0x2f5b18[_0x563bcb(0x122)](_0x59a219),_0x1b8f5c=_0x2f5b18[_0x194010+0x1];_0x31a2fb[_0x563bcb(0x1ae)]=_0x1b8f5c||null;if(_0x1b8f5c)_0x1b8f5c[_0x563bcb(0xcca)](_0x563bcb(0xa3a));_0x59a219['setActionState'](_0x563bcb(0xd27)),this[_0x563bcb(0x1bb)]();}else{if(!$gameSwitches[_0x563bcb(0x16d)](_0x4cb502))return!![];}}return![];}if(_0x50b280[_0x563bcb(0xd57)](/<COMMAND HIDE ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x6532d3=JSON[_0x563bcb(0xd93)]('['+RegExp['$1'][_0x563bcb(0xd57)](/\d+/g)+']');for(const _0x441fc0 of _0x6532d3){if(_0x563bcb(0xb4e)===_0x563bcb(0x1de)){const _0x54df0b=_0x30724c['battler']();this['push'](_0x563bcb(0xd47),[_0x518db9],_0x6b9793,_0xb1664b),this[_0x563bcb(0x3d9)]('performMoveToPoint',_0x443957,_0x54df0b[_0x563bcb(0x43c)],_0x54df0b[_0x563bcb(0x372)],_0x271e8a,![],_0x563bcb(0x12f)),this[_0x563bcb(0x3d9)](_0x563bcb(0xb90),[_0x4ff9bd],'evade'),this[_0x563bcb(0x3d9)](_0x563bcb(0x714)),this[_0x563bcb(0x3d9)](_0x563bcb(0xb90),[_0x1a620c],'walk');}else{if($gameSwitches[_0x563bcb(0x16d)](_0x441fc0))return![];}}return!![];}return!![];},Window_ActorCommand[_0x3823ba(0x8d6)][_0x3823ba(0x716)]=function(){const _0x457418=_0x3823ba,_0x78671f=this['commandStyle'](),_0x2188eb=VisuMZ['BattleCore'][_0x457418(0x242)][_0x457418(0x4e2)][_0x457418(0x759)],_0x4b1d95=_0x78671f===_0x457418(0x3e1)?TextManager[_0x457418(0xb42)]:_0x457418(0xaa2)[_0x457418(0xabf)](_0x2188eb,TextManager[_0x457418(0xb42)]),_0x13809b=this[_0x457418(0x63c)]();this[_0x457418(0xac9)](_0x4b1d95,_0x457418(0xb42),_0x13809b);},Window_ActorCommand['prototype'][_0x3823ba(0x63c)]=function(){return BattleManager['canEscape']();},Window_ActorCommand[_0x3823ba(0x8d6)][_0x3823ba(0xce9)]=function(){const _0x8a2a17=_0x3823ba,_0x46519c=this[_0x8a2a17(0xb1e)](),_0x2c7506=VisuMZ[_0x8a2a17(0x4f3)][_0x8a2a17(0x242)][_0x8a2a17(0x4e2)][_0x8a2a17(0x304)],_0x157df7=_0x46519c===_0x8a2a17(0x3e1)?TextManager[_0x8a2a17(0xbf5)]:_0x8a2a17(0xaa2)[_0x8a2a17(0xabf)](_0x2c7506,TextManager[_0x8a2a17(0xbf5)]),_0x4a59ac=this['isAutoBattleCommandEnabled']();this[_0x8a2a17(0xac9)](_0x157df7,_0x8a2a17(0xbf5),_0x4a59ac);},Window_ActorCommand[_0x3823ba(0x8d6)][_0x3823ba(0xd80)]=function(){return!![];},Window_ActorCommand[_0x3823ba(0x8d6)]['itemTextAlign']=function(){const _0x14b397=_0x3823ba;return VisuMZ['BattleCore'][_0x14b397(0x242)][_0x14b397(0x758)][_0x14b397(0x5b8)];},Window_ActorCommand['prototype'][_0x3823ba(0x49e)]=function(_0x5c9fc8){const _0x3b7b01=_0x3823ba,_0x45a280=this[_0x3b7b01(0x98b)](_0x5c9fc8);if(_0x45a280==='iconText')this['drawItemStyleIconText'](_0x5c9fc8);else{if(_0x45a280===_0x3b7b01(0x8c2)){if(_0x3b7b01(0x253)==='lQpIf'){const _0x36a13d=_0x1ed54d[_0x3b7b01(0x733)]();this[_0x3b7b01(0x3d9)](_0x3b7b01(0x550),_0x21127a,[_0x2e13ff],_0x36a13d[_0x3b7b01(0x161)]);}else this[_0x3b7b01(0xb58)](_0x5c9fc8);}else Window_Command[_0x3b7b01(0x8d6)][_0x3b7b01(0x49e)][_0x3b7b01(0x162)](this,_0x5c9fc8);}this[_0x3b7b01(0x8f5)](_0x5c9fc8);},Window_ActorCommand[_0x3823ba(0x8d6)][_0x3823ba(0xb1e)]=function(){const _0x5e134f=_0x3823ba;return VisuMZ[_0x5e134f(0x4f3)]['Settings'][_0x5e134f(0x758)][_0x5e134f(0xd84)];},Window_ActorCommand['prototype'][_0x3823ba(0x98b)]=function(_0x2ff3f4){const _0x449fa8=_0x3823ba;if(_0x2ff3f4<0x0)return _0x449fa8(0x3e1);const _0xa7c1f8=this[_0x449fa8(0xb1e)]();if(_0xa7c1f8!==_0x449fa8(0x94e))return _0xa7c1f8;else{if(this[_0x449fa8(0x6db)]()>0x0){if(_0x449fa8(0x649)!==_0x449fa8(0x649)){if(!_0x106537[_0x449fa8(0xbc6)]())return;if(!_0x355339['VisuMZ_3_ActiveChainSkills'])return;_0x1f85be[_0x449fa8(0x990)]=!![];}else{const _0x436262=this[_0x449fa8(0xbca)](_0x2ff3f4);if(_0x436262[_0x449fa8(0xd57)](/\\I\[(\d+)\]/i)){if(_0x449fa8(0x326)===_0x449fa8(0x974))this[_0x449fa8(0x8d2)]=!![];else{const _0x1424f7=this[_0x449fa8(0x5c9)](_0x2ff3f4),_0x103252=this[_0x449fa8(0x699)](_0x436262)[_0x449fa8(0x204)];if(_0x103252<=_0x1424f7[_0x449fa8(0x204)]){if('wHhTQ'===_0x449fa8(0xa7d))return _0x449fa8(0x386);else{if(this[_0x449fa8(0x846)]()['note']['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i))return _0x15de65(_0x3641fc['$1']);else{if(this[_0x449fa8(0x846)]()[_0x449fa8(0x920)][_0x449fa8(0xd57)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return _0x5a5ca7(_0x41e296['$1']);}return 0x0;}}else{if('xyhAL'!==_0x449fa8(0x84c))return _0x449fa8(0x8c2);else this[_0x449fa8(0x87b)]();}}}}}}return _0x449fa8(0x3e1);},Window_ActorCommand[_0x3823ba(0x8d6)][_0x3823ba(0x8b9)]=function(_0x42eb74){const _0x47e81b=_0x3823ba,_0x4db8a3=this[_0x47e81b(0x5c9)](_0x42eb74),_0x34d7d2=this[_0x47e81b(0xbca)](_0x42eb74),_0x2eba6d=this[_0x47e81b(0x699)](_0x34d7d2)['width'];this[_0x47e81b(0x25e)](this[_0x47e81b(0x172)](_0x42eb74));const _0x3bf953=this[_0x47e81b(0x2d7)]();if(_0x3bf953===_0x47e81b(0xc21)){if('gnIKS'===_0x47e81b(0x362)){if(!_0x56aaf5[_0x47e81b(0xbc6)]())return;if(!_0x257edd[_0x47e81b(0x1d9)])return;const _0x22f76e=_0x3cff66[_0x47e81b(0xaa7)]();_0x22f76e[_0x47e81b(0xab0)](_0x47e81b(0x461));}else this['drawTextEx'](_0x34d7d2,_0x4db8a3['x']+_0x4db8a3[_0x47e81b(0x204)]-_0x2eba6d,_0x4db8a3['y'],_0x2eba6d);}else{if(_0x3bf953==='center'){if('bkRia'===_0x47e81b(0xa89)){const _0x177b6d=_0x4db8a3['x']+Math[_0x47e81b(0x975)]((_0x4db8a3[_0x47e81b(0x204)]-_0x2eba6d)/0x2);this[_0x47e81b(0x7a4)](_0x34d7d2,_0x177b6d,_0x4db8a3['y'],_0x2eba6d);}else{if(_0x3bf748['battleCameraData']()[_0x47e81b(0x30c)]>0x0)return!![];this[_0x47e81b(0x887)]='';}}else this[_0x47e81b(0x7a4)](_0x34d7d2,_0x4db8a3['x'],_0x4db8a3['y'],_0x2eba6d);}},Window_ActorCommand['prototype'][_0x3823ba(0xb58)]=function(_0x5b1824){const _0x1b864f=_0x3823ba;this[_0x1b864f(0xbca)](_0x5b1824)['match'](/\\I\[(\d+)\]/i);const _0x2d43ba=Number(RegExp['$1'])||0x0,_0x492aa1=this[_0x1b864f(0x5c9)](_0x5b1824),_0x17ebd7=_0x492aa1['x']+Math[_0x1b864f(0x975)]((_0x492aa1[_0x1b864f(0x204)]-ImageManager['iconWidth'])/0x2),_0x15f7e6=_0x492aa1['y']+(_0x492aa1[_0x1b864f(0xd6d)]-ImageManager[_0x1b864f(0x935)])/0x2;this['drawIcon'](_0x2d43ba,_0x17ebd7,_0x15f7e6);},Window_ActorCommand[_0x3823ba(0x8d6)]['drawSingleSkillCost']=function(_0x5744fd){const _0x2c4c38=_0x3823ba;if(!(VisuMZ['BattleCore'][_0x2c4c38(0x242)]['ActorCmd'][_0x2c4c38(0x2c4)]??!![]))return;const _0xfbff06=this[_0x2c4c38(0x4de)](_0x5744fd);if(!['attack',_0x2c4c38(0xb56),'singleSkill'][_0x2c4c38(0x97e)](_0xfbff06))return;const _0xebe7ac=this[_0x2c4c38(0x5c9)](_0x5744fd);let _0xe8ec96=null;if(_0xfbff06===_0x2c4c38(0x484))_0xe8ec96=$dataSkills[this['_actor'][_0x2c4c38(0x17c)]()];else _0xfbff06===_0x2c4c38(0xb56)?_0xe8ec96=$dataSkills[this['_actor'][_0x2c4c38(0xd0a)]()]:_0xe8ec96=$dataSkills[this[_0x2c4c38(0xb92)][_0x5744fd]['ext']];this[_0x2c4c38(0x6e3)](this[_0x2c4c38(0x9c0)],_0xe8ec96,_0xebe7ac['x'],_0xebe7ac['y'],_0xebe7ac[_0x2c4c38(0x204)]);},Window_ActorCommand[_0x3823ba(0x8d6)][_0x3823ba(0x6e3)]=function(_0x4ea955,_0x3168a8,_0x4316f1,_0x35e44a,_0x202118){const _0x396afe=_0x3823ba;if(!_0x3168a8)return;if(Imported[_0x396afe(0xa3c)])Window_Command[_0x396afe(0x8d6)][_0x396afe(0x6e3)][_0x396afe(0x162)](this,_0x4ea955,_0x3168a8,_0x4316f1,_0x35e44a,_0x202118);else{if('NqssZ'==='NqssZ')Window_SkillList[_0x396afe(0x8d6)][_0x396afe(0x6e3)][_0x396afe(0x162)](this,_0x3168a8,_0x4316f1,_0x35e44a,_0x202118);else{const _0x3bbed4=this[_0x396afe(0x4de)](_0x2673dd);return _0x3bbed4===_0x396afe(0x698)?this[_0x396afe(0xa0b)]():_0xfd3026[_0x396afe(0x4f3)][_0x396afe(0x68a)][_0x396afe(0x162)](this,_0x8a3857);}}},Window_ActorCommand[_0x3823ba(0x8d6)]['hide']=function(){},Window_ActorCommand['prototype'][_0x3823ba(0x9e2)]=function(){const _0x2cabb5=_0x3823ba;Window_Command[_0x2cabb5(0x8d6)][_0x2cabb5(0x9e2)][_0x2cabb5(0x162)](this);const _0x11a36d=this[_0x2cabb5(0xa73)]();_0x11a36d===_0x2cabb5(0x43a)&&this[_0x2cabb5(0x790)]();},Window_ActorCommand[_0x3823ba(0x8d6)][_0x3823ba(0xa73)]=function(){const _0x178a4c=_0x3823ba;if(this[_0x178a4c(0x9eb)])return this[_0x178a4c(0x9eb)];return this['_battleLayoutStyle']=SceneManager[_0x178a4c(0xaa3)]['battleLayoutStyle'](),this[_0x178a4c(0x9eb)];},VisuMZ['BattleCore']['Window_ActorCommand_setup']=Window_ActorCommand[_0x3823ba(0x8d6)][_0x3823ba(0xa63)],Window_ActorCommand[_0x3823ba(0x8d6)]['setup']=function(_0x27cd2f){const _0x5acbcc=_0x3823ba,_0x5ebe33=this[_0x5acbcc(0xa73)]();if(_0x27cd2f&&['xp',_0x5acbcc(0x9e6)][_0x5acbcc(0x97e)](_0x5ebe33))this[_0x5acbcc(0xc43)](_0x27cd2f);else _0x27cd2f&&['border'][_0x5acbcc(0x97e)](_0x5ebe33)&&(this['resizeWindowBorderStyle'](_0x27cd2f),this['showHelpWindow']());VisuMZ[_0x5acbcc(0x4f3)]['Window_ActorCommand_setup']['call'](this,_0x27cd2f),_0x27cd2f&&$gameTroop['aliveMembers']()[_0x5acbcc(0xb23)]>0x0&&_0x27cd2f['battler']()&&(_0x5acbcc(0xc55)!==_0x5acbcc(0xcde)?_0x27cd2f[_0x5acbcc(0x798)]()[_0x5acbcc(0x8f8)]():(this[_0x5acbcc(0x2bb)]=_0x330d00,_0xe902b5[_0x5acbcc(0x8d6)][_0x5acbcc(0xc06)]['call'](this,_0xee4572),this['setBackgroundType'](_0x5cb4d7[_0x5acbcc(0x5aa)]),this[_0x5acbcc(0x8b0)](),this['hide'](),this[_0x5acbcc(0x111)]()));},Window_ActorCommand['prototype'][_0x3823ba(0xc43)]=function(_0xe8bac4){const _0x45c95c=_0x3823ba,_0x7e2215=VisuMZ[_0x45c95c(0x4f3)][_0x45c95c(0x242)][_0x45c95c(0x735)][_0x45c95c(0x4c0)],_0x7096ae=Math[_0x45c95c(0x282)](Graphics[_0x45c95c(0xc13)]/0x3),_0x3b2491=Math[_0x45c95c(0x282)](Graphics[_0x45c95c(0xc13)]/$gameParty[_0x45c95c(0x930)]()[_0x45c95c(0xb23)]),_0x40e834=Math['max'](Math['min'](_0x7096ae,_0x3b2491),_0x7e2215),_0x22cfe8=this[_0x45c95c(0x5e8)](VisuMZ[_0x45c95c(0x4f3)][_0x45c95c(0x242)][_0x45c95c(0x735)][_0x45c95c(0x20f)]),_0x2f295c=Math[_0x45c95c(0x975)]((Graphics[_0x45c95c(0xc13)]-Graphics['width'])/0x2),_0x1800d7=Graphics['boxWidth']-_0x2f295c,_0x387737=(Math[_0x45c95c(0x282)](_0x3b2491*_0xe8bac4[_0x45c95c(0xb0f)]())+Math[_0x45c95c(0x282)]((_0x3b2491-_0x40e834)/0x2))[_0x45c95c(0x6a0)](_0x2f295c,_0x1800d7-_0x40e834),_0x4314d6=Math[_0x45c95c(0x282)](SceneManager[_0x45c95c(0xaa3)][_0x45c95c(0x264)]['y']-_0x22cfe8);this[_0x45c95c(0x239)](_0x387737,_0x4314d6,_0x40e834,_0x22cfe8),this[_0x45c95c(0x9ae)](),this['setBackgroundType'](0x1);},Window_ActorCommand[_0x3823ba(0x8d6)][_0x3823ba(0x25d)]=function(_0x444163){const _0x4268ff=_0x3823ba,_0x43576b=SceneManager['_scene'][_0x4268ff(0x60d)]();this['move'](_0x43576b['x'],_0x43576b['y'],_0x43576b['width'],_0x43576b[_0x4268ff(0xd6d)]),this[_0x4268ff(0x9ae)](),this[_0x4268ff(0x5a8)](0x0);},Window_ActorCommand[_0x3823ba(0x8d6)][_0x3823ba(0x2ee)]=function(){const _0x3374d7=_0x3823ba;if(this['_dimmerSprite']){const _0x3144a2=this['_dimmerSprite'][_0x3374d7(0x850)],_0x32ce64=this['width']-0x8,_0x12b1ea=this[_0x3374d7(0xd6d)],_0x4f0e84=this[_0x3374d7(0x3ee)],_0x4897ab=ColorManager[_0x3374d7(0x3b2)](),_0x4f7bc3=ColorManager['dimColor2']();this[_0x3374d7(0x270)]['x']=0x4,_0x3144a2['resize'](_0x32ce64,_0x12b1ea),_0x3144a2[_0x3374d7(0x8a8)](0x0,0x0,_0x32ce64,_0x4f0e84,_0x4f7bc3,_0x4897ab,!![]),_0x3144a2[_0x3374d7(0xd20)](0x0,_0x4f0e84,_0x32ce64,_0x12b1ea-_0x4f0e84*0x2,_0x4897ab),_0x3144a2['gradientFillRect'](0x0,_0x12b1ea-_0x4f0e84,_0x32ce64,_0x4f0e84,_0x4897ab,_0x4f7bc3,!![]),this[_0x3374d7(0x270)][_0x3374d7(0x502)](0x0,0x0,_0x32ce64,_0x12b1ea);}},Window_ActorCommand[_0x3823ba(0x8d6)][_0x3823ba(0x8d9)]=function(){const _0x44dd4a=_0x3823ba;if(!this[_0x44dd4a(0x9c0)])return;const _0x58bf7e=VisuMZ[_0x44dd4a(0x4f3)][_0x44dd4a(0x242)][_0x44dd4a(0x758)],_0x55d03f=this[_0x44dd4a(0x5f5)]();switch(_0x55d03f){case'attack':this[_0x44dd4a(0xca1)]($dataSkills[this['_actor']['attackSkillId']()]);break;case _0x44dd4a(0xb56):this[_0x44dd4a(0xca1)]($dataSkills[this[_0x44dd4a(0x9c0)][_0x44dd4a(0xd0a)]()]);break;case _0x44dd4a(0xb81):const _0x477b79=_0x58bf7e[_0x44dd4a(0x77f)],_0x3231c0=_0x477b79['format']($dataSystem[_0x44dd4a(0xad0)][this[_0x44dd4a(0xa1a)]()]);this[_0x44dd4a(0xd00)][_0x44dd4a(0xae5)](_0x3231c0);break;case _0x44dd4a(0x609):this[_0x44dd4a(0xca1)]($dataSkills[this['currentExt']()]);break;case _0x44dd4a(0x733):this[_0x44dd4a(0xd00)]['setText'](_0x58bf7e[_0x44dd4a(0x21c)]);break;case _0x44dd4a(0xb42):this[_0x44dd4a(0xd00)][_0x44dd4a(0xae5)](_0x58bf7e[_0x44dd4a(0x83a)]);break;case _0x44dd4a(0xbf5):this[_0x44dd4a(0xd00)][_0x44dd4a(0xae5)](_0x58bf7e[_0x44dd4a(0x652)]);break;default:this[_0x44dd4a(0xd00)][_0x44dd4a(0xae5)]('');break;}},Window_ActorCommand['prototype']['selectLast']=function(){const _0x36528c=_0x3823ba;this['forceSelect'](0x0);if(this['_actor']&&ConfigManager[_0x36528c(0x9a1)]){const _0x425917=this[_0x36528c(0x9c0)][_0x36528c(0x17a)]();this[_0x36528c(0x5b3)](_0x425917);if(_0x425917===_0x36528c(0xb81)){const _0xf6ce76=this['_actor']['lastBattleSkill']();if(_0xf6ce76){const _0x34dae3=this[_0x36528c(0x4ff)]('skill',_0xf6ce76[_0x36528c(0x96e)]);this['select'](_0x34dae3||0x0);}}else{if(_0x425917==='singleSkill'){const _0x1b6490=this['_actor'][_0x36528c(0x9fe)]();if(_0x1b6490){const _0x14e264=this['findSymbolExt'](_0x36528c(0x609),_0x1b6490['id']);this[_0x36528c(0x97d)](_0x14e264||0x0);}}}}},Window_ActorCommand[_0x3823ba(0x8d6)][_0x3823ba(0x4ff)]=function(_0x38d93b,_0x104d05){const _0x10671b=_0x3823ba;return this[_0x10671b(0xb92)]['findIndex'](_0x45f670=>_0x45f670[_0x10671b(0xa77)]===_0x38d93b&&_0x45f670[_0x10671b(0x449)]===_0x104d05);},VisuMZ[_0x3823ba(0x4f3)]['Window_BattleStatus_initialize']=Window_BattleStatus[_0x3823ba(0x8d6)]['initialize'],Window_BattleStatus[_0x3823ba(0x8d6)][_0x3823ba(0xc06)]=function(_0x45ca94){const _0x4dac2c=_0x3823ba;VisuMZ[_0x4dac2c(0x4f3)][_0x4dac2c(0x5c5)][_0x4dac2c(0x162)](this,_0x45ca94),this['initBattleCore'](),this[_0x4dac2c(0xbf8)]();},Window_BattleStatus[_0x3823ba(0x8d6)]['battleLayoutStyle']=function(){const _0x2828eb=_0x3823ba;if(this[_0x2828eb(0x9eb)])return this['_battleLayoutStyle'];return this[_0x2828eb(0x9eb)]=SceneManager[_0x2828eb(0xaa3)][_0x2828eb(0xa73)](),this[_0x2828eb(0x9eb)];},Window_BattleStatus[_0x3823ba(0x8d6)][_0x3823ba(0x95b)]=function(){const _0x3e2d05=_0x3823ba;this['frameVisible']=this['isFrameVisible']();const _0x93e92b=VisuMZ[_0x3e2d05(0x4f3)][_0x3e2d05(0x242)][_0x3e2d05(0x735)];_0x93e92b[_0x3e2d05(0x424)]&&(this['opacity']=0x0);},Window_BattleStatus['prototype'][_0x3823ba(0x205)]=function(){const _0xa3756f=_0x3823ba,_0x59d1a2=VisuMZ['BattleCore']['Settings'][_0xa3756f(0x735)];if(_0x59d1a2[_0xa3756f(0x8fb)])return!![];const _0x427132=this['battleLayoutStyle']();switch(_0x427132){case _0xa3756f(0x934):case _0xa3756f(0x43a):return!![];break;case _0xa3756f(0x4d8):case'xp':case'portrait':default:return![];break;}},Window_BattleStatus[_0x3823ba(0x8d6)][_0x3823ba(0xc91)]=function(){const _0x18d68f=_0x3823ba;if(this[_0x18d68f(0x205)]())return _0x18d68f(0x5e7)===_0x18d68f(0x38d)?this[_0x18d68f(0xb76)](_0x220925(_0x897504)):0x0;else{if(_0x18d68f(0x571)===_0x18d68f(0x3ea))_0x4a9da9[_0x18d68f(0x4f3)][_0x18d68f(0x5c5)][_0x18d68f(0x162)](this,_0x5c7327),this[_0x18d68f(0x95b)](),this[_0x18d68f(0xbf8)]();else return 0xa;}},Window_BattleStatus['prototype'][_0x3823ba(0x7cf)]=function(){const _0x25f4c7=_0x3823ba,_0x48ba02=this['battleLayoutStyle']();switch(_0x48ba02){case _0x25f4c7(0x934):return 0x1;break;case'xp':case _0x25f4c7(0x9e6):return $gameParty[_0x25f4c7(0x930)]()[_0x25f4c7(0xb23)];break;case _0x25f4c7(0x4d8):default:return $gameParty[_0x25f4c7(0x1cb)]();break;}},Window_BattleStatus['prototype'][_0x3823ba(0x27f)]=function(){const _0x7000d1=_0x3823ba,_0x5755b8=this['battleLayoutStyle']();switch(_0x5755b8){case _0x7000d1(0x934):return Window_StatusBase[_0x7000d1(0x8d6)]['itemHeight'][_0x7000d1(0x162)](this);break;case _0x7000d1(0x4d8):case'xp':case'portrait':default:return this[_0x7000d1(0x7e8)];break;}},Window_BattleStatus[_0x3823ba(0x8d6)][_0x3823ba(0x3c0)]=function(){const _0x24c483=_0x3823ba,_0x46cca6=this['battleLayoutStyle']();switch(_0x46cca6){case'list':return Window_StatusBase[_0x24c483(0x8d6)][_0x24c483(0x3c0)][_0x24c483(0x162)](this);break;case _0x24c483(0x4d8):case'xp':case _0x24c483(0x9e6):default:return 0x0;break;}},Window_BattleStatus['prototype'][_0x3823ba(0x773)]=function(){const _0x923303=_0x3823ba;if(this[_0x923303(0x205)]()){if(_0x923303(0x66d)===_0x923303(0x66d))Window_StatusBase[_0x923303(0x8d6)]['updatePadding'][_0x923303(0x162)](this);else{if(!_0x11158b)return;const _0x501633=new _0x48601a();this[_0x923303(0x631)](_0x501633),_0x501633[_0x923303(0xd85)](_0x9bd32d);}}else this['padding']=0x8;},Window_BattleStatus[_0x3823ba(0x8d6)][_0x3823ba(0x42b)]=function(){const _0x17c423=_0x3823ba,_0x35b435=VisuMZ[_0x17c423(0x4f3)][_0x17c423(0x242)][_0x17c423(0x735)];_0x35b435['StatusWindowSkinFilename']?this[_0x17c423(0x705)]=ImageManager['loadSystem'](_0x35b435['StatusWindowSkinFilename']):Window_StatusBase[_0x17c423(0x8d6)][_0x17c423(0x42b)][_0x17c423(0x162)](this);},Window_BattleStatus[_0x3823ba(0x8d6)][_0x3823ba(0x43d)]=function(_0x37f3f8){const _0x50f138=_0x3823ba,_0x579876=VisuMZ[_0x50f138(0x4f3)][_0x50f138(0x242)][_0x50f138(0x735)];if(_0x579876[_0x50f138(0x206)])return;Window_StatusBase[_0x50f138(0x8d6)]['drawItemBackground'][_0x50f138(0x162)](this,_0x37f3f8);},Window_BattleStatus[_0x3823ba(0x8d6)][_0x3823ba(0x779)]=function(){const _0x10eca6=_0x3823ba;this[_0x10eca6(0xca4)]=!![];},Window_BattleStatus[_0x3823ba(0x8d6)][_0x3823ba(0x456)]=function(){const _0x1d421c=_0x3823ba;Window_StatusBase[_0x1d421c(0x8d6)][_0x1d421c(0x456)][_0x1d421c(0x162)](this),this[_0x1d421c(0x2d6)](),this[_0x1d421c(0x673)]();if(this[_0x1d421c(0xa73)]()===_0x1d421c(0x43a))this['updateBorderStyle']();},Window_BattleStatus['prototype'][_0x3823ba(0x2d6)]=function(){const _0x34e6c3=_0x3823ba;if($gameTemp[_0x34e6c3(0x904)]())this['preparePartyRefresh'](),this[_0x34e6c3(0xca4)]=![],$gameTemp['clearBattleRefreshRequest']();else this[_0x34e6c3(0xca4)]&&(this[_0x34e6c3(0xca4)]=![],this[_0x34e6c3(0x912)](),this['updateAttachmentSprites']());},Window_BattleStatus[_0x3823ba(0x8d6)][_0x3823ba(0x39d)]=function(){const _0xecf19f=_0x3823ba;Window_StatusBase[_0xecf19f(0x8d6)][_0xecf19f(0x39d)][_0xecf19f(0x162)](this);if(!$gameSystem['isSideView']())this[_0xecf19f(0x912)]();},Window_BattleStatus[_0x3823ba(0x8d6)][_0x3823ba(0x423)]=function(){const _0x4df8ce=_0x3823ba;if(this[_0x4df8ce(0x786)]===Window_BattleStatus)return;Window_StatusBase[_0x4df8ce(0x8d6)][_0x4df8ce(0x423)][_0x4df8ce(0x162)](this);},Window_BattleStatus[_0x3823ba(0x8d6)][_0x3823ba(0x30b)]=function(_0x58b9a0){const _0x52cbae=_0x3823ba,_0x4d60e6=this['battleLayoutStyle']();switch(_0x4d60e6){case'xp':case'portrait':break;case _0x52cbae(0x4d8):case _0x52cbae(0x934):case _0x52cbae(0x43a):default:return Window_StatusBase[_0x52cbae(0x8d6)][_0x52cbae(0x30b)][_0x52cbae(0x162)](this,_0x58b9a0);break;}},VisuMZ['BattleCore'][_0x3823ba(0x23f)]=Window_BattleStatus[_0x3823ba(0x8d6)]['drawItemImage'],Window_BattleStatus[_0x3823ba(0x8d6)][_0x3823ba(0xb5e)]=function(_0x57e425){const _0x19fc1b=_0x3823ba,_0xbd25f1=this[_0x19fc1b(0xa73)]();switch(_0xbd25f1){case _0x19fc1b(0x934):this[_0x19fc1b(0x1ad)](_0x57e425);break;case'xp':this[_0x19fc1b(0x1aa)](_0x57e425);break;case _0x19fc1b(0x9e6):this[_0x19fc1b(0x8bf)](_0x57e425);break;case'default':case _0x19fc1b(0x43a):default:VisuMZ['BattleCore']['Window_BattleStatus_drawItemImage'][_0x19fc1b(0x162)](this,_0x57e425);break;}},Window_BattleStatus['prototype'][_0x3823ba(0x2fe)]=function(_0x59dc28){const _0x160355=_0x3823ba,_0x1d09fa=this['battleLayoutStyle']();if(!$gameSystem[_0x160355(0x839)]())this[_0x160355(0xd76)](_0x59dc28);switch(_0x1d09fa){case'list':this[_0x160355(0xb41)](_0x59dc28);break;case'xp':case _0x160355(0x9e6):case'default':case _0x160355(0x43a):default:this['drawItemStatusXPStyle'](_0x59dc28);break;}},Window_BattleStatus[_0x3823ba(0x8d6)][_0x3823ba(0xb72)]=function(){const _0x38447b=_0x3823ba,_0x29107a=this[_0x38447b(0xa73)]();if(['xp'][_0x38447b(0x97e)](_0x29107a)&&!$gameSystem['isSideView']()){this[_0x38447b(0x8ff)](0x0,0x0,0x0,0x0);return;}Window_StatusBase[_0x38447b(0x8d6)]['refreshCursor'][_0x38447b(0x162)](this);},Window_BattleStatus['prototype'][_0x3823ba(0xd76)]=function(_0x5822f2){const _0x1127a6=_0x3823ba,_0x4f2afa=this[_0x1127a6(0x846)](_0x5822f2)[_0x1127a6(0x798)]();if(!_0x4f2afa)return;const _0x5fd604=this[_0x1127a6(0xa73)](),_0x33a8ce=this[_0x1127a6(0x153)](_0x5822f2);let _0x5a0440=Math['round'](_0x33a8ce['x']+_0x33a8ce[_0x1127a6(0x204)]/0x2)+this[_0x1127a6(0x3ee)];if([_0x1127a6(0x934)][_0x1127a6(0x97e)](_0x5fd604)){if(_0x1127a6(0xc1a)===_0x1127a6(0xad5)){if(!_0x407b6f[_0x1127a6(0x4f3)][_0x1127a6(0x242)]['BattleLayout'][_0x1127a6(0x51e)])return;const _0x3d8821=this[_0x1127a6(0x846)](_0x4d3dd8),_0x1d8d35=this[_0x1127a6(0x153)](_0x300a69);_0x1d8d35[_0x1127a6(0x204)]=_0x2112b3[_0x1127a6(0xb52)],_0x1d8d35[_0x1127a6(0xd6d)]-=0x2,this[_0x1127a6(0x82b)](_0x3d8821,_0x1d8d35['x']+0x1,_0x1d8d35['y']+0x1,_0x1d8d35[_0x1127a6(0x204)],_0x1d8d35[_0x1127a6(0xd6d)]);}else _0x5a0440=_0x33a8ce[_0x1127a6(0x204)]/$gameParty[_0x1127a6(0x930)]()[_0x1127a6(0xb23)],_0x5a0440*=_0x5822f2,_0x5a0440+=_0x33a8ce[_0x1127a6(0x204)]/$gameParty['battleMembers']()[_0x1127a6(0xb23)]/0x2;}let _0x33e64f=Math['round'](this[_0x1127a6(0x7cb)](_0x5822f2,_0x4f2afa,_0x33a8ce));_0x4f2afa[_0x1127a6(0x79d)](_0x5a0440,_0x33e64f),this['addChildAt'](_0x4f2afa,0x1),_0x4f2afa[_0x1127a6(0x39d)](),this[_0x1127a6(0x357)](),this[_0x1127a6(0x1b9)]();},Window_BattleStatus['prototype'][_0x3823ba(0x7cb)]=function(_0x13be04,_0x4c7e7f,_0x3a729b){const _0xc4d3c6=_0x3823ba,_0x55f3d5=VisuMZ[_0xc4d3c6(0x4f3)][_0xc4d3c6(0x242)]['BattleLayout'],_0x317494=this[_0xc4d3c6(0xa73)]();if(_0x317494==='xp'){if(_0xc4d3c6(0x580)===_0xc4d3c6(0xa3f))_0x10aca3&&(_0x380b16['_ptbActionCost']=_0x19997c[_0xc4d3c6(0xce1)]||{},_0xe821f['_ptbActionCost']['priority']=0x0),_0x26cf7e[_0xc4d3c6(0x167)](_0x34309e,_0xd370fd,_0x154ee7,_0x5e78c5);else{const _0x5b145d=_0x55f3d5[_0xc4d3c6(0x5be)];switch(_0x5b145d[_0xc4d3c6(0x8cf)]()[_0xc4d3c6(0xaf4)]()){case _0xc4d3c6(0x784):return _0x3a729b['height']-_0x4c7e7f[_0xc4d3c6(0x61a)][_0xc4d3c6(0xd6d)]/0x4;break;case'center':const _0x1c1c7b=_0x55f3d5['XPActorDefaultHeight'];return(_0x3a729b[_0xc4d3c6(0xd6d)]+(_0x4c7e7f[_0xc4d3c6(0xd6d)]||_0x1c1c7b))/0x2;break;case _0xc4d3c6(0x683):return 0x0;case _0xc4d3c6(0x450):default:return this[_0xc4d3c6(0x6c8)](_0x3a729b);break;}}}else{if(_0x317494==='portrait'){}}return _0x4c7e7f[_0xc4d3c6(0xd6d)];},Sprite_Name[_0x3823ba(0x8d6)]['bitmapHeight']=function(){return 0x24;},Sprite_Name[_0x3823ba(0x8d6)][_0x3823ba(0x632)]=function(){const _0x5107c5=_0x3823ba,_0x36e7d7=this['name'](),_0x197763=this[_0x5107c5(0xb3b)](),_0xa10cae=this[_0x5107c5(0x7dd)]();this[_0x5107c5(0x74d)](),this['bitmap']['clear'](),this[_0x5107c5(0x850)]['drawTextTopAligned'](_0x36e7d7,0x4,0x0,_0x197763,_0xa10cae,_0x5107c5(0x4e6));},Bitmap[_0x3823ba(0x8d6)]['drawTextTopAligned']=function(_0xd664ed,_0x27c48d,_0x3aabde,_0x574f9e,_0x18d5c2,_0x3895d1){const _0x125995=_0x3823ba;TextManager[_0x125995(0x9cd)]&&(_0xd664ed=TextManager[_0x125995(0x9cd)](_0xd664ed));const _0x246e8b=this[_0x125995(0x823)],_0x332e03=_0x246e8b[_0x125995(0x1c2)];_0x574f9e=_0x574f9e||0xffffffff;let _0x2d4005=_0x27c48d,_0xa4665f=Math[_0x125995(0x282)](_0x3aabde+0x18/0x2+this['fontSize']*0.35);_0x3895d1==='center'&&(_0x125995(0x181)!==_0x125995(0x181)?this[_0x125995(0x7a7)]=_0x160d3b:_0x2d4005+=_0x574f9e/0x2),_0x3895d1===_0x125995(0xc21)&&(_0x2d4005+=_0x574f9e),_0x246e8b[_0x125995(0xd88)](),_0x246e8b['font']=this[_0x125995(0x373)](),_0x246e8b['textAlign']=_0x3895d1,_0x246e8b[_0x125995(0x76b)]='alphabetic',_0x246e8b[_0x125995(0x1c2)]=0x1,this[_0x125995(0x9f0)](_0xd664ed,_0x2d4005,_0xa4665f,_0x574f9e),_0x246e8b[_0x125995(0x1c2)]=_0x332e03,this[_0x125995(0x1e6)](_0xd664ed,_0x2d4005,_0xa4665f,_0x574f9e),_0x246e8b[_0x125995(0x712)](),this[_0x125995(0x8e8)][_0x125995(0x456)]();},Window_BattleStatus['prototype'][_0x3823ba(0x6c8)]=function(_0x2a9530){return this['basicGaugesY'](_0x2a9530)-this['gaugeLineHeight']();},Window_BattleStatus['prototype'][_0x3823ba(0x1ad)]=function(_0x54a986){const _0x254cf5=_0x3823ba;if(!VisuMZ[_0x254cf5(0x4f3)][_0x254cf5(0x242)][_0x254cf5(0x735)]['ShowFacesListStyle'])return;const _0x69d96f=this[_0x254cf5(0x846)](_0x54a986),_0x1c60cd=this[_0x254cf5(0x153)](_0x54a986);_0x1c60cd['width']=ImageManager[_0x254cf5(0xb52)],_0x1c60cd[_0x254cf5(0xd6d)]-=0x2,this['drawActorFace'](_0x69d96f,_0x1c60cd['x']+0x1,_0x1c60cd['y']+0x1,_0x1c60cd['width'],_0x1c60cd[_0x254cf5(0xd6d)]);},Window_BattleStatus[_0x3823ba(0x8d6)][_0x3823ba(0xb41)]=function(_0x66ec19){const _0x5a2197=_0x3823ba,_0x1fb0ad=VisuMZ[_0x5a2197(0x4f3)][_0x5a2197(0x242)][_0x5a2197(0x735)],_0xd6880b=$dataSystem[_0x5a2197(0x6f8)]?0x4:0x3,_0x2a61aa=_0xd6880b*0x80+(_0xd6880b-0x1)*0x8+0x4,_0x4e13c8=this[_0x5a2197(0x846)](_0x66ec19),_0x2c0486=this[_0x5a2197(0x153)](_0x66ec19);let _0x180abe=_0x2c0486['x']+this['padding'];_0x1fb0ad['ShowFacesListStyle']?_0x180abe=_0x2c0486['x']+ImageManager[_0x5a2197(0xb52)]+0x8:'oXbku'!==_0x5a2197(0x1fe)?_0x180abe+=ImageManager['iconWidth']:this['drawItemStyleIconText'](_0x35e975);const _0x3bb3d2=Math['round'](Math[_0x5a2197(0x28a)](_0x2c0486['x']+_0x2c0486[_0x5a2197(0x204)]-_0x2a61aa,_0x180abe)),_0x5eac01=Math[_0x5a2197(0x282)](_0x2c0486['y']+(_0x2c0486[_0x5a2197(0xd6d)]-Sprite_Name[_0x5a2197(0x8d6)][_0x5a2197(0x7dd)]())/0x2),_0x554d62=Math[_0x5a2197(0x282)](_0x3bb3d2-ImageManager['iconWidth']/0x2-0x4),_0x47f61d=Math[_0x5a2197(0x282)](_0x2c0486['y']+(_0x2c0486['height']-ImageManager[_0x5a2197(0x935)])/0x2+ImageManager[_0x5a2197(0x935)]/0x2);let _0x228041=_0x3bb3d2+0x88;const _0xc07a66=_0x5eac01;this[_0x5a2197(0xd71)](_0x4e13c8,_0x3bb3d2-0x4+(_0x1fb0ad[_0x5a2197(0xa42)]||0x0),_0x5eac01+(_0x1fb0ad[_0x5a2197(0xabb)]||0x0)),this[_0x5a2197(0x9b2)](_0x4e13c8,_0x3bb3d2+(_0x1fb0ad[_0x5a2197(0x972)]||0x0),_0x5eac01+(_0x1fb0ad[_0x5a2197(0x37b)]||0x0)),this[_0x5a2197(0x520)](_0x4e13c8,_0x554d62+(_0x1fb0ad[_0x5a2197(0xa24)]||0x0),_0x47f61d+(_0x1fb0ad[_0x5a2197(0x254)]||0x0)),this['placeGauge'](_0x4e13c8,'hp',_0x228041+0x88*0x0+(_0x1fb0ad[_0x5a2197(0xd5e)]||0x0),_0xc07a66+(_0x1fb0ad[_0x5a2197(0x692)]||0x0)),this[_0x5a2197(0x2f4)](_0x4e13c8,'mp',_0x228041+0x88*0x1+(_0x1fb0ad[_0x5a2197(0x7f5)]||0x0),_0xc07a66+(_0x1fb0ad[_0x5a2197(0x18e)]||0x0)),$dataSystem['optDisplayTp']&&this[_0x5a2197(0x2f4)](_0x4e13c8,'tp',_0x228041+0x88*0x2+(_0x1fb0ad[_0x5a2197(0x3c1)]||0x0),_0xc07a66+(_0x1fb0ad[_0x5a2197(0xc9e)]||0x0));},Window_BattleStatus[_0x3823ba(0x8d6)]['drawItemImageXPStyle']=function(_0x38e7df){const _0x26944c=_0x3823ba;if(!$gameSystem['isSideView']())return;VisuMZ[_0x26944c(0x4f3)][_0x26944c(0x23f)][_0x26944c(0x162)](this,_0x38e7df);},Window_BattleStatus['prototype'][_0x3823ba(0x950)]=function(_0x4b6fd8){const _0x95b64a=_0x3823ba,_0x2bd7ab=VisuMZ[_0x95b64a(0x4f3)][_0x95b64a(0x242)][_0x95b64a(0x735)],_0x5a08d1=this[_0x95b64a(0x846)](_0x4b6fd8),_0x236adb=this['itemRect'](_0x4b6fd8),_0x230bbe=Math[_0x95b64a(0x282)](_0x236adb['x']+(_0x236adb[_0x95b64a(0x204)]-0x80)/0x2),_0x3e9f6e=this[_0x95b64a(0x6c8)](_0x236adb);let _0x5a3bf2=_0x230bbe-ImageManager[_0x95b64a(0x4d6)]/0x2-0x4,_0x28f58e=_0x3e9f6e+ImageManager[_0x95b64a(0x935)]/0x2;_0x5a3bf2-ImageManager[_0x95b64a(0x4d6)]/0x2<_0x236adb['x']&&(_0x95b64a(0x2d0)!==_0x95b64a(0x2d0)?(_0x2b9608+=_0x46bda5,_0x40d8b6+=_0x43533e):(_0x5a3bf2=_0x230bbe+ImageManager[_0x95b64a(0x4d6)]/0x2-0x4,_0x28f58e=_0x3e9f6e-ImageManager['iconHeight']/0x2));const _0x1a198c=_0x230bbe,_0x27eba7=this[_0x95b64a(0x964)](_0x236adb);this['placeTimeGauge'](_0x5a08d1,_0x230bbe+(_0x2bd7ab[_0x95b64a(0xa42)]||0x0),_0x3e9f6e+(_0x2bd7ab[_0x95b64a(0xabb)]||0x0)),this[_0x95b64a(0x9b2)](_0x5a08d1,_0x230bbe+(_0x2bd7ab['NameOffsetX']||0x0),_0x3e9f6e+(_0x2bd7ab[_0x95b64a(0x37b)]||0x0)),this[_0x95b64a(0x520)](_0x5a08d1,_0x5a3bf2+(_0x2bd7ab['StateIconOffsetX']||0x0),_0x28f58e+(_0x2bd7ab['StateIconOffsetY']||0x0)),this[_0x95b64a(0x2f4)](_0x5a08d1,'hp',_0x1a198c+(_0x2bd7ab[_0x95b64a(0xd5e)]||0x0),_0x27eba7+(_0x2bd7ab[_0x95b64a(0x692)]||0x0)),this['placeGauge'](_0x5a08d1,'mp',_0x1a198c+(_0x2bd7ab[_0x95b64a(0x7f5)]||0x0),_0x27eba7+this[_0x95b64a(0x164)]()+(_0x2bd7ab[_0x95b64a(0x18e)]||0x0));if($dataSystem[_0x95b64a(0x6f8)]){if('NRNnP'==='eJFlc'){if(!this[_0x95b64a(0x820)])return;if(!this[_0x95b64a(0x672)])return;const _0x20a9c9=_0x10eabe[_0x95b64a(0xa8e)]?this[_0x95b64a(0x820)]['x']:0x0,_0x5f2f31=_0x2658d6[_0x95b64a(0xa8e)]?this['_damageContainer']['y']:0x0,_0x245e88=_0x51dbae[_0x95b64a(0x29c)]?this[_0x95b64a(0xd77)]['x']:0x0,_0x31098e=_0x366b24[_0x95b64a(0x29c)]?this['_battleField']['y']:0x0;this[_0x95b64a(0x672)]['x']=_0x20a9c9+_0x245e88,this[_0x95b64a(0x672)]['y']=_0x5f2f31+_0x31098e;}else this['placeGauge'](_0x5a08d1,'tp',_0x1a198c+(_0x2bd7ab[_0x95b64a(0x3c1)]||0x0),_0x27eba7+this[_0x95b64a(0x164)]()*0x2+(_0x2bd7ab[_0x95b64a(0xc9e)]||0x0));}},Window_BattleStatus[_0x3823ba(0x8d6)]['showPortraits']=function(_0x516833){const _0x3856a1=_0x3823ba;if(!VisuMZ[_0x3856a1(0x4f3)]['Settings'][_0x3856a1(0x735)][_0x3856a1(0x9b1)])return![];if(_0x516833[_0x3856a1(0xce8)]())return!![];return Imported[_0x3856a1(0x72e)]&&_0x516833[_0x3856a1(0x3da)]();},Game_Actor[_0x3823ba(0x8d6)][_0x3823ba(0x76f)]=function(){const _0x380719=_0x3823ba;if(this[_0x380719(0x846)]()[_0x380719(0x920)]['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i))return _0x380719(0x4aa)!=='HDYci'?Number(RegExp['$1']):_0x43d0d0[_0x380719(0x4f3)][_0x380719(0x242)]['AutoBattle']['AutoBattleRect'][_0x380719(0x162)](this);else{if(this[_0x380719(0x846)]()['note'][_0x380719(0xd57)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);}return 0x0;},Game_Actor[_0x3823ba(0x8d6)][_0x3823ba(0x1c8)]=function(){const _0x1d2aa6=_0x3823ba;if(this['actor']()[_0x1d2aa6(0x920)][_0x1d2aa6(0xd57)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i)){if('LJRmb'!==_0x1d2aa6(0xad9))return Number(RegExp['$1']);else{const _0x48cf09=_0x4c4c33[_0x1d2aa6(0xa5b)],_0x33c436=this[_0x1d2aa6(0x720)](0x1,!![]);let _0x18dfe8=_0x414f94?_0xdad4dc[_0x1d2aa6(0xc13)]-_0x48cf09:0x0;_0x18dfe8+=_0x857dc1?_0x43c162[_0x1d2aa6(0x991)]:_0x2110a7[_0x1d2aa6(0x62f)];const _0x243f4f=[_0x1d2aa6(0x5ef)][_0x1d2aa6(0x97e)](this[_0x1d2aa6(0xa73)]())?0x0:this[_0x1d2aa6(0x264)][_0x1d2aa6(0xd6d)];let _0x53a7b6=_0x266e2d['boxHeight']-_0x243f4f-_0x33c436;return _0x53a7b6+=_0x271787?_0x1baedc[_0x1d2aa6(0xba9)]:_0x1081dd['ENEMY_OFFSET_Y'],new _0x4d1ade(_0x18dfe8,_0x53a7b6,_0x48cf09,_0x33c436);}}else{if(this[_0x1d2aa6(0x846)]()[_0x1d2aa6(0x920)][_0x1d2aa6(0xd57)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$2']);}return 0x0;},Window_BattleStatus['prototype'][_0x3823ba(0x8bf)]=function(_0x4565c6){const _0x244efd=_0x3823ba,_0x26cddd=this['actor'](_0x4565c6);if(this['showPortraits'](_0x26cddd)){const _0x4e9ac2=_0x244efd(0x197)['format'](_0x26cddd[_0x244efd(0x5bd)]()),_0xf115d1=this[_0x244efd(0x285)](_0x4e9ac2,Sprite),_0x4dc03d=_0x26cddd['getBattlePortraitFilename']();if(_0x4dc03d!=='')_0xf115d1[_0x244efd(0x850)]=ImageManager[_0x244efd(0x827)](_0x4dc03d);else{if(_0x244efd(0xa16)!==_0x244efd(0xa16)){if(!_0x52e224['isSceneBattle']())return;_0x4c0046['ConvertParams'](_0x184f4f,_0xcf34b3);const _0x1b6890=_0x32756a['getLastPluginCommandInterpreter'](),_0x4837d2=_0x4df795['CreateActionSequenceTargets'](_0x5d4c3a[_0x244efd(0xad2)]),_0x1fdfb5=_0x12109c[_0x244efd(0x1dd)],_0x1b5152=_0x4cd5a0[_0x244efd(0x723)];if(!_0x1b6890)return;_0x9fab54[_0x244efd(0x8e9)](_0x4837d2,_0x1fdfb5,_0x1b5152);if(_0x6b8d37[_0x244efd(0xa29)])_0x1b6890[_0x244efd(0xab0)]('battleAnimation');}else _0xf115d1[_0x244efd(0x850)]=ImageManager['_emptyBitmap'];}const _0x3f997a=this[_0x244efd(0x153)](_0x4565c6);_0xf115d1[_0x244efd(0xcef)]['x']=0.5,_0xf115d1[_0x244efd(0xcef)]['y']=0x1;let _0x222e6a=Math[_0x244efd(0x282)](_0x3f997a['x']+_0x3f997a[_0x244efd(0x204)]/0x2)+this[_0x244efd(0x3ee)];_0x222e6a+=_0x26cddd[_0x244efd(0x76f)]();let _0x3b59b2=Math[_0x244efd(0x282)](this[_0x244efd(0xd6d)]);_0x3b59b2+=_0x26cddd['getBattlePortraitOffsetY'](),_0xf115d1[_0x244efd(0x239)](_0x222e6a,_0x3b59b2);const _0x3f8ea0=VisuMZ[_0x244efd(0x4f3)]['Settings'][_0x244efd(0x735)][_0x244efd(0x5c3)];_0xf115d1[_0x244efd(0x6cc)]['x']=_0x3f8ea0,_0xf115d1[_0x244efd(0x6cc)]['y']=_0x3f8ea0,_0xf115d1[_0x244efd(0x39d)]();}else{const _0x43ffd6=this[_0x244efd(0x42c)](_0x4565c6);this[_0x244efd(0x82b)](_0x26cddd,_0x43ffd6['x'],_0x43ffd6['y'],_0x43ffd6[_0x244efd(0x204)],_0x43ffd6[_0x244efd(0xd6d)]);}},Window_BattleStatus[_0x3823ba(0x8d6)]['createInnerPortrait']=function(_0x16296b,_0x2eff9e){const _0x187efd=_0x3823ba,_0xf0d5a0=this[_0x187efd(0xbfb)];if(_0xf0d5a0[_0x16296b]){if('dcuEK'!==_0x187efd(0x9d5))_0x4c3170['BattleCore'][_0x187efd(0x814)]['call'](this),this[_0x187efd(0x6ab)](),this[_0x187efd(0xb8d)]();else return _0xf0d5a0[_0x16296b];}else{if('lKbpk'==='lKbpk'){const _0x26a9e9=new _0x2eff9e();return _0xf0d5a0[_0x16296b]=_0x26a9e9,this[_0x187efd(0x959)](_0x26a9e9),this[_0x187efd(0x959)](this[_0x187efd(0x717)]),_0x26a9e9;}else _0x51c318=_0x58807d+_0x572b44[_0x187efd(0x4d6)]/0x2-0x4,_0x366676=_0x161eb9-_0x491350[_0x187efd(0x935)]/0x2;}},Window_BattleStatus[_0x3823ba(0x8d6)][_0x3823ba(0x831)]=function(){const _0x524b73=_0x3823ba;this[_0x524b73(0x794)](),this[_0x524b73(0x9ca)](),Window_StatusBase['prototype'][_0x524b73(0x831)][_0x524b73(0x162)](this),this[_0x524b73(0x9d1)]();},Window_BattleStatus['prototype']['_createCursorArea']=function(){const _0x5c0571=_0x3823ba;this['_cursorArea']=new Sprite(),this[_0x5c0571(0x717)][_0x5c0571(0x771)]=[new PIXI[(_0x5c0571(0x771))][(_0x5c0571(0x88e))]()],this['_cursorArea']['filterArea']=new Rectangle(),this['_cursorArea'][_0x5c0571(0x239)](this[_0x5c0571(0x5ca)],this[_0x5c0571(0x5ca)]),this[_0x5c0571(0x538)](this[_0x5c0571(0x717)]);},Window_BattleStatus[_0x3823ba(0x8d6)][_0x3823ba(0x9ca)]=function(){const _0x3c146f=_0x3823ba;this[_0x3c146f(0x3f8)]=new Sprite(),this[_0x3c146f(0x538)](this[_0x3c146f(0x3f8)]);},Window_BattleStatus[_0x3823ba(0x8d6)]['updateEffectsContainer']=function(){const _0x179ba2=_0x3823ba;this[_0x179ba2(0x3f8)]&&this[_0x179ba2(0x538)](this[_0x179ba2(0x3f8)]);},Window_BattleStatus['prototype'][_0x3823ba(0x9d1)]=function(){const _0x407cde=_0x3823ba;this[_0x407cde(0x820)]=new Sprite(),this[_0x407cde(0x538)](this['_damageContainer']);},Window_BattleStatus['prototype'][_0x3823ba(0xcf0)]=function(){const _0x860aac=_0x3823ba;this['_cursorSprite']=new Sprite();for(let _0x161896=0x0;_0x161896<0x9;_0x161896++){_0x860aac(0xc25)===_0x860aac(0xc25)?this[_0x860aac(0xc7d)][_0x860aac(0x538)](new Sprite()):this[_0x860aac(0xa2c)]=0x0;}this[_0x860aac(0x717)][_0x860aac(0x538)](this[_0x860aac(0xc7d)]);},Window_BattleStatus[_0x3823ba(0x8d6)][_0x3823ba(0xce2)]=function(){const _0x324a38=_0x3823ba;Window_StatusBase[_0x324a38(0x8d6)]['_updateClientArea']['call'](this),this['_updateCursorArea']();},Window_BattleStatus[_0x3823ba(0x8d6)][_0x3823ba(0xb2c)]=function(){const _0x51a3eb=_0x3823ba,_0x289551=this[_0x51a3eb(0x5ca)];this[_0x51a3eb(0x717)][_0x51a3eb(0x239)](_0x289551,_0x289551),this[_0x51a3eb(0x717)]['x']=_0x289551-this['origin']['x'],this[_0x51a3eb(0x717)]['y']=_0x289551-this[_0x51a3eb(0x863)]['y'];if(this[_0x51a3eb(0x9ac)]>0x0&&this[_0x51a3eb(0x7e8)]>0x0){if(_0x51a3eb(0x3d5)!==_0x51a3eb(0x8de))this[_0x51a3eb(0x717)][_0x51a3eb(0x425)]=this[_0x51a3eb(0xa82)]();else{if(!this[_0x51a3eb(0x1f8)])return;if(!this[_0x51a3eb(0x61a)])return;this['updateShadowVisibility'](),this['updateShadowPosition']();}}else{if('UdVag'===_0x51a3eb(0x4e5))this[_0x51a3eb(0x717)][_0x51a3eb(0x425)]=![];else return;}},Window_BattleStatus[_0x3823ba(0x8d6)]['_updateFilterArea']=function(){const _0x52c205=_0x3823ba;Window_StatusBase['prototype'][_0x52c205(0xd4a)][_0x52c205(0x162)](this),this[_0x52c205(0x8c9)]();},Window_BattleStatus['prototype']['_updateCursorFilterArea']=function(){const _0xef3878=_0x3823ba,_0x1a4248=this[_0xef3878(0x717)][_0xef3878(0xc70)][_0xef3878(0x5b1)](new Point(0x0,0x0)),_0x55f680=this[_0xef3878(0x717)][_0xef3878(0x799)];_0x55f680['x']=_0x1a4248['x']+this['origin']['x'],_0x55f680['y']=_0x1a4248['y']+this['origin']['y'],_0x55f680['width']=this['innerWidth'],_0x55f680[_0xef3878(0xd6d)]=this[_0xef3878(0x7e8)];},Window_BattleStatus[_0x3823ba(0x8d6)][_0x3823ba(0x761)]=function(_0xf0551a){const _0x374bfa=_0x3823ba;if(this[_0x374bfa(0xa73)]()!=='portrait')return;this[_0x374bfa(0x8bf)](_0xf0551a['index']());},Window_BattleStatus[_0x3823ba(0x8d6)]['addDamageSprite']=function(_0xf636,_0x21806d){const _0x378735=_0x3823ba;if(!this['_damageContainer'])return;if(!_0xf636)return;if(!_0x21806d)return;const _0x1d0871=this['itemRect'](_0x21806d[_0x378735(0xb0f)]());_0x1d0871['x']+=_0x1d0871['width']/0x2+this['padding'],_0xf636['x']=_0x1d0871['x'],_0xf636['y']=_0x1d0871['y'],this[_0x378735(0x820)][_0x378735(0x538)](_0xf636);},Window_BattleStatus[_0x3823ba(0x8d6)][_0x3823ba(0x762)]=function(_0x5726f6){const _0x54b13e=_0x3823ba;if(!this[_0x54b13e(0x820)])return;if(!_0x5726f6)return;this[_0x54b13e(0x820)]['removeChild'](_0x5726f6);},Window_BattleStatus[_0x3823ba(0x8d6)][_0x3823ba(0x47c)]=function(){const _0x2d2d79=_0x3823ba;if(!this['isBorderStylePortraitShown']())return;if(!this[_0x2d2d79(0x220)])this[_0x2d2d79(0xa79)]();this[_0x2d2d79(0x4b2)](),this[_0x2d2d79(0x80c)]();},Window_BattleStatus[_0x3823ba(0x8d6)][_0x3823ba(0x53a)]=function(){const _0x1bfb18=_0x3823ba;if(this[_0x1bfb18(0x786)]!==Window_BattleStatus)return![];if(!SceneManager[_0x1bfb18(0xbc6)]())return![];return VisuMZ[_0x1bfb18(0x4f3)]['Settings'][_0x1bfb18(0x735)][_0x1bfb18(0xd35)];},Window_BattleStatus['prototype'][_0x3823ba(0xa79)]=function(){const _0x515143=_0x3823ba;this[_0x515143(0x220)]=new Sprite();const _0xf67d3=SceneManager['_scene'],_0x34273d=_0xf67d3[_0x515143(0x394)][_0x515143(0x122)](_0xf67d3['_windowLayer']);_0xf67d3[_0x515143(0x7d0)](this[_0x515143(0x220)],_0x34273d),this[_0x515143(0x220)][_0x515143(0xcef)]['x']=0.5,this[_0x515143(0x220)][_0x515143(0xcef)]['y']=0x1;const _0x142992=VisuMZ[_0x515143(0x4f3)]['Settings'][_0x515143(0x735)][_0x515143(0x747)];this[_0x515143(0x220)][_0x515143(0x6cc)]['x']=_0x142992,this[_0x515143(0x220)][_0x515143(0x6cc)]['y']=_0x142992,this['_borderPortraitSprite']['y']=this['y']+this[_0x515143(0xd6d)],this['_borderPortraitDuration']=0x0;},Window_BattleStatus[_0x3823ba(0x8d6)][_0x3823ba(0x671)]=function(){return BattleManager['isInputting']();},Window_BattleStatus[_0x3823ba(0x8d6)][_0x3823ba(0x4b2)]=function(){const _0x4e75f7=_0x3823ba;this[_0x4e75f7(0x220)]['visible']=this[_0x4e75f7(0x671)]();const _0x17171e=BattleManager['actor'](),_0x20cc60=_0x17171e?_0x17171e['getBattlePortraitFilename']()||'':'';if(_0x17171e===this['_borderPortraitSprite']['actor']&&_0x20cc60===this[_0x4e75f7(0x220)][_0x4e75f7(0xbfa)])return;this[_0x4e75f7(0x220)][_0x4e75f7(0x846)]=_0x17171e||this[_0x4e75f7(0x220)][_0x4e75f7(0x846)],this[_0x4e75f7(0x220)][_0x4e75f7(0xbfa)]=_0x20cc60;if(!_0x17171e){if('aFjni'===_0x4e75f7(0x539)){if(!_0x149098[_0x4e75f7(0xbc6)]())return;if(!_0x1b224c['VisuMZ_3_ActSeqCamera'])return;_0x4681eb[_0x4e75f7(0xb9f)](_0x169c39,_0x4395a3);const _0x2bb5f0=_0x439c28[_0x4e75f7(0xaa7)](),_0x4eedd4=_0xb8cde1[_0x4e75f7(0x4fa)];_0x512222['setBattleCameraOffset'](_0x5e3d70[_0x4e75f7(0x24e)],_0x3f48df[_0x4e75f7(0x615)],_0x13ee83[_0x4e75f7(0x438)],_0x15c2fe['EasingType']);if(_0x4eedd4)_0x2bb5f0['setWaitMode'](_0x4e75f7(0xbd6));}else return;}else{if(_0x20cc60===''){if('nxtHJ'!=='nxtHJ')this[_0x4e75f7(0x780)]=0x0;else{this[_0x4e75f7(0x220)][_0x4e75f7(0x850)]=ImageManager[_0x4e75f7(0x6c6)],this[_0x4e75f7(0x220)][_0x4e75f7(0xbfa)]='';return;}}else{if(_0x4e75f7(0xa69)===_0x4e75f7(0xa69)){const _0x155f91=ImageManager[_0x4e75f7(0x827)](_0x20cc60);this[_0x4e75f7(0x220)][_0x4e75f7(0xa2c)]=0x0,_0x155f91[_0x4e75f7(0x2b7)](this[_0x4e75f7(0xa98)][_0x4e75f7(0x343)](this,_0x155f91));}else{if(!_0x4c1981[_0x4e75f7(0xbc6)]())return;if(!_0x4e2147[_0x4e75f7(0x29c)])return;_0x33e671[_0x4e75f7(0xb9f)](_0x37e1bf,_0x452e54);const _0x1a600a=_0xa355f[_0x4e75f7(0xaa7)](),_0x3fefbb=_0x1e2b96[_0x4e75f7(0xd3d)];if(!_0x1a600a)return;_0x4ddc0d[_0x4e75f7(0x5bc)](_0x3ea20c[_0x4e75f7(0x348)],_0x5810f0[_0x4e75f7(0x438)],_0x35a155['EasingType']);if(_0x3fefbb)_0x1a600a[_0x4e75f7(0xab0)](_0x4e75f7(0x93c));}}}},Window_BattleStatus[_0x3823ba(0x8d6)]['processBorderActor']=function(_0x1d6692){const _0x518274=_0x3823ba;this[_0x518274(0x9a7)]=0x14,this[_0x518274(0x220)][_0x518274(0x850)]=_0x1d6692;if(SceneManager['_scene'][_0x518274(0x361)]())this[_0x518274(0x220)]['x']=0x0,this['_borderPortraitTargetX']=Math['ceil'](_0x1d6692[_0x518274(0x204)]/0x2);else{if(_0x518274(0x507)!==_0x518274(0x507)){const _0x5e95e8=this[_0x518274(0xb1e)](),_0x2a4697=_0x308f4d[_0x518274(0x4f3)]['Settings']['ActorCmd'][_0x518274(0xc75)],_0x8e07b1=_0x5e95e8===_0x518274(0x3e1)?_0x5001d8[_0x518274(0x733)]:_0x518274(0xaa2)[_0x518274(0xabf)](_0x2a4697,_0xf2aceb[_0x518274(0x733)]),_0x195e0b=this[_0x518274(0x203)]();this[_0x518274(0xac9)](_0x8e07b1,_0x518274(0x733),_0x195e0b);}else this[_0x518274(0x220)]['x']=this[_0x518274(0x204)],this['_borderPortraitTargetX']=this[_0x518274(0x204)]*0x3/0x4;}this[_0x518274(0x220)]['opacity']=0x0,this[_0x518274(0x220)]['y']=this['y']+this[_0x518274(0xd6d)];const _0x16f417=BattleManager['actor']();_0x16f417&&(this[_0x518274(0xb7f)]+=_0x16f417[_0x518274(0x76f)](),this['_borderPortraitSprite']['y']+=_0x16f417[_0x518274(0x1c8)]());},Window_BattleStatus['prototype'][_0x3823ba(0x80c)]=function(){const _0x4cf162=_0x3823ba;if(this[_0x4cf162(0x9a7)]>0x0){const _0x33f052=this['_borderPortraitDuration'],_0x27147f=this[_0x4cf162(0x220)];_0x27147f['x']=(_0x27147f['x']*(_0x33f052-0x1)+this[_0x4cf162(0xb7f)])/_0x33f052,_0x27147f[_0x4cf162(0xa2c)]=(_0x27147f[_0x4cf162(0xa2c)]*(_0x33f052-0x1)+0xff)/_0x33f052,this['_borderPortraitDuration']--;}},Window_BattleStatus[_0x3823ba(0x8d6)]['updateEffectContainers']=function(){const _0x4eb861=_0x3823ba;return;this[_0x4eb861(0x3f8)]&&('BiCLE'===_0x4eb861(0xa5c)?(this[_0x4eb861(0x3f8)]['x']=this['x'],this[_0x4eb861(0x3f8)]['y']=this['y']):(_0x4d2dfe=_0x4f6840(_0x962ad6['$1']),_0x5f05e3--)),this[_0x4eb861(0x820)]&&(this['_damageContainer']['x']=this['x'],this[_0x4eb861(0x820)]['y']=this['y']);},Window_BattleStatus[_0x3823ba(0x8d6)][_0x3823ba(0xbf8)]=function(){const _0x409432=_0x3823ba,_0x173d07=VisuMZ[_0x409432(0x4f3)][_0x409432(0x242)][_0x409432(0x735)];if(_0x173d07[_0x409432(0x857)]){if('WNDRa'===_0x409432(0x26f)){const _0x5cecf2=new Sprite();_0x5cecf2['bitmap']=ImageManager['loadSystem'](_0x173d07[_0x409432(0x857)]),_0x5cecf2['x']=_0x173d07[_0x409432(0x211)]||0x0,_0x5cecf2['y']=_0x173d07['StatusWindowAttachmentBackOffsetY']||0x0,this['addChildToBack'](_0x5cecf2),this[_0x409432(0xad4)]=_0x5cecf2;}else{if(!this[_0x409432(0x61a)])return;if(this[_0x409432(0x6b7)]&&this['_battler'][_0x409432(0x586)]()){const _0x1a4d90=this[_0x409432(0x61a)][_0x409432(0x850)];this[_0x409432(0x61a)][_0x409432(0x502)](0x0,0x0,_0x1a4d90[_0x409432(0x204)],_0x1a4d90[_0x409432(0xd6d)]);}else this[_0x409432(0x61a)][_0x409432(0x502)](0x0,0x0,0x0,0x0);}}if(_0x173d07[_0x409432(0x1db)]){if(_0x409432(0x5dc)==='TaQON')_0x42cee8[_0x409432(0x993)](_0x157858);else{const _0x328427=new Sprite();_0x328427[_0x409432(0x850)]=ImageManager[_0x409432(0x976)](_0x173d07['StatusWindowAttachmentFront']),_0x328427['x']=_0x173d07[_0x409432(0x666)]||0x0,_0x328427['y']=_0x173d07['StatusWindowAttachmentFrontOffsetY']||0x0,this['addChild'](_0x328427),this['_frontAttachmentSprite']=_0x328427;}}},Window_BattleStatus[_0x3823ba(0x8d6)]['updateAttachmentSprites']=function(){const _0x4cb439=_0x3823ba;this[_0x4cb439(0x148)]&&this[_0x4cb439(0x538)](this[_0x4cb439(0x148)]),this[_0x4cb439(0xad4)]&&this[_0x4cb439(0x959)](this[_0x4cb439(0xad4)]);},Window_BattleActor[_0x3823ba(0x8d6)][_0x3823ba(0x47a)]=function(){const _0x26e4a7=_0x3823ba;return this[_0x26e4a7(0x44e)]();},Window_BattleActor['prototype'][_0x3823ba(0x44e)]=function(){const _0x30b40c=_0x3823ba,_0x130e63=BattleManager[_0x30b40c(0x841)]();if(!_0x130e63)return!![];if(!_0x130e63[_0x30b40c(0x733)]())return!![];const _0x6da815=this[_0x30b40c(0x846)](this[_0x30b40c(0xb0f)]()),_0x174aa1=_0x130e63['item']()[_0x30b40c(0x920)];if(_0x130e63[_0x30b40c(0x2a0)]()){if(_0x30b40c(0xac3)==='agKOY'){if(_0x6da815===BattleManager[_0x30b40c(0x846)]())return![];}else this[_0x30b40c(0x9e4)]=_0x464f8f,this[_0x30b40c(0xbf1)]={};}if(_0x130e63[_0x30b40c(0x766)]()){if(!_0x6da815[_0x30b40c(0x3b8)]())return![];}if(_0x130e63[_0x30b40c(0x7e4)]()){if(_0x30b40c(0xc73)==='MHYhJ'){if(!_0x6da815[_0x30b40c(0x8ed)]())return![];}else _0x358e39-=_0x1a33a1['mainSpriteHeight']();}return!![];},Window_BattleActor[_0x3823ba(0x8d6)][_0x3823ba(0x175)]=function(_0x441f10){const _0x406758=_0x3823ba;this[_0x406758(0x6b0)]=_0x441f10;},VisuMZ['BattleCore'][_0x3823ba(0x7ce)]=Window_BattleActor['prototype']['processTouch'],Window_BattleActor[_0x3823ba(0x8d6)][_0x3823ba(0xb33)]=function(){const _0x10a275=_0x3823ba;Window_BattleStatus['prototype'][_0x10a275(0xb33)][_0x10a275(0x162)](this);if(this['_enemyWindowMode']){if('adYtn'!==_0x10a275(0x578)){const _0x768268=_0x486eca[_0x10a275(0x4f3)]['Settings'][_0x10a275(0x735)];if(_0x768268[_0x10a275(0x206)])return;_0x417970['prototype'][_0x10a275(0x43d)]['call'](this,_0x87cede);}else this[_0x10a275(0xcf3)]();}else{if(_0x10a275(0x2dc)!==_0x10a275(0x2dc))return this[_0x10a275(0x6c3)]();else VisuMZ[_0x10a275(0x4f3)][_0x10a275(0x7ce)][_0x10a275(0x162)](this);}},Window_BattleActor['prototype'][_0x3823ba(0xcf3)]=function(){const _0x21941b=_0x3823ba,_0x329f52=SceneManager[_0x21941b(0xaa3)]['_enemyWindow'];if(!_0x329f52)return;this[_0x21941b(0xcbf)]=![];const _0xde419a=this[_0x21941b(0x6b4)]();if(_0xde419a>=0x0){if('PCvPP'==='PCvPP'){this[_0x21941b(0x97d)](_0xde419a);if(TouchInput[_0x21941b(0x18a)]()){const _0x8728ea=$gameParty[_0x21941b(0x292)]()[_0xde419a],_0x1b9c5f=_0x329f52[_0x21941b(0xda0)][_0x21941b(0x122)](_0x8728ea);_0x1b9c5f>=0x0&&(_0x21941b(0x500)!=='rUSAO'?_0x1307ad=this['_baseLineStack'][this[_0x21941b(0x746)][_0x21941b(0xb23)]-0x1]:(_0x329f52[_0x21941b(0x97d)](_0x1b9c5f),_0x329f52[_0x21941b(0x27d)]()));}}else return!![];}},Window_BattleActor[_0x3823ba(0x8d6)]['_makeCursorAlpha']=function(){const _0x2baf33=_0x3823ba;this['_enemyWindowMode']&&(_0x2baf33(0x56a)!=='ugoyx'?(this['_windowLayer']['x']=_0x4fc672['width']*0xa,this[_0x2baf33(0x837)]['y']=_0x59577d[_0x2baf33(0xd6d)]*0xa):(this['_animationCount']++,this['active']=!![]));const _0x4a44b3=Window_BattleStatus[_0x2baf33(0x8d6)][_0x2baf33(0x375)][_0x2baf33(0x162)](this);if(this['_enemyWindowMode']){if(_0x2baf33(0x915)!==_0x2baf33(0x915))return!this[_0x2baf33(0xc78)]()&&!this[_0x2baf33(0x6a4)]();else this['active']=![];}return _0x4a44b3;},VisuMZ['BattleCore'][_0x3823ba(0xcaf)]=Window_BattleActor[_0x3823ba(0x8d6)][_0x3823ba(0x39d)],Window_BattleActor['prototype'][_0x3823ba(0x39d)]=function(){const _0x27ea72=_0x3823ba;VisuMZ[_0x27ea72(0x4f3)][_0x27ea72(0xcaf)][_0x27ea72(0x162)](this);const _0x3b6f95=BattleManager['inputtingAction']();if(_0x3b6f95){const _0x1e1002=$gameParty[_0x27ea72(0xd31)]();_0x3b6f95['canSingleOrMultipleSelect']()&&_0x1e1002[_0x27ea72(0xb23)]>0x1&&this['setHandler']('pagedown',this[_0x27ea72(0xb80)][_0x27ea72(0x343)](this));}},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0xd2d)]=Window_BattleActor[_0x3823ba(0x8d6)][_0x3823ba(0x423)],Window_BattleActor[_0x3823ba(0x8d6)]['hide']=function(){const _0x4e6d27=_0x3823ba;VisuMZ['BattleCore'][_0x4e6d27(0xd2d)][_0x4e6d27(0x162)](this),delete this[_0x4e6d27(0x431)]['pageup'],delete this['_handlers'][_0x4e6d27(0x3e5)];},Window_BattleActor[_0x3823ba(0x8d6)][_0x3823ba(0xb80)]=function(){const _0x27710e=_0x3823ba,_0x5f4322=BattleManager[_0x27710e(0x841)]();if(_0x5f4322)_0x5f4322['setTargetBattlerKey'](_0x27710e(0x4ab));this[_0x27710e(0x27d)]();},VisuMZ['BattleCore']['Window_BattleEnemy_initialize']=Window_BattleEnemy[_0x3823ba(0x8d6)][_0x3823ba(0xc06)],Window_BattleEnemy[_0x3823ba(0x8d6)][_0x3823ba(0xc06)]=function(_0x5eda6c){const _0x5863e6=_0x3823ba;this[_0x5863e6(0x17d)]=null,VisuMZ['BattleCore'][_0x5863e6(0xd82)]['call'](this,_0x5eda6c);if(Imported[_0x5863e6(0x3b6)]){if(_0x5863e6(0x878)===_0x5863e6(0x878)){if(VisuMZ[_0x5863e6(0x1e4)]['version']<1.12){let _0x14e41e='';_0x14e41e+='VisuMZ_2_AggroControlSystem\x20needs\x20to\x20be\x20updated\x20',_0x14e41e+=_0x5863e6(0x251),_0x14e41e+=_0x5863e6(0x34e),alert(_0x14e41e),SceneManager['exit']();}}else[0x6c,0x198][_0x5863e6(0x97e)](_0x1b6d11[_0x5863e6(0xcad)])&&(_0x7a8e41+='\x0a',_0x5bc6cd+=_0x4c3af7['parameters'][0x0]);}},Window_BattleEnemy[_0x3823ba(0x8d6)][_0x3823ba(0x7cf)]=function(){const _0x3b0840=_0x3823ba;return this[_0x3b0840(0x6db)]();},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x526)]=Window_BattleEnemy[_0x3823ba(0x8d6)]['show'],Window_BattleEnemy[_0x3823ba(0x8d6)][_0x3823ba(0x39d)]=function(){const _0x52bb17=_0x3823ba;VisuMZ['BattleCore'][_0x52bb17(0x526)][_0x52bb17(0x162)](this),this['y']=Graphics[_0x52bb17(0xd6d)]*0xa,this[_0x52bb17(0x390)]()&&this[_0x52bb17(0xa7c)]();},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x76c)]=Window_BattleEnemy['prototype']['hide'],Window_BattleEnemy['prototype'][_0x3823ba(0x423)]=function(){const _0x3489ef=_0x3823ba;VisuMZ[_0x3489ef(0x4f3)][_0x3489ef(0x76c)][_0x3489ef(0x162)](this),$gameParty['select'](null),delete this['_handlers'][_0x3489ef(0x1ca)],delete this[_0x3489ef(0x431)]['pagedown'];},Window_BattleEnemy[_0x3823ba(0x8d6)][_0x3823ba(0x41d)]=function(){const _0xc02a92=_0x3823ba;let _0x4fad2e=$gameTroop[_0xc02a92(0xd31)]();const _0x7581d0=BattleManager[_0xc02a92(0x841)]();if(_0x7581d0){_0x7581d0[_0xc02a92(0xb0a)]()&&_0x4fad2e[_0xc02a92(0xb23)]>0x1&&this['setHandler'](_0xc02a92(0x1ca),this[_0xc02a92(0xc53)][_0xc02a92(0x343)](this));if(_0x7581d0[_0xc02a92(0x7d5)]()){if(_0xc02a92(0x7b4)==='GKTVo'){const _0x525fb8=$gameParty[_0xc02a92(0xd31)]();_0x4fad2e=_0x4fad2e['concat'](_0x525fb8),_0x7581d0[_0xc02a92(0xb0a)]()&&_0x525fb8[_0xc02a92(0xb23)]>0x1&&this['setHandler'](_0xc02a92(0x3e5),this[_0xc02a92(0xb80)][_0xc02a92(0x343)](this));}else return _0x551af6[_0xc02a92(0x842)];}}return _0x4fad2e;},Window_BattleEnemy[_0x3823ba(0x8d6)][_0x3823ba(0x912)]=function(){const _0x55d9ba=_0x3823ba;this['_enemies']=this[_0x55d9ba(0x41d)](),this[_0x55d9ba(0xb25)](),Window_Selectable['prototype'][_0x55d9ba(0x912)][_0x55d9ba(0x162)](this);},Window_BattleEnemy[_0x3823ba(0x8d6)][_0x3823ba(0xb25)]=function(){const _0x49c27e=_0x3823ba;this[_0x49c27e(0xda0)][_0x49c27e(0x403)]((_0x55ee7b,_0xc006c0)=>{const _0x302b93=_0x49c27e;if(_0x55ee7b[_0x302b93(0x4e0)]()!==_0xc006c0[_0x302b93(0x4e0)]()){if(_0x55ee7b[_0x302b93(0x737)]())return-0x1;if(_0xc006c0[_0x302b93(0x737)]())return 0x1;}if(_0x55ee7b['isActor']()&&_0xc006c0[_0x302b93(0x4e0)]())return _0x55ee7b[_0x302b93(0xb0f)]()-_0xc006c0[_0x302b93(0xb0f)]();if(_0x55ee7b[_0x302b93(0x798)]()[_0x302b93(0x12d)]===_0xc006c0[_0x302b93(0x798)]()['_baseX']){if('yxiFJ'!==_0x302b93(0xb8c)){if(this[_0x302b93(0x733)]()['note'][_0x302b93(0xd57)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x48f11b=_0x313186(_0x5460cd['$1'])['toUpperCase']()[_0x302b93(0xaf4)]();return _0x48f11b;}return _0x302b93(0x754);}else return _0x55ee7b[_0x302b93(0x798)]()[_0x302b93(0xcf6)]-_0xc006c0['battler']()[_0x302b93(0xcf6)];}else return _0x55ee7b[_0x302b93(0x798)]()['_baseX']-_0xc006c0[_0x302b93(0x798)]()[_0x302b93(0x12d)];}),SceneManager['isBattleFlipped']()&&('nWKvo'===_0x49c27e(0x82f)?this['_cancelButton']['x']=-this[_0x49c27e(0x9bd)][_0x49c27e(0x204)]-0x4:this[_0x49c27e(0xda0)][_0x49c27e(0x625)]());},Window_BattleEnemy[_0x3823ba(0x8d6)]['autoSelect']=function(){const _0x24d693=_0x3823ba,_0x2c106f=VisuMZ[_0x24d693(0x4f3)][_0x24d693(0x242)]['Enemy'];if(_0x2c106f[_0x24d693(0x509)])this[_0x24d693(0x635)]();else{if(_0x24d693(0x17e)!==_0x24d693(0x77c))this[_0x24d693(0xc51)]();else{let _0x69bad9=_0x4326bf['x'],_0x24dabe=_0x1285f7['y'],_0xb39fcc=_0x3480e9[_0x24d693(0xd6d)],_0x3cfe99=_0x2c2e0f['_distortionSprite']['scale']['y'];_0x1a5137['x']=_0x530538[_0x24d693(0x12d)]+_0x4cd26c[_0x24d693(0x61f)](),_0xcc5cb4['y']=_0x8287e9[_0x24d693(0xcf6)]+_0x5508a0[_0x24d693(0x19a)](),_0x108a33['height']*=_0x3cfe99;let _0x239436=_0x379d68[_0x24d693(0x4f3)]['Sprite_Animation_targetSpritePosition']['call'](this,_0x259fc8);return _0x288964['x']=_0x69bad9,_0x24b4f0['y']=_0x24dabe,_0x5a311a[_0x24d693(0xd6d)]=_0xb39fcc,_0x239436;}}},Window_BattleEnemy[_0x3823ba(0x8d6)]['autoSelectLastSelected']=function(){const _0x2c4d8d=_0x3823ba,_0x40dc13=BattleManager[_0x2c4d8d(0x841)]();if(_0x40dc13&&_0x40dc13[_0x2c4d8d(0x7d5)]()){if(_0x40dc13[_0x2c4d8d(0x249)]()){if('HlaHO'!=='HlaHO')_0x1e7654[_0x2c4d8d(0x527)]['stbGainInstant'](_0x35a004);else{if(this[_0x2c4d8d(0x7f4)]&&this[_0x2c4d8d(0xda0)][_0x2c4d8d(0x97e)](this['_lastActor'])){const _0x34b7b4=this[_0x2c4d8d(0xda0)][_0x2c4d8d(0x122)](this[_0x2c4d8d(0x7f4)]);return this[_0x2c4d8d(0x7aa)](_0x34b7b4);}else{if('RXiCo'==='RXiCo')return this[_0x2c4d8d(0xc51)]();else{if(_0x274f09[_0x2c4d8d(0x4f3)][_0x2c4d8d(0x242)]['Enemy'][_0x2c4d8d(0xc5f)])return;this[_0x2c4d8d(0xd1e)]=new _0x167a39(),_0x59bc97[_0x2c4d8d(0xc4d)](this[_0x2c4d8d(0xd1e)]);for(const _0x49222a of this[_0x2c4d8d(0x940)]){const _0x4f6844=new _0x5d1b12();this[_0x2c4d8d(0xd1e)][_0x2c4d8d(0x538)](_0x4f6844),_0x4f6844[_0x2c4d8d(0x4a9)](_0x49222a);}}}}}}if(this[_0x2c4d8d(0x17d)]&&this[_0x2c4d8d(0xda0)][_0x2c4d8d(0x97e)](this[_0x2c4d8d(0x17d)])){const _0x42f3f2=this[_0x2c4d8d(0xda0)][_0x2c4d8d(0x122)](this[_0x2c4d8d(0x17d)]);this[_0x2c4d8d(0x7aa)](_0x42f3f2);}else this[_0x2c4d8d(0xc51)]();},Window_BattleEnemy[_0x3823ba(0x8d6)][_0x3823ba(0xc51)]=function(){const _0x519936=_0x3823ba,_0x572095=BattleManager['inputtingAction']();if(_0x572095&&_0x572095[_0x519936(0x7d5)]()){const _0x40aa65=$gameParty[_0x519936(0xd31)]()[0x0];let _0x471837=this['_enemies'][_0x519936(0x122)](_0x40aa65);const _0x33a1d5=_0x572095[_0x519936(0x733)]()[_0x519936(0x58f)];if(_0x33a1d5[_0x519936(0xd57)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i)){this[_0x519936(0x7aa)](_0x471837);return;}else{if(_0x33a1d5[_0x519936(0xd57)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i)){this[_0x519936(0x7aa)](_0x471837-0x1);return;}}}const _0x1177e1=VisuMZ[_0x519936(0x4f3)][_0x519936(0x242)]['Enemy'];let _0x55c849=![];if($gameSystem[_0x519936(0x839)]()){if('vFiyP'==='vInUE'){const _0xabbdfd=this[_0x519936(0xc87)]();if(_0xabbdfd['missed']||_0xabbdfd['evaded']){const _0x55b267=_0x55cb96[_0x519936(0x682)](_0xabbdfd);_0x55b267[_0x519936(0x560)]=![],_0x55b267[_0x519936(0x313)]=0x0,this['_damagePopupArray'][_0x519936(0x3d9)](_0x55b267);}if(_0xabbdfd[_0x519936(0x560)]){const _0x46f398=_0x1dd698[_0x519936(0x682)](_0xabbdfd);_0x46f398[_0x519936(0x922)]=![],_0x46f398[_0x519936(0xaea)]=![],_0x46f398[_0x519936(0x313)]=0x0,this['_damagePopupArray'][_0x519936(0x3d9)](_0x46f398);}if(_0xabbdfd[_0x519936(0x313)]!==0x0){const _0x3e05ce=_0x327b84[_0x519936(0x682)](_0xabbdfd);_0x3e05ce[_0x519936(0x922)]=![],_0x3e05ce['evaded']=![],_0x3e05ce[_0x519936(0x560)]=![],this[_0x519936(0x2e4)][_0x519936(0x3d9)](_0x3e05ce);}}else _0x55c849=_0x1177e1[_0x519936(0x574)];}else _0x519936(0x34d)!=='bRrAH'?_0x55c849=_0x1177e1[_0x519936(0x803)]:this[_0x519936(0xd09)]();this['forceSelect'](_0x55c849?this['maxItems']()-0x1:0x0);},Window_BattleEnemy['prototype']['callOkHandler']=function(){const _0x1fe767=_0x3823ba;Window_Selectable[_0x1fe767(0x8d6)][_0x1fe767(0x47b)][_0x1fe767(0x162)](this);if(this[_0x1fe767(0x634)]()[_0x1fe767(0x737)]())this['_lastEnemy']=this['enemy']();if(this[_0x1fe767(0x634)]()[_0x1fe767(0x4e0)]())this[_0x1fe767(0x7f4)]=this['enemy']();},Window_BattleEnemy[_0x3823ba(0x8d6)][_0x3823ba(0x97d)]=function(_0x356dc5){const _0x1c8719=_0x3823ba;Window_Selectable['prototype'][_0x1c8719(0x97d)][_0x1c8719(0x162)](this,_0x356dc5),$gameTroop[_0x1c8719(0x97d)](this[_0x1c8719(0x634)]()),$gameParty[_0x1c8719(0x97d)](this[_0x1c8719(0x634)]());if(!this['enemy']())return;if(this[_0x1c8719(0x390)]()){if(_0x1c8719(0x56d)!==_0x1c8719(0x830)){const _0x42245e=SceneManager[_0x1c8719(0xaa3)]['_actorWindow'];this[_0x1c8719(0x634)]()[_0x1c8719(0x4e0)]()?_0x42245e[_0x1c8719(0x97d)](this[_0x1c8719(0x634)]()[_0x1c8719(0xb0f)]()):'ylqxj'!==_0x1c8719(0x1a1)?_0x42245e[_0x1c8719(0x111)]():this[_0x1c8719(0xbdd)]('MP',_0x35f5c9,_0x2b5bb3['result']()['mpDamage']);}else this['requestMotion'](_0x1c8719(0x9e3));}},Window_BattleEnemy[_0x3823ba(0x8d6)]['meetsSelectFrontviewActorConditions']=function(){const _0x2051ed=_0x3823ba;if(!this['visible'])return![];if($gameSystem['isSideView']())return![];const _0x3ca74b=SceneManager[_0x2051ed(0xaa3)][_0x2051ed(0xa73)](),_0x182605=[_0x2051ed(0x4d8),_0x2051ed(0x934),'xp','portrait','border'];return _0x182605[_0x2051ed(0x97e)](_0x3ca74b);},Window_BattleEnemy[_0x3823ba(0x8d6)]['openBattleActorWindow']=function(){const _0x5ceb99=_0x3823ba,_0x2f8a5c=SceneManager[_0x5ceb99(0xaa3)][_0x5ceb99(0x5f2)];_0x2f8a5c[_0x5ceb99(0x39d)](),_0x2f8a5c['setEnemyWindowMode'](!![]),_0x2f8a5c[_0x5ceb99(0x912)](),_0x2f8a5c[_0x5ceb99(0x111)]();const _0x1e6f57=SceneManager['_scene'][_0x5ceb99(0xa73)](),_0x5ee392=['xp',_0x5ceb99(0x9e6),_0x5ceb99(0x43a)];if(_0x5ee392[_0x5ceb99(0x97e)](_0x1e6f57)){const _0x3752db=SceneManager[_0x5ceb99(0xaa3)][_0x5ceb99(0x264)];_0x3752db[_0x5ceb99(0x6cc)]['y']=0x0;}},Window_BattleEnemy[_0x3823ba(0x8d6)]['closeBattleActorWindow']=function(){const _0x3e863c=_0x3823ba,_0x2a8199=SceneManager[_0x3e863c(0xaa3)][_0x3e863c(0x5f2)];_0x2a8199[_0x3e863c(0x423)](),_0x2a8199[_0x3e863c(0x175)](![]),_0x2a8199[_0x3e863c(0x111)]();const _0x2b69fc=SceneManager[_0x3e863c(0xaa3)][_0x3e863c(0x264)];_0x2b69fc['scale']['y']=0x1;},Window_BattleEnemy[_0x3823ba(0x8d6)]['selectAllEnemies']=function(){const _0x2290d0=_0x3823ba,_0x14c69c=BattleManager[_0x2290d0(0x841)]();if(_0x14c69c)_0x14c69c['setTargetBattlerKey'](_0x2290d0(0x2b9));this['processOk']();},Window_BattleEnemy[_0x3823ba(0x8d6)]['selectAllActors']=function(){const _0x4afae6=_0x3823ba,_0x2e11d0=BattleManager['inputtingAction']();if(_0x2e11d0)_0x2e11d0[_0x4afae6(0x7f2)](_0x4afae6(0x4ab));this['processOk']();},Window_BattleEnemy[_0x3823ba(0x8d6)]['isCurrentItemEnabled']=function(){const _0x304c60=_0x3823ba;return this[_0x304c60(0x44e)]();},Window_BattleEnemy['prototype']['isActionSelectionValid']=function(){const _0x48ae23=_0x3823ba,_0x1a2d94=BattleManager[_0x48ae23(0x841)]();if(!_0x1a2d94)return!![];if(!_0x1a2d94[_0x48ae23(0x733)]())return!![];const _0xf25a47=this[_0x48ae23(0x634)](),_0x55975d=_0x1a2d94['item']()[_0x48ae23(0x920)];if(_0x1a2d94[_0x48ae23(0x2a0)]()){if(_0x48ae23(0x676)===_0x48ae23(0x676)){if(_0xf25a47===BattleManager[_0x48ae23(0x846)]())return![];}else this[_0x48ae23(0x869)]();}return!![];},Window_BattleItem['prototype'][_0x3823ba(0x97e)]=function(_0x3259ff){const _0x2f91c2=_0x3823ba;if(!_0x3259ff)return![];return _0x3259ff[_0x2f91c2(0x128)]===0x0||_0x3259ff[_0x2f91c2(0x128)]===0x1;};function Window_AutoBattleCancel(){this['initialize'](...arguments);}Window_AutoBattleCancel[_0x3823ba(0x8d6)]=Object['create'](Window_Base[_0x3823ba(0x8d6)]),Window_AutoBattleCancel[_0x3823ba(0x8d6)]['constructor']=Window_AutoBattleCancel,Window_AutoBattleCancel[_0x3823ba(0x8d6)]['initialize']=function(_0x4932e2){const _0x1899d2=_0x3823ba;Window_Base[_0x1899d2(0x8d6)][_0x1899d2(0xc06)][_0x1899d2(0x162)](this,_0x4932e2),this['setBackgroundType'](this[_0x1899d2(0x163)]()),this[_0x1899d2(0x912)]();},Window_AutoBattleCancel[_0x3823ba(0x8d6)]['bgType']=function(){const _0x28d10d=_0x3823ba;return VisuMZ[_0x28d10d(0x4f3)][_0x28d10d(0x242)][_0x28d10d(0x9d8)][_0x28d10d(0xa48)];},Window_AutoBattleCancel[_0x3823ba(0x8d6)][_0x3823ba(0x912)]=function(){const _0x4316d6=_0x3823ba;this[_0x4316d6(0x19d)][_0x4316d6(0xcd2)]();const _0x52d76b=VisuMZ['BattleCore'][_0x4316d6(0x242)][_0x4316d6(0x9d8)]['AutoBattleMsg'],_0x29a49e=_0x52d76b[_0x4316d6(0xabf)](this['okButtonText'](),this[_0x4316d6(0x98e)]()),_0x1d6067=this[_0x4316d6(0x699)](_0x29a49e)[_0x4316d6(0x204)],_0x4c231e=Math[_0x4316d6(0x975)]((this[_0x4316d6(0x9ac)]-_0x1d6067)/0x2);this[_0x4316d6(0x7a4)](_0x29a49e,_0x4c231e,0x0,_0x1d6067);},Window_AutoBattleCancel[_0x3823ba(0x8d6)][_0x3823ba(0x430)]=function(){const _0x5a4adf=_0x3823ba;return Imported[_0x5a4adf(0x32f)]?TextManager[_0x5a4adf(0xba1)]('ok'):VisuMZ[_0x5a4adf(0x4f3)][_0x5a4adf(0x242)]['AutoBattle'][_0x5a4adf(0x3ca)];},Window_AutoBattleCancel['prototype'][_0x3823ba(0x98e)]=function(){const _0x14d24d=_0x3823ba;if(Imported['VisuMZ_0_CoreEngine'])return TextManager[_0x14d24d(0xba1)]('cancel');else{if(_0x14d24d(0x534)!==_0x14d24d(0x2ec))return VisuMZ[_0x14d24d(0x4f3)][_0x14d24d(0x242)]['AutoBattle'][_0x14d24d(0x26e)];else{this[_0x14d24d(0xd53)]=_0xb0bc08['flashColor']||[0x0,0x0,0x0,0x0],this[_0x14d24d(0xd53)]=_0x5a569b[_0x14d24d(0x682)](this[_0x14d24d(0xd53)]),this[_0x14d24d(0xc07)]=_0x37808d[_0x14d24d(0x55a)]||0x0;const _0x5c9dc4=this[_0x14d24d(0x5d8)](),_0x28c5e5=_0xc4038d[_0x14d24d(0x975)](_0x5c9dc4*0x1e),_0x1f3dfd=this[_0x14d24d(0x351)](_0x28c5e5,_0x5c9dc4);_0x1f3dfd[_0x14d24d(0x850)]['textColor']=_0x4687af[_0x14d24d(0x2cf)](_0x56c80b['textColor']),_0x1f3dfd[_0x14d24d(0x850)]['drawText'](_0x15b68c,0x0,0x0,_0x28c5e5,_0x5c9dc4,_0x14d24d(0x542)),_0x1f3dfd['dy']=0x0;}}},Window_AutoBattleCancel[_0x3823ba(0x8d6)][_0x3823ba(0x456)]=function(){const _0x5f3165=_0x3823ba;Window_Base[_0x5f3165(0x8d6)][_0x5f3165(0x456)][_0x5f3165(0x162)](this),this['updateVisibility'](),this[_0x5f3165(0x2ea)]();},Window_AutoBattleCancel[_0x3823ba(0x8d6)]['updateVisibility']=function(){const _0x3358ba=_0x3823ba;this[_0x3358ba(0x425)]=BattleManager[_0x3358ba(0x670)];},Window_AutoBattleCancel[_0x3823ba(0x8d6)][_0x3823ba(0x2ea)]=function(){const _0x33b195=_0x3823ba;if(!BattleManager[_0x33b195(0x670)])return;(Input['isTriggered']('ok')||Input[_0x33b195(0x80a)](_0x33b195(0x5d2))||TouchInput[_0x33b195(0x18a)]()||TouchInput[_0x33b195(0xccf)]())&&(SoundManager[_0x33b195(0x11b)](),BattleManager[_0x33b195(0x670)]=![],Input[_0x33b195(0xcd2)](),TouchInput[_0x33b195(0xcd2)]());};function Window_EnemyName(){this['initialize'](...arguments);}Window_EnemyName[_0x3823ba(0x8d6)]=Object[_0x3823ba(0x312)](Window_StatusBase[_0x3823ba(0x8d6)]),Window_EnemyName['prototype'][_0x3823ba(0x786)]=Window_EnemyName,Window_EnemyName[_0x3823ba(0x8d6)][_0x3823ba(0xc06)]=function(_0xb06e9a){const _0x94dac6=_0x3823ba;this['_enemyID']=_0xb06e9a,this[_0x94dac6(0x316)]='';const _0x3d421f=new Rectangle(0x0,0x0,Graphics[_0x94dac6(0xc13)],this[_0x94dac6(0x8d0)]()*0x4);Window_StatusBase[_0x94dac6(0x8d6)][_0x94dac6(0xc06)][_0x94dac6(0x162)](this,_0x3d421f),this[_0x94dac6(0x5a8)](0x2),this[_0x94dac6(0x51a)]=0x0;},Window_EnemyName[_0x3823ba(0x8d6)][_0x3823ba(0x773)]=function(){const _0x63f2f7=_0x3823ba;this[_0x63f2f7(0x3ee)]=0x0;},Window_EnemyName[_0x3823ba(0x8d6)]['enemy']=function(){const _0x2f67e3=_0x3823ba;return $gameTroop[_0x2f67e3(0x292)]()[this[_0x2f67e3(0xbab)]];},Window_EnemyName[_0x3823ba(0x8d6)]['update']=function(){const _0x4677e4=_0x3823ba;Window_StatusBase[_0x4677e4(0x8d6)][_0x4677e4(0x456)][_0x4677e4(0x162)](this),this[_0x4677e4(0x634)]()&&this[_0x4677e4(0x634)]()[_0x4677e4(0x450)]()!==this[_0x4677e4(0x316)]&&(_0x4677e4(0xcac)!==_0x4677e4(0x37c)?(this[_0x4677e4(0x316)]=this['enemy']()[_0x4677e4(0x450)](),this['refresh']()):this['startMotion'](_0x4677e4(0x498))),this['updateOpacity'](),this[_0x4677e4(0x1b7)]();},Window_EnemyName[_0x3823ba(0x8d6)][_0x3823ba(0x86a)]=function(){const _0x5aa1fe=_0x3823ba;if(!this[_0x5aa1fe(0x634)]()){if(this[_0x5aa1fe(0x51a)]>0x0)this['contentsOpacity']-=0x10;}else{if(this['enemy']()['isDead']()){if(this[_0x5aa1fe(0x51a)]>0x0)this[_0x5aa1fe(0x51a)]-=0x10;}else{if(SceneManager[_0x5aa1fe(0xaa3)]['_enemyWindow']&&SceneManager['_scene'][_0x5aa1fe(0x67c)][_0x5aa1fe(0xa4e)]&&SceneManager[_0x5aa1fe(0xaa3)]['_enemyWindow']['_enemies'][_0x5aa1fe(0x97e)](this['enemy']())){if(this[_0x5aa1fe(0x51a)]<0xff)this[_0x5aa1fe(0x51a)]+=0x10;}else this[_0x5aa1fe(0x51a)]>0x0&&(_0x5aa1fe(0x7d6)===_0x5aa1fe(0x7d6)?this[_0x5aa1fe(0x51a)]-=0x10:_0x55eede[_0x5aa1fe(0x3e3)]=[]);}}},Window_EnemyName[_0x3823ba(0x8d6)]['updatePosition']=function(){const _0x29406a=_0x3823ba;if(!this[_0x29406a(0x634)]())return;if(SceneManager[_0x29406a(0x441)]()){if('UECar'===_0x29406a(0xab4))this['x']=Graphics[_0x29406a(0xc13)]-this[_0x29406a(0x634)]()[_0x29406a(0x798)]()[_0x29406a(0x12d)];else{if(!_0x5e70f0[_0x29406a(0x4f3)][_0x29406a(0x242)][_0x29406a(0xa26)]['ShowTpDmg'])return;_0x1cd62d[_0x29406a(0x4f3)][_0x29406a(0x933)][_0x29406a(0x162)](this,_0x2d860a);}}else this['x']=this[_0x29406a(0x634)]()[_0x29406a(0x798)]()[_0x29406a(0x12d)];this['x']-=Math['round'](this['width']/0x2),this['y']=this['enemy']()[_0x29406a(0x798)]()[_0x29406a(0xcf6)]-Math[_0x29406a(0x282)](this[_0x29406a(0x8d0)]()*1.5);const _0x417a38=VisuMZ[_0x29406a(0x4f3)][_0x29406a(0x242)]['Enemy'];this['x']+=_0x417a38['NameOffsetX']||0x0,this['y']+=_0x417a38[_0x29406a(0x37b)]||0x0;},Window_EnemyName[_0x3823ba(0x8d6)][_0x3823ba(0x54d)]=function(){const _0x46bfc3=_0x3823ba;Window_Base[_0x46bfc3(0x8d6)][_0x46bfc3(0x54d)][_0x46bfc3(0x162)](this),this[_0x46bfc3(0x19d)][_0x46bfc3(0x5d8)]=VisuMZ[_0x46bfc3(0x4f3)][_0x46bfc3(0x242)][_0x46bfc3(0x179)]['NameFontSize'];},Window_EnemyName['prototype'][_0x3823ba(0x912)]=function(){const _0x4e4afd=_0x3823ba;Window_StatusBase[_0x4e4afd(0x8d6)][_0x4e4afd(0x912)][_0x4e4afd(0x162)](this),this[_0x4e4afd(0x19d)][_0x4e4afd(0xcd2)]();if(!this[_0x4e4afd(0x634)]())return;this[_0x4e4afd(0xbaa)]();},Window_EnemyName[_0x3823ba(0x8d6)][_0x3823ba(0xbaa)]=function(){const _0x564807=_0x3823ba;this['_text']=this[_0x564807(0x634)]()['name']();const _0xc60120=this[_0x564807(0x699)](this[_0x564807(0x316)])[_0x564807(0x204)],_0x59f89=Math[_0x564807(0x282)]((this[_0x564807(0x9ac)]-_0xc60120)/0x2);this[_0x564807(0x7a4)](this[_0x564807(0x316)],_0x59f89,0x0,_0xc60120+0x8);},Window_BattleLog['prototype']['maxLines']=function(){const _0x1b03e1=_0x3823ba;return VisuMZ['BattleCore'][_0x1b03e1(0x242)][_0x1b03e1(0xa26)][_0x1b03e1(0x435)];},Window_BattleLog[_0x3823ba(0x8d6)][_0x3823ba(0x836)]=function(){const _0x386257=_0x3823ba;return VisuMZ[_0x386257(0x4f3)]['Settings'][_0x386257(0xa26)][_0x386257(0x4be)];},Window_BattleLog[_0x3823ba(0x8d6)][_0x3823ba(0xca6)]=function(){const _0x1c7d4c=_0x3823ba;return VisuMZ['BattleCore'][_0x1c7d4c(0x242)]['BattleLog'][_0x1c7d4c(0xafb)];},Window_BattleLog[_0x3823ba(0x8d6)][_0x3823ba(0xbda)]=function(){return![];},Window_BattleLog[_0x3823ba(0x8d6)][_0x3823ba(0x14c)]=function(_0x3d1e64,_0x20832f){const _0x5a4f97=_0x3823ba;this[_0x5a4f97(0xaa5)](_0x5a4f97(0x74f)),BattleManager['invokeAction'](_0x3d1e64,_0x20832f),this[_0x5a4f97(0x15f)]();},Window_BattleLog[_0x3823ba(0x8d6)]['emulateActionEffect']=function(_0x1a9a7f,_0x486f03,_0x41d69e){const _0xae0007=_0x3823ba;this['unshift'](_0xae0007(0x74f)),BattleManager[_0xae0007(0x117)](_0x1a9a7f,_0x486f03,_0x41d69e),this['callNextMethod']();},Window_BattleLog['prototype'][_0x3823ba(0x74f)]=function(){const _0x162ee4=_0x3823ba;this[_0x162ee4(0x15f)]();},Window_BattleLog[_0x3823ba(0x8d6)]['push']=function(_0xd1dadf){const _0x8c3a35=_0x3823ba,_0x42b604=Array['prototype']['slice'][_0x8c3a35(0x162)](arguments,0x1),_0x50e2fc={'name':_0xd1dadf,'params':_0x42b604},_0x2ba32d=this['_methods']['map'](_0x3c30ce=>_0x3c30ce['name'])[_0x8c3a35(0x122)](_0x8c3a35(0x74f));if(_0x2ba32d>=0x0){if('MmiYD'!=='MmiYD'){const _0x31cb35=this[_0x8c3a35(0x4e0)]()?this['actor']():this[_0x8c3a35(0x634)]();if(_0x31cb35){const _0x4a3d3=_0x31cb35[_0x8c3a35(0x920)];if(_0x4a3d3[_0x8c3a35(0xd57)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i))return _0x5098e3(_0x2c4aef['$1'])*0.01;else{if(_0x4a3d3[_0x8c3a35(0xd57)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i))return _0x24eb9c(_0x5b08fa['$1'])||0x0;}}return 0x1;}else this[_0x8c3a35(0x9c4)]['splice'](_0x2ba32d,0x0,_0x50e2fc);}else this[_0x8c3a35(0x9c4)][_0x8c3a35(0x3d9)](_0x50e2fc);},Window_BattleLog[_0x3823ba(0x8d6)][_0x3823ba(0xaa5)]=function(_0x2312d6){const _0x4e682e=_0x3823ba,_0x391cc4=Array[_0x4e682e(0x8d6)][_0x4e682e(0xc36)][_0x4e682e(0x162)](arguments,0x1);this[_0x4e682e(0x9c4)][_0x4e682e(0xaa5)]({'name':_0x2312d6,'params':_0x391cc4});},Window_BattleLog['prototype']['logActionList']=function(){const _0x5ca59d=_0x3823ba;if(!$gameTemp[_0x5ca59d(0x1d4)]())return;console[_0x5ca59d(0xc5e)](this[_0x5ca59d(0x9c4)][_0x5ca59d(0x4d0)](_0x1cc1c6=>_0x1cc1c6[_0x5ca59d(0x450)])[_0x5ca59d(0xa13)]('\x0a'));},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x49a)]=Window_BattleLog[_0x3823ba(0x8d6)][_0x3823ba(0x912)],Window_BattleLog[_0x3823ba(0x8d6)][_0x3823ba(0x912)]=function(){const _0x16deaf=_0x3823ba;this[_0x16deaf(0xca4)]=!![];},VisuMZ['BattleCore'][_0x3823ba(0x1ee)]=Window_BattleLog[_0x3823ba(0x8d6)]['update'],Window_BattleLog['prototype']['update']=function(){const _0x5cca00=_0x3823ba;VisuMZ['BattleCore'][_0x5cca00(0x1ee)]['call'](this);if(this[_0x5cca00(0xca4)])this[_0x5cca00(0x25f)]();},Window_BattleLog[_0x3823ba(0x8d6)][_0x3823ba(0x25f)]=function(){const _0x319c3a=_0x3823ba;this[_0x319c3a(0xca4)]=![],VisuMZ[_0x319c3a(0x4f3)][_0x319c3a(0x49a)][_0x319c3a(0x162)](this);},Window_BattleLog[_0x3823ba(0x8d6)]['drawLineText']=function(_0x5e4e31){const _0x14fad0=_0x3823ba;let _0x1aca34=VisuMZ[_0x14fad0(0x4f3)][_0x14fad0(0x242)][_0x14fad0(0xa26)]['TextAlign'][_0x14fad0(0x8cf)]()['trim'](),_0x184734=this[_0x14fad0(0xb47)][_0x5e4e31];if(_0x184734[_0x14fad0(0xd57)](/<LEFT>/i))_0x1aca34='left';else{if(_0x184734[_0x14fad0(0xd57)](/<CENTER>/i))'hTeJB'===_0x14fad0(0x6c1)?this[_0x14fad0(0x538)](this[_0x14fad0(0xd0b)]):_0x1aca34='center';else _0x184734['match'](/<RIGHT>/i)&&(_0x1aca34=_0x14fad0(0xc21));}_0x184734=_0x184734[_0x14fad0(0x7fc)](/<(?:LEFT|CENTER|RIGHT)>/gi,''),_0x184734=_0x184734[_0x14fad0(0x7fc)](/\\I\[0\]/gi,'');const _0x4d5bfd=this[_0x14fad0(0x80e)](_0x5e4e31);this['contents'][_0x14fad0(0x5f8)](_0x4d5bfd['x'],_0x4d5bfd['y'],_0x4d5bfd[_0x14fad0(0x204)],_0x4d5bfd[_0x14fad0(0xd6d)]);const _0x1a4749=this[_0x14fad0(0x699)](_0x184734)[_0x14fad0(0x204)];let _0x2bae24=_0x4d5bfd['x'];if(_0x1aca34==='center')_0x2bae24+=(_0x4d5bfd[_0x14fad0(0x204)]-_0x1a4749)/0x2;else _0x1aca34==='right'&&(_0x14fad0(0xd38)!==_0x14fad0(0x8cd)?_0x2bae24+=_0x4d5bfd[_0x14fad0(0x204)]-_0x1a4749:this[_0x14fad0(0x6ba)]=0x0);this[_0x14fad0(0x7a4)](_0x184734,_0x2bae24,_0x4d5bfd['y'],_0x1a4749+0x8);},Window_BattleLog[_0x3823ba(0x8d6)][_0x3823ba(0xc47)]=function(_0x15177c){const _0x2b7b85=_0x3823ba;this['_lines'][_0x2b7b85(0x3d9)](_0x15177c),this[_0x2b7b85(0x912)](),this['callNextMethod']();},Window_BattleLog[_0x3823ba(0x8d6)][_0x3823ba(0xc6a)]=function(){const _0x488701=_0x3823ba;let _0x49980b=![];switch(this[_0x488701(0x887)]){case'effect':_0x49980b=this['_spriteset'][_0x488701(0x30e)]();break;case _0x488701(0x53e):_0x49980b=this[_0x488701(0x8a5)]['isAnyoneMoving']();break;case'animation':_0x49980b=this[_0x488701(0x8a5)][_0x488701(0x524)]();break;case _0x488701(0x525):_0x49980b=this[_0x488701(0x8a5)][_0x488701(0xab8)]();break;case _0x488701(0xc09):_0x49980b=this[_0x488701(0x8a5)][_0x488701(0x139)]();break;case _0x488701(0xa2c):_0x49980b=this[_0x488701(0x8a5)]['isAnyoneChangingOpacity']();break;}return!_0x49980b&&(this['_waitMode']=''),_0x49980b;},Window_BattleLog[_0x3823ba(0x8d6)][_0x3823ba(0x414)]=function(){const _0x544352=_0x3823ba;this[_0x544352(0xab0)]('animation');},Window_BattleLog[_0x3823ba(0x8d6)]['waitForFloat']=function(){const _0x32caaa=_0x3823ba;this['setWaitMode'](_0x32caaa(0x525));},Window_BattleLog[_0x3823ba(0x8d6)][_0x3823ba(0xc18)]=function(){const _0x35a22a=_0x3823ba;this[_0x35a22a(0xab0)]('jump');},Window_BattleLog[_0x3823ba(0x8d6)][_0x3823ba(0x71a)]=function(){const _0x2318a3=_0x3823ba;this[_0x2318a3(0xab0)](_0x2318a3(0xa2c));},Window_BattleLog[_0x3823ba(0x8d6)]['startTurn']=function(){const _0x51897f=_0x3823ba,_0x49f3eb=VisuMZ['BattleCore']['Settings'][_0x51897f(0xa26)];if(!_0x49f3eb[_0x51897f(0x4fc)])return;this[_0x51897f(0x3d9)](_0x51897f(0xc47),_0x49f3eb[_0x51897f(0x7b8)]['format']($gameTroop[_0x51897f(0x529)]())),this[_0x51897f(0x3d9)](_0x51897f(0x3cc),_0x49f3eb[_0x51897f(0xd9c)]),this[_0x51897f(0x3d9)](_0x51897f(0xcd2));},Window_BattleLog[_0x3823ba(0x8d6)]['startAction']=function(_0x2c1b9f,_0x4b6f19,_0x338538){const _0x5961e5=_0x3823ba;this[_0x5961e5(0x258)](_0x4b6f19)?_0x5961e5(0xa4c)!==_0x5961e5(0x69b)?BattleManager[_0x5961e5(0xbb6)]():this[_0x5961e5(0x1ac)][this[_0x5961e5(0x10d)]]=_0x6c936c:_0x5961e5(0x8dc)==='FGmfW'?this[_0x5961e5(0x40b)](_0x2c1b9f,_0x4b6f19,_0x338538):(this[_0x5961e5(0xd3e)](),_0x409445[_0x5961e5(0x3b7)]());},Window_BattleLog[_0x3823ba(0x8d6)][_0x3823ba(0x258)]=function(_0x5ed377){const _0x5186f0=_0x3823ba;if(!SceneManager[_0x5186f0(0xbc6)]())return![];if(!_0x5ed377)return![];if(!_0x5ed377[_0x5186f0(0x733)]())return![];if(_0x5ed377[_0x5186f0(0x733)]()['note']['match'](/<CUSTOM ACTION SEQUENCE>/i))return!![];if(DataManager[_0x5186f0(0xd59)](_0x5ed377[_0x5186f0(0x733)]()))return!![];return![];},Window_BattleLog[_0x3823ba(0x8d6)][_0x3823ba(0x40b)]=function(_0xf91abe,_0x35aef1,_0x5d1636){const _0x11638e=_0x3823ba;this[_0x11638e(0x99e)](_0xf91abe,_0x35aef1,_0x5d1636),this[_0x11638e(0x989)](_0xf91abe,_0x35aef1,_0x5d1636),this[_0x11638e(0x7c4)](_0xf91abe,_0x35aef1,_0x5d1636);},Window_BattleLog[_0x3823ba(0x8d6)][_0x3823ba(0x31b)]=function(_0x26f786,_0x5d0bf0){const _0x352961=_0x3823ba,_0x3edd1b=VisuMZ['BattleCore']['Settings'][_0x352961(0xa26)];_0x3edd1b[_0x352961(0xb9b)]&&this[_0x352961(0x3d9)](_0x352961(0xc47),'<CENTER>%1'[_0x352961(0xabf)](DataManager['battleDisplayText'](_0x5d0bf0)));if(DataManager['isSkill'](_0x5d0bf0)){if(_0x3edd1b[_0x352961(0xb37)])this[_0x352961(0x95e)](_0x5d0bf0[_0x352961(0xb43)],_0x26f786,_0x5d0bf0);if(_0x3edd1b['ActionSkillMsg2'])this['displayItemMessage'](_0x5d0bf0[_0x352961(0x3f4)],_0x26f786,_0x5d0bf0);}else{if(_0x3edd1b[_0x352961(0xbeb)])this['displayItemMessage'](TextManager[_0x352961(0x503)],_0x26f786,_0x5d0bf0);}},Window_BattleLog[_0x3823ba(0x8d6)][_0x3823ba(0x99e)]=function(_0x5748fd,_0x4644ac,_0x597996){const _0x5de704=_0x3823ba,_0x5e942d=_0x4644ac['item']();this[_0x5de704(0x31b)](_0x5748fd,_0x5e942d),this[_0x5de704(0x3d9)](_0x5de704(0x289),_0x5748fd,_0x597996,!![]),this[_0x5de704(0x3d9)](_0x5de704(0xa5f),_0x5748fd,_0x4644ac),this['push'](_0x5de704(0x714)),this[_0x5de704(0x3d9)](_0x5de704(0x987),_0x5748fd,_0x4644ac),this[_0x5de704(0x3d9)](_0x5de704(0x414));},Window_BattleLog[_0x3823ba(0x8d6)][_0x3823ba(0x989)]=function(_0x91aa3,_0x1c9d36,_0xcdda44){const _0x3d81b9=_0x3823ba;if(this[_0x3d81b9(0xc32)](_0x1c9d36))this['autoMeleeSingleTargetActionSet'](_0x91aa3,_0x1c9d36,_0xcdda44);else{if(this[_0x3d81b9(0x344)](_0x1c9d36))this[_0x3d81b9(0xa30)](_0x91aa3,_0x1c9d36,_0xcdda44);else _0x1c9d36[_0x3d81b9(0x2b5)]()?this[_0x3d81b9(0x458)](_0x91aa3,_0x1c9d36,_0xcdda44):this[_0x3d81b9(0xcbc)](_0x91aa3,_0x1c9d36,_0xcdda44);}},Window_BattleLog[_0x3823ba(0x8d6)][_0x3823ba(0x31c)]=function(_0x2f8bb2,_0x15fbf9,_0x266279,_0x1d5a8a){const _0x561456=_0x3823ba;if(_0x15fbf9){if(_0x561456(0xbf9)!==_0x561456(0xbf9))for(const _0x15aa4e of _0x306487[_0x561456(0x934)]){[0x6c,0x198][_0x561456(0x97e)](_0x15aa4e[_0x561456(0xcad)])&&(_0x4fca73+='\x0a',_0x516537+=_0x15aa4e['parameters'][0x0]);}else{const _0x3b6024=_0x2f8bb2[_0x561456(0x798)]();this[_0x561456(0x3d9)]('performJump',[_0x2f8bb2],_0x266279,_0x1d5a8a),this['push']('performMoveToPoint',_0x2f8bb2,_0x3b6024[_0x561456(0x43c)],_0x3b6024[_0x561456(0x372)],_0x1d5a8a,![],_0x561456(0x12f)),this[_0x561456(0x3d9)](_0x561456(0xb90),[_0x2f8bb2],_0x561456(0x576)),this[_0x561456(0x3d9)](_0x561456(0x714)),this[_0x561456(0x3d9)]('requestMotion',[_0x2f8bb2],_0x561456(0x5bf));}}},Window_BattleLog[_0x3823ba(0x8d6)][_0x3823ba(0xc32)]=function(_0x379308){const _0x38f8ea=_0x3823ba;if(!_0x379308['isPhysical']())return![];if(!_0x379308[_0x38f8ea(0x957)]())return![];if(!_0x379308['isForOpponent']())return![];return VisuMZ[_0x38f8ea(0x4f3)][_0x38f8ea(0x242)][_0x38f8ea(0x871)]['AutoMeleeSolo'];},Window_BattleLog[_0x3823ba(0x8d6)][_0x3823ba(0x23b)]=function(_0x147abc,_0x46b6a7,_0x85c14d){const _0x4b48c6=_0x3823ba,_0x5c6170=_0x147abc[_0x4b48c6(0x60e)]()[_0x4b48c6(0x98a)]<0x2,_0x25cdd3=0x14,_0x1a046c=0x30;let _0x4f2a54=!![];if(_0x85c14d['length']>0x0&&_0x147abc[_0x4b48c6(0x4e0)]()===_0x85c14d[0x0][_0x4b48c6(0x4e0)]()){if(_0x4b48c6(0x157)!==_0x4b48c6(0x157)){if(!_0x885b1f[_0x4b48c6(0xbc6)]())return;if(!_0x451434[_0x4b48c6(0x29c)])return;_0x16b5cd[_0x4b48c6(0xb9f)](_0x235052,_0x4cc466);const _0x3f65be=_0x46f276[_0x4b48c6(0xaa7)](),_0x118543=_0x2ddb35[_0x4b48c6(0x861)];if(!_0x3f65be)return;_0x52aedf[_0x4b48c6(0xcb7)](_0x16e2cb[_0x4b48c6(0x9ad)],_0x14f9d0[_0x4b48c6(0x438)],_0x109c94[_0x4b48c6(0x890)]);if(_0x118543)_0x3f65be[_0x4b48c6(0xab0)]('battleZoom');}else _0x4f2a54=![];}_0x5c6170&&_0x4f2a54&&(this[_0x4b48c6(0x3d9)](_0x4b48c6(0xd47),[_0x147abc],_0x1a046c,_0x25cdd3),this[_0x4b48c6(0x3d9)](_0x4b48c6(0x1ff),_0x147abc,_0x85c14d,_0x4b48c6(0x654),_0x25cdd3,!![],_0x4b48c6(0x12f),!![]),this[_0x4b48c6(0x3d9)](_0x4b48c6(0xb90),[_0x147abc],_0x4b48c6(0x5bf)),this[_0x4b48c6(0x3d9)]('waitForMovement'));let _0xace32=_0x46b6a7[_0x4b48c6(0x4ba)]()?this[_0x4b48c6(0xd5d)](_0x147abc):0x1;for(let _0x1af6ab=0x0;_0x1af6ab<_0xace32;_0x1af6ab++){if(_0x4b48c6(0xbc7)!==_0x4b48c6(0x24b)){_0x46b6a7[_0x4b48c6(0x4ba)]()&&_0x147abc['isActor']()&&this[_0x4b48c6(0x3d9)](_0x4b48c6(0x3a5),_0x147abc,_0x1af6ab);if(_0x46b6a7['item']()[_0x4b48c6(0x161)]<0x0){if(_0x4b48c6(0xb46)===_0x4b48c6(0x946))return!![];else this['targetActionSet'](_0x147abc,_0x46b6a7,_0x85c14d);}else this[_0x4b48c6(0xcbc)](_0x147abc,_0x46b6a7,_0x85c14d);}else _0x14e1b2[_0x4b48c6(0x4f3)][_0x4b48c6(0x513)][_0x4b48c6(0x162)](this,_0x4d7c0c),this[_0x4b48c6(0x6b2)]();}_0x46b6a7['isAttack']()&&_0x147abc[_0x4b48c6(0x4e0)]()&&this['push'](_0x4b48c6(0x70a),_0x147abc),this['push'](_0x4b48c6(0x289),_0x147abc,_0x85c14d,![]),this[_0x4b48c6(0x31c)](_0x147abc,_0x5c6170,_0x1a046c,_0x25cdd3);},Window_BattleLog['prototype']['isMeleeMultiTargetAction']=function(_0x16322b){const _0x6ffa5a=_0x3823ba;if(!_0x16322b[_0x6ffa5a(0xc9d)]())return![];if(!_0x16322b['isForAll']())return![];if(!_0x16322b[_0x6ffa5a(0x722)]())return![];return VisuMZ['BattleCore']['Settings'][_0x6ffa5a(0x871)]['AutoMeleeAoE'];},Window_BattleLog[_0x3823ba(0x8d6)][_0x3823ba(0xa30)]=function(_0x2ba382,_0x844aa7,_0x54d206){const _0xa9000b=_0x3823ba,_0x4c4a08=_0x2ba382[_0xa9000b(0x60e)]()[_0xa9000b(0x98a)]<0x2,_0x2ce715=0x14,_0x354c51=0x30;if(_0x4c4a08){if(_0xa9000b(0xb85)!=='qwhNv'){if(this[_0xa9000b(0x131)][_0xa9000b(0x221)]())return![];return _0x22702b['BattleCore'][_0xa9000b(0xbad)][_0xa9000b(0x162)](this,_0x282d21);}else{this[_0xa9000b(0x3d9)](_0xa9000b(0xd47),[_0x2ba382],_0x354c51,_0x2ce715);const _0x446383=_0x54d206[_0xa9000b(0xb23)]>0x1?_0xa9000b(0x7a5):'front\x20base';this[_0xa9000b(0x3d9)](_0xa9000b(0x1ff),_0x2ba382,_0x54d206,_0x446383,_0x2ce715,!![],_0xa9000b(0x12f),!![]),this['push'](_0xa9000b(0xb90),[_0x2ba382],'walk'),this[_0xa9000b(0x3d9)]('waitForMovement');}}let _0x3f2d6b=_0x844aa7[_0xa9000b(0x4ba)]()?this[_0xa9000b(0xd5d)](_0x2ba382):0x1;for(let _0x185289=0x0;_0x185289<_0x3f2d6b;_0x185289++){_0x844aa7[_0xa9000b(0x4ba)]()&&_0x2ba382[_0xa9000b(0x4e0)]()&&this[_0xa9000b(0x3d9)]('setActiveWeaponSet',_0x2ba382,_0x185289),this[_0xa9000b(0xcbc)](_0x2ba382,_0x844aa7,_0x54d206);}if(_0x844aa7[_0xa9000b(0x4ba)]()&&_0x2ba382[_0xa9000b(0x4e0)]()){if(_0xa9000b(0x795)===_0xa9000b(0xbd8))for(const _0x3090de of _0x56bda6){const _0x537fd5=_0x47a88d[0x0][_0xa9000b(0xabf)](_0x3090de[0x0]),_0x568e07=_0x278e1c[0x1]['format'](_0x3090de[0x1]),_0x1dc2f4=new _0x256b08(_0x5c54a6[_0xa9000b(0xabf)](_0x568e07),'i');_0x19d868[_0x537fd5]=_0x1dc2f4;}else this['push'](_0xa9000b(0x70a),_0x2ba382);}this[_0xa9000b(0x3d9)](_0xa9000b(0x289),_0x2ba382,_0x54d206,![]),this[_0xa9000b(0x31c)](_0x2ba382,_0x4c4a08,_0x354c51,_0x2ce715);},Window_BattleLog['prototype']['targetActionSet']=function(_0x554e82,_0x3219e0,_0x592164){const _0x557462=_0x3823ba,_0x3bec21=_0x3219e0[_0x557462(0x733)]();for(const _0x47eead of _0x592164){if(!_0x47eead)continue;this['push']('performAction',_0x554e82,_0x3219e0),this[_0x557462(0x3d9)](_0x557462(0x3cc),Sprite_Battler[_0x557462(0x842)]),this[_0x557462(0x3d9)](_0x557462(0x550),_0x554e82,[_0x47eead],_0x3bec21['animationId']),this['push'](_0x557462(0x3cc),0x18),this[_0x557462(0x3d9)](_0x557462(0x14c),_0x554e82,_0x47eead);}},Window_BattleLog[_0x3823ba(0x8d6)][_0x3823ba(0xcbc)]=function(_0xd314b1,_0x4a08e9,_0x300a93){const _0x29d112=_0x3823ba,_0x540a3d=_0x4a08e9[_0x29d112(0x733)]();let _0x3c0a90=_0x4a08e9[_0x29d112(0x4ba)]()?0x1+_0xd314b1[_0x29d112(0xcda)]():0x1;while(_0x3c0a90--){this[_0x29d112(0x3d9)](_0x29d112(0xba8),_0xd314b1,_0x4a08e9),this[_0x29d112(0x3d9)]('waitCount',Sprite_Battler[_0x29d112(0x842)]),this[_0x29d112(0x3d9)](_0x29d112(0x550),_0xd314b1,_0x300a93['clone'](),_0x540a3d[_0x29d112(0x161)]),this[_0x29d112(0x3d9)](_0x29d112(0x414));}for(const _0x1dced3 of _0x300a93){if(!_0x1dced3)continue;this[_0x29d112(0x3d9)](_0x29d112(0x14c),_0xd314b1,_0x1dced3);}},Window_BattleLog['prototype'][_0x3823ba(0x7c4)]=function(_0x417a35,_0x422338,_0x2ef0ee){const _0x274494=_0x3823ba,_0x503943=_0x422338[_0x274494(0x733)]();this[_0x274494(0x3d9)]('applyImmortal',_0x417a35,_0x2ef0ee,![]),this[_0x274494(0x3d9)](_0x274494(0xae4)),this[_0x274494(0x3d9)]('waitForEffect'),this[_0x274494(0x3d9)]('clear'),this[_0x274494(0x3d9)](_0x274494(0x817),_0x417a35),this[_0x274494(0x3d9)](_0x274494(0x714));},Window_BattleLog[_0x3823ba(0x8d6)]['endAction']=function(_0x15b36d){},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x130)]=Window_BattleLog[_0x3823ba(0x8d6)][_0x3823ba(0x52d)],Window_BattleLog[_0x3823ba(0x8d6)][_0x3823ba(0x52d)]=function(_0x543ec3){const _0x3a9824=_0x3823ba;if(!VisuMZ['BattleCore'][_0x3a9824(0x242)][_0x3a9824(0xa26)][_0x3a9824(0x252)])return;VisuMZ[_0x3a9824(0x4f3)][_0x3a9824(0x130)][_0x3a9824(0x162)](this,_0x543ec3);},Window_BattleLog[_0x3823ba(0x8d6)][_0x3823ba(0x11a)]=function(_0x1e1955){const _0x267f8=_0x3823ba;this['push'](_0x267f8(0x874),_0x1e1955);VisuMZ[_0x267f8(0x4f3)][_0x267f8(0x242)][_0x267f8(0x871)][_0x267f8(0x57a)]&&this[_0x267f8(0x3d9)](_0x267f8(0x550),_0x1e1955,[BattleManager[_0x267f8(0x527)]],-0x1);if(!VisuMZ[_0x267f8(0x4f3)]['Settings'][_0x267f8(0xa26)]['ShowCounter'])return;this[_0x267f8(0x3d9)](_0x267f8(0xc47),TextManager['counterAttack'][_0x267f8(0xabf)](_0x1e1955[_0x267f8(0x450)]()));},Window_BattleLog[_0x3823ba(0x8d6)][_0x3823ba(0x6d7)]=function(_0x55dcdc){const _0x14c5d7=_0x3823ba;this[_0x14c5d7(0x3d9)]('performReflection',_0x55dcdc);if(!VisuMZ['BattleCore'][_0x14c5d7(0x242)][_0x14c5d7(0xa26)][_0x14c5d7(0x216)])return;this['push'](_0x14c5d7(0xc47),TextManager[_0x14c5d7(0x296)][_0x14c5d7(0xabf)](_0x55dcdc[_0x14c5d7(0x450)]()));},Window_BattleLog[_0x3823ba(0x8d6)][_0x3823ba(0xb67)]=function(_0x286341,_0x4fe712){const _0x5ab103=_0x3823ba;if(VisuMZ['BattleCore'][_0x5ab103(0x242)][_0x5ab103(0x871)][_0x5ab103(0x694)]){const _0x376aff=_0x4fe712[_0x5ab103(0x733)]();this['push'](_0x5ab103(0x550),_0x286341,[_0x286341],_0x376aff[_0x5ab103(0x161)]);}},Window_BattleLog[_0x3823ba(0x8d6)][_0x3823ba(0x7a8)]=function(_0x767761,_0x41b471){const _0x323d99=_0x3823ba;this[_0x323d99(0x3d9)]('performSubstitute',_0x767761,_0x41b471);if(!VisuMZ[_0x323d99(0x4f3)][_0x323d99(0x242)][_0x323d99(0xa26)][_0x323d99(0xa18)])return;const _0x273543=_0x767761[_0x323d99(0x450)](),_0x1ccca3=TextManager[_0x323d99(0x4f2)][_0x323d99(0xabf)](_0x273543,_0x41b471['name']());this[_0x323d99(0x3d9)](_0x323d99(0xc47),_0x1ccca3);},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x61d)]=Window_BattleLog[_0x3823ba(0x8d6)][_0x3823ba(0x1c1)],Window_BattleLog['prototype'][_0x3823ba(0x1c1)]=function(_0x3a0840,_0x57633c){const _0x24da07=_0x3823ba;VisuMZ[_0x24da07(0x4f3)][_0x24da07(0x61d)][_0x24da07(0x162)](this,_0x3a0840,_0x57633c);},VisuMZ[_0x3823ba(0x4f3)]['Window_BattleLog_displayFailure']=Window_BattleLog[_0x3823ba(0x8d6)][_0x3823ba(0xb30)],Window_BattleLog['prototype'][_0x3823ba(0xb30)]=function(_0x5aeedc){const _0x4d9855=_0x3823ba;if(!VisuMZ['BattleCore'][_0x4d9855(0x242)][_0x4d9855(0xa26)][_0x4d9855(0xb82)])return;VisuMZ[_0x4d9855(0x4f3)]['Window_BattleLog_displayFailure'][_0x4d9855(0x162)](this,_0x5aeedc);},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0xaf8)]=Window_BattleLog[_0x3823ba(0x8d6)]['displayCritical'],Window_BattleLog[_0x3823ba(0x8d6)][_0x3823ba(0xcd8)]=function(_0x21065e){const _0x22e038=_0x3823ba;if(!VisuMZ['BattleCore'][_0x22e038(0x242)][_0x22e038(0xa26)][_0x22e038(0x745)])return;VisuMZ['BattleCore'][_0x22e038(0xaf8)][_0x22e038(0x162)](this,_0x21065e);},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x6c5)]=Window_BattleLog['prototype'][_0x3823ba(0x2c2)],Window_BattleLog[_0x3823ba(0x8d6)][_0x3823ba(0x2c2)]=function(_0x39ae92){const _0x5eaac1=_0x3823ba;!VisuMZ[_0x5eaac1(0x4f3)][_0x5eaac1(0x242)][_0x5eaac1(0xa26)][_0x5eaac1(0xb51)]?this[_0x5eaac1(0x3d9)](_0x5eaac1(0x437),_0x39ae92):VisuMZ[_0x5eaac1(0x4f3)]['Window_BattleLog_displayMiss'][_0x5eaac1(0x162)](this,_0x39ae92);},VisuMZ[_0x3823ba(0x4f3)]['Window_BattleLog_displayEvasion']=Window_BattleLog[_0x3823ba(0x8d6)][_0x3823ba(0x3ae)],Window_BattleLog[_0x3823ba(0x8d6)][_0x3823ba(0x3ae)]=function(_0x5a8139){const _0x97ba51=_0x3823ba;if(!VisuMZ['BattleCore'][_0x97ba51(0x242)]['BattleLog'][_0x97ba51(0xb51)]){if(_0x5a8139['result']()[_0x97ba51(0x293)])_0x97ba51(0x6d2)===_0x97ba51(0x6d2)?this[_0x97ba51(0x3d9)]('performEvasion',_0x5a8139):(_0x2304b9=_0xb229e2*this[_0x97ba51(0x7ec)][_0x97ba51(0xd78)],_0xa667fa+=this[_0x97ba51(0x7ec)][_0x97ba51(0x1d8)]*(_0x51c9cc>=0x0?0x1:-0x1),_0x3247b7=this[_0x97ba51(0x8fc)](_0x97ba51(0xa5e),_0x58b171,_0x2dd8ba,![]),_0x18f704=this[_0x97ba51(0x986)](_0x1717ff),_0xe33d22=_0x3a86bc[_0x97ba51(0x282)](_0x4bc12d),this[_0x97ba51(0x3c6)]=_0x3411ce,this[_0x97ba51(0x4bf)]=this['_totalValue']||0x0,this['_totalValue']+=_0x9ce6c2,_0x443170[_0x97ba51(0x4f3)][_0x97ba51(0x9f7)][_0x97ba51(0x162)](this,_0x5d443a,_0x371b38),this[_0x97ba51(0x8fc)](_0x97ba51(0x8cc),_0x361c2e,_0x3bdb73,!![]));else{if(_0x97ba51(0x7c2)!==_0x97ba51(0x7c2))return _0x18abcc[_0x97ba51(0x450)];else this[_0x97ba51(0x3d9)](_0x97ba51(0xb4f),_0x5a8139);}}else VisuMZ['BattleCore'][_0x97ba51(0xb50)][_0x97ba51(0x162)](this,_0x5a8139);},Window_BattleLog[_0x3823ba(0x8d6)][_0x3823ba(0x3cf)]=function(_0x55cbef){const _0x4076a3=_0x3823ba;_0x55cbef[_0x4076a3(0xc87)]()['hpAffected']&&(_0x55cbef[_0x4076a3(0xb26)]=0x0,_0x55cbef[_0x4076a3(0xc87)]()['hpDamage']>0x0&&!_0x55cbef['result']()[_0x4076a3(0xc01)]&&(_0x55cbef[_0x4076a3(0xb26)]=_0x55cbef['result']()['hpDamage'],this['push'](_0x4076a3(0x657),_0x55cbef)),_0x55cbef[_0x4076a3(0xc87)]()['hpDamage']<0x0&&this[_0x4076a3(0x3d9)]('performRecovery',_0x55cbef),VisuMZ[_0x4076a3(0x4f3)][_0x4076a3(0x242)][_0x4076a3(0xa26)][_0x4076a3(0xc60)]&&this[_0x4076a3(0x3d9)](_0x4076a3(0xc47),this[_0x4076a3(0x66c)](_0x55cbef)));},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x804)]=Window_BattleLog[_0x3823ba(0x8d6)][_0x3823ba(0x996)],Window_BattleLog[_0x3823ba(0x8d6)][_0x3823ba(0x996)]=function(_0x2f008f){const _0x527b9c=_0x3823ba;if(!VisuMZ[_0x527b9c(0x4f3)]['Settings']['BattleLog']['ShowMpDmg'])return;VisuMZ['BattleCore'][_0x527b9c(0x804)]['call'](this,_0x2f008f);},VisuMZ['BattleCore']['Window_BattleLog_displayTpDamage']=Window_BattleLog['prototype'][_0x3823ba(0x141)],Window_BattleLog[_0x3823ba(0x8d6)]['displayTpDamage']=function(_0x47c59e){const _0x3674e9=_0x3823ba;if(!VisuMZ[_0x3674e9(0x4f3)]['Settings'][_0x3674e9(0xa26)][_0x3674e9(0x832)])return;VisuMZ[_0x3674e9(0x4f3)][_0x3674e9(0x933)][_0x3674e9(0x162)](this,_0x47c59e);},Window_BattleLog[_0x3823ba(0x8d6)][_0x3823ba(0x7b9)]=function(_0x34d75e){const _0x2cd6db=_0x3823ba;_0x34d75e[_0x2cd6db(0xc87)]()[_0x2cd6db(0x369)]()&&(this[_0x2cd6db(0x3d9)](_0x2cd6db(0x620)),this[_0x2cd6db(0x7ea)](_0x34d75e),this[_0x2cd6db(0x58d)](_0x34d75e),this[_0x2cd6db(0x3d9)]('waitForNewLine'));},Window_BattleLog[_0x3823ba(0x8d6)][_0x3823ba(0xce0)]=function(_0x3d6b4b){const _0x29cfbb=_0x3823ba,_0x28d005=_0x3d6b4b[_0x29cfbb(0xc87)](),_0x1f47ed=_0x28d005[_0x29cfbb(0x9e8)]();for(const _0x1ad214 of _0x1f47ed){const _0x3279f1=_0x3d6b4b['isActor']()?_0x1ad214[_0x29cfbb(0xb43)]:_0x1ad214[_0x29cfbb(0x3f4)];_0x3279f1&&VisuMZ[_0x29cfbb(0x4f3)]['Settings'][_0x29cfbb(0xa26)][_0x29cfbb(0x501)]&&(this[_0x29cfbb(0x3d9)]('fnordAddedStates'),this[_0x29cfbb(0x3d9)]('popBaseLine'),this['push'](_0x29cfbb(0x620)),this['push'](_0x29cfbb(0xc47),_0x3279f1['format'](_0x3d6b4b[_0x29cfbb(0x450)]())),this[_0x29cfbb(0x3d9)](_0x29cfbb(0x498))),_0x1ad214['id']===_0x3d6b4b['deathStateId']()&&this['push'](_0x29cfbb(0x9e5),_0x3d6b4b);}},Window_BattleLog[_0x3823ba(0x8d6)][_0x3823ba(0xc08)]=function(){},Window_BattleLog[_0x3823ba(0x8d6)][_0x3823ba(0x599)]=function(_0x1ed164){const _0x8a4137=_0x3823ba;if(!VisuMZ[_0x8a4137(0x4f3)][_0x8a4137(0x242)]['BattleLog'][_0x8a4137(0x8e7)])return;const _0x4e424c=_0x1ed164[_0x8a4137(0xc87)](),_0x37f3c1=_0x4e424c[_0x8a4137(0x1da)]();for(const _0x3614c7 of _0x37f3c1){_0x3614c7[_0x8a4137(0x387)]&&(this[_0x8a4137(0x3d9)](_0x8a4137(0xa21)),this[_0x8a4137(0x3d9)](_0x8a4137(0xb4d)),this['push'](_0x8a4137(0x620)),this[_0x8a4137(0x3d9)](_0x8a4137(0xc47),_0x3614c7[_0x8a4137(0x387)]['format'](_0x1ed164['name']())),this['push'](_0x8a4137(0x498)));}},Window_BattleLog['prototype'][_0x3823ba(0xa21)]=function(){},Window_BattleLog[_0x3823ba(0x8d6)][_0x3823ba(0x58d)]=function(_0x5fa322){const _0x155753=_0x3823ba,_0x2160eb=VisuMZ[_0x155753(0x4f3)][_0x155753(0x242)][_0x155753(0xa26)],_0x24923c=_0x5fa322[_0x155753(0xc87)]();if(_0x2160eb['ShowAddedBuff'])this[_0x155753(0x72f)](_0x5fa322,_0x24923c['addedBuffs'],TextManager['buffAdd']);if(_0x2160eb[_0x155753(0x45f)])this[_0x155753(0x72f)](_0x5fa322,_0x24923c[_0x155753(0x77d)],TextManager[_0x155753(0x813)]);if(_0x2160eb[_0x155753(0x4b4)])this['displayBuffs'](_0x5fa322,_0x24923c[_0x155753(0x88c)],TextManager[_0x155753(0x4f0)]);},Window_BattleLog[_0x3823ba(0x8d6)]['displayBuffs']=function(_0x31b0cf,_0x34283e,_0x298a2a){const _0x2b47d0=_0x3823ba;for(const _0x3430d4 of _0x34283e){if(_0x2b47d0(0x3dc)===_0x2b47d0(0x637))_0x3ba68a=_0x558312>=_0x58620e?_0x5d9289:_0x472501;else{const _0xa1177c=_0x298a2a[_0x2b47d0(0xabf)](_0x31b0cf[_0x2b47d0(0x450)](),TextManager['param'](_0x3430d4));this[_0x2b47d0(0x3d9)](_0x2b47d0(0xb4d)),this[_0x2b47d0(0x3d9)](_0x2b47d0(0x620)),this[_0x2b47d0(0x3d9)](_0x2b47d0(0xc47),_0xa1177c),this[_0x2b47d0(0x3d9)]('wait');}}},VisuMZ['BattleCore'][_0x3823ba(0x815)]=Window_BattleLog[_0x3823ba(0x8d6)]['clear'],Window_BattleLog['prototype'][_0x3823ba(0xcd2)]=function(){const _0x4449ac=_0x3823ba;VisuMZ[_0x4449ac(0x4f3)][_0x4449ac(0x815)]['call'](this),this[_0x4449ac(0x15f)]();},VisuMZ['BattleCore'][_0x3823ba(0x4db)]=Window_BattleLog[_0x3823ba(0x8d6)]['pushBaseLine'],Window_BattleLog['prototype'][_0x3823ba(0x620)]=function(){const _0x2a4ec4=_0x3823ba;VisuMZ[_0x2a4ec4(0x4f3)]['Window_BattleLog_pushBaseLine']['call'](this),this[_0x2a4ec4(0x15f)]();},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0xa4f)]=Window_BattleLog[_0x3823ba(0x8d6)]['popBaseLine'],Window_BattleLog['prototype'][_0x3823ba(0xb4d)]=function(){const _0x1eda92=_0x3823ba;VisuMZ[_0x1eda92(0x4f3)][_0x1eda92(0xa4f)][_0x1eda92(0x162)](this),this[_0x1eda92(0x25f)](),this[_0x1eda92(0x15f)]();},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x7c8)]=Window_BattleLog[_0x3823ba(0x8d6)][_0x3823ba(0x3cd)],Window_BattleLog[_0x3823ba(0x8d6)][_0x3823ba(0x3cd)]=function(_0x5f3c1e){const _0x381315=_0x3823ba;VisuMZ[_0x381315(0x4f3)][_0x381315(0x7c8)][_0x381315(0x162)](this,_0x5f3c1e),this['callNextMethod']();},Window_BattleLog[_0x3823ba(0x8d6)][_0x3823ba(0xae4)]=function(){const _0x547c1c=_0x3823ba;let _0x2e356f=0x0;if(this['_baseLineStack'][_0x547c1c(0xb23)]>0x0){if(_0x547c1c(0x1ba)===_0x547c1c(0x1ba))_0x2e356f=this[_0x547c1c(0x746)][this[_0x547c1c(0x746)][_0x547c1c(0xb23)]-0x1];else return _0x2cf05a[_0x547c1c(0x8d6)][_0x547c1c(0x67a)]();}if(this['_lines'][_0x547c1c(0xb23)]>_0x2e356f)this['wait']();else{if(_0x547c1c(0x7db)!==_0x547c1c(0x3ff))this[_0x547c1c(0x15f)]();else{const _0x41055b=_0x5af659[_0x547c1c(0xd31)]();_0xc02e01[_0x547c1c(0xb0a)]()&&_0x41055b[_0x547c1c(0xb23)]>0x1&&this[_0x547c1c(0x9f6)](_0x547c1c(0x3e5),this[_0x547c1c(0xb80)][_0x547c1c(0x343)](this));}}},VisuMZ['BattleCore']['Window_BattleLog_performActionStart']=Window_BattleLog[_0x3823ba(0x8d6)]['performActionStart'],Window_BattleLog['prototype'][_0x3823ba(0xa5f)]=function(_0x7b0d2f,_0x518fde){const _0x30d294=_0x3823ba;VisuMZ[_0x30d294(0x4f3)][_0x30d294(0xa06)][_0x30d294(0x162)](this,_0x7b0d2f,_0x518fde),this['callNextMethod']();},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x3ed)]=Window_BattleLog[_0x3823ba(0x8d6)][_0x3823ba(0xba8)],Window_BattleLog['prototype']['performAction']=function(_0x523dfd,_0x593d15){const _0x22493c=_0x3823ba;VisuMZ[_0x22493c(0x4f3)][_0x22493c(0x3ed)][_0x22493c(0x162)](this,_0x523dfd,_0x593d15),this[_0x22493c(0x15f)]();},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0xa23)]=Window_BattleLog[_0x3823ba(0x8d6)][_0x3823ba(0x817)],Window_BattleLog[_0x3823ba(0x8d6)][_0x3823ba(0x817)]=function(_0x1ae11e){const _0x55f25d=_0x3823ba;VisuMZ[_0x55f25d(0x4f3)][_0x55f25d(0xa23)]['call'](this,_0x1ae11e);for(const _0x4c1ca9 of BattleManager[_0x55f25d(0xbee)]()){if(!_0x4c1ca9)continue;if(_0x4c1ca9[_0x55f25d(0x3b8)]())continue;_0x4c1ca9[_0x55f25d(0x60f)]();}this[_0x55f25d(0x15f)]();},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0xaa0)]=Window_BattleLog[_0x3823ba(0x8d6)][_0x3823ba(0x657)],Window_BattleLog[_0x3823ba(0x8d6)]['performDamage']=function(_0x3b909a){const _0x28ebd1=_0x3823ba;VisuMZ[_0x28ebd1(0x4f3)][_0x28ebd1(0xaa0)][_0x28ebd1(0x162)](this,_0x3b909a),this[_0x28ebd1(0x15f)]();},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x9a3)]=Window_BattleLog[_0x3823ba(0x8d6)][_0x3823ba(0x437)],Window_BattleLog[_0x3823ba(0x8d6)][_0x3823ba(0x437)]=function(_0x525b51){const _0xfbb8c4=_0x3823ba;VisuMZ[_0xfbb8c4(0x4f3)][_0xfbb8c4(0x9a3)][_0xfbb8c4(0x162)](this,_0x525b51),this[_0xfbb8c4(0x15f)]();},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x8ea)]=Window_BattleLog['prototype'][_0x3823ba(0x59e)],Window_BattleLog[_0x3823ba(0x8d6)]['performRecovery']=function(_0x2a211a){VisuMZ['BattleCore']['Window_BattleLog_performRecovery']['call'](this,_0x2a211a),this['callNextMethod']();},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x492)]=Window_BattleLog['prototype'][_0x3823ba(0x1fd)],Window_BattleLog['prototype'][_0x3823ba(0x1fd)]=function(_0x56d19d){const _0x18ca52=_0x3823ba;VisuMZ[_0x18ca52(0x4f3)]['Window_BattleLog_performEvasion'][_0x18ca52(0x162)](this,_0x56d19d),this[_0x18ca52(0x15f)]();},VisuMZ[_0x3823ba(0x4f3)]['Window_BattleLog_performMagicEvasion']=Window_BattleLog['prototype'][_0x3823ba(0xb4f)],Window_BattleLog['prototype'][_0x3823ba(0xb4f)]=function(_0x3061ab){const _0xddec7f=_0x3823ba;VisuMZ[_0xddec7f(0x4f3)][_0xddec7f(0x725)]['call'](this,_0x3061ab),this[_0xddec7f(0x15f)]();},VisuMZ['BattleCore'][_0x3823ba(0x83f)]=Window_BattleLog['prototype'][_0x3823ba(0x874)],Window_BattleLog[_0x3823ba(0x8d6)][_0x3823ba(0x874)]=function(_0x417f08){const _0x1341a6=_0x3823ba;VisuMZ[_0x1341a6(0x4f3)][_0x1341a6(0x83f)]['call'](this,_0x417f08),this[_0x1341a6(0x15f)]();},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x833)]=Window_BattleLog[_0x3823ba(0x8d6)][_0x3823ba(0x416)],Window_BattleLog[_0x3823ba(0x8d6)][_0x3823ba(0x416)]=function(_0x5f19da){const _0x370237=_0x3823ba;VisuMZ[_0x370237(0x4f3)][_0x370237(0x833)][_0x370237(0x162)](this,_0x5f19da),this[_0x370237(0x15f)]();},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x417)]=Window_BattleLog['prototype'][_0x3823ba(0xc4f)],Window_BattleLog[_0x3823ba(0x8d6)][_0x3823ba(0xc4f)]=function(_0xe7a4fe,_0x52cf2f){const _0x38c1b4=_0x3823ba;VisuMZ[_0x38c1b4(0x4f3)][_0x38c1b4(0x417)][_0x38c1b4(0x162)](this,_0xe7a4fe,_0x52cf2f),this[_0x38c1b4(0x15f)]();},VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0xabe)]=Window_BattleLog[_0x3823ba(0x8d6)][_0x3823ba(0x9e5)],Window_BattleLog[_0x3823ba(0x8d6)][_0x3823ba(0x9e5)]=function(_0x35069c){const _0x52d56c=_0x3823ba;VisuMZ[_0x52d56c(0x4f3)][_0x52d56c(0xabe)][_0x52d56c(0x162)](this,_0x35069c),this[_0x52d56c(0x15f)]();},Window_BattleLog[_0x3823ba(0x8d6)][_0x3823ba(0x987)]=function(_0x3ca459,_0x325317){const _0x249bc7=_0x3823ba;_0x3ca459[_0x249bc7(0x987)](_0x325317),this['callNextMethod']();},Window_BattleLog['prototype'][_0x3823ba(0x895)]=function(_0x36d370,_0x18b698){const _0x14f19e=_0x3823ba,_0x327283=_0x36d370[_0x14f19e(0x6c3)]();_0x327283<=0x0?SoundManager['playEnemyAttack']():this[_0x14f19e(0x517)](_0x18b698,_0x327283);},Window_BattleLog[_0x3823ba(0x8d6)]['applyImmortal']=function(_0x130335,_0x59602a,_0xefbd2b){const _0x7d03a2=_0x3823ba,_0x5dd352=[_0x130335][_0x7d03a2(0x145)](_0x59602a);for(const _0x1f43eb of _0x5dd352){if(_0x7d03a2(0x7cc)===_0x7d03a2(0x7cc)){if(!_0x1f43eb)continue;_0x1f43eb[_0x7d03a2(0x2fa)](_0xefbd2b);}else{const _0x5f1992=/<BYPASS DAMAGE CAP>/i;if(this[_0x7d03a2(0x733)]()['note'][_0x7d03a2(0xd57)](_0x5f1992))return!![];if(this[_0x7d03a2(0x29d)]()[_0x7d03a2(0x4f7)]()['some'](_0x441c94=>_0x441c94&&_0x441c94[_0x7d03a2(0x920)][_0x7d03a2(0xd57)](_0x5f1992)))return!![];return!_0x2ab4e4['BattleCore'][_0x7d03a2(0x242)][_0x7d03a2(0x630)][_0x7d03a2(0xb2b)];}}this[_0x7d03a2(0x15f)]();},Window_BattleLog[_0x3823ba(0x8d6)][_0x3823ba(0x3cc)]=function(_0x594aee){const _0xb22475=_0x3823ba;this[_0xb22475(0xcf7)]=_0x594aee;},Window_BattleLog[_0x3823ba(0x8d6)]['requestMotion']=function(_0x6580e6,_0x38b44e){const _0x1ee92e=_0x3823ba;for(const _0x26e166 of _0x6580e6){if(!_0x26e166)continue;_0x26e166[_0x1ee92e(0xb90)](_0x38b44e);}this[_0x1ee92e(0x15f)]();},Window_BattleLog[_0x3823ba(0x8d6)][_0x3823ba(0x10b)]=function(_0x535b56,_0x119449,_0x41ff72,_0x27a3eb,_0x728257,_0x3cbe69){const _0x466ca9=_0x3823ba;_0x535b56['moveBattlerToPoint'](_0x119449,_0x41ff72,_0x27a3eb,_0x728257,_0x3cbe69,-0x1),this[_0x466ca9(0x15f)]();},Window_BattleLog['prototype'][_0x3823ba(0x1ff)]=function(_0x28090a,_0x13348f,_0x8567c2,_0x1fed94,_0x4db516,_0x49fc74,_0x1e0f11){const _0x314d56=_0x3823ba,_0x383e0a=Math['min'](..._0x13348f[_0x314d56(0x4d0)](_0x642335=>_0x642335[_0x314d56(0x798)]()[_0x314d56(0x12d)]-_0x642335[_0x314d56(0x798)]()[_0x314d56(0xbdb)]()/0x2)),_0x1a4b0e=Math[_0x314d56(0xd19)](..._0x13348f[_0x314d56(0x4d0)](_0x11cdad=>_0x11cdad[_0x314d56(0x798)]()[_0x314d56(0x12d)]+_0x11cdad[_0x314d56(0x798)]()[_0x314d56(0xbdb)]()/0x2)),_0x43209f=Math['min'](..._0x13348f['map'](_0xe578b8=>_0xe578b8[_0x314d56(0x798)]()[_0x314d56(0xcf6)]-_0xe578b8['battler']()[_0x314d56(0x5ba)]())),_0x3a7f3d=Math['max'](..._0x13348f[_0x314d56(0x4d0)](_0x53a686=>_0x53a686[_0x314d56(0x798)]()[_0x314d56(0xcf6)])),_0x2b716c=_0x13348f[_0x314d56(0x3a2)](_0x500706=>_0x500706[_0x314d56(0x4e0)]())[_0x314d56(0xb23)],_0x55a35d=_0x13348f['filter'](_0x22da23=>_0x22da23[_0x314d56(0x737)]())[_0x314d56(0xb23)];let _0x267d5a=0x0,_0x45d6ab=0x0;if(_0x8567c2['match'](/front/i))_0x267d5a=_0x2b716c>=_0x55a35d?_0x383e0a:_0x1a4b0e;else{if(_0x8567c2['match'](/middle/i)){if(_0x314d56(0x4a1)===_0x314d56(0x4a1))_0x267d5a=(_0x383e0a+_0x1a4b0e)/0x2,_0x1e0f11=-0x1;else{const _0x38b38b=_0xf103e0[_0x314d56(0x841)](),_0x5b825d=_0x38b38b&&_0x38b38b['canSingleOrMultipleSelect']();if(!_0x5b825d)return![];const _0x45fa75=_0x5ba1c9[_0x314d56(0xaa3)];if(this[_0x314d56(0x95d)]()){if(_0x45fa75[_0x314d56(0x5f2)][_0x314d56(0xa4e)]&&_0x45fa75[_0x314d56(0x5f2)][_0x314d56(0x431)][_0x314d56(0x3e5)])return!![];if(_0x45fa75['_enemyWindow'][_0x314d56(0xa4e)]&&_0x45fa75[_0x314d56(0x67c)]['_handlers'][_0x314d56(0x3e5)])return!![];}else{if(_0x45fa75[_0x314d56(0x67c)][_0x314d56(0xa4e)]&&_0x45fa75[_0x314d56(0x67c)]['_handlers'][_0x314d56(0x1ca)])return!![];}return![];}}else _0x8567c2[_0x314d56(0xd57)](/back/i)&&(_0x267d5a=_0x2b716c>=_0x55a35d?_0x1a4b0e:_0x383e0a);}if(_0x8567c2[_0x314d56(0xd57)](/head/i))'ohPuP'===_0x314d56(0x876)?_0x45d6ab=_0x43209f:this['x']=_0x52e162[_0x314d56(0xc13)]-this[_0x314d56(0x634)]()['battler']()['_baseX'];else{if(_0x8567c2['match'](/center/i)){if(_0x314d56(0x4c7)==='SlAVH')this[_0x314d56(0x2e8)](_0x314d56(0x455));else{_0x45d6ab=(_0x43209f+_0x3a7f3d)/0x2;if(_0x28090a[_0x314d56(0x798)]())_0x45d6ab+=_0x28090a[_0x314d56(0x798)]()['height']/0x2;}}else _0x8567c2[_0x314d56(0xd57)](/base/i)&&(_0x45d6ab=_0x3a7f3d);}_0x28090a[_0x314d56(0x350)](_0x267d5a,_0x45d6ab,_0x1fed94,_0x4db516,_0x49fc74,_0x1e0f11),this['callNextMethod']();},Window_BattleLog[_0x3823ba(0x8d6)][_0x3823ba(0xd47)]=function(_0x306935,_0x3a7f1b,_0xaf7ab0){const _0x2894b8=_0x3823ba;for(const _0x5a5df3 of _0x306935){if(_0x2894b8(0x169)==='IAvPl')_0x332e17['command119']([_0x16e3ce]);else{if(!_0x5a5df3)continue;_0x5a5df3[_0x2894b8(0x1ab)](_0x3a7f1b,_0xaf7ab0);}}this['callNextMethod']();};function Window_BattleMultiTarget(){this['initialize'](...arguments);}Window_BattleMultiTarget[_0x3823ba(0x8d6)]=Object[_0x3823ba(0x312)](Window_Command[_0x3823ba(0x8d6)]),Window_BattleMultiTarget[_0x3823ba(0x8d6)][_0x3823ba(0x786)]=Window_BattleMultiTarget,VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x242)][_0x3823ba(0xba5)]=VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x242)]['MultiTarget']||{},Window_BattleMultiTarget[_0x3823ba(0xa5b)]=VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x242)][_0x3823ba(0xba5)]['WindowWidth']??0x118,Window_BattleMultiTarget['BG_TYPE']=VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x242)][_0x3823ba(0xba5)]['BgType']??0x2,Window_BattleMultiTarget[_0x3823ba(0xa22)]=VisuMZ[_0x3823ba(0x4f3)]['Settings']['MultiTarget'][_0x3823ba(0x8a4)]??!![],Window_BattleMultiTarget[_0x3823ba(0x9d4)]=VisuMZ['BattleCore'][_0x3823ba(0x242)][_0x3823ba(0xba5)][_0x3823ba(0xc3a)]??_0x3823ba(0x287),Window_BattleMultiTarget[_0x3823ba(0x6de)]=VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x242)]['MultiTarget'][_0x3823ba(0xb55)]??_0x3823ba(0x78e),Window_BattleMultiTarget[_0x3823ba(0x991)]=VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x242)][_0x3823ba(0xba5)][_0x3823ba(0xd89)]??0x0,Window_BattleMultiTarget[_0x3823ba(0xba9)]=VisuMZ['BattleCore'][_0x3823ba(0x242)][_0x3823ba(0xba5)][_0x3823ba(0x45a)]??0x0,Window_BattleMultiTarget[_0x3823ba(0x62f)]=VisuMZ[_0x3823ba(0x4f3)][_0x3823ba(0x242)][_0x3823ba(0xba5)]['EnemyOffsetX']??0x0,Window_BattleMultiTarget[_0x3823ba(0x555)]=VisuMZ[_0x3823ba(0x4f3)]['Settings'][_0x3823ba(0xba5)][_0x3823ba(0xd87)]??0x0,Window_BattleMultiTarget['prototype'][_0x3823ba(0xc06)]=function(_0x204ffb,_0x4f030d){const _0x1d8ffb=_0x3823ba;this[_0x1d8ffb(0x2bb)]=_0x4f030d,Window_Command['prototype'][_0x1d8ffb(0xc06)][_0x1d8ffb(0x162)](this,_0x204ffb),this[_0x1d8ffb(0x5a8)](Window_BattleMultiTarget['BG_TYPE']),this['deactivate'](),this[_0x1d8ffb(0x423)](),this[_0x1d8ffb(0x111)]();},Window_BattleMultiTarget[_0x3823ba(0x8d6)]['forActor']=function(){const _0x4be0ea=_0x3823ba;return this[_0x4be0ea(0x2bb)];},Window_BattleMultiTarget['prototype'][_0x3823ba(0x26a)]=function(){const _0x42ee43=_0x3823ba;let _0x311e01=this[_0x42ee43(0x95d)]()?Window_BattleMultiTarget[_0x42ee43(0x9d4)]:Window_BattleMultiTarget[_0x42ee43(0x6de)];if(Imported['VisuMZ_0_CoreEngine']&&Window_BattleMultiTarget[_0x42ee43(0xa22)]){this['_buttonKey']=this['forActor']()?_0x42ee43(0x3e5):_0x42ee43(0x1ca),this[_0x42ee43(0x49b)]=TextManager[_0x42ee43(0xba1)](this[_0x42ee43(0x307)]);const _0x167f3f=VisuMZ['CoreEngine'][_0x42ee43(0x242)][_0x42ee43(0xa31)][_0x42ee43(0xd81)];_0x311e01=_0x167f3f[_0x42ee43(0xabf)](this[_0x42ee43(0x49b)],_0x311e01);}this[_0x42ee43(0xac9)](_0x311e01,'selectAll');},Window_BattleMultiTarget['prototype'][_0x3823ba(0x49e)]=function(_0x12f519){const _0x359c91=_0x3823ba,_0x11bf29=this[_0x359c91(0x5c9)](_0x12f519);this[_0x359c91(0xba0)](),this[_0x359c91(0x25e)](this[_0x359c91(0x172)](_0x12f519));const _0x11be9c=this[_0x359c91(0xbca)](_0x12f519),_0x33664c=this[_0x359c91(0x699)](_0x11be9c)[_0x359c91(0x204)],_0x25ba4e=_0x11bf29['x']+Math['floor']((_0x11bf29[_0x359c91(0x204)]-_0x33664c)/0x2);this['drawTextEx'](_0x11be9c,_0x25ba4e,_0x11bf29['y'],_0x11bf29[_0x359c91(0x204)]);},Window_BattleMultiTarget[_0x3823ba(0x8d6)][_0x3823ba(0x456)]=function(){const _0x3613c8=_0x3823ba;Window_Command[_0x3613c8(0x8d6)][_0x3613c8(0x456)][_0x3613c8(0x162)](this),this[_0x3613c8(0xafd)](),this[_0x3613c8(0x13f)]();},Window_BattleMultiTarget[_0x3823ba(0x8d6)][_0x3823ba(0xafd)]=function(){const _0x19a0fd=_0x3823ba;this[_0x19a0fd(0x425)]=this[_0x19a0fd(0x137)]();},Window_BattleMultiTarget['prototype'][_0x3823ba(0x137)]=function(){const _0x2fcf69=_0x3823ba,_0x299958=BattleManager[_0x2fcf69(0x841)](),_0x5218bb=_0x299958&&_0x299958[_0x2fcf69(0xb0a)]();if(!_0x5218bb)return![];const _0xd28013=SceneManager[_0x2fcf69(0xaa3)];if(this[_0x2fcf69(0x95d)]()){if(_0xd28013[_0x2fcf69(0x5f2)][_0x2fcf69(0xa4e)]&&_0xd28013[_0x2fcf69(0x5f2)][_0x2fcf69(0x431)][_0x2fcf69(0x3e5)])return!![];if(_0xd28013[_0x2fcf69(0x67c)][_0x2fcf69(0xa4e)]&&_0xd28013['_enemyWindow']['_handlers']['pagedown'])return!![];}else{if(_0x2fcf69(0x274)!=='rtuwT'){if(_0xd28013[_0x2fcf69(0x67c)][_0x2fcf69(0xa4e)]&&_0xd28013[_0x2fcf69(0x67c)]['_handlers']['pageup'])return!![];}else{const _0x554f00=_0x4aeff8[_0x2fcf69(0xd4b)],_0x3217c1=_0x2fcf69(0x217);this[_0x2fcf69(0xac9)](_0x554f00,_0x3217c1);}}return![];},Window_BattleMultiTarget[_0x3823ba(0x8d6)][_0x3823ba(0x13f)]=function(){const _0x272c2c=_0x3823ba;if(!Imported[_0x272c2c(0x32f)])return;this[_0x272c2c(0x49b)]!==TextManager[_0x272c2c(0xba1)](this[_0x272c2c(0x307)])&&this[_0x272c2c(0x912)]();},Window_BattleMultiTarget['prototype'][_0x3823ba(0xb33)]=function(){const _0x30e0c0=_0x3823ba;if(this[_0x30e0c0(0x425)]&&TouchInput['isClicked']()){const _0x5824d3=this[_0x30e0c0(0x6b4)]();if(_0x5824d3>=0x0){if(_0x30e0c0(0xce3)===_0x30e0c0(0xce3)){const _0x1fd8c4=this[_0x30e0c0(0x95d)]()?_0x30e0c0(0x3e5):_0x30e0c0(0x1ca);Input['virtualClick'](_0x1fd8c4);}else return _0x750fd7['isInputting']();}}};